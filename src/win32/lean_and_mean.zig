const std = @import("std");
const builtin = @import("builtin");

pub const va_list = [*c]u8;
extern fn __va_start(arg0: [*c]([*c]u8), ...) void;
pub const ptrdiff_t = c_longlong;
pub const __vcrt_bool = bool;
pub const wchar_t = c_ushort;
extern fn __security_init_cookie() void;
extern fn __security_check_cookie(_StackCookie: usize) void;
extern fn __report_gsfailure(_StackCookie: usize) noreturn;
extern var __security_cookie: usize;
pub const ExceptionContinueExecution = enum__EXCEPTION_DISPOSITION.ExceptionContinueExecution;
pub const ExceptionContinueSearch = enum__EXCEPTION_DISPOSITION.ExceptionContinueSearch;
pub const ExceptionNestedException = enum__EXCEPTION_DISPOSITION.ExceptionNestedException;
pub const ExceptionCollidedUnwind = enum__EXCEPTION_DISPOSITION.ExceptionCollidedUnwind;
pub const enum__EXCEPTION_DISPOSITION = extern enum {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind,
};
pub const EXCEPTION_DISPOSITION = enum__EXCEPTION_DISPOSITION;
pub const DWORD = c_ulong;
pub const PVOID = ?*c_void;
pub const ULONG_PTR = (if (builtin.arch == .x86_64) c_ulonglong else c_ulong);
pub const struct__EXCEPTION_RECORD = extern struct {
    ExceptionCode: DWORD,
    ExceptionFlags: DWORD,
    ExceptionRecord: [*c]struct__EXCEPTION_RECORD,
    ExceptionAddress: PVOID,
    NumberParameters: DWORD,
    ExceptionInformation: [15]ULONG_PTR,
};
pub const DWORD64 = c_ulonglong;
pub const WORD = c_ushort;
pub const BYTE = u8;
pub const ULONGLONG = c_ulonglong;
pub const LONGLONG = c_longlong;
pub const struct__M128A = extern struct {
    Low: ULONGLONG,
    High: LONGLONG,
};
pub const M128A = struct__M128A;
pub const struct__XSAVE_FORMAT = extern struct {
    ControlWord: WORD,
    StatusWord: WORD,
    TagWord: BYTE,
    Reserved1: BYTE,
    ErrorOpcode: WORD,
    ErrorOffset: DWORD,
    ErrorSelector: WORD,
    Reserved2: WORD,
    DataOffset: DWORD,
    DataSelector: WORD,
    Reserved3: WORD,
    MxCsr: DWORD,
    MxCsr_Mask: DWORD,
    FloatRegisters: [8]M128A,
    XmmRegisters: [16]M128A,
    Reserved4: [96]BYTE,
};
pub const XSAVE_FORMAT = struct__XSAVE_FORMAT;
pub const XMM_SAVE_AREA32 = XSAVE_FORMAT;
pub const struct__CONTEXT = extern struct {
    P1Home: DWORD64,
    P2Home: DWORD64,
    P3Home: DWORD64,
    P4Home: DWORD64,
    P5Home: DWORD64,
    P6Home: DWORD64,
    ContextFlags: DWORD,
    MxCsr: DWORD,
    SegCs: WORD,
    SegDs: WORD,
    SegEs: WORD,
    SegFs: WORD,
    SegGs: WORD,
    SegSs: WORD,
    EFlags: DWORD,
    Dr0: DWORD64,
    Dr1: DWORD64,
    Dr2: DWORD64,
    Dr3: DWORD64,
    Dr6: DWORD64,
    Dr7: DWORD64,
    Rax: DWORD64,
    Rcx: DWORD64,
    Rdx: DWORD64,
    Rbx: DWORD64,
    Rsp: DWORD64,
    Rbp: DWORD64,
    Rsi: DWORD64,
    Rdi: DWORD64,
    R8: DWORD64,
    R9: DWORD64,
    R10: DWORD64,
    R11: DWORD64,
    R12: DWORD64,
    R13: DWORD64,
    R14: DWORD64,
    R15: DWORD64,
    Rip: DWORD64,
    @"": extern union {
        FltSave: XMM_SAVE_AREA32,
        @"": extern struct {
            Header: [2]M128A,
            Legacy: [8]M128A,
            Xmm0: M128A,
            Xmm1: M128A,
            Xmm2: M128A,
            Xmm3: M128A,
            Xmm4: M128A,
            Xmm5: M128A,
            Xmm6: M128A,
            Xmm7: M128A,
            Xmm8: M128A,
            Xmm9: M128A,
            Xmm10: M128A,
            Xmm11: M128A,
            Xmm12: M128A,
            Xmm13: M128A,
            Xmm14: M128A,
            Xmm15: M128A,
        },
    },
    VectorRegister: [26]M128A,
    VectorControl: DWORD64,
    DebugControl: DWORD64,
    LastBranchToRip: DWORD64,
    LastBranchFromRip: DWORD64,
    LastExceptionToRip: DWORD64,
    LastExceptionFromRip: DWORD64,
};
pub const struct__IMAGE_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: DWORD,
    EndAddress: DWORD,
    @"": extern union {
        UnwindInfoAddress: DWORD,
        UnwindData: DWORD,
    },
};
pub const PRUNTIME_FUNCTION = [*c]struct__IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const PCONTEXT = [*c]struct__CONTEXT;
pub const EXCEPTION_ROUTINE = fn ([*c]struct__EXCEPTION_RECORD, PVOID, [*c]struct__CONTEXT, PVOID) callconv(std.os.windows.WINAPI) EXCEPTION_DISPOSITION;
pub const PEXCEPTION_ROUTINE = [*c]EXCEPTION_ROUTINE;
pub const struct__UNWIND_HISTORY_TABLE_ENTRY = extern struct {
    ImageBase: DWORD64,
    FunctionEntry: PRUNTIME_FUNCTION,
};
pub const UNWIND_HISTORY_TABLE_ENTRY = struct__UNWIND_HISTORY_TABLE_ENTRY;
pub const struct__UNWIND_HISTORY_TABLE = extern struct {
    Count: DWORD,
    LocalHint: BYTE,
    GlobalHint: BYTE,
    Search: BYTE,
    Once: BYTE,
    LowAddress: DWORD64,
    HighAddress: DWORD64,
    Entry: [12]UNWIND_HISTORY_TABLE_ENTRY,
};
pub const PUNWIND_HISTORY_TABLE = [*c]struct__UNWIND_HISTORY_TABLE;
pub const struct__DISPATCHER_CONTEXT = extern struct {
    ControlPc: DWORD64,
    ImageBase: DWORD64,
    FunctionEntry: PRUNTIME_FUNCTION,
    EstablisherFrame: DWORD64,
    TargetIp: DWORD64,
    ContextRecord: PCONTEXT,
    LanguageHandler: PEXCEPTION_ROUTINE,
    HandlerData: PVOID,
    HistoryTable: PUNWIND_HISTORY_TABLE,
    ScopeIndex: DWORD,
    Fill0: DWORD,
};
extern fn __C_specific_handler(ExceptionRecord: [*c]struct__EXCEPTION_RECORD, EstablisherFrame: ?*c_void, ContextRecord: [*c]struct__CONTEXT, DispatcherContext: [*c]struct__DISPATCHER_CONTEXT) EXCEPTION_DISPOSITION;
extern fn _exception_code() c_ulong;
extern fn _exception_info() ?*c_void;
extern fn _abnormal_termination() c_int;
pub const __builtin_va_list = [*c]u8;
pub const __gnuc_va_list = __builtin_va_list;
pub const ULONG = c_ulong;
pub const PULONG = [*c]ULONG;
pub const USHORT = c_ushort;
pub const PUSHORT = [*c]USHORT;
pub const UCHAR = u8;
pub const PUCHAR = [*c]UCHAR;
pub const PSZ = [*c]u8;
pub const BOOL = c_int;
pub const FLOAT = f32;
pub const PFLOAT = [*c]FLOAT;
pub const PBOOL = [*c]BOOL;
pub const LPBOOL = [*c]BOOL;
pub const PBYTE = [*c]BYTE;
pub const LPBYTE = [*c]BYTE;
pub const PINT = [*c]c_int;
pub const LPINT = [*c]c_int;
pub const PWORD = [*c]WORD;
pub const LPWORD = [*c]WORD;
pub const LPLONG = [*c]c_long;
pub const PDWORD = [*c]DWORD;
pub const LPDWORD = [*c]DWORD;
pub const LPVOID = ?*c_void;
pub const LPCVOID = ?*const c_void;
pub const INT = c_int;
pub const UINT = c_uint;
pub const PUINT = [*c]c_uint;
pub const __crt_bool = bool;
extern fn _invalid_parameter(arg0: [*c]const wchar_t, arg1: [*c]const wchar_t, arg2: [*c]const wchar_t, arg3: c_uint, arg4: usize) void;
extern fn _invalid_parameter_noinfo() void;
extern fn _invalid_parameter_noinfo_noreturn() noreturn;
extern fn _invoke_watson(_Expression: [*c]const wchar_t, _FunctionName: [*c]const wchar_t, _FileName: [*c]const wchar_t, _LineNo: c_uint, _Reserved: usize) noreturn;
pub const errno_t = c_int;
pub const wint_t = c_ushort;
pub const wctype_t = c_ushort;
pub const __time32_t = c_long;
pub const __time64_t = c_longlong;
pub const struct___crt_locale_data_public = extern struct {
    _locale_pctype: [*c]const c_ushort,
    _locale_mb_cur_max: c_int,
    _locale_lc_codepage: c_uint,
};
pub const __crt_locale_data_public = struct___crt_locale_data_public;
pub const struct___crt_locale_data = opaque {};
pub const struct___crt_multibyte_data = opaque {};
pub const struct___crt_locale_pointers = extern struct {
    locinfo: ?*struct___crt_locale_data,
    mbcinfo: ?*struct___crt_multibyte_data,
};
pub const __crt_locale_pointers = struct___crt_locale_pointers;
pub const _locale_t = [*c]__crt_locale_pointers;
pub const struct__Mbstatet = extern struct {
    _Wchar: c_ulong,
    _Byte: c_ushort,
    _State: c_ushort,
};
pub const _Mbstatet = struct__Mbstatet;
pub const mbstate_t = _Mbstatet;
pub const time_t = __time64_t;
pub const rsize_t = usize;
extern fn __pctype_func() [*c]const c_ushort;
extern fn __pwctype_func() [*c]const wctype_t;
extern fn iswalnum(_C: wint_t) c_int;
extern fn iswalpha(_C: wint_t) c_int;
extern fn iswascii(_C: wint_t) c_int;
extern fn iswblank(_C: wint_t) c_int;
extern fn iswcntrl(_C: wint_t) c_int;
extern fn iswdigit(_C: wint_t) c_int;
extern fn iswgraph(_C: wint_t) c_int;
extern fn iswlower(_C: wint_t) c_int;
extern fn iswprint(_C: wint_t) c_int;
extern fn iswpunct(_C: wint_t) c_int;
extern fn iswspace(_C: wint_t) c_int;
extern fn iswupper(_C: wint_t) c_int;
extern fn iswxdigit(_C: wint_t) c_int;
extern fn __iswcsymf(_C: wint_t) c_int;
extern fn __iswcsym(_C: wint_t) c_int;
extern fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswblank_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswlower_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswprint_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswspace_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswupper_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) c_int;
extern fn towupper(_C: wint_t) wint_t;
extern fn towlower(_C: wint_t) wint_t;
extern fn iswctype(_C: wint_t, _Type: wctype_t) c_int;
extern fn _towupper_l(_C: wint_t, _Locale: _locale_t) wint_t;
extern fn _towlower_l(_C: wint_t, _Locale: _locale_t) wint_t;
extern fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) c_int;
extern fn isleadbyte(_C: c_int) c_int;
extern fn _isleadbyte_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn is_wctype(_C: wint_t, _Type: wctype_t) c_int;
extern fn _isctype(_C: c_int, _Type: c_int) c_int;
extern fn _isctype_l(_C: c_int, _Type: c_int, _Locale: _locale_t) c_int;
extern fn isalpha(_C: c_int) c_int;
extern fn _isalpha_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isupper(_C: c_int) c_int;
extern fn _isupper_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn islower(_C: c_int) c_int;
extern fn _islower_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isdigit(_C: c_int) c_int;
extern fn _isdigit_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isxdigit(_C: c_int) c_int;
extern fn _isxdigit_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isspace(_C: c_int) c_int;
extern fn _isspace_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn ispunct(_C: c_int) c_int;
extern fn _ispunct_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isblank(_C: c_int) c_int;
extern fn _isblank_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isalnum(_C: c_int) c_int;
extern fn _isalnum_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isprint(_C: c_int) c_int;
extern fn _isprint_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn isgraph(_C: c_int) c_int;
extern fn _isgraph_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn iscntrl(_C: c_int) c_int;
extern fn _iscntrl_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn toupper(_C: c_int) c_int;
extern fn tolower(_C: c_int) c_int;
extern fn _tolower(_C: c_int) c_int;
extern fn _tolower_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn _toupper(_C: c_int) c_int;
extern fn _toupper_l(_C: c_int, _Locale: _locale_t) c_int;
extern fn __isascii(_C: c_int) c_int;
extern fn __toascii(_C: c_int) c_int;
extern fn __iscsymf(_C: c_int) c_int;
extern fn __iscsym(_C: c_int) c_int;
pub fn __acrt_locale_get_ctype_array_value(_Locale_pctype_array: [*c]const c_ushort, _Char_value: c_int, _Mask: c_int) c_int {
    if ((_Char_value >= (-1)) and (_Char_value <= 255)) {
        return c_int(_Locale_pctype_array[_Char_value]) & _Mask;
    }
    return 0;
}
extern fn ___mb_cur_max_func() c_int;
extern fn ___mb_cur_max_l_func(_Locale: _locale_t) c_int;
extern fn _chvalidator(_Ch: c_int, _Mask: c_int) c_int;
pub fn __ascii_tolower(_C: c_int) c_int {
    if ((_C >= 'A') and (_C <= 'Z')) {
        return _C - ('A' - 'a');
    }
    return _C;
}
pub fn __ascii_toupper(_C: c_int) c_int {
    if ((_C >= 'a') and (_C <= 'z')) {
        return _C - ('a' - 'A');
    }
    return _C;
}
pub fn __ascii_iswalpha(_C: c_int) c_int {
    return ((_C >= 'A') and (_C <= 'Z')) or ((_C >= 'a') and (_C <= 'z'));
}
pub fn __ascii_iswdigit(_C: c_int) c_int {
    return (_C >= '0') and (_C <= '9');
}
pub fn __ascii_towlower(_C: c_int) c_int {
    return __ascii_tolower(_C);
}
pub fn __ascii_towupper(_C: c_int) c_int {
    return __ascii_toupper(_C);
}
pub fn __acrt_get_locale_data_prefix(_LocalePointers: ?*const volatile c_void) [*c]__crt_locale_data_public {
    const _TypedLocalePointers: _locale_t = @ptrCast(_locale_t, @alignCast(@alignOf(__crt_locale_pointers), _LocalePointers));
    return @ptrCast([*c]__crt_locale_data_public, @alignCast(@alignOf(__crt_locale_data_public), _TypedLocalePointers.?.locinfo));
}
extern fn _chvalidator_l(arg0: _locale_t, _Ch: c_int, _Mask: c_int) c_int;
pub fn _chvalidchk_l(_C: c_int, _Mask: c_int, _Locale: _locale_t) c_int {
    return _chvalidator_l(_Locale, _C, _Mask);
}
pub fn _ischartype_l(_C: c_int, _Mask: c_int, _Locale: _locale_t) c_int {
    if (_locale_t) {
        if ((_C >= (-1)) and (_C <= 255)) {
            return c_int(__acrt_get_locale_data_prefix(@ptrCast(?*const volatile c_void, _Locale)).?._locale_pctype[_C]) & _Mask;
        }
        if (__acrt_get_locale_data_prefix(@ptrCast(?*const volatile c_void, _Locale)).?._locale_mb_cur_max > 1) {
            return _isctype_l(_C, _Mask, _Locale);
        }
        return 0;
    }
    return _chvalidchk_l(_C, _Mask, null);
}
pub const POINTER_64_INT = c_ulonglong;
pub const INT8 = i8;
pub const PINT8 = [*c]i8;
pub const INT16 = c_short;
pub const PINT16 = [*c]c_short;
pub const INT32 = c_int;
pub const PINT32 = [*c]c_int;
pub const INT64 = c_longlong;
pub const PINT64 = [*c]c_longlong;
pub const UINT8 = u8;
pub const PUINT8 = [*c]u8;
pub const UINT16 = c_ushort;
pub const PUINT16 = [*c]c_ushort;
pub const UINT32 = c_uint;
pub const PUINT32 = [*c]c_uint;
pub const UINT64 = c_ulonglong;
pub const PUINT64 = [*c]c_ulonglong;
pub const LONG32 = c_int;
pub const PLONG32 = [*c]c_int;
pub const ULONG32 = c_uint;
pub const PULONG32 = [*c]c_uint;
pub const DWORD32 = c_uint;
pub const PDWORD32 = [*c]c_uint;
pub const INT_PTR = c_longlong;
pub const PINT_PTR = [*c]c_longlong;
pub const UINT_PTR = c_ulonglong;
pub const PUINT_PTR = [*c]c_ulonglong;
pub const LONG_PTR = c_longlong;
pub const PLONG_PTR = [*c]c_longlong;
pub const PULONG_PTR = [*c]c_ulonglong;
pub const SHANDLE_PTR = c_longlong;
pub const HANDLE_PTR = c_ulonglong;
pub const UHALF_PTR = c_uint;
pub const PUHALF_PTR = [*c]c_uint;
pub const HALF_PTR = c_int;
pub const PHALF_PTR = [*c]c_int;
pub fn HandleToULong(h: ?*const c_void) c_ulong {
    return c_ulong(@as(ULONG_PTR, @ptrToInt(h)));
}
pub fn HandleToLong(h: ?*const c_void) c_long {
    return c_long(@as(LONG_PTR, h));
}
pub fn ULongToHandle(h: c_ulong) ?*c_void {
    return @intToPtr(?*c_void, @as(UINT_PTR, h));
}
pub fn LongToHandle(h: c_long) ?*c_void {
    return (?*c_void)(@as(INT_PTR, h));
}
pub fn PtrToUlong(p: ?*const c_void) c_ulong {
    return c_ulong(@as(ULONG_PTR, @ptrToInt(p)));
}
pub fn PtrToUint(p: ?*const c_void) c_uint {
    return c_uint(@as(UINT_PTR, @ptrToInt(p)));
}
pub fn PtrToUshort(p: ?*const c_void) c_ushort {
    return c_ushort(c_ulong(@as(ULONG_PTR, @ptrToInt(p))));
}
pub fn PtrToLong(p: ?*const c_void) c_long {
    return c_long(@as(LONG_PTR, p));
}
pub fn PtrToInt(p: ?*const c_void) c_int {
    return c_int(@as(INT_PTR, p));
}
pub fn PtrToShort(p: ?*const c_void) c_short {
    return c_short(c_long(@as(LONG_PTR, p)));
}
pub fn IntToPtr(i: c_int) ?*c_void {
    return (?*c_void)(@as(INT_PTR, i));
}
pub fn UIntToPtr(ui: c_uint) ?*c_void {
    return @intToPtr(?*c_void, @as(UINT_PTR, ui));
}
pub fn LongToPtr(l: c_long) ?*c_void {
    return (?*c_void)(@as(LONG_PTR, l));
}
pub fn ULongToPtr(ul: c_ulong) ?*c_void {
    return @intToPtr(?*c_void, @as(ULONG_PTR, ul));
}
pub fn Ptr32ToPtr(p: ?*const c_void) ?*c_void {
    return @intToPtr(?*c_void, @as(ULONG_PTR, c_ulong(@ptrToInt(p))));
}
pub fn Handle32ToHandle(h: ?*const c_void) ?*c_void {
    return (?*c_void)(@as(LONG_PTR, c_long(h)));
}
pub fn PtrToPtr32(p: ?*const c_void) ?*c_void {
    return @intToPtr(?*c_void, c_ulong(@as(ULONG_PTR, @ptrToInt(p))));
}
pub const SIZE_T = ULONG_PTR;
pub const PSIZE_T = [*c]ULONG_PTR;
pub const SSIZE_T = LONG_PTR;
pub const PSSIZE_T = [*c]LONG_PTR;
pub const DWORD_PTR = ULONG_PTR;
pub const PDWORD_PTR = [*c]ULONG_PTR;
pub const LONG64 = c_longlong;
pub const PLONG64 = [*c]c_longlong;
pub const ULONG64 = c_ulonglong;
pub const PULONG64 = [*c]c_ulonglong;
pub const PDWORD64 = [*c]c_ulonglong;
pub const KAFFINITY = ULONG_PTR;
pub const PKAFFINITY = [*c]KAFFINITY;
pub const PVOID64 = ?*c_void;
pub const CHAR = u8;
pub const SHORT = c_short;
pub const LONG = c_long;
pub const WCHAR = wchar_t;
pub const PWCHAR = [*c]WCHAR;
pub const LPWCH = [*c]WCHAR;
pub const PWCH = [*c]WCHAR;
pub const LPCWCH = [*c]const WCHAR;
pub const PCWCH = [*c]const WCHAR;
pub const NWPSTR = [*c]WCHAR;
pub const LPWSTR = [*c]WCHAR;
pub const PWSTR = [*c]WCHAR;
pub const PZPWSTR = [*c]PWSTR;
pub const PCZPWSTR = [*c]const PWSTR;
pub const LPUWSTR = [*c]WCHAR;
pub const PUWSTR = [*c]WCHAR;
pub const LPCWSTR = [*c]const WCHAR;
pub const PCWSTR = [*c]const WCHAR;
pub const PZPCWSTR = [*c]PCWSTR;
pub const PCZPCWSTR = [*c]const PCWSTR;
pub const LPCUWSTR = [*c]const WCHAR;
pub const PCUWSTR = [*c]const WCHAR;
pub const PZZWSTR = [*c]WCHAR;
pub const PCZZWSTR = [*c]const WCHAR;
pub const PUZZWSTR = [*c]WCHAR;
pub const PCUZZWSTR = [*c]const WCHAR;
pub const PNZWCH = [*c]WCHAR;
pub const PCNZWCH = [*c]const WCHAR;
pub const PUNZWCH = [*c]WCHAR;
pub const PCUNZWCH = [*c]const WCHAR;
pub const LPCWCHAR = [*c]const WCHAR;
pub const PCWCHAR = [*c]const WCHAR;
pub const LPCUWCHAR = [*c]const WCHAR;
pub const PCUWCHAR = [*c]const WCHAR;
pub const UCSCHAR = c_ulong;
pub const PUCSCHAR = [*c]UCSCHAR;
pub const PCUCSCHAR = [*c]const UCSCHAR;
pub const PUCSSTR = [*c]UCSCHAR;
pub const PUUCSSTR = [*c]UCSCHAR;
pub const PCUCSSTR = [*c]const UCSCHAR;
pub const PCUUCSSTR = [*c]const UCSCHAR;
pub const PUUCSCHAR = [*c]UCSCHAR;
pub const PCUUCSCHAR = [*c]const UCSCHAR;
pub const PCHAR = [*c]CHAR;
pub const LPCH = [*c]CHAR;
pub const PCH = [*c]CHAR;
pub const LPCCH = [*c]const CHAR;
pub const PCCH = [*c]const CHAR;
pub const NPSTR = [*c]CHAR;
pub const LPSTR = [*c]CHAR;
pub const PSTR = [*c]CHAR;
pub const PZPSTR = [*c]PSTR;
pub const PCZPSTR = [*c]const PSTR;
pub const LPCSTR = [*c]const CHAR;
pub const PCSTR = [*c]const CHAR;
pub const PZPCSTR = [*c]PCSTR;
pub const PCZPCSTR = [*c]const PCSTR;
pub const PZZSTR = [*c]CHAR;
pub const PCZZSTR = [*c]const CHAR;
pub const PNZCH = [*c]CHAR;
pub const PCNZCH = [*c]const CHAR;
pub const TCHAR = u8;
pub const PTCHAR = [*c]u8;
pub const TBYTE = u8;
pub const PTBYTE = [*c]u8;
pub const LPTCH = LPCH;
pub const PTCH = LPCH;
pub const LPCTCH = LPCCH;
pub const PCTCH = LPCCH;
pub const PTSTR = LPSTR;
pub const LPTSTR = LPSTR;
pub const PUTSTR = LPSTR;
pub const LPUTSTR = LPSTR;
pub const PCTSTR = LPCSTR;
pub const LPCTSTR = LPCSTR;
pub const PCUTSTR = LPCSTR;
pub const LPCUTSTR = LPCSTR;
pub const PZZTSTR = PZZSTR;
pub const PUZZTSTR = PZZSTR;
pub const PCZZTSTR = PCZZSTR;
pub const PCUZZTSTR = PCZZSTR;
pub const PZPTSTR = PZPSTR;
pub const PNZTCH = PNZCH;
pub const PUNZTCH = PNZCH;
pub const PCNZTCH = PCNZCH;
pub const PCUNZTCH = PCNZCH;
pub const PSHORT = [*c]SHORT;
pub const PLONG = [*c]LONG;
pub const struct__PROCESSOR_NUMBER = extern struct {
    Group: WORD,
    Number: BYTE,
    Reserved: BYTE,
};
pub const PROCESSOR_NUMBER = struct__PROCESSOR_NUMBER;
pub const PPROCESSOR_NUMBER = [*c]struct__PROCESSOR_NUMBER;
pub const struct__GROUP_AFFINITY = extern struct {
    Mask: KAFFINITY,
    Group: WORD,
    Reserved: [3]WORD,
};
pub const GROUP_AFFINITY = struct__GROUP_AFFINITY;
pub const PGROUP_AFFINITY = [*c]struct__GROUP_AFFINITY;
pub const HANDLE = ?*c_void;
pub const PHANDLE = [*c]HANDLE;
pub const FCHAR = BYTE;
pub const FSHORT = WORD;
pub const FLONG = DWORD;
pub const HRESULT = c_long;
pub const CCHAR = u8;
pub const LCID = DWORD;
pub const PLCID = PDWORD;
pub const LANGID = WORD;
pub const UNSPECIFIED_COMPARTMENT_ID = 0;
pub const DEFAULT_COMPARTMENT_ID = 1;
pub const COMPARTMENT_ID = extern enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1,
};
pub const PCOMPARTMENT_ID = [*c]extern enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID = 1,
};
pub const struct__FLOAT128 = extern struct {
    LowPart: c_longlong,
    HighPart: c_longlong,
};
pub const FLOAT128 = struct__FLOAT128;
pub const PFLOAT128 = [*c]FLOAT128;
pub const PLONGLONG = [*c]LONGLONG;
pub const PULONGLONG = [*c]ULONGLONG;
pub const USN = LONGLONG;
pub const union__LARGE_INTEGER = extern union {
    @"": extern struct {
        LowPart: DWORD,
        HighPart: LONG,
    },
    u: extern struct {
        LowPart: DWORD,
        HighPart: LONG,
    },
    QuadPart: LONGLONG,
};
pub const LARGE_INTEGER = union__LARGE_INTEGER;
pub const PLARGE_INTEGER = [*c]LARGE_INTEGER;
pub const union__ULARGE_INTEGER = extern union {
    @"": extern struct {
        LowPart: DWORD,
        HighPart: DWORD,
    },
    u: extern struct {
        LowPart: DWORD,
        HighPart: DWORD,
    },
    QuadPart: ULONGLONG,
};
pub const ULARGE_INTEGER = union__ULARGE_INTEGER;
pub const PULARGE_INTEGER = [*c]ULARGE_INTEGER;
pub const RTL_REFERENCE_COUNT = LONG_PTR;
pub const PRTL_REFERENCE_COUNT = [*c]LONG_PTR;
pub const RTL_REFERENCE_COUNT32 = LONG;
pub const PRTL_REFERENCE_COUNT32 = [*c]LONG;
pub const struct__LUID = extern struct {
    LowPart: DWORD,
    HighPart: LONG,
};
pub const LUID = struct__LUID;
pub const PLUID = [*c]struct__LUID;
pub const DWORDLONG = ULONGLONG;
pub const PDWORDLONG = [*c]DWORDLONG;
extern fn _rotl8(Value: u8, Shift: u8) u8;
extern fn _rotl16(Value: c_ushort, Shift: u8) c_ushort;
extern fn _rotr8(Value: u8, Shift: u8) u8;
extern fn _rotr16(Value: c_ushort, Shift: u8) c_ushort;
extern fn _rotl(Value: c_uint, Shift: c_int) c_uint;
extern fn _rotl64(Value: c_ulonglong, Shift: c_int) c_ulonglong;
extern fn _rotr(Value: c_uint, Shift: c_int) c_uint;
extern fn _rotr64(Value: c_ulonglong, Shift: c_int) c_ulonglong;
pub const BOOLEAN = BYTE;
pub const PBOOLEAN = [*c]BOOLEAN;
pub const struct__LIST_ENTRY = extern struct {
    Flink: [*c]struct__LIST_ENTRY,
    Blink: [*c]struct__LIST_ENTRY,
};
pub const LIST_ENTRY = struct__LIST_ENTRY;
pub const PLIST_ENTRY = [*c]struct__LIST_ENTRY;
pub const PRLIST_ENTRY = [*c]struct__LIST_ENTRY;
pub const struct__SINGLE_LIST_ENTRY = extern struct {
    Next: [*c]struct__SINGLE_LIST_ENTRY,
};
pub const SINGLE_LIST_ENTRY = struct__SINGLE_LIST_ENTRY;
pub const PSINGLE_LIST_ENTRY = [*c]struct__SINGLE_LIST_ENTRY;
pub const struct_LIST_ENTRY32 = extern struct {
    Flink: DWORD,
    Blink: DWORD,
};
pub const LIST_ENTRY32 = struct_LIST_ENTRY32;
pub const PLIST_ENTRY32 = [*c]LIST_ENTRY32;
pub const struct_LIST_ENTRY64 = extern struct {
    Flink: ULONGLONG,
    Blink: ULONGLONG,
};
pub const LIST_ENTRY64 = struct_LIST_ENTRY64;
pub const PLIST_ENTRY64 = [*c]LIST_ENTRY64;
pub const struct__GUID = extern struct {
    Data1: c_ulong,
    Data2: c_ushort,
    Data3: c_ushort,
    Data4: [8]u8,
};
pub const GUID = struct__GUID;
pub const LPGUID = [*c]GUID;
pub const LPCGUID = [*c]const GUID;
pub const IID = GUID;
pub const LPIID = [*c]IID;
pub const CLSID = GUID;
pub const LPCLSID = [*c]CLSID;
pub const FMTID = GUID;
pub const LPFMTID = [*c]FMTID;
extern fn _errno() [*c]c_int;
extern fn _set_errno(_Value: c_int) errno_t;
extern fn _get_errno(_Value: [*c]c_int) errno_t;
extern fn __doserrno() [*c]c_ulong;
extern fn _set_doserrno(_Value: c_ulong) errno_t;
extern fn _get_doserrno(_Value: [*c]c_ulong) errno_t;
extern fn memchr(_Buf: ?*const c_void, _Val: c_int, _MaxCount: c_ulonglong) ?*c_void;
extern fn memcmp(_Buf1: ?*const c_void, _Buf2: ?*const c_void, _Size: c_ulonglong) c_int;
extern fn memcpy(_Dst: ?*c_void, _Src: ?*const c_void, _Size: c_ulonglong) ?*c_void;
extern fn memmove(_Dst: ?*c_void, _Src: ?*const c_void, _Size: c_ulonglong) ?*c_void;
extern fn memset(_Dst: ?*c_void, _Val: c_int, _Size: c_ulonglong) ?*c_void;
extern fn strchr(_Str: [*c]const u8, _Val: c_int) [*c]u8;
extern fn strrchr(_Str: [*c]const u8, _Ch: c_int) [*c]u8;
extern fn strstr(_Str: [*c]const u8, _SubStr: [*c]const u8) [*c]u8;
extern fn wcschr(_Str: [*c]const c_ushort, _Ch: c_ushort) [*c]c_ushort;
extern fn wcsrchr(_Str: [*c]const wchar_t, _Ch: wchar_t) [*c]wchar_t;
extern fn wcsstr(_Str: [*c]const wchar_t, _SubStr: [*c]const wchar_t) [*c]wchar_t;
pub fn memcpy_s(_Destination: ?*c_void, _DestinationSize: rsize_t, _Source: ?*const c_void, _SourceSize: rsize_t) errno_t {
    if (_SourceSize == c_ulonglong(0)) {
        return 0;
    }
    {
        var _Expr_val: c_int = !!(_Destination != (?*c_void)(0));
        if (!(_Expr_val != 0)) {
            _errno().?.* = 22;
            _invalid_parameter_noinfo();
            return 22;
        }
    }
    {}
    if ((_Source == @ptrCast(?*const c_void, (?*c_void)(0))) or (_DestinationSize < _SourceSize)) {
        _ = memset(_Destination, 0, _DestinationSize);
        {
            var _Expr_val: c_int = !!(_Source != @ptrCast(?*const c_void, (?*c_void)(0)));
            if (!(_Expr_val != 0)) {
                _errno().?.* = 22;
                _invalid_parameter_noinfo();
                return 22;
            }
        }
        {}
        {
            var _Expr_val: c_int = !!(_DestinationSize >= _SourceSize);
            if (!(_Expr_val != 0)) {
                _errno().?.* = 34;
                _invalid_parameter_noinfo();
                return 34;
            }
        }
        {}
        return 22;
    }
    _ = memcpy(_Destination, _Source, _SourceSize);
    return 0;
}
pub fn memmove_s(_Destination: ?*c_void, _DestinationSize: rsize_t, _Source: ?*const c_void, _SourceSize: rsize_t) errno_t {
    if (_SourceSize == c_ulonglong(0)) {
        return 0;
    }
    {
        var _Expr_val: c_int = !!(_Destination != (?*c_void)(0));
        if (!(_Expr_val != 0)) {
            _errno().?.* = 22;
            _invalid_parameter_noinfo();
            return 22;
        }
    }
    {}
    {
        var _Expr_val: c_int = !!(_Source != @ptrCast(?*const c_void, (?*c_void)(0)));
        if (!(_Expr_val != 0)) {
            _errno().?.* = 22;
            _invalid_parameter_noinfo();
            return 22;
        }
    }
    {}
    {
        var _Expr_val: c_int = !!(_DestinationSize >= _SourceSize);
        if (!(_Expr_val != 0)) {
            _errno().?.* = 34;
            _invalid_parameter_noinfo();
            return 34;
        }
    }
    {}
    _ = memmove(_Destination, _Source, _SourceSize);
    return 0;
}
extern fn _memicmp(_Buf1: ?*const c_void, _Buf2: ?*const c_void, _Size: usize) c_int;
extern fn _memicmp_l(_Buf1: ?*const c_void, _Buf2: ?*const c_void, _Size: usize, _Locale: _locale_t) c_int;
extern fn memccpy(_Dst: ?*c_void, _Src: ?*const c_void, _Val: c_int, _Size: usize) ?*c_void;
extern fn memicmp(_Buf1: ?*const c_void, _Buf2: ?*const c_void, _Size: usize) c_int;
extern fn wcscat_s(_Destination: [*c]wchar_t, _SizeInWords: rsize_t, _Source: [*c]const wchar_t) errno_t;
extern fn wcscpy_s(_Destination: [*c]wchar_t, _SizeInWords: rsize_t, _Source: [*c]const wchar_t) errno_t;
extern fn wcsncat_s(_Destination: [*c]wchar_t, _SizeInWords: rsize_t, _Source: [*c]const wchar_t, _MaxCount: rsize_t) errno_t;
extern fn wcsncpy_s(_Destination: [*c]wchar_t, _SizeInWords: rsize_t, _Source: [*c]const wchar_t, _MaxCount: rsize_t) errno_t;
extern fn wcstok_s(_String: [*c]wchar_t, _Delimiter: [*c]const wchar_t, _Context: [*c]([*c]wchar_t)) [*c]wchar_t;
extern fn _wcsdup(_String: [*c]const wchar_t) [*c]wchar_t;
extern fn wcscat(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t) [*c]wchar_t;
extern fn wcscmp(_String1: [*c]const c_ushort, _String2: [*c]const c_ushort) c_int;
extern fn wcscpy(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t) [*c]wchar_t;
extern fn wcscspn(_String: [*c]const wchar_t, _Control: [*c]const wchar_t) usize;
extern fn wcslen(_String: [*c]const c_ushort) c_ulonglong;
extern fn wcsnlen(_Source: [*c]const wchar_t, _MaxCount: usize) usize;
pub fn wcsnlen_s(_Source: [*c]const wchar_t, _MaxCount: usize) usize {
    return if (_Source == null) c_ulonglong(0) else wcsnlen(_Source, _MaxCount);
}
extern fn wcsncat(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t, _Count: usize) [*c]wchar_t;
extern fn wcsncmp(_String1: [*c]const c_ushort, _String2: [*c]const c_ushort, _MaxCount: c_ulonglong) c_int;
extern fn wcsncpy(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t, _Count: usize) [*c]wchar_t;
extern fn wcspbrk(_String: [*c]const wchar_t, _Control: [*c]const wchar_t) [*c]wchar_t;
extern fn wcsspn(_String: [*c]const wchar_t, _Control: [*c]const wchar_t) usize;
extern fn wcstok(_String: [*c]wchar_t, _Delimiter: [*c]const wchar_t, _Context: [*c]([*c]wchar_t)) [*c]wchar_t;
pub fn _wcstok(_String: [*c]wchar_t, _Delimiter: [*c]const wchar_t) [*c]wchar_t {
    return wcstok(_String, _Delimiter, null);
}
extern fn _wcserror(_ErrorNumber: c_int) [*c]wchar_t;
extern fn _wcserror_s(_Buffer: [*c]wchar_t, _SizeInWords: usize, _ErrorNumber: c_int) errno_t;
extern fn __wcserror(_String: [*c]const wchar_t) [*c]wchar_t;
extern fn __wcserror_s(_Buffer: [*c]wchar_t, _SizeInWords: usize, _ErrorMessage: [*c]const wchar_t) errno_t;
extern fn _wcsicmp(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t) c_int;
extern fn _wcsicmp_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _Locale: _locale_t) c_int;
extern fn _wcsnicmp(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize) c_int;
extern fn _wcsnicmp_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn _wcsnset_s(_Destination: [*c]wchar_t, _SizeInWords: usize, _Value: wchar_t, _MaxCount: usize) errno_t;
extern fn _wcsnset(_String: [*c]wchar_t, _Value: wchar_t, _MaxCount: usize) [*c]wchar_t;
extern fn _wcsrev(_String: [*c]wchar_t) [*c]wchar_t;
extern fn _wcsset_s(_Destination: [*c]wchar_t, _SizeInWords: usize, _Value: wchar_t) errno_t;
extern fn _wcsset(_String: [*c]wchar_t, _Value: wchar_t) [*c]wchar_t;
extern fn _wcslwr_s(_String: [*c]wchar_t, _SizeInWords: usize) errno_t;
extern fn _wcslwr(_String: [*c]wchar_t) [*c]wchar_t;
extern fn _wcslwr_s_l(_String: [*c]wchar_t, _SizeInWords: usize, _Locale: _locale_t) errno_t;
extern fn _wcslwr_l(_String: [*c]wchar_t, _Locale: _locale_t) [*c]wchar_t;
extern fn _wcsupr_s(_String: [*c]wchar_t, _Size: usize) errno_t;
extern fn _wcsupr(_String: [*c]wchar_t) [*c]wchar_t;
extern fn _wcsupr_s_l(_String: [*c]wchar_t, _Size: usize, _Locale: _locale_t) errno_t;
extern fn _wcsupr_l(_String: [*c]wchar_t, _Locale: _locale_t) [*c]wchar_t;
extern fn wcsxfrm(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t, _MaxCount: usize) usize;
extern fn _wcsxfrm_l(_Destination: [*c]wchar_t, _Source: [*c]const wchar_t, _MaxCount: usize, _Locale: _locale_t) usize;
extern fn wcscoll(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t) c_int;
extern fn _wcscoll_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _Locale: _locale_t) c_int;
extern fn _wcsicoll(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t) c_int;
extern fn _wcsicoll_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _Locale: _locale_t) c_int;
extern fn _wcsncoll(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize) c_int;
extern fn _wcsncoll_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn _wcsnicoll(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize) c_int;
extern fn _wcsnicoll_l(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn wcsdup(_String: [*c]const wchar_t) [*c]wchar_t;
extern fn wcsicmp(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t) c_int;
extern fn wcsnicmp(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t, _MaxCount: usize) c_int;
extern fn wcsnset(_String: [*c]wchar_t, _Value: wchar_t, _MaxCount: usize) [*c]wchar_t;
extern fn wcsrev(_String: [*c]wchar_t) [*c]wchar_t;
extern fn wcsset(_String: [*c]wchar_t, _Value: wchar_t) [*c]wchar_t;
extern fn wcslwr(_String: [*c]wchar_t) [*c]wchar_t;
extern fn wcsupr(_String: [*c]wchar_t) [*c]wchar_t;
extern fn wcsicoll(_String1: [*c]const wchar_t, _String2: [*c]const wchar_t) c_int;
extern fn strcpy_s(_Destination: [*c]u8, _SizeInBytes: rsize_t, _Source: [*c]const u8) errno_t;
extern fn strcat_s(_Destination: [*c]u8, _SizeInBytes: rsize_t, _Source: [*c]const u8) errno_t;
extern fn strerror_s(_Buffer: [*c]u8, _SizeInBytes: usize, _ErrorNumber: c_int) errno_t;
extern fn strncat_s(_Destination: [*c]u8, _SizeInBytes: rsize_t, _Source: [*c]const u8, _MaxCount: rsize_t) errno_t;
extern fn strncpy_s(_Destination: [*c]u8, _SizeInBytes: rsize_t, _Source: [*c]const u8, _MaxCount: rsize_t) errno_t;
extern fn strtok_s(_String: [*c]u8, _Delimiter: [*c]const u8, _Context: [*c]([*c]u8)) [*c]u8;
extern fn _memccpy(_Dst: ?*c_void, _Src: ?*const c_void, _Val: c_int, _MaxCount: usize) ?*c_void;
extern fn strcat(_Destination: [*c]u8, _Source: [*c]const u8) [*c]u8;
extern fn strcmp(_Str1: [*c]const u8, _Str2: [*c]const u8) c_int;
extern fn _strcmpi(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn strcoll(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn _strcoll_l(_String1: [*c]const u8, _String2: [*c]const u8, _Locale: _locale_t) c_int;
extern fn strcpy(_Destination: [*c]u8, _Source: [*c]const u8) [*c]u8;
extern fn strcspn(_Str: [*c]const u8, _Control: [*c]const u8) c_ulonglong;
extern fn _strdup(_Source: [*c]const u8) [*c]u8;
extern fn _strerror(_ErrorMessage: [*c]const u8) [*c]u8;
extern fn _strerror_s(_Buffer: [*c]u8, _SizeInBytes: usize, _ErrorMessage: [*c]const u8) errno_t;
extern fn strerror(_ErrorMessage: c_int) [*c]u8;
extern fn _stricmp(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn _stricoll(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn _stricoll_l(_String1: [*c]const u8, _String2: [*c]const u8, _Locale: _locale_t) c_int;
extern fn _stricmp_l(_String1: [*c]const u8, _String2: [*c]const u8, _Locale: _locale_t) c_int;
extern fn strlen(_Str: [*c]const u8) c_ulonglong;
extern fn _strlwr_s(_String: [*c]u8, _Size: usize) errno_t;
extern fn _strlwr(_String: [*c]u8) [*c]u8;
extern fn _strlwr_s_l(_String: [*c]u8, _Size: usize, _Locale: _locale_t) errno_t;
extern fn _strlwr_l(_String: [*c]u8, _Locale: _locale_t) [*c]u8;
extern fn strncat(_Destination: [*c]u8, _Source: [*c]const u8, _Count: c_ulonglong) [*c]u8;
extern fn strncmp(_Str1: [*c]const u8, _Str2: [*c]const u8, _MaxCount: c_ulonglong) c_int;
extern fn _strnicmp(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize) c_int;
extern fn _strnicmp_l(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn _strnicoll(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize) c_int;
extern fn _strnicoll_l(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn _strncoll(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize) c_int;
extern fn _strncoll_l(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) c_int;
extern fn __strncnt(_String: [*c]const u8, _Count: usize) usize;
extern fn strncpy(_Destination: [*c]u8, _Source: [*c]const u8, _Count: c_ulonglong) [*c]u8;
extern fn strnlen(_String: [*c]const u8, _MaxCount: usize) usize;
pub fn strnlen_s(_String: [*c]const u8, _MaxCount: usize) usize {
    return if (_String == null) c_ulonglong(0) else strnlen(_String, _MaxCount);
}
extern fn _strnset_s(_String: [*c]u8, _SizeInBytes: usize, _Value: c_int, _MaxCount: usize) errno_t;
extern fn _strnset(_Destination: [*c]u8, _Value: c_int, _Count: usize) [*c]u8;
extern fn strpbrk(_Str: [*c]const u8, _Control: [*c]const u8) [*c]u8;
extern fn _strrev(_Str: [*c]u8) [*c]u8;
extern fn _strset_s(_Destination: [*c]u8, _DestinationSize: usize, _Value: c_int) errno_t;
extern fn _strset(_Destination: [*c]u8, _Value: c_int) [*c]u8;
extern fn strspn(_Str: [*c]const u8, _Control: [*c]const u8) c_ulonglong;
extern fn strtok(_String: [*c]u8, _Delimiter: [*c]const u8) [*c]u8;
extern fn _strupr_s(_String: [*c]u8, _Size: usize) errno_t;
extern fn _strupr(_String: [*c]u8) [*c]u8;
extern fn _strupr_s_l(_String: [*c]u8, _Size: usize, _Locale: _locale_t) errno_t;
extern fn _strupr_l(_String: [*c]u8, _Locale: _locale_t) [*c]u8;
extern fn strxfrm(_Destination: [*c]u8, _Source: [*c]const u8, _MaxCount: c_ulonglong) c_ulonglong;
extern fn _strxfrm_l(_Destination: [*c]u8, _Source: [*c]const u8, _MaxCount: usize, _Locale: _locale_t) usize;
extern fn strdup(_String: [*c]const u8) [*c]u8;
extern fn strcmpi(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn stricmp(_String1: [*c]const u8, _String2: [*c]const u8) c_int;
extern fn strlwr(_String: [*c]u8) [*c]u8;
extern fn strnicmp(_String1: [*c]const u8, _String2: [*c]const u8, _MaxCount: usize) c_int;
extern fn strnset(_String: [*c]u8, _Value: c_int, _MaxCount: usize) [*c]u8;
extern fn strrev(_String: [*c]u8) [*c]u8;
extern fn strset(_String: [*c]u8, _Value: c_int) [*c]u8;
extern fn strupr(_String: [*c]u8) [*c]u8;
pub const struct__OBJECTID = extern struct {
    Lineage: GUID,
    Uniquifier: DWORD,
};
pub const OBJECTID = struct__OBJECTID;
pub const __C_ASSERT__ = [1]u8;
pub const KSPIN_LOCK = ULONG_PTR;
pub const PKSPIN_LOCK = [*c]KSPIN_LOCK;
pub const PM128A = [*c]struct__M128A;
pub const PXSAVE_FORMAT = [*c]struct__XSAVE_FORMAT;
pub const struct__XSAVE_CET_U_FORMAT = extern struct {
    Ia32CetUMsr: DWORD64,
    Ia32Pl3SspMsr: DWORD64,
};
pub const XSAVE_CET_U_FORMAT = struct__XSAVE_CET_U_FORMAT;
pub const PXSAVE_CET_U_FORMAT = [*c]struct__XSAVE_CET_U_FORMAT;
pub const struct__XSAVE_AREA_HEADER = extern struct {
    Mask: DWORD64,
    CompactionMask: DWORD64,
    Reserved2: [6]DWORD64,
};
pub const XSAVE_AREA_HEADER = struct__XSAVE_AREA_HEADER;
pub const PXSAVE_AREA_HEADER = [*c]struct__XSAVE_AREA_HEADER;
pub const struct__XSAVE_AREA = extern struct {
    LegacyState: XSAVE_FORMAT,
    Header: XSAVE_AREA_HEADER,
};
pub const XSAVE_AREA = struct__XSAVE_AREA;
pub const PXSAVE_AREA = [*c]struct__XSAVE_AREA;
pub const struct__XSTATE_CONTEXT = extern struct {
    Mask: DWORD64,
    Length: DWORD,
    Reserved1: DWORD,
    Area: PXSAVE_AREA,
    Buffer: PVOID,
};
pub const XSTATE_CONTEXT = struct__XSTATE_CONTEXT;
pub const PXSTATE_CONTEXT = [*c]struct__XSTATE_CONTEXT;
pub const struct__SCOPE_TABLE_AMD64 = extern struct {
    Count: DWORD,
    ScopeRecord: [1]extern struct {
        BeginAddress: DWORD,
        EndAddress: DWORD,
        HandlerAddress: DWORD,
        JumpTarget: DWORD,
    },
};
pub const SCOPE_TABLE_AMD64 = struct__SCOPE_TABLE_AMD64;
pub const PSCOPE_TABLE_AMD64 = [*c]struct__SCOPE_TABLE_AMD64;
extern fn _bittest(Base: [*c]const c_long, Offset: c_long) u8;
extern fn _bittestandcomplement(Base: [*c]c_long, Offset: c_long) u8;
extern fn _bittestandset(Base: [*c]c_long, Offset: c_long) u8;
extern fn _bittestandreset(Base: [*c]c_long, Offset: c_long) u8;
extern fn _interlockedbittestandset(Base: [*c]volatile c_long, Offset: c_long) u8;
extern fn _interlockedbittestandreset(Base: [*c]volatile c_long, Offset: c_long) u8;
extern fn _bittest64(Base: [*c]const c_longlong, Offset: c_longlong) u8;
extern fn _bittestandcomplement64(Base: [*c]c_longlong, Offset: c_longlong) u8;
extern fn _bittestandset64(Base: [*c]c_longlong, Offset: c_longlong) u8;
extern fn _bittestandreset64(Base: [*c]c_longlong, Offset: c_longlong) u8;
extern fn _interlockedbittestandset64(Base: [*c]volatile c_longlong, Offset: c_longlong) u8;
extern fn _interlockedbittestandreset64(Base: [*c]volatile c_longlong, Offset: c_longlong) u8;
extern fn _BitScanForward(Index: [*c]c_ulong, Mask: c_ulong) u8;
extern fn _BitScanReverse(Index: [*c]c_ulong, Mask: c_ulong) u8;
extern fn _BitScanForward64(Index: [*c]c_ulong, Mask: c_ulonglong) u8;
extern fn _BitScanReverse64(Index: [*c]c_ulong, Mask: c_ulonglong) u8;
extern fn _InterlockedIncrement16(Addend: [*c]volatile c_short) c_short;
extern fn _InterlockedDecrement16(Addend: [*c]volatile c_short) c_short;
extern fn _InterlockedCompareExchange16(Destination: [*c]volatile c_short, ExChange: c_short, Comperand: c_short) c_short;
extern fn _InterlockedAnd(Destination: [*c]volatile c_long, Value: c_long) c_long;
extern fn _InterlockedOr(Destination: [*c]volatile c_long, Value: c_long) c_long;
extern fn _InterlockedXor(Destination: [*c]volatile c_long, Value: c_long) c_long;
extern fn _InterlockedAnd64(Destination: [*c]volatile c_longlong, Value: c_longlong) c_longlong;
extern fn _InterlockedOr64(Destination: [*c]volatile c_longlong, Value: c_longlong) c_longlong;
extern fn _InterlockedXor64(Destination: [*c]volatile c_longlong, Value: c_longlong) c_longlong;
extern fn _InterlockedIncrement(Addend: [*c]volatile c_long) c_long;
extern fn _InterlockedDecrement(Addend: [*c]volatile c_long) c_long;
extern fn _InterlockedExchange(Target: [*c]volatile c_long, Value: c_long) c_long;
extern fn _InterlockedExchangeAdd(Addend: [*c]volatile c_long, Value: c_long) c_long;
extern fn _InterlockedCompareExchange(Destination: [*c]volatile c_long, ExChange: c_long, Comperand: c_long) c_long;
extern fn _InterlockedIncrement64(Addend: [*c]volatile c_longlong) c_longlong;
extern fn _InterlockedDecrement64(Addend: [*c]volatile c_longlong) c_longlong;
extern fn _InterlockedExchange64(Target: [*c]volatile c_longlong, Value: c_longlong) c_longlong;
extern fn _InterlockedExchangeAdd64(Addend: [*c]volatile c_longlong, Value: c_longlong) c_longlong;
extern fn _InterlockedCompareExchange64(Destination: [*c]volatile c_longlong, ExChange: c_longlong, Comperand: c_longlong) c_longlong;
extern fn _InterlockedCompareExchange128(Destination: [*c]volatile c_longlong, ExchangeHigh: c_longlong, ExchangeLow: c_longlong, ComparandResult: [*c]c_longlong) u8;
extern fn _InterlockedCompareExchangePointer(Destination: [*c]volatile (?*c_void), Exchange: ?*c_void, Comperand: ?*c_void) ?*c_void;
extern fn _InterlockedExchangePointer(Target: [*c]volatile (?*c_void), Value: ?*c_void) ?*c_void;
extern fn _InterlockedExchange8(Target: [*c]volatile u8, Value: u8) u8;
extern fn _InterlockedExchange16(Destination: [*c]volatile c_short, ExChange: c_short) c_short;
extern fn _InterlockedExchangeAdd8(_Addend: [*c]volatile u8, _Value: u8) u8;
extern fn _InterlockedAnd8(Destination: [*c]volatile u8, Value: u8) u8;
extern fn _InterlockedOr8(Destination: [*c]volatile u8, Value: u8) u8;
extern fn _InterlockedXor8(Destination: [*c]volatile u8, Value: u8) u8;
extern fn _InterlockedAnd16(Destination: [*c]volatile c_short, Value: c_short) c_short;
extern fn _InterlockedOr16(Destination: [*c]volatile c_short, Value: c_short) c_short;
extern fn _InterlockedXor16(Destination: [*c]volatile c_short, Value: c_short) c_short;
extern fn __cpuidex(CPUInfo: [*c]c_int, Function: c_int, SubLeaf: c_int) void;
extern fn _mm_clflush(Address: ?*const c_void) void;
extern fn _ReadWriteBarrier() void;
extern fn __faststorefence() void;
extern fn _mm_lfence() void;
extern fn _mm_mfence() void;
extern fn _mm_sfence() void;
extern fn _mm_pause() void;
extern fn _mm_prefetch(a: [*c]const u8, sel: c_int) void;
extern fn _m_prefetchw(Source: ?*const volatile c_void) void;
extern fn _mm_getcsr() c_uint;
extern fn _mm_setcsr(MxCsr: c_uint) void;
extern fn __getcallerseflags() c_uint;
extern fn __segmentlimit(Selector: DWORD) DWORD;
extern fn __readpmc(Counter: DWORD) DWORD64;
extern fn __rdtsc() c_ulonglong;
extern fn __movsb(Destination: PBYTE, Source: [*c]const BYTE, Count: SIZE_T) void;
extern fn __movsw(Destination: PWORD, Source: [*c]const WORD, Count: SIZE_T) void;
extern fn __movsd(Destination: PDWORD, Source: [*c]const DWORD, Count: SIZE_T) void;
extern fn __movsq(Destination: PDWORD64, Source: [*c]const DWORD64, Count: SIZE_T) void;
extern fn __stosb(Destination: [*c]u8, Value: u8, Count: c_ulonglong) void;
extern fn __stosw(Destination: PWORD, Value: WORD, Count: SIZE_T) void;
extern fn __stosd(Destination: PDWORD, Value: DWORD, Count: SIZE_T) void;
extern fn __stosq(Destination: PDWORD64, Value: DWORD64, Count: SIZE_T) void;
extern fn __mulh(Multiplier: c_longlong, Multiplicand: c_longlong) c_longlong;
extern fn __umulh(Multiplier: c_ulonglong, Multiplicand: c_ulonglong) c_ulonglong;
extern fn __popcnt64(operand: c_ulonglong) c_ulonglong;
extern fn __shiftleft128(LowPart: c_ulonglong, HighPart: c_ulonglong, Shift: u8) c_ulonglong;
extern fn __shiftright128(LowPart: c_ulonglong, HighPart: c_ulonglong, Shift: u8) c_ulonglong;
extern fn _mul128(Multiplier: c_longlong, Multiplicand: c_longlong, HighProduct: [*c]c_longlong) c_longlong;
extern fn _umul128(Multiplier: c_ulonglong, Multiplicand: c_ulonglong, HighProduct: [*c]c_ulonglong) c_ulonglong;
extern fn __readgsbyte(Offset: c_ulong) u8;
extern fn __readgsword(Offset: c_ulong) c_ushort;
extern fn __readgsdword(Offset: c_ulong) c_ulong;
extern fn __readgsqword(Offset: c_ulong) c_ulonglong;
extern fn __writegsbyte(Offset: DWORD, Data: BYTE) void;
extern fn __writegsword(Offset: DWORD, Data: WORD) void;
extern fn __writegsdword(Offset: DWORD, Data: DWORD) void;
extern fn __writegsqword(Offset: DWORD, Data: DWORD64) void;
extern fn __incgsbyte(Offset: DWORD) void;
extern fn __addgsbyte(Offset: DWORD, Value: BYTE) void;
extern fn __incgsword(Offset: DWORD) void;
extern fn __addgsword(Offset: DWORD, Value: WORD) void;
extern fn __incgsdword(Offset: DWORD) void;
extern fn __addgsdword(Offset: DWORD, Value: DWORD) void;
extern fn __incgsqword(Offset: DWORD) void;
extern fn __addgsqword(Offset: DWORD, Value: DWORD64) void;
pub const PXMM_SAVE_AREA32 = [*c]XSAVE_FORMAT;
pub const CONTEXT = struct__CONTEXT;
pub const RUNTIME_FUNCTION = struct__IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const SCOPE_TABLE = SCOPE_TABLE_AMD64;
pub const PSCOPE_TABLE = [*c]SCOPE_TABLE_AMD64;
pub const PUNWIND_HISTORY_TABLE_ENTRY = [*c]struct__UNWIND_HISTORY_TABLE_ENTRY;
pub const UNWIND_HISTORY_TABLE = struct__UNWIND_HISTORY_TABLE;
pub const GET_RUNTIME_FUNCTION_CALLBACK = fn (DWORD64, PVOID) callconv(std.os.windows.WINAPI) PRUNTIME_FUNCTION;
pub const PGET_RUNTIME_FUNCTION_CALLBACK = ?GET_RUNTIME_FUNCTION_CALLBACK;
pub const OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = fn (HANDLE, PVOID, PDWORD, [*c]PRUNTIME_FUNCTION) callconv(std.os.windows.WINAPI) DWORD;
pub const POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK = ?OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
pub const DISPATCHER_CONTEXT = struct__DISPATCHER_CONTEXT;
pub const PDISPATCHER_CONTEXT = [*c]struct__DISPATCHER_CONTEXT;
pub const EXCEPTION_RECORD = struct__EXCEPTION_RECORD;
pub const PEXCEPTION_RECORD = [*c]EXCEPTION_RECORD;
pub const struct__EXCEPTION_POINTERS = extern struct {
    ExceptionRecord: PEXCEPTION_RECORD,
    ContextRecord: PCONTEXT,
};
pub const PEXCEPTION_FILTER = ?fn ([*c]struct__EXCEPTION_POINTERS, PVOID) callconv(std.os.windows.WINAPI) LONG;
pub const PTERMINATION_HANDLER = ?fn (BOOLEAN, PVOID) callconv(std.os.windows.WINAPI) void;
pub const struct__KNONVOLATILE_CONTEXT_POINTERS = extern struct {
    @"": extern union {
        FloatingContext: [16]PM128A,
        @"": extern struct {
            Xmm0: PM128A,
            Xmm1: PM128A,
            Xmm2: PM128A,
            Xmm3: PM128A,
            Xmm4: PM128A,
            Xmm5: PM128A,
            Xmm6: PM128A,
            Xmm7: PM128A,
            Xmm8: PM128A,
            Xmm9: PM128A,
            Xmm10: PM128A,
            Xmm11: PM128A,
            Xmm12: PM128A,
            Xmm13: PM128A,
            Xmm14: PM128A,
            Xmm15: PM128A,
        },
    },
    @"": extern union {
        IntegerContext: [16]PDWORD64,
        @"": extern struct {
            Rax: PDWORD64,
            Rcx: PDWORD64,
            Rdx: PDWORD64,
            Rbx: PDWORD64,
            Rsp: PDWORD64,
            Rbp: PDWORD64,
            Rsi: PDWORD64,
            Rdi: PDWORD64,
            R8: PDWORD64,
            R9: PDWORD64,
            R10: PDWORD64,
            R11: PDWORD64,
            R12: PDWORD64,
            R13: PDWORD64,
            R14: PDWORD64,
            R15: PDWORD64,
        },
    },
};
pub const KNONVOLATILE_CONTEXT_POINTERS = struct__KNONVOLATILE_CONTEXT_POINTERS;
pub const PKNONVOLATILE_CONTEXT_POINTERS = [*c]struct__KNONVOLATILE_CONTEXT_POINTERS;
pub const struct__SCOPE_TABLE_ARM = extern struct {
    Count: DWORD,
    ScopeRecord: [1]extern struct {
        BeginAddress: DWORD,
        EndAddress: DWORD,
        HandlerAddress: DWORD,
        JumpTarget: DWORD,
    },
};
pub const SCOPE_TABLE_ARM = struct__SCOPE_TABLE_ARM;
pub const PSCOPE_TABLE_ARM = [*c]struct__SCOPE_TABLE_ARM;
pub const struct__SCOPE_TABLE_ARM64 = extern struct {
    Count: DWORD,
    ScopeRecord: [1]extern struct {
        BeginAddress: DWORD,
        EndAddress: DWORD,
        HandlerAddress: DWORD,
        JumpTarget: DWORD,
    },
};
pub const SCOPE_TABLE_ARM64 = struct__SCOPE_TABLE_ARM64;
pub const PSCOPE_TABLE_ARM64 = [*c]struct__SCOPE_TABLE_ARM64;
pub const struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64 = extern struct {
    X19: PDWORD64,
    X20: PDWORD64,
    X21: PDWORD64,
    X22: PDWORD64,
    X23: PDWORD64,
    X24: PDWORD64,
    X25: PDWORD64,
    X26: PDWORD64,
    X27: PDWORD64,
    X28: PDWORD64,
    Fp: PDWORD64,
    Lr: PDWORD64,
    D8: PDWORD64,
    D9: PDWORD64,
    D10: PDWORD64,
    D11: PDWORD64,
    D12: PDWORD64,
    D13: PDWORD64,
    D14: PDWORD64,
    D15: PDWORD64,
};
pub const KNONVOLATILE_CONTEXT_POINTERS_ARM64 = struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64;
pub const PKNONVOLATILE_CONTEXT_POINTERS_ARM64 = [*c]struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64;
extern fn __int2c() noreturn;
pub const struct__LDT_ENTRY = extern struct {
    LimitLow: WORD,
    BaseLow: WORD,
    HighWord: extern union {
        Bytes: extern struct {
            BaseMid: BYTE,
            Flags1: BYTE,
            Flags2: BYTE,
            BaseHi: BYTE,
        },
        Bits: opaque {},
    },
};
pub const LDT_ENTRY = struct__LDT_ENTRY;
pub const PLDT_ENTRY = [*c]struct__LDT_ENTRY;
pub fn ReadAcquire8(Source: [*c]const volatile CHAR) CHAR {
    var Value: CHAR = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn ReadNoFence8(Source: [*c]const volatile CHAR) CHAR {
    var Value: CHAR = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn WriteRelease8(Destination: [*c]volatile CHAR, Value: CHAR) void {
    Destination.?.* = Value;
    return;
}
pub fn WriteNoFence8(Destination: [*c]volatile CHAR, Value: CHAR) void {
    Destination.?.* = Value;
    return;
}
pub fn ReadAcquire16(Source: [*c]const volatile SHORT) SHORT {
    var Value: SHORT = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn ReadNoFence16(Source: [*c]const volatile SHORT) SHORT {
    var Value: SHORT = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn WriteRelease16(Destination: [*c]volatile SHORT, Value: SHORT) void {
    Destination.?.* = Value;
    return;
}
pub fn WriteNoFence16(Destination: [*c]volatile SHORT, Value: SHORT) void {
    Destination.?.* = Value;
    return;
}
pub fn ReadAcquire(Source: [*c]const volatile LONG) LONG {
    var Value: LONG = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn ReadNoFence(Source: [*c]const volatile LONG) LONG {
    var Value: LONG = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn WriteRelease(Destination: [*c]volatile LONG, Value: LONG) void {
    Destination.?.* = Value;
    return;
}
pub fn WriteNoFence(Destination: [*c]volatile LONG, Value: LONG) void {
    Destination.?.* = Value;
    return;
}
pub fn ReadAcquire64(Source: [*c]const volatile LONG64) LONG64 {
    var Value: LONG64 = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn ReadNoFence64(Source: [*c]const volatile LONG64) LONG64 {
    var Value: LONG64 = undefined;
    Value = Source.?.*;
    return Value;
}
pub fn WriteRelease64(Destination: [*c]volatile LONG64, Value: LONG64) void {
    Destination.?.* = Value;
    return;
}
pub fn WriteNoFence64(Destination: [*c]volatile LONG64, Value: LONG64) void {
    Destination.?.* = Value;
    return;
}
pub fn ReadRaw8(Source: [*c]const volatile CHAR) CHAR {
    var Value: CHAR = undefined;
    Value = @ptrCast([*c]CHAR, @alignCast(@alignOf(CHAR), Source)).?.*;
    return Value;
}
pub fn WriteRaw8(Destination: [*c]volatile CHAR, Value: CHAR) void {
    @ptrCast([*c]CHAR, @alignCast(@alignOf(CHAR), Destination)).?.* = Value;
    return;
}
pub fn ReadRaw16(Source: [*c]const volatile SHORT) SHORT {
    var Value: SHORT = undefined;
    Value = @ptrCast([*c]SHORT, @alignCast(@alignOf(SHORT), Source)).?.*;
    return Value;
}
pub fn WriteRaw16(Destination: [*c]volatile SHORT, Value: SHORT) void {
    @ptrCast([*c]SHORT, @alignCast(@alignOf(SHORT), Destination)).?.* = Value;
    return;
}
pub fn ReadRaw(Source: [*c]const volatile LONG) LONG {
    var Value: LONG = undefined;
    Value = @ptrCast([*c]LONG, @alignCast(@alignOf(LONG), Source)).?.*;
    return Value;
}
pub fn WriteRaw(Destination: [*c]volatile LONG, Value: LONG) void {
    @ptrCast([*c]LONG, @alignCast(@alignOf(LONG), Destination)).?.* = Value;
    return;
}
pub fn ReadRaw64(Source: [*c]const volatile LONG64) LONG64 {
    var Value: LONG64 = undefined;
    Value = @ptrCast([*c]LONG64, @alignCast(@alignOf(LONG64), Source)).?.*;
    return Value;
}
pub fn WriteRaw64(Destination: [*c]volatile LONG64, Value: LONG64) void {
    @ptrCast([*c]LONG64, @alignCast(@alignOf(LONG64), Destination)).?.* = Value;
    return;
}
pub fn ReadUCharAcquire(Source: [*c]const volatile BYTE) BYTE {
    return @as(BYTE, ReadAcquire8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Source))));
}
pub fn ReadUCharNoFence(Source: [*c]const volatile BYTE) BYTE {
    return @as(BYTE, ReadNoFence8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Source))));
}
pub fn ReadBooleanAcquire(Source: [*c]const volatile BOOLEAN) BYTE {
    return @as(BOOLEAN, ReadAcquire8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Source))));
}
pub fn ReadBooleanNoFence(Source: [*c]const volatile BOOLEAN) BYTE {
    return @as(BOOLEAN, ReadNoFence8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Source))));
}
pub fn ReadUCharRaw(Source: [*c]const volatile BYTE) BYTE {
    return @as(BYTE, ReadRaw8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Source))));
}
pub fn WriteUCharRelease(Destination: [*c]volatile BYTE, Value: BYTE) void {
    WriteRelease8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Destination)), @as(CHAR, Value));
    return;
}
pub fn WriteUCharNoFence(Destination: [*c]volatile BYTE, Value: BYTE) void {
    WriteNoFence8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Destination)), @as(CHAR, Value));
    return;
}
pub fn WriteBooleanRelease(Destination: [*c]volatile BOOLEAN, Value: BOOLEAN) void {
    WriteRelease8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Destination)), @as(CHAR, Value));
    return;
}
pub fn WriteBooleanNoFence(Destination: [*c]volatile BOOLEAN, Value: BOOLEAN) void {
    WriteNoFence8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Destination)), @as(CHAR, Value));
    return;
}
pub fn WriteUCharRaw(Destination: [*c]volatile BYTE, Value: BYTE) void {
    WriteRaw8(@ptrCast(PCHAR, @alignCast(@alignOf(CHAR), Destination)), @as(CHAR, Value));
    return;
}
pub fn ReadUShortAcquire(Source: [*c]const volatile WORD) WORD {
    return @as(WORD, ReadAcquire16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Source))));
}
pub fn ReadUShortNoFence(Source: [*c]const volatile WORD) WORD {
    return @as(WORD, ReadNoFence16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Source))));
}
pub fn ReadUShortRaw(Source: [*c]const volatile WORD) WORD {
    return @as(WORD, ReadRaw16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Source))));
}
pub fn WriteUShortRelease(Destination: [*c]volatile WORD, Value: WORD) void {
    WriteRelease16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Destination)), @as(SHORT, Value));
    return;
}
pub fn WriteUShortNoFence(Destination: [*c]volatile WORD, Value: WORD) void {
    WriteNoFence16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Destination)), @as(SHORT, Value));
    return;
}
pub fn WriteUShortRaw(Destination: [*c]volatile WORD, Value: WORD) void {
    WriteRaw16(@ptrCast(PSHORT, @alignCast(@alignOf(SHORT), Destination)), @as(SHORT, Value));
    return;
}
pub fn ReadULongAcquire(Source: [*c]const volatile DWORD) DWORD {
    return @as(DWORD, ReadAcquire(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Source))));
}
pub fn ReadULongNoFence(Source: [*c]const volatile DWORD) DWORD {
    return @as(DWORD, ReadNoFence(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Source))));
}
pub fn ReadULongRaw(Source: [*c]const volatile DWORD) DWORD {
    return @as(DWORD, ReadRaw(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Source))));
}
pub fn WriteULongRelease(Destination: [*c]volatile DWORD, Value: DWORD) void {
    WriteRelease(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Destination)), @as(LONG, Value));
    return;
}
pub fn WriteULongNoFence(Destination: [*c]volatile DWORD, Value: DWORD) void {
    WriteNoFence(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Destination)), @as(LONG, Value));
    return;
}
pub fn WriteULongRaw(Destination: [*c]volatile DWORD, Value: DWORD) void {
    WriteRaw(@ptrCast(PLONG, @alignCast(@alignOf(LONG), Destination)), @as(LONG, Value));
    return;
}
pub fn ReadULong64Acquire(Source: [*c]const volatile DWORD64) DWORD64 {
    return DWORD64(ReadAcquire64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn ReadULong64NoFence(Source: [*c]const volatile DWORD64) DWORD64 {
    return DWORD64(ReadNoFence64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn ReadULong64Raw(Source: [*c]const volatile DWORD64) DWORD64 {
    return DWORD64(ReadRaw64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn WriteULong64Release(Destination: [*c]volatile DWORD64, Value: DWORD64) void {
    WriteRelease64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub fn WriteULong64NoFence(Destination: [*c]volatile DWORD64, Value: DWORD64) void {
    WriteNoFence64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub fn WriteULong64Raw(Destination: [*c]volatile DWORD64, Value: DWORD64) void {
    WriteRaw64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub fn ReadPointerAcquire(Source: [*c]const volatile PVOID) PVOID {
    return @as(PVOID, ReadAcquire64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn ReadPointerNoFence(Source: [*c]const volatile PVOID) PVOID {
    return @as(PVOID, ReadNoFence64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn ReadPointerRaw(Source: [*c]const volatile PVOID) PVOID {
    return @as(PVOID, ReadRaw64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Source))));
}
pub fn WritePointerRelease(Destination: [*c]volatile PVOID, Value: PVOID) void {
    WriteRelease64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub fn WritePointerNoFence(Destination: [*c]volatile PVOID, Value: PVOID) void {
    WriteNoFence64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub fn WritePointerRaw(Destination: [*c]volatile PVOID, Value: PVOID) void {
    WriteRaw64(@ptrCast(PLONG64, @alignCast(@alignOf(c_longlong), Destination)), LONG64(Value));
    return;
}
pub const struct__WOW64_FLOATING_SAVE_AREA = extern struct {
    ControlWord: DWORD,
    StatusWord: DWORD,
    TagWord: DWORD,
    ErrorOffset: DWORD,
    ErrorSelector: DWORD,
    DataOffset: DWORD,
    DataSelector: DWORD,
    RegisterArea: [80]BYTE,
    Cr0NpxState: DWORD,
};
pub const WOW64_FLOATING_SAVE_AREA = struct__WOW64_FLOATING_SAVE_AREA;
pub const PWOW64_FLOATING_SAVE_AREA = [*c]WOW64_FLOATING_SAVE_AREA;
pub const struct__WOW64_CONTEXT = extern struct {
    ContextFlags: DWORD,
    Dr0: DWORD,
    Dr1: DWORD,
    Dr2: DWORD,
    Dr3: DWORD,
    Dr6: DWORD,
    Dr7: DWORD,
    FloatSave: WOW64_FLOATING_SAVE_AREA,
    SegGs: DWORD,
    SegFs: DWORD,
    SegEs: DWORD,
    SegDs: DWORD,
    Edi: DWORD,
    Esi: DWORD,
    Ebx: DWORD,
    Edx: DWORD,
    Ecx: DWORD,
    Eax: DWORD,
    Ebp: DWORD,
    Eip: DWORD,
    SegCs: DWORD,
    EFlags: DWORD,
    Esp: DWORD,
    SegSs: DWORD,
    ExtendedRegisters: [512]BYTE,
};
pub const WOW64_CONTEXT = struct__WOW64_CONTEXT;
pub const PWOW64_CONTEXT = [*c]WOW64_CONTEXT;
pub const struct__WOW64_LDT_ENTRY = extern struct {
    LimitLow: WORD,
    BaseLow: WORD,
    HighWord: extern union {
        Bytes: extern struct {
            BaseMid: BYTE,
            Flags1: BYTE,
            Flags2: BYTE,
            BaseHi: BYTE,
        },
        Bits: opaque {},
    },
};
pub const WOW64_LDT_ENTRY = struct__WOW64_LDT_ENTRY;
pub const PWOW64_LDT_ENTRY = [*c]struct__WOW64_LDT_ENTRY;
pub const struct__WOW64_DESCRIPTOR_TABLE_ENTRY = extern struct {
    Selector: DWORD,
    Descriptor: WOW64_LDT_ENTRY,
};
pub const WOW64_DESCRIPTOR_TABLE_ENTRY = struct__WOW64_DESCRIPTOR_TABLE_ENTRY;
pub const PWOW64_DESCRIPTOR_TABLE_ENTRY = [*c]struct__WOW64_DESCRIPTOR_TABLE_ENTRY;
pub const struct__EXCEPTION_RECORD32 = extern struct {
    ExceptionCode: DWORD,
    ExceptionFlags: DWORD,
    ExceptionRecord: DWORD,
    ExceptionAddress: DWORD,
    NumberParameters: DWORD,
    ExceptionInformation: [15]DWORD,
};
pub const EXCEPTION_RECORD32 = struct__EXCEPTION_RECORD32;
pub const PEXCEPTION_RECORD32 = [*c]struct__EXCEPTION_RECORD32;
pub const struct__EXCEPTION_RECORD64 = extern struct {
    ExceptionCode: DWORD,
    ExceptionFlags: DWORD,
    ExceptionRecord: DWORD64,
    ExceptionAddress: DWORD64,
    NumberParameters: DWORD,
    __unusedAlignment: DWORD,
    ExceptionInformation: [15]DWORD64,
};
pub const EXCEPTION_RECORD64 = struct__EXCEPTION_RECORD64;
pub const PEXCEPTION_RECORD64 = [*c]struct__EXCEPTION_RECORD64;
pub const EXCEPTION_POINTERS = struct__EXCEPTION_POINTERS;
pub const PEXCEPTION_POINTERS = [*c]struct__EXCEPTION_POINTERS;
pub const PACCESS_TOKEN = PVOID;
pub const PSECURITY_DESCRIPTOR = PVOID;
pub const PSID = PVOID;
pub const PCLAIMS_BLOB = PVOID;
pub const ACCESS_MASK = DWORD;
pub const PACCESS_MASK = [*c]ACCESS_MASK;
pub const struct__GENERIC_MAPPING = extern struct {
    GenericRead: ACCESS_MASK,
    GenericWrite: ACCESS_MASK,
    GenericExecute: ACCESS_MASK,
    GenericAll: ACCESS_MASK,
};
pub const GENERIC_MAPPING = struct__GENERIC_MAPPING;
pub const PGENERIC_MAPPING = [*c]GENERIC_MAPPING;
pub const struct__LUID_AND_ATTRIBUTES = extern struct {
    Luid: LUID,
    Attributes: DWORD,
};
pub const LUID_AND_ATTRIBUTES = struct__LUID_AND_ATTRIBUTES;
pub const PLUID_AND_ATTRIBUTES = [*c]struct__LUID_AND_ATTRIBUTES;
pub const LUID_AND_ATTRIBUTES_ARRAY = [1]LUID_AND_ATTRIBUTES;
pub const PLUID_AND_ATTRIBUTES_ARRAY = [*c]LUID_AND_ATTRIBUTES_ARRAY;
pub const struct__SID_IDENTIFIER_AUTHORITY = extern struct {
    Value: [6]BYTE,
};
pub const SID_IDENTIFIER_AUTHORITY = struct__SID_IDENTIFIER_AUTHORITY;
pub const PSID_IDENTIFIER_AUTHORITY = [*c]struct__SID_IDENTIFIER_AUTHORITY;
pub const struct__SID = extern struct {
    Revision: BYTE,
    SubAuthorityCount: BYTE,
    IdentifierAuthority: SID_IDENTIFIER_AUTHORITY,
    SubAuthority: [1]DWORD,
};
pub const SID = struct__SID;
pub const PISID = [*c]struct__SID;
pub const union__SE_SID = extern union {
    Sid: SID,
    Buffer: [68]BYTE,
};
pub const SE_SID = union__SE_SID;
pub const PSE_SID = [*c]union__SE_SID;
pub const SidTypeUser = enum__SID_NAME_USE.SidTypeUser;
pub const SidTypeGroup = enum__SID_NAME_USE.SidTypeGroup;
pub const SidTypeDomain = enum__SID_NAME_USE.SidTypeDomain;
pub const SidTypeAlias = enum__SID_NAME_USE.SidTypeAlias;
pub const SidTypeWellKnownGroup = enum__SID_NAME_USE.SidTypeWellKnownGroup;
pub const SidTypeDeletedAccount = enum__SID_NAME_USE.SidTypeDeletedAccount;
pub const SidTypeInvalid = enum__SID_NAME_USE.SidTypeInvalid;
pub const SidTypeUnknown = enum__SID_NAME_USE.SidTypeUnknown;
pub const SidTypeComputer = enum__SID_NAME_USE.SidTypeComputer;
pub const SidTypeLabel = enum__SID_NAME_USE.SidTypeLabel;
pub const SidTypeLogonSession = enum__SID_NAME_USE.SidTypeLogonSession;
pub const enum__SID_NAME_USE = extern enum {
    SidTypeUser = 1,
    SidTypeGroup = 2,
    SidTypeDomain = 3,
    SidTypeAlias = 4,
    SidTypeWellKnownGroup = 5,
    SidTypeDeletedAccount = 6,
    SidTypeInvalid = 7,
    SidTypeUnknown = 8,
    SidTypeComputer = 9,
    SidTypeLabel = 10,
    SidTypeLogonSession = 11,
};
pub const SID_NAME_USE = enum__SID_NAME_USE;
pub const PSID_NAME_USE = [*c]enum__SID_NAME_USE;
pub const struct__SID_AND_ATTRIBUTES = extern struct {
    Sid: PSID,
    Attributes: DWORD,
};
pub const SID_AND_ATTRIBUTES = struct__SID_AND_ATTRIBUTES;
pub const PSID_AND_ATTRIBUTES = [*c]struct__SID_AND_ATTRIBUTES;
pub const SID_AND_ATTRIBUTES_ARRAY = [1]SID_AND_ATTRIBUTES;
pub const PSID_AND_ATTRIBUTES_ARRAY = [*c]SID_AND_ATTRIBUTES_ARRAY;
pub const SID_HASH_ENTRY = ULONG_PTR;
pub const PSID_HASH_ENTRY = [*c]ULONG_PTR;
pub const struct__SID_AND_ATTRIBUTES_HASH = extern struct {
    SidCount: DWORD,
    SidAttr: PSID_AND_ATTRIBUTES,
    Hash: [32]SID_HASH_ENTRY,
};
pub const SID_AND_ATTRIBUTES_HASH = struct__SID_AND_ATTRIBUTES_HASH;
pub const PSID_AND_ATTRIBUTES_HASH = [*c]struct__SID_AND_ATTRIBUTES_HASH;
pub const WinNullSid = 0;
pub const WinWorldSid = 1;
pub const WinLocalSid = 2;
pub const WinCreatorOwnerSid = 3;
pub const WinCreatorGroupSid = 4;
pub const WinCreatorOwnerServerSid = 5;
pub const WinCreatorGroupServerSid = 6;
pub const WinNtAuthoritySid = 7;
pub const WinDialupSid = 8;
pub const WinNetworkSid = 9;
pub const WinBatchSid = 10;
pub const WinInteractiveSid = 11;
pub const WinServiceSid = 12;
pub const WinAnonymousSid = 13;
pub const WinProxySid = 14;
pub const WinEnterpriseControllersSid = 15;
pub const WinSelfSid = 16;
pub const WinAuthenticatedUserSid = 17;
pub const WinRestrictedCodeSid = 18;
pub const WinTerminalServerSid = 19;
pub const WinRemoteLogonIdSid = 20;
pub const WinLogonIdsSid = 21;
pub const WinLocalSystemSid = 22;
pub const WinLocalServiceSid = 23;
pub const WinNetworkServiceSid = 24;
pub const WinBuiltinDomainSid = 25;
pub const WinBuiltinAdministratorsSid = 26;
pub const WinBuiltinUsersSid = 27;
pub const WinBuiltinGuestsSid = 28;
pub const WinBuiltinPowerUsersSid = 29;
pub const WinBuiltinAccountOperatorsSid = 30;
pub const WinBuiltinSystemOperatorsSid = 31;
pub const WinBuiltinPrintOperatorsSid = 32;
pub const WinBuiltinBackupOperatorsSid = 33;
pub const WinBuiltinReplicatorSid = 34;
pub const WinBuiltinPreWindows2000CompatibleAccessSid = 35;
pub const WinBuiltinRemoteDesktopUsersSid = 36;
pub const WinBuiltinNetworkConfigurationOperatorsSid = 37;
pub const WinAccountAdministratorSid = 38;
pub const WinAccountGuestSid = 39;
pub const WinAccountKrbtgtSid = 40;
pub const WinAccountDomainAdminsSid = 41;
pub const WinAccountDomainUsersSid = 42;
pub const WinAccountDomainGuestsSid = 43;
pub const WinAccountComputersSid = 44;
pub const WinAccountControllersSid = 45;
pub const WinAccountCertAdminsSid = 46;
pub const WinAccountSchemaAdminsSid = 47;
pub const WinAccountEnterpriseAdminsSid = 48;
pub const WinAccountPolicyAdminsSid = 49;
pub const WinAccountRasAndIasServersSid = 50;
pub const WinNTLMAuthenticationSid = 51;
pub const WinDigestAuthenticationSid = 52;
pub const WinSChannelAuthenticationSid = 53;
pub const WinThisOrganizationSid = 54;
pub const WinOtherOrganizationSid = 55;
pub const WinBuiltinIncomingForestTrustBuildersSid = 56;
pub const WinBuiltinPerfMonitoringUsersSid = 57;
pub const WinBuiltinPerfLoggingUsersSid = 58;
pub const WinBuiltinAuthorizationAccessSid = 59;
pub const WinBuiltinTerminalServerLicenseServersSid = 60;
pub const WinBuiltinDCOMUsersSid = 61;
pub const WinBuiltinIUsersSid = 62;
pub const WinIUserSid = 63;
pub const WinBuiltinCryptoOperatorsSid = 64;
pub const WinUntrustedLabelSid = 65;
pub const WinLowLabelSid = 66;
pub const WinMediumLabelSid = 67;
pub const WinHighLabelSid = 68;
pub const WinSystemLabelSid = 69;
pub const WinWriteRestrictedCodeSid = 70;
pub const WinCreatorOwnerRightsSid = 71;
pub const WinCacheablePrincipalsGroupSid = 72;
pub const WinNonCacheablePrincipalsGroupSid = 73;
pub const WinEnterpriseReadonlyControllersSid = 74;
pub const WinAccountReadonlyControllersSid = 75;
pub const WinBuiltinEventLogReadersGroup = 76;
pub const WinNewEnterpriseReadonlyControllersSid = 77;
pub const WinBuiltinCertSvcDComAccessGroup = 78;
pub const WinMediumPlusLabelSid = 79;
pub const WinLocalLogonSid = 80;
pub const WinConsoleLogonSid = 81;
pub const WinThisOrganizationCertificateSid = 82;
pub const WinApplicationPackageAuthoritySid = 83;
pub const WinBuiltinAnyPackageSid = 84;
pub const WinCapabilityInternetClientSid = 85;
pub const WinCapabilityInternetClientServerSid = 86;
pub const WinCapabilityPrivateNetworkClientServerSid = 87;
pub const WinCapabilityPicturesLibrarySid = 88;
pub const WinCapabilityVideosLibrarySid = 89;
pub const WinCapabilityMusicLibrarySid = 90;
pub const WinCapabilityDocumentsLibrarySid = 91;
pub const WinCapabilitySharedUserCertificatesSid = 92;
pub const WinCapabilityEnterpriseAuthenticationSid = 93;
pub const WinCapabilityRemovableStorageSid = 94;
pub const WinBuiltinRDSRemoteAccessServersSid = 95;
pub const WinBuiltinRDSEndpointServersSid = 96;
pub const WinBuiltinRDSManagementServersSid = 97;
pub const WinUserModeDriversSid = 98;
pub const WinBuiltinHyperVAdminsSid = 99;
pub const WinAccountCloneableControllersSid = 100;
pub const WinBuiltinAccessControlAssistanceOperatorsSid = 101;
pub const WinBuiltinRemoteManagementUsersSid = 102;
pub const WinAuthenticationAuthorityAssertedSid = 103;
pub const WinAuthenticationServiceAssertedSid = 104;
pub const WinLocalAccountSid = 105;
pub const WinLocalAccountAndAdministratorSid = 106;
pub const WinAccountProtectedUsersSid = 107;
pub const WinCapabilityAppointmentsSid = 108;
pub const WinCapabilityContactsSid = 109;
pub const WinAccountDefaultSystemManagedSid = 110;
pub const WinBuiltinDefaultSystemManagedGroupSid = 111;
pub const WinBuiltinStorageReplicaAdminsSid = 112;
pub const WinAccountKeyAdminsSid = 113;
pub const WinAccountEnterpriseKeyAdminsSid = 114;
pub const WinAuthenticationKeyTrustSid = 115;
pub const WinAuthenticationKeyPropertyMFASid = 116;
pub const WinAuthenticationKeyPropertyAttestationSid = 117;
pub const WinAuthenticationFreshKeyAuthSid = 118;
pub const WinBuiltinDeviceOwnersSid = 119;
pub const WELL_KNOWN_SID_TYPE = extern enum {
    WinNullSid = 0,
    WinWorldSid = 1,
    WinLocalSid = 2,
    WinCreatorOwnerSid = 3,
    WinCreatorGroupSid = 4,
    WinCreatorOwnerServerSid = 5,
    WinCreatorGroupServerSid = 6,
    WinNtAuthoritySid = 7,
    WinDialupSid = 8,
    WinNetworkSid = 9,
    WinBatchSid = 10,
    WinInteractiveSid = 11,
    WinServiceSid = 12,
    WinAnonymousSid = 13,
    WinProxySid = 14,
    WinEnterpriseControllersSid = 15,
    WinSelfSid = 16,
    WinAuthenticatedUserSid = 17,
    WinRestrictedCodeSid = 18,
    WinTerminalServerSid = 19,
    WinRemoteLogonIdSid = 20,
    WinLogonIdsSid = 21,
    WinLocalSystemSid = 22,
    WinLocalServiceSid = 23,
    WinNetworkServiceSid = 24,
    WinBuiltinDomainSid = 25,
    WinBuiltinAdministratorsSid = 26,
    WinBuiltinUsersSid = 27,
    WinBuiltinGuestsSid = 28,
    WinBuiltinPowerUsersSid = 29,
    WinBuiltinAccountOperatorsSid = 30,
    WinBuiltinSystemOperatorsSid = 31,
    WinBuiltinPrintOperatorsSid = 32,
    WinBuiltinBackupOperatorsSid = 33,
    WinBuiltinReplicatorSid = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid = 36,
    WinBuiltinNetworkConfigurationOperatorsSid = 37,
    WinAccountAdministratorSid = 38,
    WinAccountGuestSid = 39,
    WinAccountKrbtgtSid = 40,
    WinAccountDomainAdminsSid = 41,
    WinAccountDomainUsersSid = 42,
    WinAccountDomainGuestsSid = 43,
    WinAccountComputersSid = 44,
    WinAccountControllersSid = 45,
    WinAccountCertAdminsSid = 46,
    WinAccountSchemaAdminsSid = 47,
    WinAccountEnterpriseAdminsSid = 48,
    WinAccountPolicyAdminsSid = 49,
    WinAccountRasAndIasServersSid = 50,
    WinNTLMAuthenticationSid = 51,
    WinDigestAuthenticationSid = 52,
    WinSChannelAuthenticationSid = 53,
    WinThisOrganizationSid = 54,
    WinOtherOrganizationSid = 55,
    WinBuiltinIncomingForestTrustBuildersSid = 56,
    WinBuiltinPerfMonitoringUsersSid = 57,
    WinBuiltinPerfLoggingUsersSid = 58,
    WinBuiltinAuthorizationAccessSid = 59,
    WinBuiltinTerminalServerLicenseServersSid = 60,
    WinBuiltinDCOMUsersSid = 61,
    WinBuiltinIUsersSid = 62,
    WinIUserSid = 63,
    WinBuiltinCryptoOperatorsSid = 64,
    WinUntrustedLabelSid = 65,
    WinLowLabelSid = 66,
    WinMediumLabelSid = 67,
    WinHighLabelSid = 68,
    WinSystemLabelSid = 69,
    WinWriteRestrictedCodeSid = 70,
    WinCreatorOwnerRightsSid = 71,
    WinCacheablePrincipalsGroupSid = 72,
    WinNonCacheablePrincipalsGroupSid = 73,
    WinEnterpriseReadonlyControllersSid = 74,
    WinAccountReadonlyControllersSid = 75,
    WinBuiltinEventLogReadersGroup = 76,
    WinNewEnterpriseReadonlyControllersSid = 77,
    WinBuiltinCertSvcDComAccessGroup = 78,
    WinMediumPlusLabelSid = 79,
    WinLocalLogonSid = 80,
    WinConsoleLogonSid = 81,
    WinThisOrganizationCertificateSid = 82,
    WinApplicationPackageAuthoritySid = 83,
    WinBuiltinAnyPackageSid = 84,
    WinCapabilityInternetClientSid = 85,
    WinCapabilityInternetClientServerSid = 86,
    WinCapabilityPrivateNetworkClientServerSid = 87,
    WinCapabilityPicturesLibrarySid = 88,
    WinCapabilityVideosLibrarySid = 89,
    WinCapabilityMusicLibrarySid = 90,
    WinCapabilityDocumentsLibrarySid = 91,
    WinCapabilitySharedUserCertificatesSid = 92,
    WinCapabilityEnterpriseAuthenticationSid = 93,
    WinCapabilityRemovableStorageSid = 94,
    WinBuiltinRDSRemoteAccessServersSid = 95,
    WinBuiltinRDSEndpointServersSid = 96,
    WinBuiltinRDSManagementServersSid = 97,
    WinUserModeDriversSid = 98,
    WinBuiltinHyperVAdminsSid = 99,
    WinAccountCloneableControllersSid = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid = 102,
    WinAuthenticationAuthorityAssertedSid = 103,
    WinAuthenticationServiceAssertedSid = 104,
    WinLocalAccountSid = 105,
    WinLocalAccountAndAdministratorSid = 106,
    WinAccountProtectedUsersSid = 107,
    WinCapabilityAppointmentsSid = 108,
    WinCapabilityContactsSid = 109,
    WinAccountDefaultSystemManagedSid = 110,
    WinBuiltinDefaultSystemManagedGroupSid = 111,
    WinBuiltinStorageReplicaAdminsSid = 112,
    WinAccountKeyAdminsSid = 113,
    WinAccountEnterpriseKeyAdminsSid = 114,
    WinAuthenticationKeyTrustSid = 115,
    WinAuthenticationKeyPropertyMFASid = 116,
    WinAuthenticationKeyPropertyAttestationSid = 117,
    WinAuthenticationFreshKeyAuthSid = 118,
    WinBuiltinDeviceOwnersSid = 119,
};
pub const struct__ACL = extern struct {
    AclRevision: BYTE,
    Sbz1: BYTE,
    AclSize: WORD,
    AceCount: WORD,
    Sbz2: WORD,
};
pub const ACL = struct__ACL;
pub const PACL = [*c]ACL;
pub const struct__ACE_HEADER = extern struct {
    AceType: BYTE,
    AceFlags: BYTE,
    AceSize: WORD,
};
pub const ACE_HEADER = struct__ACE_HEADER;
pub const PACE_HEADER = [*c]ACE_HEADER;
pub const struct__ACCESS_ALLOWED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const ACCESS_ALLOWED_ACE = struct__ACCESS_ALLOWED_ACE;
pub const PACCESS_ALLOWED_ACE = [*c]ACCESS_ALLOWED_ACE;
pub const struct__ACCESS_DENIED_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const ACCESS_DENIED_ACE = struct__ACCESS_DENIED_ACE;
pub const PACCESS_DENIED_ACE = [*c]ACCESS_DENIED_ACE;
pub const struct__SYSTEM_AUDIT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_AUDIT_ACE = struct__SYSTEM_AUDIT_ACE;
pub const PSYSTEM_AUDIT_ACE = [*c]SYSTEM_AUDIT_ACE;
pub const struct__SYSTEM_ALARM_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_ALARM_ACE = struct__SYSTEM_ALARM_ACE;
pub const PSYSTEM_ALARM_ACE = [*c]SYSTEM_ALARM_ACE;
pub const struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE;
pub const PSYSTEM_RESOURCE_ATTRIBUTE_ACE = [*c]struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE;
pub const struct__SYSTEM_SCOPED_POLICY_ID_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_SCOPED_POLICY_ID_ACE = struct__SYSTEM_SCOPED_POLICY_ID_ACE;
pub const PSYSTEM_SCOPED_POLICY_ID_ACE = [*c]struct__SYSTEM_SCOPED_POLICY_ID_ACE;
pub const struct__SYSTEM_MANDATORY_LABEL_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_MANDATORY_LABEL_ACE = struct__SYSTEM_MANDATORY_LABEL_ACE;
pub const PSYSTEM_MANDATORY_LABEL_ACE = [*c]struct__SYSTEM_MANDATORY_LABEL_ACE;
pub const struct__SYSTEM_PROCESS_TRUST_LABEL_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE = struct__SYSTEM_PROCESS_TRUST_LABEL_ACE;
pub const PSYSTEM_PROCESS_TRUST_LABEL_ACE = [*c]struct__SYSTEM_PROCESS_TRUST_LABEL_ACE;
pub const struct__SYSTEM_ACCESS_FILTER_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_ACCESS_FILTER_ACE = struct__SYSTEM_ACCESS_FILTER_ACE;
pub const PSYSTEM_ACCESS_FILTER_ACE = [*c]struct__SYSTEM_ACCESS_FILTER_ACE;
pub const struct__ACCESS_ALLOWED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const ACCESS_ALLOWED_OBJECT_ACE = struct__ACCESS_ALLOWED_OBJECT_ACE;
pub const PACCESS_ALLOWED_OBJECT_ACE = [*c]struct__ACCESS_ALLOWED_OBJECT_ACE;
pub const struct__ACCESS_DENIED_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const ACCESS_DENIED_OBJECT_ACE = struct__ACCESS_DENIED_OBJECT_ACE;
pub const PACCESS_DENIED_OBJECT_ACE = [*c]struct__ACCESS_DENIED_OBJECT_ACE;
pub const struct__SYSTEM_AUDIT_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const SYSTEM_AUDIT_OBJECT_ACE = struct__SYSTEM_AUDIT_OBJECT_ACE;
pub const PSYSTEM_AUDIT_OBJECT_ACE = [*c]struct__SYSTEM_AUDIT_OBJECT_ACE;
pub const struct__SYSTEM_ALARM_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const SYSTEM_ALARM_OBJECT_ACE = struct__SYSTEM_ALARM_OBJECT_ACE;
pub const PSYSTEM_ALARM_OBJECT_ACE = [*c]struct__SYSTEM_ALARM_OBJECT_ACE;
pub const struct__ACCESS_ALLOWED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const ACCESS_ALLOWED_CALLBACK_ACE = struct__ACCESS_ALLOWED_CALLBACK_ACE;
pub const PACCESS_ALLOWED_CALLBACK_ACE = [*c]struct__ACCESS_ALLOWED_CALLBACK_ACE;
pub const struct__ACCESS_DENIED_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const ACCESS_DENIED_CALLBACK_ACE = struct__ACCESS_DENIED_CALLBACK_ACE;
pub const PACCESS_DENIED_CALLBACK_ACE = [*c]struct__ACCESS_DENIED_CALLBACK_ACE;
pub const struct__SYSTEM_AUDIT_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_AUDIT_CALLBACK_ACE = struct__SYSTEM_AUDIT_CALLBACK_ACE;
pub const PSYSTEM_AUDIT_CALLBACK_ACE = [*c]struct__SYSTEM_AUDIT_CALLBACK_ACE;
pub const struct__SYSTEM_ALARM_CALLBACK_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    SidStart: DWORD,
};
pub const SYSTEM_ALARM_CALLBACK_ACE = struct__SYSTEM_ALARM_CALLBACK_ACE;
pub const PSYSTEM_ALARM_CALLBACK_ACE = [*c]struct__SYSTEM_ALARM_CALLBACK_ACE;
pub const struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
pub const PACCESS_ALLOWED_CALLBACK_OBJECT_ACE = [*c]struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
pub const struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE;
pub const PACCESS_DENIED_CALLBACK_OBJECT_ACE = [*c]struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE;
pub const struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
pub const PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE = [*c]struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
pub const struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE = extern struct {
    Header: ACE_HEADER,
    Mask: ACCESS_MASK,
    Flags: DWORD,
    ObjectType: GUID,
    InheritedObjectType: GUID,
    SidStart: DWORD,
};
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub const PSYSTEM_ALARM_CALLBACK_OBJECT_ACE = [*c]struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub const AclRevisionInformation = enum__ACL_INFORMATION_CLASS.AclRevisionInformation;
pub const AclSizeInformation = enum__ACL_INFORMATION_CLASS.AclSizeInformation;
pub const enum__ACL_INFORMATION_CLASS = extern enum {
    AclRevisionInformation = 1,
    AclSizeInformation = 2,
};
pub const ACL_INFORMATION_CLASS = enum__ACL_INFORMATION_CLASS;
pub const struct__ACL_REVISION_INFORMATION = extern struct {
    AclRevision: DWORD,
};
pub const ACL_REVISION_INFORMATION = struct__ACL_REVISION_INFORMATION;
pub const PACL_REVISION_INFORMATION = [*c]ACL_REVISION_INFORMATION;
pub const struct__ACL_SIZE_INFORMATION = extern struct {
    AceCount: DWORD,
    AclBytesInUse: DWORD,
    AclBytesFree: DWORD,
};
pub const ACL_SIZE_INFORMATION = struct__ACL_SIZE_INFORMATION;
pub const PACL_SIZE_INFORMATION = [*c]ACL_SIZE_INFORMATION;
pub const SECURITY_DESCRIPTOR_CONTROL = WORD;
pub const PSECURITY_DESCRIPTOR_CONTROL = [*c]WORD;
pub const struct__SECURITY_DESCRIPTOR_RELATIVE = extern struct {
    Revision: BYTE,
    Sbz1: BYTE,
    Control: SECURITY_DESCRIPTOR_CONTROL,
    Owner: DWORD,
    Group: DWORD,
    Sacl: DWORD,
    Dacl: DWORD,
};
pub const SECURITY_DESCRIPTOR_RELATIVE = struct__SECURITY_DESCRIPTOR_RELATIVE;
pub const PISECURITY_DESCRIPTOR_RELATIVE = [*c]struct__SECURITY_DESCRIPTOR_RELATIVE;
pub const struct__SECURITY_DESCRIPTOR = extern struct {
    Revision: BYTE,
    Sbz1: BYTE,
    Control: SECURITY_DESCRIPTOR_CONTROL,
    Owner: PSID,
    Group: PSID,
    Sacl: PACL,
    Dacl: PACL,
};
pub const SECURITY_DESCRIPTOR = struct__SECURITY_DESCRIPTOR;
pub const PISECURITY_DESCRIPTOR = [*c]struct__SECURITY_DESCRIPTOR;
pub const struct__SECURITY_OBJECT_AI_PARAMS = extern struct {
    Size: DWORD,
    ConstraintMask: DWORD,
};
pub const SECURITY_OBJECT_AI_PARAMS = struct__SECURITY_OBJECT_AI_PARAMS;
pub const PSECURITY_OBJECT_AI_PARAMS = [*c]struct__SECURITY_OBJECT_AI_PARAMS;
pub const struct__OBJECT_TYPE_LIST = extern struct {
    Level: WORD,
    Sbz: WORD,
    ObjectType: [*c]GUID,
};
pub const OBJECT_TYPE_LIST = struct__OBJECT_TYPE_LIST;
pub const POBJECT_TYPE_LIST = [*c]struct__OBJECT_TYPE_LIST;
pub const AuditEventObjectAccess = enum__AUDIT_EVENT_TYPE.AuditEventObjectAccess;
pub const AuditEventDirectoryServiceAccess = enum__AUDIT_EVENT_TYPE.AuditEventDirectoryServiceAccess;
pub const enum__AUDIT_EVENT_TYPE = extern enum {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess,
};
pub const AUDIT_EVENT_TYPE = enum__AUDIT_EVENT_TYPE;
pub const PAUDIT_EVENT_TYPE = [*c]enum__AUDIT_EVENT_TYPE;
pub const struct__PRIVILEGE_SET = extern struct {
    PrivilegeCount: DWORD,
    Control: DWORD,
    Privilege: [1]LUID_AND_ATTRIBUTES,
};
pub const PRIVILEGE_SET = struct__PRIVILEGE_SET;
pub const PPRIVILEGE_SET = [*c]struct__PRIVILEGE_SET;
pub const AccessReasonNone = enum__ACCESS_REASON_TYPE.AccessReasonNone;
pub const AccessReasonAllowedAce = enum__ACCESS_REASON_TYPE.AccessReasonAllowedAce;
pub const AccessReasonDeniedAce = enum__ACCESS_REASON_TYPE.AccessReasonDeniedAce;
pub const AccessReasonAllowedParentAce = enum__ACCESS_REASON_TYPE.AccessReasonAllowedParentAce;
pub const AccessReasonDeniedParentAce = enum__ACCESS_REASON_TYPE.AccessReasonDeniedParentAce;
pub const AccessReasonNotGrantedByCape = enum__ACCESS_REASON_TYPE.AccessReasonNotGrantedByCape;
pub const AccessReasonNotGrantedByParentCape = enum__ACCESS_REASON_TYPE.AccessReasonNotGrantedByParentCape;
pub const AccessReasonNotGrantedToAppContainer = enum__ACCESS_REASON_TYPE.AccessReasonNotGrantedToAppContainer;
pub const AccessReasonMissingPrivilege = enum__ACCESS_REASON_TYPE.AccessReasonMissingPrivilege;
pub const AccessReasonFromPrivilege = enum__ACCESS_REASON_TYPE.AccessReasonFromPrivilege;
pub const AccessReasonIntegrityLevel = enum__ACCESS_REASON_TYPE.AccessReasonIntegrityLevel;
pub const AccessReasonOwnership = enum__ACCESS_REASON_TYPE.AccessReasonOwnership;
pub const AccessReasonNullDacl = enum__ACCESS_REASON_TYPE.AccessReasonNullDacl;
pub const AccessReasonEmptyDacl = enum__ACCESS_REASON_TYPE.AccessReasonEmptyDacl;
pub const AccessReasonNoSD = enum__ACCESS_REASON_TYPE.AccessReasonNoSD;
pub const AccessReasonNoGrant = enum__ACCESS_REASON_TYPE.AccessReasonNoGrant;
pub const AccessReasonTrustLabel = enum__ACCESS_REASON_TYPE.AccessReasonTrustLabel;
pub const AccessReasonFilterAce = enum__ACCESS_REASON_TYPE.AccessReasonFilterAce;
pub const enum__ACCESS_REASON_TYPE = extern enum {
    AccessReasonNone = 0,
    AccessReasonAllowedAce = 65536,
    AccessReasonDeniedAce = 131072,
    AccessReasonAllowedParentAce = 196608,
    AccessReasonDeniedParentAce = 262144,
    AccessReasonNotGrantedByCape = 327680,
    AccessReasonNotGrantedByParentCape = 393216,
    AccessReasonNotGrantedToAppContainer = 458752,
    AccessReasonMissingPrivilege = 1048576,
    AccessReasonFromPrivilege = 2097152,
    AccessReasonIntegrityLevel = 3145728,
    AccessReasonOwnership = 4194304,
    AccessReasonNullDacl = 5242880,
    AccessReasonEmptyDacl = 6291456,
    AccessReasonNoSD = 7340032,
    AccessReasonNoGrant = 8388608,
    AccessReasonTrustLabel = 9437184,
    AccessReasonFilterAce = 10485760,
};
pub const ACCESS_REASON_TYPE = enum__ACCESS_REASON_TYPE;
pub const ACCESS_REASON = DWORD;
pub const struct__ACCESS_REASONS = extern struct {
    Data: [32]ACCESS_REASON,
};
pub const ACCESS_REASONS = struct__ACCESS_REASONS;
pub const PACCESS_REASONS = [*c]struct__ACCESS_REASONS;
pub const struct__SE_SECURITY_DESCRIPTOR = extern struct {
    Size: DWORD,
    Flags: DWORD,
    SecurityDescriptor: PSECURITY_DESCRIPTOR,
};
pub const SE_SECURITY_DESCRIPTOR = struct__SE_SECURITY_DESCRIPTOR;
pub const PSE_SECURITY_DESCRIPTOR = [*c]struct__SE_SECURITY_DESCRIPTOR;
pub const struct__SE_ACCESS_REQUEST = extern struct {
    Size: DWORD,
    SeSecurityDescriptor: PSE_SECURITY_DESCRIPTOR,
    DesiredAccess: ACCESS_MASK,
    PreviouslyGrantedAccess: ACCESS_MASK,
    PrincipalSelfSid: PSID,
    GenericMapping: PGENERIC_MAPPING,
    ObjectTypeListCount: DWORD,
    ObjectTypeList: POBJECT_TYPE_LIST,
};
pub const SE_ACCESS_REQUEST = struct__SE_ACCESS_REQUEST;
pub const PSE_ACCESS_REQUEST = [*c]struct__SE_ACCESS_REQUEST;
pub const struct__SE_ACCESS_REPLY = extern struct {
    Size: DWORD,
    ResultListCount: DWORD,
    GrantedAccess: PACCESS_MASK,
    AccessStatus: PDWORD,
    AccessReason: PACCESS_REASONS,
    Privileges: [*c]PPRIVILEGE_SET,
};
pub const SE_ACCESS_REPLY = struct__SE_ACCESS_REPLY;
pub const PSE_ACCESS_REPLY = [*c]struct__SE_ACCESS_REPLY;
pub const SecurityAnonymous = enum__SECURITY_IMPERSONATION_LEVEL.SecurityAnonymous;
pub const SecurityIdentification = enum__SECURITY_IMPERSONATION_LEVEL.SecurityIdentification;
pub const SecurityImpersonation = enum__SECURITY_IMPERSONATION_LEVEL.SecurityImpersonation;
pub const SecurityDelegation = enum__SECURITY_IMPERSONATION_LEVEL.SecurityDelegation;
pub const enum__SECURITY_IMPERSONATION_LEVEL = extern enum {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation,
};
pub const SECURITY_IMPERSONATION_LEVEL = enum__SECURITY_IMPERSONATION_LEVEL;
pub const PSECURITY_IMPERSONATION_LEVEL = [*c]enum__SECURITY_IMPERSONATION_LEVEL;
pub const TokenPrimary = enum__TOKEN_TYPE.TokenPrimary;
pub const TokenImpersonation = enum__TOKEN_TYPE.TokenImpersonation;
pub const enum__TOKEN_TYPE = extern enum {
    TokenPrimary = 1,
    TokenImpersonation = 2,
};
pub const TOKEN_TYPE = enum__TOKEN_TYPE;
pub const PTOKEN_TYPE = [*c]TOKEN_TYPE;
pub const TokenElevationTypeDefault = enum__TOKEN_ELEVATION_TYPE.TokenElevationTypeDefault;
pub const TokenElevationTypeFull = enum__TOKEN_ELEVATION_TYPE.TokenElevationTypeFull;
pub const TokenElevationTypeLimited = enum__TOKEN_ELEVATION_TYPE.TokenElevationTypeLimited;
pub const enum__TOKEN_ELEVATION_TYPE = extern enum {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull = 2,
    TokenElevationTypeLimited = 3,
};
pub const TOKEN_ELEVATION_TYPE = enum__TOKEN_ELEVATION_TYPE;
pub const PTOKEN_ELEVATION_TYPE = [*c]enum__TOKEN_ELEVATION_TYPE;
pub const TokenUser = enum__TOKEN_INFORMATION_CLASS.TokenUser;
pub const TokenGroups = enum__TOKEN_INFORMATION_CLASS.TokenGroups;
pub const TokenPrivileges = enum__TOKEN_INFORMATION_CLASS.TokenPrivileges;
pub const TokenOwner = enum__TOKEN_INFORMATION_CLASS.TokenOwner;
pub const TokenPrimaryGroup = enum__TOKEN_INFORMATION_CLASS.TokenPrimaryGroup;
pub const TokenDefaultDacl = enum__TOKEN_INFORMATION_CLASS.TokenDefaultDacl;
pub const TokenSource = enum__TOKEN_INFORMATION_CLASS.TokenSource;
pub const TokenType = enum__TOKEN_INFORMATION_CLASS.TokenType;
pub const TokenImpersonationLevel = enum__TOKEN_INFORMATION_CLASS.TokenImpersonationLevel;
pub const TokenStatistics = enum__TOKEN_INFORMATION_CLASS.TokenStatistics;
pub const TokenRestrictedSids = enum__TOKEN_INFORMATION_CLASS.TokenRestrictedSids;
pub const TokenSessionId = enum__TOKEN_INFORMATION_CLASS.TokenSessionId;
pub const TokenGroupsAndPrivileges = enum__TOKEN_INFORMATION_CLASS.TokenGroupsAndPrivileges;
pub const TokenSessionReference = enum__TOKEN_INFORMATION_CLASS.TokenSessionReference;
pub const TokenSandBoxInert = enum__TOKEN_INFORMATION_CLASS.TokenSandBoxInert;
pub const TokenAuditPolicy = enum__TOKEN_INFORMATION_CLASS.TokenAuditPolicy;
pub const TokenOrigin = enum__TOKEN_INFORMATION_CLASS.TokenOrigin;
pub const TokenElevationType = enum__TOKEN_INFORMATION_CLASS.TokenElevationType;
pub const TokenLinkedToken = enum__TOKEN_INFORMATION_CLASS.TokenLinkedToken;
pub const TokenElevation = enum__TOKEN_INFORMATION_CLASS.TokenElevation;
pub const TokenHasRestrictions = enum__TOKEN_INFORMATION_CLASS.TokenHasRestrictions;
pub const TokenAccessInformation = enum__TOKEN_INFORMATION_CLASS.TokenAccessInformation;
pub const TokenVirtualizationAllowed = enum__TOKEN_INFORMATION_CLASS.TokenVirtualizationAllowed;
pub const TokenVirtualizationEnabled = enum__TOKEN_INFORMATION_CLASS.TokenVirtualizationEnabled;
pub const TokenIntegrityLevel = enum__TOKEN_INFORMATION_CLASS.TokenIntegrityLevel;
pub const TokenUIAccess = enum__TOKEN_INFORMATION_CLASS.TokenUIAccess;
pub const TokenMandatoryPolicy = enum__TOKEN_INFORMATION_CLASS.TokenMandatoryPolicy;
pub const TokenLogonSid = enum__TOKEN_INFORMATION_CLASS.TokenLogonSid;
pub const TokenIsAppContainer = enum__TOKEN_INFORMATION_CLASS.TokenIsAppContainer;
pub const TokenCapabilities = enum__TOKEN_INFORMATION_CLASS.TokenCapabilities;
pub const TokenAppContainerSid = enum__TOKEN_INFORMATION_CLASS.TokenAppContainerSid;
pub const TokenAppContainerNumber = enum__TOKEN_INFORMATION_CLASS.TokenAppContainerNumber;
pub const TokenUserClaimAttributes = enum__TOKEN_INFORMATION_CLASS.TokenUserClaimAttributes;
pub const TokenDeviceClaimAttributes = enum__TOKEN_INFORMATION_CLASS.TokenDeviceClaimAttributes;
pub const TokenRestrictedUserClaimAttributes = enum__TOKEN_INFORMATION_CLASS.TokenRestrictedUserClaimAttributes;
pub const TokenRestrictedDeviceClaimAttributes = enum__TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceClaimAttributes;
pub const TokenDeviceGroups = enum__TOKEN_INFORMATION_CLASS.TokenDeviceGroups;
pub const TokenRestrictedDeviceGroups = enum__TOKEN_INFORMATION_CLASS.TokenRestrictedDeviceGroups;
pub const TokenSecurityAttributes = enum__TOKEN_INFORMATION_CLASS.TokenSecurityAttributes;
pub const TokenIsRestricted = enum__TOKEN_INFORMATION_CLASS.TokenIsRestricted;
pub const TokenProcessTrustLevel = enum__TOKEN_INFORMATION_CLASS.TokenProcessTrustLevel;
pub const TokenPrivateNameSpace = enum__TOKEN_INFORMATION_CLASS.TokenPrivateNameSpace;
pub const TokenSingletonAttributes = enum__TOKEN_INFORMATION_CLASS.TokenSingletonAttributes;
pub const TokenBnoIsolation = enum__TOKEN_INFORMATION_CLASS.TokenBnoIsolation;
pub const TokenChildProcessFlags = enum__TOKEN_INFORMATION_CLASS.TokenChildProcessFlags;
pub const TokenIsLessPrivilegedAppContainer = enum__TOKEN_INFORMATION_CLASS.TokenIsLessPrivilegedAppContainer;
pub const TokenIsSandboxed = enum__TOKEN_INFORMATION_CLASS.TokenIsSandboxed;
pub const TokenOriginatingProcessTrustLevel = enum__TOKEN_INFORMATION_CLASS.TokenOriginatingProcessTrustLevel;
pub const MaxTokenInfoClass = enum__TOKEN_INFORMATION_CLASS.MaxTokenInfoClass;
pub const enum__TOKEN_INFORMATION_CLASS = extern enum {
    TokenUser = 1,
    TokenGroups = 2,
    TokenPrivileges = 3,
    TokenOwner = 4,
    TokenPrimaryGroup = 5,
    TokenDefaultDacl = 6,
    TokenSource = 7,
    TokenType = 8,
    TokenImpersonationLevel = 9,
    TokenStatistics = 10,
    TokenRestrictedSids = 11,
    TokenSessionId = 12,
    TokenGroupsAndPrivileges = 13,
    TokenSessionReference = 14,
    TokenSandBoxInert = 15,
    TokenAuditPolicy = 16,
    TokenOrigin = 17,
    TokenElevationType = 18,
    TokenLinkedToken = 19,
    TokenElevation = 20,
    TokenHasRestrictions = 21,
    TokenAccessInformation = 22,
    TokenVirtualizationAllowed = 23,
    TokenVirtualizationEnabled = 24,
    TokenIntegrityLevel = 25,
    TokenUIAccess = 26,
    TokenMandatoryPolicy = 27,
    TokenLogonSid = 28,
    TokenIsAppContainer = 29,
    TokenCapabilities = 30,
    TokenAppContainerSid = 31,
    TokenAppContainerNumber = 32,
    TokenUserClaimAttributes = 33,
    TokenDeviceClaimAttributes = 34,
    TokenRestrictedUserClaimAttributes = 35,
    TokenRestrictedDeviceClaimAttributes = 36,
    TokenDeviceGroups = 37,
    TokenRestrictedDeviceGroups = 38,
    TokenSecurityAttributes = 39,
    TokenIsRestricted = 40,
    TokenProcessTrustLevel = 41,
    TokenPrivateNameSpace = 42,
    TokenSingletonAttributes = 43,
    TokenBnoIsolation = 44,
    TokenChildProcessFlags = 45,
    TokenIsLessPrivilegedAppContainer = 46,
    TokenIsSandboxed = 47,
    TokenOriginatingProcessTrustLevel = 48,
    MaxTokenInfoClass = 49,
};
pub const TOKEN_INFORMATION_CLASS = enum__TOKEN_INFORMATION_CLASS;
pub const PTOKEN_INFORMATION_CLASS = [*c]enum__TOKEN_INFORMATION_CLASS;
pub const struct__TOKEN_USER = extern struct {
    User: SID_AND_ATTRIBUTES,
};
pub const TOKEN_USER = struct__TOKEN_USER;
pub const PTOKEN_USER = [*c]struct__TOKEN_USER;
pub const struct__SE_TOKEN_USER = extern struct {
    @"": extern union {
        TokenUser: TOKEN_USER,
        User: SID_AND_ATTRIBUTES,
    },
    @"": extern union {
        Sid: SID,
        Buffer: [68]BYTE,
    },
};
pub const SE_TOKEN_USER = struct__SE_TOKEN_USER;
pub const PSE_TOKEN_USER = struct__SE_TOKEN_USER;
pub const struct__TOKEN_GROUPS = extern struct {
    GroupCount: DWORD,
    Groups: [1]SID_AND_ATTRIBUTES,
};
pub const TOKEN_GROUPS = struct__TOKEN_GROUPS;
pub const PTOKEN_GROUPS = [*c]struct__TOKEN_GROUPS;
pub const struct__TOKEN_PRIVILEGES = extern struct {
    PrivilegeCount: DWORD,
    Privileges: [1]LUID_AND_ATTRIBUTES,
};
pub const TOKEN_PRIVILEGES = struct__TOKEN_PRIVILEGES;
pub const PTOKEN_PRIVILEGES = [*c]struct__TOKEN_PRIVILEGES;
pub const struct__TOKEN_OWNER = extern struct {
    Owner: PSID,
};
pub const TOKEN_OWNER = struct__TOKEN_OWNER;
pub const PTOKEN_OWNER = [*c]struct__TOKEN_OWNER;
pub const struct__TOKEN_PRIMARY_GROUP = extern struct {
    PrimaryGroup: PSID,
};
pub const TOKEN_PRIMARY_GROUP = struct__TOKEN_PRIMARY_GROUP;
pub const PTOKEN_PRIMARY_GROUP = [*c]struct__TOKEN_PRIMARY_GROUP;
pub const struct__TOKEN_DEFAULT_DACL = extern struct {
    DefaultDacl: PACL,
};
pub const TOKEN_DEFAULT_DACL = struct__TOKEN_DEFAULT_DACL;
pub const PTOKEN_DEFAULT_DACL = [*c]struct__TOKEN_DEFAULT_DACL;
pub const struct__TOKEN_USER_CLAIMS = extern struct {
    UserClaims: PCLAIMS_BLOB,
};
pub const TOKEN_USER_CLAIMS = struct__TOKEN_USER_CLAIMS;
pub const PTOKEN_USER_CLAIMS = [*c]struct__TOKEN_USER_CLAIMS;
pub const struct__TOKEN_DEVICE_CLAIMS = extern struct {
    DeviceClaims: PCLAIMS_BLOB,
};
pub const TOKEN_DEVICE_CLAIMS = struct__TOKEN_DEVICE_CLAIMS;
pub const PTOKEN_DEVICE_CLAIMS = [*c]struct__TOKEN_DEVICE_CLAIMS;
pub const struct__TOKEN_GROUPS_AND_PRIVILEGES = extern struct {
    SidCount: DWORD,
    SidLength: DWORD,
    Sids: PSID_AND_ATTRIBUTES,
    RestrictedSidCount: DWORD,
    RestrictedSidLength: DWORD,
    RestrictedSids: PSID_AND_ATTRIBUTES,
    PrivilegeCount: DWORD,
    PrivilegeLength: DWORD,
    Privileges: PLUID_AND_ATTRIBUTES,
    AuthenticationId: LUID,
};
pub const TOKEN_GROUPS_AND_PRIVILEGES = struct__TOKEN_GROUPS_AND_PRIVILEGES;
pub const PTOKEN_GROUPS_AND_PRIVILEGES = [*c]struct__TOKEN_GROUPS_AND_PRIVILEGES;
pub const struct__TOKEN_LINKED_TOKEN = extern struct {
    LinkedToken: HANDLE,
};
pub const TOKEN_LINKED_TOKEN = struct__TOKEN_LINKED_TOKEN;
pub const PTOKEN_LINKED_TOKEN = [*c]struct__TOKEN_LINKED_TOKEN;
pub const struct__TOKEN_ELEVATION = extern struct {
    TokenIsElevated: DWORD,
};
pub const TOKEN_ELEVATION = struct__TOKEN_ELEVATION;
pub const PTOKEN_ELEVATION = [*c]struct__TOKEN_ELEVATION;
pub const struct__TOKEN_MANDATORY_LABEL = extern struct {
    Label: SID_AND_ATTRIBUTES,
};
pub const TOKEN_MANDATORY_LABEL = struct__TOKEN_MANDATORY_LABEL;
pub const PTOKEN_MANDATORY_LABEL = [*c]struct__TOKEN_MANDATORY_LABEL;
pub const struct__TOKEN_MANDATORY_POLICY = extern struct {
    Policy: DWORD,
};
pub const TOKEN_MANDATORY_POLICY = struct__TOKEN_MANDATORY_POLICY;
pub const PTOKEN_MANDATORY_POLICY = [*c]struct__TOKEN_MANDATORY_POLICY;
pub const PSECURITY_ATTRIBUTES_OPAQUE = PVOID;
pub const struct__TOKEN_ACCESS_INFORMATION = extern struct {
    SidHash: PSID_AND_ATTRIBUTES_HASH,
    RestrictedSidHash: PSID_AND_ATTRIBUTES_HASH,
    Privileges: PTOKEN_PRIVILEGES,
    AuthenticationId: LUID,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    MandatoryPolicy: TOKEN_MANDATORY_POLICY,
    Flags: DWORD,
    AppContainerNumber: DWORD,
    PackageSid: PSID,
    CapabilitiesHash: PSID_AND_ATTRIBUTES_HASH,
    TrustLevelSid: PSID,
    SecurityAttributes: PSECURITY_ATTRIBUTES_OPAQUE,
};
pub const TOKEN_ACCESS_INFORMATION = struct__TOKEN_ACCESS_INFORMATION;
pub const PTOKEN_ACCESS_INFORMATION = [*c]struct__TOKEN_ACCESS_INFORMATION;
pub const struct__TOKEN_AUDIT_POLICY = extern struct {
    PerUserPolicy: [30]BYTE,
};
pub const TOKEN_AUDIT_POLICY = struct__TOKEN_AUDIT_POLICY;
pub const PTOKEN_AUDIT_POLICY = [*c]struct__TOKEN_AUDIT_POLICY;
pub const struct__TOKEN_SOURCE = extern struct {
    SourceName: [8]CHAR,
    SourceIdentifier: LUID,
};
pub const TOKEN_SOURCE = struct__TOKEN_SOURCE;
pub const PTOKEN_SOURCE = [*c]struct__TOKEN_SOURCE;
pub const struct__TOKEN_STATISTICS = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ExpirationTime: LARGE_INTEGER,
    TokenType: TOKEN_TYPE,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    DynamicCharged: DWORD,
    DynamicAvailable: DWORD,
    GroupCount: DWORD,
    PrivilegeCount: DWORD,
    ModifiedId: LUID,
};
pub const TOKEN_STATISTICS = struct__TOKEN_STATISTICS;
pub const PTOKEN_STATISTICS = [*c]struct__TOKEN_STATISTICS;
pub const struct__TOKEN_CONTROL = extern struct {
    TokenId: LUID,
    AuthenticationId: LUID,
    ModifiedId: LUID,
    TokenSource: TOKEN_SOURCE,
};
pub const TOKEN_CONTROL = struct__TOKEN_CONTROL;
pub const PTOKEN_CONTROL = [*c]struct__TOKEN_CONTROL;
pub const struct__TOKEN_ORIGIN = extern struct {
    OriginatingLogonSession: LUID,
};
pub const TOKEN_ORIGIN = struct__TOKEN_ORIGIN;
pub const PTOKEN_ORIGIN = [*c]struct__TOKEN_ORIGIN;
pub const MandatoryLevelUntrusted = enum__MANDATORY_LEVEL.MandatoryLevelUntrusted;
pub const MandatoryLevelLow = enum__MANDATORY_LEVEL.MandatoryLevelLow;
pub const MandatoryLevelMedium = enum__MANDATORY_LEVEL.MandatoryLevelMedium;
pub const MandatoryLevelHigh = enum__MANDATORY_LEVEL.MandatoryLevelHigh;
pub const MandatoryLevelSystem = enum__MANDATORY_LEVEL.MandatoryLevelSystem;
pub const MandatoryLevelSecureProcess = enum__MANDATORY_LEVEL.MandatoryLevelSecureProcess;
pub const MandatoryLevelCount = enum__MANDATORY_LEVEL.MandatoryLevelCount;
pub const enum__MANDATORY_LEVEL = extern enum {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow = 1,
    MandatoryLevelMedium = 2,
    MandatoryLevelHigh = 3,
    MandatoryLevelSystem = 4,
    MandatoryLevelSecureProcess = 5,
    MandatoryLevelCount = 6,
};
pub const MANDATORY_LEVEL = enum__MANDATORY_LEVEL;
pub const PMANDATORY_LEVEL = [*c]enum__MANDATORY_LEVEL;
pub const struct__TOKEN_APPCONTAINER_INFORMATION = extern struct {
    TokenAppContainer: PSID,
};
pub const TOKEN_APPCONTAINER_INFORMATION = struct__TOKEN_APPCONTAINER_INFORMATION;
pub const PTOKEN_APPCONTAINER_INFORMATION = [*c]struct__TOKEN_APPCONTAINER_INFORMATION;
pub const struct__TOKEN_SID_INFORMATION = extern struct {
    Sid: PSID,
};
pub const TOKEN_SID_INFORMATION = struct__TOKEN_SID_INFORMATION;
pub const PTOKEN_SID_INFORMATION = [*c]struct__TOKEN_SID_INFORMATION;
pub const struct__TOKEN_BNO_ISOLATION_INFORMATION = extern struct {
    IsolationPrefix: PWSTR,
    IsolationEnabled: BOOLEAN,
};
pub const TOKEN_BNO_ISOLATION_INFORMATION = struct__TOKEN_BNO_ISOLATION_INFORMATION;
pub const PTOKEN_BNO_ISOLATION_INFORMATION = [*c]struct__TOKEN_BNO_ISOLATION_INFORMATION;
pub const struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = extern struct {
    Version: DWORD64,
    Name: PWSTR,
};
pub const CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
pub const PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = [*c]struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
pub const struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = extern struct {
    pValue: PVOID,
    ValueLength: DWORD,
};
pub const CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
pub const PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = [*c]struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
pub const struct__CLAIM_SECURITY_ATTRIBUTE_V1 = extern struct {
    Name: PWSTR,
    ValueType: WORD,
    Reserved: WORD,
    Flags: DWORD,
    ValueCount: DWORD,
    Values: extern union {
        pInt64: PLONG64,
        pUint64: PDWORD64,
        ppString: [*c]PWSTR,
        pFqbn: PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE,
        pOctetString: PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    },
};
pub const CLAIM_SECURITY_ATTRIBUTE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_V1;
pub const PCLAIM_SECURITY_ATTRIBUTE_V1 = [*c]struct__CLAIM_SECURITY_ATTRIBUTE_V1;
pub const struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = extern struct {
    Name: DWORD,
    ValueType: WORD,
    Reserved: WORD,
    Flags: DWORD,
    ValueCount: DWORD,
    Values: extern union {
        pInt64: [1]DWORD,
        pUint64: [1]DWORD,
        ppString: [1]DWORD,
        pFqbn: [1]DWORD,
        pOctetString: [1]DWORD,
    },
};
pub const CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
pub const PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = [*c]struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
pub const struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION = extern struct {
    Version: WORD,
    Reserved: WORD,
    AttributeCount: DWORD,
    Attribute: extern union {
        pAttributeV1: PCLAIM_SECURITY_ATTRIBUTE_V1,
    },
};
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub const PCLAIM_SECURITY_ATTRIBUTES_INFORMATION = [*c]struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub const SECURITY_CONTEXT_TRACKING_MODE = BOOLEAN;
pub const PSECURITY_CONTEXT_TRACKING_MODE = [*c]BOOLEAN;
pub const struct__SECURITY_QUALITY_OF_SERVICE = extern struct {
    Length: DWORD,
    ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ContextTrackingMode: SECURITY_CONTEXT_TRACKING_MODE,
    EffectiveOnly: BOOLEAN,
};
pub const SECURITY_QUALITY_OF_SERVICE = struct__SECURITY_QUALITY_OF_SERVICE;
pub const PSECURITY_QUALITY_OF_SERVICE = [*c]struct__SECURITY_QUALITY_OF_SERVICE;
pub const struct__SE_IMPERSONATION_STATE = extern struct {
    Token: PACCESS_TOKEN,
    CopyOnOpen: BOOLEAN,
    EffectiveOnly: BOOLEAN,
    Level: SECURITY_IMPERSONATION_LEVEL,
};
pub const SE_IMPERSONATION_STATE = struct__SE_IMPERSONATION_STATE;
pub const PSE_IMPERSONATION_STATE = [*c]struct__SE_IMPERSONATION_STATE;
pub const SECURITY_INFORMATION = DWORD;
pub const PSECURITY_INFORMATION = [*c]DWORD;
pub const SE_SIGNING_LEVEL = BYTE;
pub const PSE_SIGNING_LEVEL = [*c]BYTE;
pub const SeImageSignatureNone = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureNone;
pub const SeImageSignatureEmbedded = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureEmbedded;
pub const SeImageSignatureCache = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureCache;
pub const SeImageSignatureCatalogCached = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureCatalogCached;
pub const SeImageSignatureCatalogNotCached = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureCatalogNotCached;
pub const SeImageSignatureCatalogHint = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignatureCatalogHint;
pub const SeImageSignaturePackageCatalog = enum__SE_IMAGE_SIGNATURE_TYPE.SeImageSignaturePackageCatalog;
pub const enum__SE_IMAGE_SIGNATURE_TYPE = extern enum {
    SeImageSignatureNone = 0,
    SeImageSignatureEmbedded = 1,
    SeImageSignatureCache = 2,
    SeImageSignatureCatalogCached = 3,
    SeImageSignatureCatalogNotCached = 4,
    SeImageSignatureCatalogHint = 5,
    SeImageSignaturePackageCatalog = 6,
};
pub const SE_IMAGE_SIGNATURE_TYPE = enum__SE_IMAGE_SIGNATURE_TYPE;
pub const PSE_IMAGE_SIGNATURE_TYPE = [*c]enum__SE_IMAGE_SIGNATURE_TYPE;
pub const SeLearningModeInvalidType = enum__SE_LEARNING_MODE_DATA_TYPE.SeLearningModeInvalidType;
pub const SeLearningModeSettings = enum__SE_LEARNING_MODE_DATA_TYPE.SeLearningModeSettings;
pub const SeLearningModeMax = enum__SE_LEARNING_MODE_DATA_TYPE.SeLearningModeMax;
pub const enum__SE_LEARNING_MODE_DATA_TYPE = extern enum {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings = 1,
    SeLearningModeMax = 2,
};
pub const SE_LEARNING_MODE_DATA_TYPE = enum__SE_LEARNING_MODE_DATA_TYPE;
pub const struct__SECURITY_CAPABILITIES = extern struct {
    AppContainerSid: PSID,
    Capabilities: PSID_AND_ATTRIBUTES,
    CapabilityCount: DWORD,
    Reserved: DWORD,
};
pub const SECURITY_CAPABILITIES = struct__SECURITY_CAPABILITIES;
pub const PSECURITY_CAPABILITIES = [*c]struct__SECURITY_CAPABILITIES;
pub const LPSECURITY_CAPABILITIES = [*c]struct__SECURITY_CAPABILITIES;
pub const struct__JOB_SET_ARRAY = extern struct {
    JobHandle: HANDLE,
    MemberLevel: DWORD,
    Flags: DWORD,
};
pub const JOB_SET_ARRAY = struct__JOB_SET_ARRAY;
pub const PJOB_SET_ARRAY = [*c]struct__JOB_SET_ARRAY;
pub const struct__EXCEPTION_REGISTRATION_RECORD = extern struct {
    Next: [*c]struct__EXCEPTION_REGISTRATION_RECORD,
    Handler: PEXCEPTION_ROUTINE,
};
pub const EXCEPTION_REGISTRATION_RECORD = struct__EXCEPTION_REGISTRATION_RECORD;
pub const PEXCEPTION_REGISTRATION_RECORD = [*c]EXCEPTION_REGISTRATION_RECORD;
pub const struct__NT_TIB = extern struct {
    ExceptionList: [*c]struct__EXCEPTION_REGISTRATION_RECORD,
    StackBase: PVOID,
    StackLimit: PVOID,
    SubSystemTib: PVOID,
    @"": extern union {
        FiberData: PVOID,
        Version: DWORD,
    },
    ArbitraryUserPointer: PVOID,
    Self: [*c]struct__NT_TIB,
};
pub const NT_TIB = struct__NT_TIB;
pub const PNT_TIB = [*c]NT_TIB;
pub const struct__NT_TIB32 = extern struct {
    ExceptionList: DWORD,
    StackBase: DWORD,
    StackLimit: DWORD,
    SubSystemTib: DWORD,
    @"": extern union {
        FiberData: DWORD,
        Version: DWORD,
    },
    ArbitraryUserPointer: DWORD,
    Self: DWORD,
};
pub const NT_TIB32 = struct__NT_TIB32;
pub const PNT_TIB32 = [*c]struct__NT_TIB32;
pub const struct__NT_TIB64 = extern struct {
    ExceptionList: DWORD64,
    StackBase: DWORD64,
    StackLimit: DWORD64,
    SubSystemTib: DWORD64,
    @"": extern union {
        FiberData: DWORD64,
        Version: DWORD,
    },
    ArbitraryUserPointer: DWORD64,
    Self: DWORD64,
};
pub const NT_TIB64 = struct__NT_TIB64;
pub const PNT_TIB64 = [*c]struct__NT_TIB64;
pub const struct__UMS_CREATE_THREAD_ATTRIBUTES = extern struct {
    UmsVersion: DWORD,
    UmsContext: PVOID,
    UmsCompletionList: PVOID,
};
pub const UMS_CREATE_THREAD_ATTRIBUTES = struct__UMS_CREATE_THREAD_ATTRIBUTES;
pub const PUMS_CREATE_THREAD_ATTRIBUTES = [*c]struct__UMS_CREATE_THREAD_ATTRIBUTES;
pub const struct__WOW64_ARCHITECTURE_INFORMATION = opaque {};
pub const WOW64_ARCHITECTURE_INFORMATION = struct__WOW64_ARCHITECTURE_INFORMATION;
pub const struct__QUOTA_LIMITS = extern struct {
    PagedPoolLimit: SIZE_T,
    NonPagedPoolLimit: SIZE_T,
    MinimumWorkingSetSize: SIZE_T,
    MaximumWorkingSetSize: SIZE_T,
    PagefileLimit: SIZE_T,
    TimeLimit: LARGE_INTEGER,
};
pub const QUOTA_LIMITS = struct__QUOTA_LIMITS;
pub const PQUOTA_LIMITS = [*c]struct__QUOTA_LIMITS;
pub const union__RATE_QUOTA_LIMIT = extern union {
    RateData: DWORD,
    @"": opaque {},
};
pub const RATE_QUOTA_LIMIT = union__RATE_QUOTA_LIMIT;
pub const PRATE_QUOTA_LIMIT = [*c]union__RATE_QUOTA_LIMIT;
pub const struct__QUOTA_LIMITS_EX = extern struct {
    PagedPoolLimit: SIZE_T,
    NonPagedPoolLimit: SIZE_T,
    MinimumWorkingSetSize: SIZE_T,
    MaximumWorkingSetSize: SIZE_T,
    PagefileLimit: SIZE_T,
    TimeLimit: LARGE_INTEGER,
    WorkingSetLimit: SIZE_T,
    Reserved2: SIZE_T,
    Reserved3: SIZE_T,
    Reserved4: SIZE_T,
    Flags: DWORD,
    CpuRateLimit: RATE_QUOTA_LIMIT,
};
pub const QUOTA_LIMITS_EX = struct__QUOTA_LIMITS_EX;
pub const PQUOTA_LIMITS_EX = [*c]struct__QUOTA_LIMITS_EX;
pub const struct__IO_COUNTERS = extern struct {
    ReadOperationCount: ULONGLONG,
    WriteOperationCount: ULONGLONG,
    OtherOperationCount: ULONGLONG,
    ReadTransferCount: ULONGLONG,
    WriteTransferCount: ULONGLONG,
    OtherTransferCount: ULONGLONG,
};
pub const IO_COUNTERS = struct__IO_COUNTERS;
pub const PIO_COUNTERS = [*c]IO_COUNTERS;
pub const PMCCounter = enum__HARDWARE_COUNTER_TYPE.PMCCounter;
pub const MaxHardwareCounterType = enum__HARDWARE_COUNTER_TYPE.MaxHardwareCounterType;
pub const enum__HARDWARE_COUNTER_TYPE = extern enum {
    PMCCounter,
    MaxHardwareCounterType,
};
pub const HARDWARE_COUNTER_TYPE = enum__HARDWARE_COUNTER_TYPE;
pub const PHARDWARE_COUNTER_TYPE = [*c]enum__HARDWARE_COUNTER_TYPE;
pub const ProcessDEPPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessDEPPolicy;
pub const ProcessASLRPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessASLRPolicy;
pub const ProcessDynamicCodePolicy = enum__PROCESS_MITIGATION_POLICY.ProcessDynamicCodePolicy;
pub const ProcessStrictHandleCheckPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessStrictHandleCheckPolicy;
pub const ProcessSystemCallDisablePolicy = enum__PROCESS_MITIGATION_POLICY.ProcessSystemCallDisablePolicy;
pub const ProcessMitigationOptionsMask = enum__PROCESS_MITIGATION_POLICY.ProcessMitigationOptionsMask;
pub const ProcessExtensionPointDisablePolicy = enum__PROCESS_MITIGATION_POLICY.ProcessExtensionPointDisablePolicy;
pub const ProcessControlFlowGuardPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessControlFlowGuardPolicy;
pub const ProcessSignaturePolicy = enum__PROCESS_MITIGATION_POLICY.ProcessSignaturePolicy;
pub const ProcessFontDisablePolicy = enum__PROCESS_MITIGATION_POLICY.ProcessFontDisablePolicy;
pub const ProcessImageLoadPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessImageLoadPolicy;
pub const ProcessSystemCallFilterPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessSystemCallFilterPolicy;
pub const ProcessPayloadRestrictionPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessPayloadRestrictionPolicy;
pub const ProcessChildProcessPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessChildProcessPolicy;
pub const ProcessSideChannelIsolationPolicy = enum__PROCESS_MITIGATION_POLICY.ProcessSideChannelIsolationPolicy;
pub const MaxProcessMitigationPolicy = enum__PROCESS_MITIGATION_POLICY.MaxProcessMitigationPolicy;
pub const enum__PROCESS_MITIGATION_POLICY = extern enum {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessDynamicCodePolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    ProcessControlFlowGuardPolicy,
    ProcessSignaturePolicy,
    ProcessFontDisablePolicy,
    ProcessImageLoadPolicy,
    ProcessSystemCallFilterPolicy,
    ProcessPayloadRestrictionPolicy,
    ProcessChildProcessPolicy,
    ProcessSideChannelIsolationPolicy,
    MaxProcessMitigationPolicy,
};
pub const PROCESS_MITIGATION_POLICY = enum__PROCESS_MITIGATION_POLICY;
pub const PPROCESS_MITIGATION_POLICY = [*c]enum__PROCESS_MITIGATION_POLICY;
pub const struct__PROCESS_MITIGATION_ASLR_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_ASLR_POLICY = struct__PROCESS_MITIGATION_ASLR_POLICY;
pub const PPROCESS_MITIGATION_ASLR_POLICY = [*c]struct__PROCESS_MITIGATION_ASLR_POLICY;
pub const struct__PROCESS_MITIGATION_DEP_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
    Permanent: BOOLEAN,
};
pub const PROCESS_MITIGATION_DEP_POLICY = struct__PROCESS_MITIGATION_DEP_POLICY;
pub const PPROCESS_MITIGATION_DEP_POLICY = [*c]struct__PROCESS_MITIGATION_DEP_POLICY;
pub const struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
pub const PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = [*c]struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
pub const struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
pub const PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = [*c]struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
pub const struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
pub const PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = [*c]struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
pub const struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
pub const PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY = [*c]struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
pub const struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
pub const PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = [*c]struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
pub const struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
pub const PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = [*c]struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
pub const struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY;
pub const PPROCESS_MITIGATION_FONT_DISABLE_POLICY = [*c]struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY;
pub const struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
pub const PPROCESS_MITIGATION_IMAGE_LOAD_POLICY = [*c]struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
pub const struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
pub const PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = [*c]struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
pub const struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
pub const PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = [*c]struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
pub const struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_CHILD_PROCESS_POLICY = struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
pub const PPROCESS_MITIGATION_CHILD_PROCESS_POLICY = [*c]struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
pub const struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = extern struct {
    @"": extern union {
        Flags: DWORD,
        @"": opaque {},
    },
};
pub const PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
pub const PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = [*c]struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
pub const struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = extern struct {
    TotalUserTime: LARGE_INTEGER,
    TotalKernelTime: LARGE_INTEGER,
    ThisPeriodTotalUserTime: LARGE_INTEGER,
    ThisPeriodTotalKernelTime: LARGE_INTEGER,
    TotalPageFaultCount: DWORD,
    TotalProcesses: DWORD,
    ActiveProcesses: DWORD,
    TotalTerminatedProcesses: DWORD,
};
pub const JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
pub const PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION = [*c]struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
pub const struct__JOBOBJECT_BASIC_LIMIT_INFORMATION = extern struct {
    PerProcessUserTimeLimit: LARGE_INTEGER,
    PerJobUserTimeLimit: LARGE_INTEGER,
    LimitFlags: DWORD,
    MinimumWorkingSetSize: SIZE_T,
    MaximumWorkingSetSize: SIZE_T,
    ActiveProcessLimit: DWORD,
    Affinity: ULONG_PTR,
    PriorityClass: DWORD,
    SchedulingClass: DWORD,
};
pub const JOBOBJECT_BASIC_LIMIT_INFORMATION = struct__JOBOBJECT_BASIC_LIMIT_INFORMATION;
pub const PJOBOBJECT_BASIC_LIMIT_INFORMATION = [*c]struct__JOBOBJECT_BASIC_LIMIT_INFORMATION;
pub const struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION = extern struct {
    BasicLimitInformation: JOBOBJECT_BASIC_LIMIT_INFORMATION,
    IoInfo: IO_COUNTERS,
    ProcessMemoryLimit: SIZE_T,
    JobMemoryLimit: SIZE_T,
    PeakProcessMemoryUsed: SIZE_T,
    PeakJobMemoryUsed: SIZE_T,
};
pub const JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
pub const PJOBOBJECT_EXTENDED_LIMIT_INFORMATION = [*c]struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
pub const struct__JOBOBJECT_BASIC_PROCESS_ID_LIST = extern struct {
    NumberOfAssignedProcesses: DWORD,
    NumberOfProcessIdsInList: DWORD,
    ProcessIdList: [1]ULONG_PTR,
};
pub const JOBOBJECT_BASIC_PROCESS_ID_LIST = struct__JOBOBJECT_BASIC_PROCESS_ID_LIST;
pub const PJOBOBJECT_BASIC_PROCESS_ID_LIST = [*c]struct__JOBOBJECT_BASIC_PROCESS_ID_LIST;
pub const struct__JOBOBJECT_BASIC_UI_RESTRICTIONS = extern struct {
    UIRestrictionsClass: DWORD,
};
pub const JOBOBJECT_BASIC_UI_RESTRICTIONS = struct__JOBOBJECT_BASIC_UI_RESTRICTIONS;
pub const PJOBOBJECT_BASIC_UI_RESTRICTIONS = [*c]struct__JOBOBJECT_BASIC_UI_RESTRICTIONS;
pub const struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION = extern struct {
    SecurityLimitFlags: DWORD,
    JobToken: HANDLE,
    SidsToDisable: PTOKEN_GROUPS,
    PrivilegesToDelete: PTOKEN_PRIVILEGES,
    RestrictedSids: PTOKEN_GROUPS,
};
pub const JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION;
pub const PJOBOBJECT_SECURITY_LIMIT_INFORMATION = [*c]struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION;
pub const struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION = extern struct {
    EndOfJobTimeAction: DWORD,
};
pub const JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
pub const PJOBOBJECT_END_OF_JOB_TIME_INFORMATION = [*c]struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
pub const struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT = extern struct {
    CompletionKey: PVOID,
    CompletionPort: HANDLE,
};
pub const JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
pub const PJOBOBJECT_ASSOCIATE_COMPLETION_PORT = [*c]struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
pub const struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = extern struct {
    BasicInfo: JOBOBJECT_BASIC_ACCOUNTING_INFORMATION,
    IoInfo: IO_COUNTERS,
};
pub const JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
pub const PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = [*c]struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
pub const struct__JOBOBJECT_JOBSET_INFORMATION = extern struct {
    MemberLevel: DWORD,
};
pub const JOBOBJECT_JOBSET_INFORMATION = struct__JOBOBJECT_JOBSET_INFORMATION;
pub const PJOBOBJECT_JOBSET_INFORMATION = [*c]struct__JOBOBJECT_JOBSET_INFORMATION;
pub const ToleranceLow = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE.ToleranceLow;
pub const ToleranceMedium = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE.ToleranceMedium;
pub const ToleranceHigh = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE.ToleranceHigh;
pub const enum__JOBOBJECT_RATE_CONTROL_TOLERANCE = extern enum {
    ToleranceLow = 1,
    ToleranceMedium = 2,
    ToleranceHigh = 3,
};
pub const JOBOBJECT_RATE_CONTROL_TOLERANCE = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub const PJOBOBJECT_RATE_CONTROL_TOLERANCE = [*c]enum__JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub const ToleranceIntervalShort = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL.ToleranceIntervalShort;
pub const ToleranceIntervalMedium = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL.ToleranceIntervalMedium;
pub const ToleranceIntervalLong = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL.ToleranceIntervalLong;
pub const enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = extern enum {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium = 2,
    ToleranceIntervalLong = 3,
};
pub const JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
pub const PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = [*c]enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
pub const struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = extern struct {
    IoReadBytesLimit: DWORD64,
    IoWriteBytesLimit: DWORD64,
    PerJobUserTimeLimit: LARGE_INTEGER,
    JobMemoryLimit: DWORD64,
    RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    LimitFlags: DWORD,
};
pub const JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
pub const PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = [*c]struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
pub const struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = extern struct {
    IoReadBytesLimit: DWORD64,
    IoWriteBytesLimit: DWORD64,
    PerJobUserTimeLimit: LARGE_INTEGER,
    @"": extern union {
        JobHighMemoryLimit: DWORD64,
        JobMemoryLimit: DWORD64,
    },
    @"": extern union {
        RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
        CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    },
    @"": extern union {
        RateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
        CpuRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    },
    LimitFlags: DWORD,
    IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    JobLowMemoryLimit: DWORD64,
    IoRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
    NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlToleranceInterval: JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
};
pub const JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 = struct_JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
pub const struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION = extern struct {
    LimitFlags: DWORD,
    ViolationLimitFlags: DWORD,
    IoReadBytes: DWORD64,
    IoReadBytesLimit: DWORD64,
    IoWriteBytes: DWORD64,
    IoWriteBytesLimit: DWORD64,
    PerJobUserTime: LARGE_INTEGER,
    PerJobUserTimeLimit: LARGE_INTEGER,
    JobMemory: DWORD64,
    JobMemoryLimit: DWORD64,
    RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
};
pub const JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
pub const PJOBOBJECT_LIMIT_VIOLATION_INFORMATION = [*c]struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
pub const struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = extern struct {
    LimitFlags: DWORD,
    ViolationLimitFlags: DWORD,
    IoReadBytes: DWORD64,
    IoReadBytesLimit: DWORD64,
    IoWriteBytes: DWORD64,
    IoWriteBytesLimit: DWORD64,
    PerJobUserTime: LARGE_INTEGER,
    PerJobUserTimeLimit: LARGE_INTEGER,
    JobMemory: DWORD64,
    @"": extern union {
        JobHighMemoryLimit: DWORD64,
        JobMemoryLimit: DWORD64,
    },
    @"": extern union {
        RateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
        CpuRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    },
    @"": extern union {
        RateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
        CpuRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    },
    JobLowMemoryLimit: DWORD64,
    IoRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    IoRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlTolerance: JOBOBJECT_RATE_CONTROL_TOLERANCE,
    NetRateControlToleranceLimit: JOBOBJECT_RATE_CONTROL_TOLERANCE,
};
pub const JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 = struct_JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
pub const struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = extern struct {
    ControlFlags: DWORD,
    @"": extern union {
        CpuRate: DWORD,
        Weight: DWORD,
        @"": extern struct {
            MinRate: WORD,
            MaxRate: WORD,
        },
    },
};
pub const JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub const PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION = [*c]struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub const JOB_OBJECT_NET_RATE_CONTROL_ENABLE = enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS.JOB_OBJECT_NET_RATE_CONTROL_ENABLE;
pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS.JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH;
pub const JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS.JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG;
pub const JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS.JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS;
pub const enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS = extern enum {
    JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 2,
    JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 4,
    JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 7,
};
pub const JOB_OBJECT_NET_RATE_CONTROL_FLAGS = enum_JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
pub const struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION = extern struct {
    MaxBandwidth: DWORD64,
    ControlFlags: JOB_OBJECT_NET_RATE_CONTROL_FLAGS,
    DscpTag: BYTE,
};
pub const JOBOBJECT_NET_RATE_CONTROL_INFORMATION = struct_JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
pub const JOB_OBJECT_IO_RATE_CONTROL_ENABLE = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS.JOB_OBJECT_IO_RATE_CONTROL_ENABLE;
pub const JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS.JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME;
pub const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS.JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL;
pub const JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS.JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP;
pub const JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS.JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS;
pub const enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS = extern enum {
    JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 1,
    JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 2,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 4,
    JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 8,
    JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = 15,
};
pub const JOB_OBJECT_IO_RATE_CONTROL_FLAGS = enum_JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
pub const struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE = extern struct {
    MaxIops: LONG64,
    MaxBandwidth: LONG64,
    ReservationIops: LONG64,
    VolumeName: PWSTR,
    BaseIoSize: DWORD,
    ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: WORD,
};
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE = struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1 = JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
pub const struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = extern struct {
    MaxIops: LONG64,
    MaxBandwidth: LONG64,
    ReservationIops: LONG64,
    VolumeName: PWSTR,
    BaseIoSize: DWORD,
    ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: WORD,
    CriticalReservationIops: LONG64,
    ReservationBandwidth: LONG64,
    CriticalReservationBandwidth: LONG64,
    MaxTimePercent: LONG64,
    ReservationTimePercent: LONG64,
    CriticalReservationTimePercent: LONG64,
};
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 = struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
pub const struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = extern struct {
    MaxIops: LONG64,
    MaxBandwidth: LONG64,
    ReservationIops: LONG64,
    VolumeName: PWSTR,
    BaseIoSize: DWORD,
    ControlFlags: JOB_OBJECT_IO_RATE_CONTROL_FLAGS,
    VolumeNameLength: WORD,
    CriticalReservationIops: LONG64,
    ReservationBandwidth: LONG64,
    CriticalReservationBandwidth: LONG64,
    MaxTimePercent: LONG64,
    ReservationTimePercent: LONG64,
    CriticalReservationTimePercent: LONG64,
    SoftMaxIops: LONG64,
    SoftMaxBandwidth: LONG64,
    SoftMaxTimePercent: LONG64,
    LimitExcessNotifyIops: LONG64,
    LimitExcessNotifyBandwidth: LONG64,
    LimitExcessNotifyTimePercent: LONG64,
};
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 = struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = enum_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS.JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = enum_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS.JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE;
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = enum_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS.JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS;
pub const enum_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = extern enum {
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 1,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 2,
    JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 3,
};
pub const JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS = enum_JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;
pub const struct__JOBOBJECT_IO_ATTRIBUTION_STATS = extern struct {
    IoCount: ULONG_PTR,
    TotalNonOverlappedQueueTime: ULONGLONG,
    TotalNonOverlappedServiceTime: ULONGLONG,
    TotalSize: ULONGLONG,
};
pub const JOBOBJECT_IO_ATTRIBUTION_STATS = struct__JOBOBJECT_IO_ATTRIBUTION_STATS;
pub const PJOBOBJECT_IO_ATTRIBUTION_STATS = [*c]struct__JOBOBJECT_IO_ATTRIBUTION_STATS;
pub const struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION = extern struct {
    ControlFlags: DWORD,
    ReadStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
    WriteStats: JOBOBJECT_IO_ATTRIBUTION_STATS,
};
pub const JOBOBJECT_IO_ATTRIBUTION_INFORMATION = struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub const PJOBOBJECT_IO_ATTRIBUTION_INFORMATION = [*c]struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub const JobObjectBasicAccountingInformation = enum__JOBOBJECTINFOCLASS.JobObjectBasicAccountingInformation;
pub const JobObjectBasicLimitInformation = enum__JOBOBJECTINFOCLASS.JobObjectBasicLimitInformation;
pub const JobObjectBasicProcessIdList = enum__JOBOBJECTINFOCLASS.JobObjectBasicProcessIdList;
pub const JobObjectBasicUIRestrictions = enum__JOBOBJECTINFOCLASS.JobObjectBasicUIRestrictions;
pub const JobObjectSecurityLimitInformation = enum__JOBOBJECTINFOCLASS.JobObjectSecurityLimitInformation;
pub const JobObjectEndOfJobTimeInformation = enum__JOBOBJECTINFOCLASS.JobObjectEndOfJobTimeInformation;
pub const JobObjectAssociateCompletionPortInformation = enum__JOBOBJECTINFOCLASS.JobObjectAssociateCompletionPortInformation;
pub const JobObjectBasicAndIoAccountingInformation = enum__JOBOBJECTINFOCLASS.JobObjectBasicAndIoAccountingInformation;
pub const JobObjectExtendedLimitInformation = enum__JOBOBJECTINFOCLASS.JobObjectExtendedLimitInformation;
pub const JobObjectJobSetInformation = enum__JOBOBJECTINFOCLASS.JobObjectJobSetInformation;
pub const JobObjectGroupInformation = enum__JOBOBJECTINFOCLASS.JobObjectGroupInformation;
pub const JobObjectNotificationLimitInformation = enum__JOBOBJECTINFOCLASS.JobObjectNotificationLimitInformation;
pub const JobObjectLimitViolationInformation = enum__JOBOBJECTINFOCLASS.JobObjectLimitViolationInformation;
pub const JobObjectGroupInformationEx = enum__JOBOBJECTINFOCLASS.JobObjectGroupInformationEx;
pub const JobObjectCpuRateControlInformation = enum__JOBOBJECTINFOCLASS.JobObjectCpuRateControlInformation;
pub const JobObjectCompletionFilter = enum__JOBOBJECTINFOCLASS.JobObjectCompletionFilter;
pub const JobObjectCompletionCounter = enum__JOBOBJECTINFOCLASS.JobObjectCompletionCounter;
pub const JobObjectReserved1Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved1Information;
pub const JobObjectReserved2Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved2Information;
pub const JobObjectReserved3Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved3Information;
pub const JobObjectReserved4Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved4Information;
pub const JobObjectReserved5Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved5Information;
pub const JobObjectReserved6Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved6Information;
pub const JobObjectReserved7Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved7Information;
pub const JobObjectReserved8Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved8Information;
pub const JobObjectReserved9Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved9Information;
pub const JobObjectReserved10Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved10Information;
pub const JobObjectReserved11Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved11Information;
pub const JobObjectReserved12Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved12Information;
pub const JobObjectReserved13Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved13Information;
pub const JobObjectReserved14Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved14Information;
pub const JobObjectNetRateControlInformation = enum__JOBOBJECTINFOCLASS.JobObjectNetRateControlInformation;
pub const JobObjectNotificationLimitInformation2 = enum__JOBOBJECTINFOCLASS.JobObjectNotificationLimitInformation2;
pub const JobObjectLimitViolationInformation2 = enum__JOBOBJECTINFOCLASS.JobObjectLimitViolationInformation2;
pub const JobObjectCreateSilo = enum__JOBOBJECTINFOCLASS.JobObjectCreateSilo;
pub const JobObjectSiloBasicInformation = enum__JOBOBJECTINFOCLASS.JobObjectSiloBasicInformation;
pub const JobObjectReserved15Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved15Information;
pub const JobObjectReserved16Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved16Information;
pub const JobObjectReserved17Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved17Information;
pub const JobObjectReserved18Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved18Information;
pub const JobObjectReserved19Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved19Information;
pub const JobObjectReserved20Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved20Information;
pub const JobObjectReserved21Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved21Information;
pub const JobObjectReserved22Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved22Information;
pub const JobObjectReserved23Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved23Information;
pub const JobObjectReserved24Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved24Information;
pub const JobObjectReserved25Information = enum__JOBOBJECTINFOCLASS.JobObjectReserved25Information;
pub const MaxJobObjectInfoClass = enum__JOBOBJECTINFOCLASS.MaxJobObjectInfoClass;
pub const enum__JOBOBJECTINFOCLASS = extern enum {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation = 2,
    JobObjectBasicProcessIdList = 3,
    JobObjectBasicUIRestrictions = 4,
    JobObjectSecurityLimitInformation = 5,
    JobObjectEndOfJobTimeInformation = 6,
    JobObjectAssociateCompletionPortInformation = 7,
    JobObjectBasicAndIoAccountingInformation = 8,
    JobObjectExtendedLimitInformation = 9,
    JobObjectJobSetInformation = 10,
    JobObjectGroupInformation = 11,
    JobObjectNotificationLimitInformation = 12,
    JobObjectLimitViolationInformation = 13,
    JobObjectGroupInformationEx = 14,
    JobObjectCpuRateControlInformation = 15,
    JobObjectCompletionFilter = 16,
    JobObjectCompletionCounter = 17,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information = 19,
    JobObjectReserved3Information = 20,
    JobObjectReserved4Information = 21,
    JobObjectReserved5Information = 22,
    JobObjectReserved6Information = 23,
    JobObjectReserved7Information = 24,
    JobObjectReserved8Information = 25,
    JobObjectReserved9Information = 26,
    JobObjectReserved10Information = 27,
    JobObjectReserved11Information = 28,
    JobObjectReserved12Information = 29,
    JobObjectReserved13Information = 30,
    JobObjectReserved14Information = 31,
    JobObjectNetRateControlInformation = 32,
    JobObjectNotificationLimitInformation2 = 33,
    JobObjectLimitViolationInformation2 = 34,
    JobObjectCreateSilo = 35,
    JobObjectSiloBasicInformation = 36,
    JobObjectReserved15Information = 37,
    JobObjectReserved16Information = 38,
    JobObjectReserved17Information = 39,
    JobObjectReserved18Information = 40,
    JobObjectReserved19Information = 41,
    JobObjectReserved20Information = 42,
    JobObjectReserved21Information = 43,
    JobObjectReserved22Information = 44,
    JobObjectReserved23Information = 45,
    JobObjectReserved24Information = 46,
    JobObjectReserved25Information = 47,
    MaxJobObjectInfoClass = 48,
};
pub const JOBOBJECTINFOCLASS = enum__JOBOBJECTINFOCLASS;
pub const struct__SILOOBJECT_BASIC_INFORMATION = extern struct {
    SiloId: DWORD,
    SiloParentId: DWORD,
    NumberOfProcesses: DWORD,
    IsInServerSilo: BOOLEAN,
    Reserved: [3]BYTE,
};
pub const SILOOBJECT_BASIC_INFORMATION = struct__SILOOBJECT_BASIC_INFORMATION;
pub const PSILOOBJECT_BASIC_INFORMATION = [*c]struct__SILOOBJECT_BASIC_INFORMATION;
pub const SERVERSILO_INITING = enum__SERVERSILO_STATE.SERVERSILO_INITING;
pub const SERVERSILO_STARTED = enum__SERVERSILO_STATE.SERVERSILO_STARTED;
pub const SERVERSILO_SHUTTING_DOWN = enum__SERVERSILO_STATE.SERVERSILO_SHUTTING_DOWN;
pub const SERVERSILO_TERMINATING = enum__SERVERSILO_STATE.SERVERSILO_TERMINATING;
pub const SERVERSILO_TERMINATED = enum__SERVERSILO_STATE.SERVERSILO_TERMINATED;
pub const enum__SERVERSILO_STATE = extern enum {
    SERVERSILO_INITING = 0,
    SERVERSILO_STARTED = 1,
    SERVERSILO_SHUTTING_DOWN = 2,
    SERVERSILO_TERMINATING = 3,
    SERVERSILO_TERMINATED = 4,
};
pub const SERVERSILO_STATE = enum__SERVERSILO_STATE;
pub const PSERVERSILO_STATE = [*c]enum__SERVERSILO_STATE;
pub const struct__SERVERSILO_BASIC_INFORMATION = extern struct {
    ServiceSessionId: DWORD,
    State: SERVERSILO_STATE,
    ExitStatus: DWORD,
};
pub const SERVERSILO_BASIC_INFORMATION = struct__SERVERSILO_BASIC_INFORMATION;
pub const PSERVERSILO_BASIC_INFORMATION = [*c]struct__SERVERSILO_BASIC_INFORMATION;
pub const FirmwareTypeUnknown = enum__FIRMWARE_TYPE.FirmwareTypeUnknown;
pub const FirmwareTypeBios = enum__FIRMWARE_TYPE.FirmwareTypeBios;
pub const FirmwareTypeUefi = enum__FIRMWARE_TYPE.FirmwareTypeUefi;
pub const FirmwareTypeMax = enum__FIRMWARE_TYPE.FirmwareTypeMax;
pub const enum__FIRMWARE_TYPE = extern enum {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax,
};
pub const FIRMWARE_TYPE = enum__FIRMWARE_TYPE;
pub const PFIRMWARE_TYPE = [*c]enum__FIRMWARE_TYPE;
pub const RelationProcessorCore = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorCore;
pub const RelationNumaNode = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationNumaNode;
pub const RelationCache = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationCache;
pub const RelationProcessorPackage = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationProcessorPackage;
pub const RelationGroup = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationGroup;
pub const RelationAll = enum__LOGICAL_PROCESSOR_RELATIONSHIP.RelationAll;
pub const enum__LOGICAL_PROCESSOR_RELATIONSHIP = extern enum {
    RelationProcessorCore = 0,
    RelationNumaNode = 1,
    RelationCache = 2,
    RelationProcessorPackage = 3,
    RelationGroup = 4,
    RelationAll = 65535,
};
pub const LOGICAL_PROCESSOR_RELATIONSHIP = enum__LOGICAL_PROCESSOR_RELATIONSHIP;
pub const CacheUnified = enum__PROCESSOR_CACHE_TYPE.CacheUnified;
pub const CacheInstruction = enum__PROCESSOR_CACHE_TYPE.CacheInstruction;
pub const CacheData = enum__PROCESSOR_CACHE_TYPE.CacheData;
pub const CacheTrace = enum__PROCESSOR_CACHE_TYPE.CacheTrace;
pub const enum__PROCESSOR_CACHE_TYPE = extern enum {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace,
};
pub const PROCESSOR_CACHE_TYPE = enum__PROCESSOR_CACHE_TYPE;
pub const struct__CACHE_DESCRIPTOR = extern struct {
    Level: BYTE,
    Associativity: BYTE,
    LineSize: WORD,
    Size: DWORD,
    Type: PROCESSOR_CACHE_TYPE,
};
pub const CACHE_DESCRIPTOR = struct__CACHE_DESCRIPTOR;
pub const PCACHE_DESCRIPTOR = [*c]struct__CACHE_DESCRIPTOR;
pub const struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION = extern struct {
    ProcessorMask: ULONG_PTR,
    Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
    @"": extern union {
        ProcessorCore: extern struct {
            Flags: BYTE,
        },
        NumaNode: extern struct {
            NodeNumber: DWORD,
        },
        Cache: CACHE_DESCRIPTOR,
        Reserved: [2]ULONGLONG,
    },
};
pub const SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
pub const PSYSTEM_LOGICAL_PROCESSOR_INFORMATION = [*c]struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
pub const struct__PROCESSOR_RELATIONSHIP = extern struct {
    Flags: BYTE,
    EfficiencyClass: BYTE,
    Reserved: [20]BYTE,
    GroupCount: WORD,
    GroupMask: [1]GROUP_AFFINITY,
};
pub const PROCESSOR_RELATIONSHIP = struct__PROCESSOR_RELATIONSHIP;
pub const PPROCESSOR_RELATIONSHIP = [*c]struct__PROCESSOR_RELATIONSHIP;
pub const struct__NUMA_NODE_RELATIONSHIP = extern struct {
    NodeNumber: DWORD,
    Reserved: [20]BYTE,
    GroupMask: GROUP_AFFINITY,
};
pub const NUMA_NODE_RELATIONSHIP = struct__NUMA_NODE_RELATIONSHIP;
pub const PNUMA_NODE_RELATIONSHIP = [*c]struct__NUMA_NODE_RELATIONSHIP;
pub const struct__CACHE_RELATIONSHIP = extern struct {
    Level: BYTE,
    Associativity: BYTE,
    LineSize: WORD,
    CacheSize: DWORD,
    Type: PROCESSOR_CACHE_TYPE,
    Reserved: [20]BYTE,
    GroupMask: GROUP_AFFINITY,
};
pub const CACHE_RELATIONSHIP = struct__CACHE_RELATIONSHIP;
pub const PCACHE_RELATIONSHIP = [*c]struct__CACHE_RELATIONSHIP;
pub const struct__PROCESSOR_GROUP_INFO = extern struct {
    MaximumProcessorCount: BYTE,
    ActiveProcessorCount: BYTE,
    Reserved: [38]BYTE,
    ActiveProcessorMask: KAFFINITY,
};
pub const PROCESSOR_GROUP_INFO = struct__PROCESSOR_GROUP_INFO;
pub const PPROCESSOR_GROUP_INFO = [*c]struct__PROCESSOR_GROUP_INFO;
pub const struct__GROUP_RELATIONSHIP = extern struct {
    MaximumGroupCount: WORD,
    ActiveGroupCount: WORD,
    Reserved: [20]BYTE,
    GroupInfo: [1]PROCESSOR_GROUP_INFO,
};
pub const GROUP_RELATIONSHIP = struct__GROUP_RELATIONSHIP;
pub const PGROUP_RELATIONSHIP = [*c]struct__GROUP_RELATIONSHIP;
pub const struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = extern struct {
    Relationship: LOGICAL_PROCESSOR_RELATIONSHIP,
    Size: DWORD,
    @"": extern union {
        Processor: PROCESSOR_RELATIONSHIP,
        NumaNode: NUMA_NODE_RELATIONSHIP,
        Cache: CACHE_RELATIONSHIP,
        Group: GROUP_RELATIONSHIP,
    },
};
pub const SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub const PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = [*c]struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub const CpuSetInformation = enum__CPU_SET_INFORMATION_TYPE.CpuSetInformation;
pub const enum__CPU_SET_INFORMATION_TYPE = extern enum {
    CpuSetInformation,
};
pub const CPU_SET_INFORMATION_TYPE = enum__CPU_SET_INFORMATION_TYPE;
pub const PCPU_SET_INFORMATION_TYPE = [*c]enum__CPU_SET_INFORMATION_TYPE;
pub const struct__SYSTEM_CPU_SET_INFORMATION = extern struct {
    Size: DWORD,
    Type: CPU_SET_INFORMATION_TYPE,
    @"": extern union {
        CpuSet: extern struct {
            Id: DWORD,
            Group: WORD,
            LogicalProcessorIndex: BYTE,
            CoreIndex: BYTE,
            LastLevelCacheIndex: BYTE,
            NumaNodeIndex: BYTE,
            EfficiencyClass: BYTE,
            @"": extern union {
                AllFlags: BYTE,
                @"": opaque {},
            },
            @"": extern union {
                Reserved: DWORD,
                SchedulingClass: BYTE,
            },
            AllocationTag: DWORD64,
        },
    },
};
pub const SYSTEM_CPU_SET_INFORMATION = struct__SYSTEM_CPU_SET_INFORMATION;
pub const PSYSTEM_CPU_SET_INFORMATION = [*c]struct__SYSTEM_CPU_SET_INFORMATION;
pub const struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = extern struct {
    CycleTime: DWORD64,
};
pub const SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
pub const PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = [*c]struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
pub const struct__XSTATE_FEATURE = extern struct {
    Offset: DWORD,
    Size: DWORD,
};
pub const XSTATE_FEATURE = struct__XSTATE_FEATURE;
pub const PXSTATE_FEATURE = [*c]struct__XSTATE_FEATURE;
pub const struct__XSTATE_CONFIGURATION = extern struct {
    EnabledFeatures: DWORD64,
    EnabledVolatileFeatures: DWORD64,
    Size: DWORD,
    @"": extern union {
        ControlFlags: DWORD,
        @"": opaque {},
    },
    Features: [64]XSTATE_FEATURE,
    EnabledSupervisorFeatures: DWORD64,
    AlignedFeatures: DWORD64,
    AllFeatureSize: DWORD,
    AllFeatures: [64]DWORD,
    EnabledUserVisibleSupervisorFeatures: DWORD64,
};
pub const XSTATE_CONFIGURATION = struct__XSTATE_CONFIGURATION;
pub const PXSTATE_CONFIGURATION = [*c]struct__XSTATE_CONFIGURATION;
pub const struct__MEMORY_BASIC_INFORMATION = extern struct {
    BaseAddress: PVOID,
    AllocationBase: PVOID,
    AllocationProtect: DWORD,
    RegionSize: SIZE_T,
    State: DWORD,
    Protect: DWORD,
    Type: DWORD,
};
pub const MEMORY_BASIC_INFORMATION = struct__MEMORY_BASIC_INFORMATION;
pub const PMEMORY_BASIC_INFORMATION = [*c]struct__MEMORY_BASIC_INFORMATION;
pub const struct__MEMORY_BASIC_INFORMATION32 = extern struct {
    BaseAddress: DWORD,
    AllocationBase: DWORD,
    AllocationProtect: DWORD,
    RegionSize: DWORD,
    State: DWORD,
    Protect: DWORD,
    Type: DWORD,
};
pub const MEMORY_BASIC_INFORMATION32 = struct__MEMORY_BASIC_INFORMATION32;
pub const PMEMORY_BASIC_INFORMATION32 = [*c]struct__MEMORY_BASIC_INFORMATION32;
pub const struct__MEMORY_BASIC_INFORMATION64 = extern struct {
    BaseAddress: ULONGLONG,
    AllocationBase: ULONGLONG,
    AllocationProtect: DWORD,
    __alignment1: DWORD,
    RegionSize: ULONGLONG,
    State: DWORD,
    Protect: DWORD,
    Type: DWORD,
    __alignment2: DWORD,
};
pub const MEMORY_BASIC_INFORMATION64 = struct__MEMORY_BASIC_INFORMATION64;
pub const PMEMORY_BASIC_INFORMATION64 = [*c]struct__MEMORY_BASIC_INFORMATION64;
pub const struct__CFG_CALL_TARGET_INFO = extern struct {
    Offset: ULONG_PTR,
    Flags: ULONG_PTR,
};
pub const CFG_CALL_TARGET_INFO = struct__CFG_CALL_TARGET_INFO;
pub const PCFG_CALL_TARGET_INFO = [*c]struct__CFG_CALL_TARGET_INFO;
pub const struct__MEM_ADDRESS_REQUIREMENTS = extern struct {
    LowestStartingAddress: PVOID,
    HighestEndingAddress: PVOID,
    Alignment: SIZE_T,
};
pub const MEM_ADDRESS_REQUIREMENTS = struct__MEM_ADDRESS_REQUIREMENTS;
pub const PMEM_ADDRESS_REQUIREMENTS = [*c]struct__MEM_ADDRESS_REQUIREMENTS;
pub const MemExtendedParameterInvalidType = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterInvalidType;
pub const MemExtendedParameterAddressRequirements = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterAddressRequirements;
pub const MemExtendedParameterNumaNode = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterNumaNode;
pub const MemExtendedParameterPartitionHandle = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterPartitionHandle;
pub const MemExtendedParameterUserPhysicalHandle = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterUserPhysicalHandle;
pub const MemExtendedParameterAttributeFlags = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterAttributeFlags;
pub const MemExtendedParameterMax = enum_MEM_EXTENDED_PARAMETER_TYPE.MemExtendedParameterMax;
pub const enum_MEM_EXTENDED_PARAMETER_TYPE = extern enum {
    MemExtendedParameterInvalidType = 0,
    MemExtendedParameterAddressRequirements = 1,
    MemExtendedParameterNumaNode = 2,
    MemExtendedParameterPartitionHandle = 3,
    MemExtendedParameterUserPhysicalHandle = 4,
    MemExtendedParameterAttributeFlags = 5,
    MemExtendedParameterMax = 6,
};
pub const MEM_EXTENDED_PARAMETER_TYPE = enum_MEM_EXTENDED_PARAMETER_TYPE;
pub const PMEM_EXTENDED_PARAMETER_TYPE = [*c]enum_MEM_EXTENDED_PARAMETER_TYPE;
pub const struct_MEM_EXTENDED_PARAMETER = extern struct {
    @"": opaque {},
    @"": extern union {
        ULong64: DWORD64,
        Pointer: PVOID,
        Size: SIZE_T,
        Handle: HANDLE,
        ULong: DWORD,
    },
};
pub const MEM_EXTENDED_PARAMETER = struct_MEM_EXTENDED_PARAMETER;
pub const PMEM_EXTENDED_PARAMETER = [*c]struct_MEM_EXTENDED_PARAMETER;
pub const MemSectionExtendedParameterInvalidType = enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE.MemSectionExtendedParameterInvalidType;
pub const MemSectionExtendedParameterUserPhysicalFlags = enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE.MemSectionExtendedParameterUserPhysicalFlags;
pub const MemSectionExtendedParameterNumaNode = enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE.MemSectionExtendedParameterNumaNode;
pub const MemSectionExtendedParameterMax = enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE.MemSectionExtendedParameterMax;
pub const enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE = extern enum {
    MemSectionExtendedParameterInvalidType = 0,
    MemSectionExtendedParameterUserPhysicalFlags = 1,
    MemSectionExtendedParameterNumaNode = 2,
    MemSectionExtendedParameterMax = 3,
};
pub const MEM_SECTION_EXTENDED_PARAMETER_TYPE = enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE;
pub const PMEM_SECTION_EXTENDED_PARAMETER_TYPE = [*c]enum_MEM_SECTION_EXTENDED_PARAMETER_TYPE;
pub const struct__ENCLAVE_CREATE_INFO_SGX = extern struct {
    Secs: [4096]BYTE,
};
pub const ENCLAVE_CREATE_INFO_SGX = struct__ENCLAVE_CREATE_INFO_SGX;
pub const PENCLAVE_CREATE_INFO_SGX = [*c]struct__ENCLAVE_CREATE_INFO_SGX;
pub const struct__ENCLAVE_INIT_INFO_SGX = extern struct {
    SigStruct: [1808]BYTE,
    Reserved1: [240]BYTE,
    EInitToken: [304]BYTE,
    Reserved2: [1744]BYTE,
};
pub const ENCLAVE_INIT_INFO_SGX = struct__ENCLAVE_INIT_INFO_SGX;
pub const PENCLAVE_INIT_INFO_SGX = [*c]struct__ENCLAVE_INIT_INFO_SGX;
pub const struct__ENCLAVE_CREATE_INFO_VBS = extern struct {
    Flags: DWORD,
    OwnerID: [32]BYTE,
};
pub const ENCLAVE_CREATE_INFO_VBS = struct__ENCLAVE_CREATE_INFO_VBS;
pub const PENCLAVE_CREATE_INFO_VBS = [*c]struct__ENCLAVE_CREATE_INFO_VBS;
pub const struct__ENCLAVE_CREATE_INFO_VBS_BASIC = extern struct {
    Flags: DWORD,
    OwnerID: [32]BYTE,
};
pub const ENCLAVE_CREATE_INFO_VBS_BASIC = struct__ENCLAVE_CREATE_INFO_VBS_BASIC;
pub const PENCLAVE_CREATE_INFO_VBS_BASIC = [*c]struct__ENCLAVE_CREATE_INFO_VBS_BASIC;
pub const struct__ENCLAVE_LOAD_DATA_VBS_BASIC = extern struct {
    PageType: DWORD,
};
pub const ENCLAVE_LOAD_DATA_VBS_BASIC = struct__ENCLAVE_LOAD_DATA_VBS_BASIC;
pub const PENCLAVE_LOAD_DATA_VBS_BASIC = [*c]struct__ENCLAVE_LOAD_DATA_VBS_BASIC;
pub const struct__ENCLAVE_INIT_INFO_VBS_BASIC = extern struct {
    FamilyId: [16]BYTE,
    ImageId: [16]BYTE,
    EnclaveSize: ULONGLONG,
    EnclaveSvn: DWORD,
    Reserved: DWORD,
    @"": extern union {
        SignatureInfoHandle: HANDLE,
        Unused: ULONGLONG,
    },
};
pub const ENCLAVE_INIT_INFO_VBS_BASIC = struct__ENCLAVE_INIT_INFO_VBS_BASIC;
pub const PENCLAVE_INIT_INFO_VBS_BASIC = [*c]struct__ENCLAVE_INIT_INFO_VBS_BASIC;
pub const struct__ENCLAVE_INIT_INFO_VBS = extern struct {
    Length: DWORD,
    ThreadCount: DWORD,
};
pub const ENCLAVE_INIT_INFO_VBS = struct__ENCLAVE_INIT_INFO_VBS;
pub const PENCLAVE_INIT_INFO_VBS = [*c]struct__ENCLAVE_INIT_INFO_VBS;
pub const ENCLAVE_TARGET_FUNCTION = fn (PVOID) callconv(std.os.windows.WINAPI) PVOID;
pub const PENCLAVE_TARGET_FUNCTION = [*c]ENCLAVE_TARGET_FUNCTION;
pub const LPENCLAVE_TARGET_FUNCTION = PENCLAVE_TARGET_FUNCTION;
pub const struct__FILE_ID_128 = extern struct {
    Identifier: [16]BYTE,
};
pub const FILE_ID_128 = struct__FILE_ID_128;
pub const PFILE_ID_128 = [*c]struct__FILE_ID_128;
pub const struct__FILE_NOTIFY_INFORMATION = extern struct {
    NextEntryOffset: DWORD,
    Action: DWORD,
    FileNameLength: DWORD,
    FileName: [1]WCHAR,
};
pub const FILE_NOTIFY_INFORMATION = struct__FILE_NOTIFY_INFORMATION;
pub const PFILE_NOTIFY_INFORMATION = [*c]struct__FILE_NOTIFY_INFORMATION;
pub const struct__FILE_NOTIFY_EXTENDED_INFORMATION = extern struct {
    NextEntryOffset: DWORD,
    Action: DWORD,
    CreationTime: LARGE_INTEGER,
    LastModificationTime: LARGE_INTEGER,
    LastChangeTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    AllocatedLength: LARGE_INTEGER,
    FileSize: LARGE_INTEGER,
    FileAttributes: DWORD,
    ReparsePointTag: DWORD,
    FileId: LARGE_INTEGER,
    ParentFileId: LARGE_INTEGER,
    FileNameLength: DWORD,
    FileName: [1]WCHAR,
};
pub const FILE_NOTIFY_EXTENDED_INFORMATION = struct__FILE_NOTIFY_EXTENDED_INFORMATION;
pub const PFILE_NOTIFY_EXTENDED_INFORMATION = [*c]struct__FILE_NOTIFY_EXTENDED_INFORMATION;
pub const union__FILE_SEGMENT_ELEMENT = extern union {
    Buffer: PVOID64,
    Alignment: ULONGLONG,
};
pub const FILE_SEGMENT_ELEMENT = union__FILE_SEGMENT_ELEMENT;
pub const PFILE_SEGMENT_ELEMENT = [*c]union__FILE_SEGMENT_ELEMENT;
pub const struct__REPARSE_GUID_DATA_BUFFER = extern struct {
    ReparseTag: DWORD,
    ReparseDataLength: WORD,
    Reserved: WORD,
    ReparseGuid: GUID,
    GenericReparseBuffer: extern struct {
        DataBuffer: [1]BYTE,
    },
};
pub const REPARSE_GUID_DATA_BUFFER = struct__REPARSE_GUID_DATA_BUFFER;
pub const PREPARSE_GUID_DATA_BUFFER = [*c]struct__REPARSE_GUID_DATA_BUFFER;
pub const struct__SCRUB_DATA_INPUT = extern struct {
    Size: DWORD,
    Flags: DWORD,
    MaximumIos: DWORD,
    ObjectId: [4]DWORD,
    Reserved: [25]DWORD,
    ResumeContext: [816]BYTE,
};
pub const SCRUB_DATA_INPUT = struct__SCRUB_DATA_INPUT;
pub const PSCRUB_DATA_INPUT = [*c]struct__SCRUB_DATA_INPUT;
pub const struct__SCRUB_PARITY_EXTENT = extern struct {
    Offset: LONGLONG,
    Length: ULONGLONG,
};
pub const SCRUB_PARITY_EXTENT = struct__SCRUB_PARITY_EXTENT;
pub const PSCRUB_PARITY_EXTENT = [*c]struct__SCRUB_PARITY_EXTENT;
pub const struct__SCRUB_PARITY_EXTENT_DATA = extern struct {
    Size: WORD,
    Flags: WORD,
    NumberOfParityExtents: WORD,
    MaximumNumberOfParityExtents: WORD,
    ParityExtents: [1]SCRUB_PARITY_EXTENT,
};
pub const SCRUB_PARITY_EXTENT_DATA = struct__SCRUB_PARITY_EXTENT_DATA;
pub const PSCRUB_PARITY_EXTENT_DATA = [*c]struct__SCRUB_PARITY_EXTENT_DATA;
pub const struct__SCRUB_DATA_OUTPUT = extern struct {
    Size: DWORD,
    Flags: DWORD,
    Status: DWORD,
    ErrorFileOffset: ULONGLONG,
    ErrorLength: ULONGLONG,
    NumberOfBytesRepaired: ULONGLONG,
    NumberOfBytesFailed: ULONGLONG,
    InternalFileReference: ULONGLONG,
    ResumeContextLength: WORD,
    ParityExtentDataOffset: WORD,
    Reserved: [9]DWORD,
    NumberOfMetadataBytesProcessed: ULONGLONG,
    NumberOfDataBytesProcessed: ULONGLONG,
    TotalNumberOfMetadataBytesInUse: ULONGLONG,
    TotalNumberOfDataBytesInUse: ULONGLONG,
    ResumeContext: [816]BYTE,
};
pub const SCRUB_DATA_OUTPUT = struct__SCRUB_DATA_OUTPUT;
pub const PSCRUB_DATA_OUTPUT = [*c]struct__SCRUB_DATA_OUTPUT;
pub const SharedVirtualDisksUnsupported = enum__SharedVirtualDiskSupportType.SharedVirtualDisksUnsupported;
pub const SharedVirtualDisksSupported = enum__SharedVirtualDiskSupportType.SharedVirtualDisksSupported;
pub const SharedVirtualDiskSnapshotsSupported = enum__SharedVirtualDiskSupportType.SharedVirtualDiskSnapshotsSupported;
pub const SharedVirtualDiskCDPSnapshotsSupported = enum__SharedVirtualDiskSupportType.SharedVirtualDiskCDPSnapshotsSupported;
pub const enum__SharedVirtualDiskSupportType = extern enum {
    SharedVirtualDisksUnsupported = 0,
    SharedVirtualDisksSupported = 1,
    SharedVirtualDiskSnapshotsSupported = 3,
    SharedVirtualDiskCDPSnapshotsSupported = 7,
};
pub const SharedVirtualDiskSupportType = enum__SharedVirtualDiskSupportType;
pub const SharedVirtualDiskHandleStateNone = enum__SharedVirtualDiskHandleState.SharedVirtualDiskHandleStateNone;
pub const SharedVirtualDiskHandleStateFileShared = enum__SharedVirtualDiskHandleState.SharedVirtualDiskHandleStateFileShared;
pub const SharedVirtualDiskHandleStateHandleShared = enum__SharedVirtualDiskHandleState.SharedVirtualDiskHandleStateHandleShared;
pub const enum__SharedVirtualDiskHandleState = extern enum {
    SharedVirtualDiskHandleStateNone = 0,
    SharedVirtualDiskHandleStateFileShared = 1,
    SharedVirtualDiskHandleStateHandleShared = 3,
};
pub const SharedVirtualDiskHandleState = enum__SharedVirtualDiskHandleState;
pub const struct__SHARED_VIRTUAL_DISK_SUPPORT = extern struct {
    SharedVirtualDiskSupport: SharedVirtualDiskSupportType,
    HandleState: SharedVirtualDiskHandleState,
};
pub const SHARED_VIRTUAL_DISK_SUPPORT = struct__SHARED_VIRTUAL_DISK_SUPPORT;
pub const PSHARED_VIRTUAL_DISK_SUPPORT = [*c]struct__SHARED_VIRTUAL_DISK_SUPPORT;
pub const struct__REARRANGE_FILE_DATA = extern struct {
    SourceStartingOffset: ULONGLONG,
    TargetOffset: ULONGLONG,
    SourceFileHandle: HANDLE,
    Length: DWORD,
    Flags: DWORD,
};
pub const REARRANGE_FILE_DATA = struct__REARRANGE_FILE_DATA;
pub const PREARRANGE_FILE_DATA = [*c]struct__REARRANGE_FILE_DATA;
pub const struct__REARRANGE_FILE_DATA32 = extern struct {
    SourceStartingOffset: ULONGLONG,
    TargetOffset: ULONGLONG,
    SourceFileHandle: UINT32,
    Length: DWORD,
    Flags: DWORD,
};
pub const REARRANGE_FILE_DATA32 = struct__REARRANGE_FILE_DATA32;
pub const PREARRANGE_FILE_DATA32 = [*c]struct__REARRANGE_FILE_DATA32;
pub const struct__SHUFFLE_FILE_DATA = extern struct {
    StartingOffset: LONGLONG,
    Length: LONGLONG,
    Flags: DWORD,
};
pub const SHUFFLE_FILE_DATA = struct__SHUFFLE_FILE_DATA;
pub const PSHUFFLE_FILE_DATA = [*c]struct__SHUFFLE_FILE_DATA;
pub const struct__NETWORK_APP_INSTANCE_EA = extern struct {
    AppInstanceID: GUID,
    CsvFlags: DWORD,
};
pub const NETWORK_APP_INSTANCE_EA = struct__NETWORK_APP_INSTANCE_EA;
pub const PNETWORK_APP_INSTANCE_EA = [*c]struct__NETWORK_APP_INSTANCE_EA;
extern const GUID_MAX_POWER_SAVINGS: GUID;
extern const GUID_MIN_POWER_SAVINGS: GUID;
extern const GUID_TYPICAL_POWER_SAVINGS: GUID;
extern const NO_SUBGROUP_GUID: GUID;
extern const ALL_POWERSCHEMES_GUID: GUID;
extern const GUID_POWERSCHEME_PERSONALITY: GUID;
extern const GUID_ACTIVE_POWERSCHEME: GUID;
extern const GUID_IDLE_RESILIENCY_SUBGROUP: GUID;
extern const GUID_IDLE_RESILIENCY_PERIOD: GUID;
extern const GUID_DEEP_SLEEP_ENABLED: GUID;
extern const GUID_DEEP_SLEEP_PLATFORM_STATE: GUID;
extern const GUID_DISK_COALESCING_POWERDOWN_TIMEOUT: GUID;
extern const GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT: GUID;
extern const GUID_VIDEO_SUBGROUP: GUID;
extern const GUID_VIDEO_POWERDOWN_TIMEOUT: GUID;
extern const GUID_VIDEO_ANNOYANCE_TIMEOUT: GUID;
extern const GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE: GUID;
extern const GUID_VIDEO_DIM_TIMEOUT: GUID;
extern const GUID_VIDEO_ADAPTIVE_POWERDOWN: GUID;
extern const GUID_MONITOR_POWER_ON: GUID;
extern const GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS: GUID;
extern const GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS: GUID;
extern const GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS: GUID;
extern const GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS: GUID;
extern const GUID_CONSOLE_DISPLAY_STATE: GUID;
extern const GUID_ALLOW_DISPLAY_REQUIRED: GUID;
extern const GUID_VIDEO_CONSOLE_LOCK_TIMEOUT: GUID;
extern const GUID_ADVANCED_COLOR_QUALITY_BIAS: GUID;
extern const GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP: GUID;
extern const GUID_NON_ADAPTIVE_INPUT_TIMEOUT: GUID;
extern const GUID_ADAPTIVE_INPUT_CONTROLLER_STATE: GUID;
extern const GUID_DISK_SUBGROUP: GUID;
extern const GUID_DISK_MAX_POWER: GUID;
extern const GUID_DISK_POWERDOWN_TIMEOUT: GUID;
extern const GUID_DISK_IDLE_TIMEOUT: GUID;
extern const GUID_DISK_BURST_IGNORE_THRESHOLD: GUID;
extern const GUID_DISK_ADAPTIVE_POWERDOWN: GUID;
extern const GUID_SLEEP_SUBGROUP: GUID;
extern const GUID_SLEEP_IDLE_THRESHOLD: GUID;
extern const GUID_STANDBY_TIMEOUT: GUID;
extern const GUID_UNATTEND_SLEEP_TIMEOUT: GUID;
extern const GUID_HIBERNATE_TIMEOUT: GUID;
extern const GUID_HIBERNATE_FASTS4_POLICY: GUID;
extern const GUID_CRITICAL_POWER_TRANSITION: GUID;
extern const GUID_SYSTEM_AWAYMODE: GUID;
extern const GUID_ALLOW_AWAYMODE: GUID;
extern const GUID_USER_PRESENCE_PREDICTION: GUID;
extern const GUID_STANDBY_BUDGET_GRACE_PERIOD: GUID;
extern const GUID_STANDBY_BUDGET_PERCENT: GUID;
extern const GUID_STANDBY_RESERVE_GRACE_PERIOD: GUID;
extern const GUID_STANDBY_RESERVE_TIME: GUID;
extern const GUID_STANDBY_RESET_PERCENT: GUID;
extern const GUID_ALLOW_STANDBY_STATES: GUID;
extern const GUID_ALLOW_RTC_WAKE: GUID;
extern const GUID_LEGACY_RTC_MITIGATION: GUID;
extern const GUID_ALLOW_SYSTEM_REQUIRED: GUID;
extern const GUID_POWER_SAVING_STATUS: GUID;
extern const GUID_ENERGY_SAVER_SUBGROUP: GUID;
extern const GUID_ENERGY_SAVER_BATTERY_THRESHOLD: GUID;
extern const GUID_ENERGY_SAVER_BRIGHTNESS: GUID;
extern const GUID_ENERGY_SAVER_POLICY: GUID;
extern const GUID_SYSTEM_BUTTON_SUBGROUP: GUID;
extern const GUID_POWERBUTTON_ACTION: GUID;
extern const GUID_SLEEPBUTTON_ACTION: GUID;
extern const GUID_USERINTERFACEBUTTON_ACTION: GUID;
extern const GUID_LIDCLOSE_ACTION: GUID;
extern const GUID_LIDOPEN_POWERSTATE: GUID;
extern const GUID_BATTERY_SUBGROUP: GUID;
extern const GUID_BATTERY_DISCHARGE_ACTION_0: GUID;
extern const GUID_BATTERY_DISCHARGE_LEVEL_0: GUID;
extern const GUID_BATTERY_DISCHARGE_FLAGS_0: GUID;
extern const GUID_BATTERY_DISCHARGE_ACTION_1: GUID;
extern const GUID_BATTERY_DISCHARGE_LEVEL_1: GUID;
extern const GUID_BATTERY_DISCHARGE_FLAGS_1: GUID;
extern const GUID_BATTERY_DISCHARGE_ACTION_2: GUID;
extern const GUID_BATTERY_DISCHARGE_LEVEL_2: GUID;
extern const GUID_BATTERY_DISCHARGE_FLAGS_2: GUID;
extern const GUID_BATTERY_DISCHARGE_ACTION_3: GUID;
extern const GUID_BATTERY_DISCHARGE_LEVEL_3: GUID;
extern const GUID_BATTERY_DISCHARGE_FLAGS_3: GUID;
extern const GUID_PROCESSOR_SETTINGS_SUBGROUP: GUID;
extern const GUID_PROCESSOR_THROTTLE_POLICY: GUID;
extern const GUID_PROCESSOR_THROTTLE_MAXIMUM: GUID;
extern const GUID_PROCESSOR_THROTTLE_MAXIMUM_1: GUID;
extern const GUID_PROCESSOR_THROTTLE_MINIMUM: GUID;
extern const GUID_PROCESSOR_THROTTLE_MINIMUM_1: GUID;
extern const GUID_PROCESSOR_FREQUENCY_LIMIT: GUID;
extern const GUID_PROCESSOR_FREQUENCY_LIMIT_1: GUID;
extern const GUID_PROCESSOR_ALLOW_THROTTLING: GUID;
extern const GUID_PROCESSOR_IDLESTATE_POLICY: GUID;
extern const GUID_PROCESSOR_PERFSTATE_POLICY: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_POLICY: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_POLICY_1: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_POLICY: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_POLICY_1: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_TIME: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_TIME_1: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_TIME: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_TIME_1: GUID;
extern const GUID_PROCESSOR_PERF_TIME_CHECK: GUID;
extern const GUID_PROCESSOR_PERF_BOOST_POLICY: GUID;
extern const GUID_PROCESSOR_PERF_BOOST_MODE: GUID;
extern const GUID_PROCESSOR_PERF_AUTONOMOUS_MODE: GUID;
extern const GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE: GUID;
extern const GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1: GUID;
extern const GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW: GUID;
extern const GUID_PROCESSOR_DUTY_CYCLING: GUID;
extern const GUID_PROCESSOR_IDLE_ALLOW_SCALING: GUID;
extern const GUID_PROCESSOR_IDLE_DISABLE: GUID;
extern const GUID_PROCESSOR_IDLE_STATE_MAXIMUM: GUID;
extern const GUID_PROCESSOR_IDLE_TIME_CHECK: GUID;
extern const GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_MAX_CORES: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_MIN_CORES: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING: GUID;
extern const GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PARKING_CORE_OVERRIDE: GUID;
extern const GUID_PROCESSOR_PARKING_PERF_STATE: GUID;
extern const GUID_PROCESSOR_PARKING_PERF_STATE_1: GUID;
extern const GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD: GUID;
extern const GUID_PROCESSOR_PERF_HISTORY: GUID;
extern const GUID_PROCESSOR_PERF_HISTORY_1: GUID;
extern const GUID_PROCESSOR_PERF_INCREASE_HISTORY: GUID;
extern const GUID_PROCESSOR_PERF_DECREASE_HISTORY: GUID;
extern const GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY: GUID;
extern const GUID_PROCESSOR_PERF_LATENCY_HINT: GUID;
extern const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF: GUID;
extern const GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1: GUID;
extern const GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK: GUID;
extern const GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1: GUID;
extern const GUID_PROCESSOR_DISTRIBUTE_UTILITY: GUID;
extern const GUID_PROCESSOR_HETEROGENEOUS_POLICY: GUID;
extern const GUID_PROCESSOR_HETERO_DECREASE_TIME: GUID;
extern const GUID_PROCESSOR_HETERO_INCREASE_TIME: GUID;
extern const GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_CLASS0_FLOOR_PERF: GUID;
extern const GUID_PROCESSOR_CLASS1_INITIAL_PERF: GUID;
extern const GUID_PROCESSOR_THREAD_SCHEDULING_POLICY: GUID;
extern const GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY: GUID;
extern const GUID_SYSTEM_COOLING_POLICY: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR: GUID;
extern const GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1: GUID;
extern const GUID_LOCK_CONSOLE_ON_WAKE: GUID;
extern const GUID_DEVICE_IDLE_POLICY: GUID;
extern const GUID_CONNECTIVITY_IN_STANDBY: GUID;
extern const GUID_DISCONNECTED_STANDBY_MODE: GUID;
extern const GUID_ACDC_POWER_SOURCE: GUID;
extern const GUID_LIDSWITCH_STATE_CHANGE: GUID;
extern const GUID_BATTERY_PERCENTAGE_REMAINING: GUID;
extern const GUID_BATTERY_COUNT: GUID;
extern const GUID_GLOBAL_USER_PRESENCE: GUID;
extern const GUID_SESSION_DISPLAY_STATUS: GUID;
extern const GUID_SESSION_USER_PRESENCE: GUID;
extern const GUID_IDLE_BACKGROUND_TASK: GUID;
extern const GUID_BACKGROUND_TASK_NOTIFICATION: GUID;
extern const GUID_APPLAUNCH_BUTTON: GUID;
extern const GUID_PCIEXPRESS_SETTINGS_SUBGROUP: GUID;
extern const GUID_PCIEXPRESS_ASPM_POLICY: GUID;
extern const GUID_ENABLE_SWITCH_FORCED_SHUTDOWN: GUID;
extern const GUID_INTSTEER_SUBGROUP: GUID;
extern const GUID_INTSTEER_MODE: GUID;
extern const GUID_INTSTEER_LOAD_PER_PROC_TRIGGER: GUID;
extern const GUID_INTSTEER_TIME_UNPARK_TRIGGER: GUID;
extern const GUID_GRAPHICS_SUBGROUP: GUID;
extern const GUID_GPU_PREFERENCE_POLICY: GUID;
extern const GUID_MIXED_REALITY_MODE: GUID;
extern const GUID_SPR_ACTIVE_SESSION_CHANGE: GUID;
pub const PowerSystemUnspecified = enum__SYSTEM_POWER_STATE.PowerSystemUnspecified;
pub const PowerSystemWorking = enum__SYSTEM_POWER_STATE.PowerSystemWorking;
pub const PowerSystemSleeping1 = enum__SYSTEM_POWER_STATE.PowerSystemSleeping1;
pub const PowerSystemSleeping2 = enum__SYSTEM_POWER_STATE.PowerSystemSleeping2;
pub const PowerSystemSleeping3 = enum__SYSTEM_POWER_STATE.PowerSystemSleeping3;
pub const PowerSystemHibernate = enum__SYSTEM_POWER_STATE.PowerSystemHibernate;
pub const PowerSystemShutdown = enum__SYSTEM_POWER_STATE.PowerSystemShutdown;
pub const PowerSystemMaximum = enum__SYSTEM_POWER_STATE.PowerSystemMaximum;
pub const enum__SYSTEM_POWER_STATE = extern enum {
    PowerSystemUnspecified = 0,
    PowerSystemWorking = 1,
    PowerSystemSleeping1 = 2,
    PowerSystemSleeping2 = 3,
    PowerSystemSleeping3 = 4,
    PowerSystemHibernate = 5,
    PowerSystemShutdown = 6,
    PowerSystemMaximum = 7,
};
pub const SYSTEM_POWER_STATE = enum__SYSTEM_POWER_STATE;
pub const PSYSTEM_POWER_STATE = [*c]enum__SYSTEM_POWER_STATE;
pub const PowerActionNone = 0;
pub const PowerActionReserved = 1;
pub const PowerActionSleep = 2;
pub const PowerActionHibernate = 3;
pub const PowerActionShutdown = 4;
pub const PowerActionShutdownReset = 5;
pub const PowerActionShutdownOff = 6;
pub const PowerActionWarmEject = 7;
pub const PowerActionDisplayOff = 8;
pub const POWER_ACTION = extern enum {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8,
};
pub const PPOWER_ACTION = [*c]extern enum {
    PowerActionNone = 0,
    PowerActionReserved = 1,
    PowerActionSleep = 2,
    PowerActionHibernate = 3,
    PowerActionShutdown = 4,
    PowerActionShutdownReset = 5,
    PowerActionShutdownOff = 6,
    PowerActionWarmEject = 7,
    PowerActionDisplayOff = 8,
};
pub const PowerDeviceUnspecified = enum__DEVICE_POWER_STATE.PowerDeviceUnspecified;
pub const PowerDeviceD0 = enum__DEVICE_POWER_STATE.PowerDeviceD0;
pub const PowerDeviceD1 = enum__DEVICE_POWER_STATE.PowerDeviceD1;
pub const PowerDeviceD2 = enum__DEVICE_POWER_STATE.PowerDeviceD2;
pub const PowerDeviceD3 = enum__DEVICE_POWER_STATE.PowerDeviceD3;
pub const PowerDeviceMaximum = enum__DEVICE_POWER_STATE.PowerDeviceMaximum;
pub const enum__DEVICE_POWER_STATE = extern enum {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0 = 1,
    PowerDeviceD1 = 2,
    PowerDeviceD2 = 3,
    PowerDeviceD3 = 4,
    PowerDeviceMaximum = 5,
};
pub const DEVICE_POWER_STATE = enum__DEVICE_POWER_STATE;
pub const PDEVICE_POWER_STATE = [*c]enum__DEVICE_POWER_STATE;
pub const PowerMonitorOff = enum__MONITOR_DISPLAY_STATE.PowerMonitorOff;
pub const PowerMonitorOn = enum__MONITOR_DISPLAY_STATE.PowerMonitorOn;
pub const PowerMonitorDim = enum__MONITOR_DISPLAY_STATE.PowerMonitorDim;
pub const enum__MONITOR_DISPLAY_STATE = extern enum {
    PowerMonitorOff = 0,
    PowerMonitorOn = 1,
    PowerMonitorDim = 2,
};
pub const MONITOR_DISPLAY_STATE = enum__MONITOR_DISPLAY_STATE;
pub const PMONITOR_DISPLAY_STATE = [*c]enum__MONITOR_DISPLAY_STATE;
pub const PowerUserPresent = enum__USER_ACTIVITY_PRESENCE.PowerUserPresent;
pub const PowerUserNotPresent = enum__USER_ACTIVITY_PRESENCE.PowerUserNotPresent;
pub const PowerUserInactive = enum__USER_ACTIVITY_PRESENCE.PowerUserInactive;
pub const PowerUserMaximum = enum__USER_ACTIVITY_PRESENCE.PowerUserMaximum;
pub const PowerUserInvalid = enum__USER_ACTIVITY_PRESENCE.PowerUserInvalid;
pub const enum__USER_ACTIVITY_PRESENCE = extern enum {
    PowerUserPresent = 0,
    PowerUserNotPresent = 1,
    PowerUserInactive = 2,
    PowerUserMaximum = 3,
    PowerUserInvalid = 3,
};
pub const USER_ACTIVITY_PRESENCE = enum__USER_ACTIVITY_PRESENCE;
pub const PUSER_ACTIVITY_PRESENCE = [*c]enum__USER_ACTIVITY_PRESENCE;
pub const EXECUTION_STATE = DWORD;
pub const PEXECUTION_STATE = [*c]DWORD;
pub const LT_DONT_CARE = 0;
pub const LT_LOWEST_LATENCY = 1;
pub const LATENCY_TIME = extern enum {
    LT_DONT_CARE = 0,
    LT_LOWEST_LATENCY = 1,
};
pub const PowerRequestDisplayRequired = enum__POWER_REQUEST_TYPE.PowerRequestDisplayRequired;
pub const PowerRequestSystemRequired = enum__POWER_REQUEST_TYPE.PowerRequestSystemRequired;
pub const PowerRequestAwayModeRequired = enum__POWER_REQUEST_TYPE.PowerRequestAwayModeRequired;
pub const PowerRequestExecutionRequired = enum__POWER_REQUEST_TYPE.PowerRequestExecutionRequired;
pub const enum__POWER_REQUEST_TYPE = extern enum {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired,
};
pub const POWER_REQUEST_TYPE = enum__POWER_REQUEST_TYPE;
pub const PPOWER_REQUEST_TYPE = [*c]enum__POWER_REQUEST_TYPE;
pub const struct_CM_Power_Data_s = extern struct {
    PD_Size: DWORD,
    PD_MostRecentPowerState: DEVICE_POWER_STATE,
    PD_Capabilities: DWORD,
    PD_D1Latency: DWORD,
    PD_D2Latency: DWORD,
    PD_D3Latency: DWORD,
    PD_PowerStateMapping: [7]DEVICE_POWER_STATE,
    PD_DeepestSystemWake: SYSTEM_POWER_STATE,
};
pub const CM_POWER_DATA = struct_CM_Power_Data_s;
pub const PCM_POWER_DATA = [*c]struct_CM_Power_Data_s;
pub const SystemPowerPolicyAc = 0;
pub const SystemPowerPolicyDc = 1;
pub const VerifySystemPolicyAc = 2;
pub const VerifySystemPolicyDc = 3;
pub const SystemPowerCapabilities = 4;
pub const SystemBatteryState = 5;
pub const SystemPowerStateHandler = 6;
pub const ProcessorStateHandler = 7;
pub const SystemPowerPolicyCurrent = 8;
pub const AdministratorPowerPolicy = 9;
pub const SystemReserveHiberFile = 10;
pub const ProcessorInformation = 11;
pub const SystemPowerInformation = 12;
pub const ProcessorStateHandler2 = 13;
pub const LastWakeTime = 14;
pub const LastSleepTime = 15;
pub const SystemExecutionState = 16;
pub const SystemPowerStateNotifyHandler = 17;
pub const ProcessorPowerPolicyAc = 18;
pub const ProcessorPowerPolicyDc = 19;
pub const VerifyProcessorPowerPolicyAc = 20;
pub const VerifyProcessorPowerPolicyDc = 21;
pub const ProcessorPowerPolicyCurrent = 22;
pub const SystemPowerStateLogging = 23;
pub const SystemPowerLoggingEntry = 24;
pub const SetPowerSettingValue = 25;
pub const NotifyUserPowerSetting = 26;
pub const PowerInformationLevelUnused0 = 27;
pub const SystemMonitorHiberBootPowerOff = 28;
pub const SystemVideoState = 29;
pub const TraceApplicationPowerMessage = 30;
pub const TraceApplicationPowerMessageEnd = 31;
pub const ProcessorPerfStates = 32;
pub const ProcessorIdleStates = 33;
pub const ProcessorCap = 34;
pub const SystemWakeSource = 35;
pub const SystemHiberFileInformation = 36;
pub const TraceServicePowerMessage = 37;
pub const ProcessorLoad = 38;
pub const PowerShutdownNotification = 39;
pub const MonitorCapabilities = 40;
pub const SessionPowerInit = 41;
pub const SessionDisplayState = 42;
pub const PowerRequestCreate = 43;
pub const PowerRequestAction = 44;
pub const GetPowerRequestList = 45;
pub const ProcessorInformationEx = 46;
pub const NotifyUserModeLegacyPowerEvent = 47;
pub const GroupPark = 48;
pub const ProcessorIdleDomains = 49;
pub const WakeTimerList = 50;
pub const SystemHiberFileSize = 51;
pub const ProcessorIdleStatesHv = 52;
pub const ProcessorPerfStatesHv = 53;
pub const ProcessorPerfCapHv = 54;
pub const ProcessorSetIdle = 55;
pub const LogicalProcessorIdling = 56;
pub const UserPresence = 57;
pub const PowerSettingNotificationName = 58;
pub const GetPowerSettingValue = 59;
pub const IdleResiliency = 60;
pub const SessionRITState = 61;
pub const SessionConnectNotification = 62;
pub const SessionPowerCleanup = 63;
pub const SessionLockState = 64;
pub const SystemHiberbootState = 65;
pub const PlatformInformation = 66;
pub const PdcInvocation = 67;
pub const MonitorInvocation = 68;
pub const FirmwareTableInformationRegistered = 69;
pub const SetShutdownSelectedTime = 70;
pub const SuspendResumeInvocation = 71;
pub const PlmPowerRequestCreate = 72;
pub const ScreenOff = 73;
pub const CsDeviceNotification = 74;
pub const PlatformRole = 75;
pub const LastResumePerformance = 76;
pub const DisplayBurst = 77;
pub const ExitLatencySamplingPercentage = 78;
pub const RegisterSpmPowerSettings = 79;
pub const PlatformIdleStates = 80;
pub const ProcessorIdleVeto = 81;
pub const PlatformIdleVeto = 82;
pub const SystemBatteryStatePrecise = 83;
pub const ThermalEvent = 84;
pub const PowerRequestActionInternal = 85;
pub const BatteryDeviceState = 86;
pub const PowerInformationInternal = 87;
pub const ThermalStandby = 88;
pub const SystemHiberFileType = 89;
pub const PhysicalPowerButtonPress = 90;
pub const QueryPotentialDripsConstraint = 91;
pub const EnergyTrackerCreate = 92;
pub const EnergyTrackerQuery = 93;
pub const UpdateBlackBoxRecorder = 94;
pub const PowerInformationLevelMaximum = 95;
pub const POWER_INFORMATION_LEVEL = extern enum {
    SystemPowerPolicyAc = 0,
    SystemPowerPolicyDc = 1,
    VerifySystemPolicyAc = 2,
    VerifySystemPolicyDc = 3,
    SystemPowerCapabilities = 4,
    SystemBatteryState = 5,
    SystemPowerStateHandler = 6,
    ProcessorStateHandler = 7,
    SystemPowerPolicyCurrent = 8,
    AdministratorPowerPolicy = 9,
    SystemReserveHiberFile = 10,
    ProcessorInformation = 11,
    SystemPowerInformation = 12,
    ProcessorStateHandler2 = 13,
    LastWakeTime = 14,
    LastSleepTime = 15,
    SystemExecutionState = 16,
    SystemPowerStateNotifyHandler = 17,
    ProcessorPowerPolicyAc = 18,
    ProcessorPowerPolicyDc = 19,
    VerifyProcessorPowerPolicyAc = 20,
    VerifyProcessorPowerPolicyDc = 21,
    ProcessorPowerPolicyCurrent = 22,
    SystemPowerStateLogging = 23,
    SystemPowerLoggingEntry = 24,
    SetPowerSettingValue = 25,
    NotifyUserPowerSetting = 26,
    PowerInformationLevelUnused0 = 27,
    SystemMonitorHiberBootPowerOff = 28,
    SystemVideoState = 29,
    TraceApplicationPowerMessage = 30,
    TraceApplicationPowerMessageEnd = 31,
    ProcessorPerfStates = 32,
    ProcessorIdleStates = 33,
    ProcessorCap = 34,
    SystemWakeSource = 35,
    SystemHiberFileInformation = 36,
    TraceServicePowerMessage = 37,
    ProcessorLoad = 38,
    PowerShutdownNotification = 39,
    MonitorCapabilities = 40,
    SessionPowerInit = 41,
    SessionDisplayState = 42,
    PowerRequestCreate = 43,
    PowerRequestAction = 44,
    GetPowerRequestList = 45,
    ProcessorInformationEx = 46,
    NotifyUserModeLegacyPowerEvent = 47,
    GroupPark = 48,
    ProcessorIdleDomains = 49,
    WakeTimerList = 50,
    SystemHiberFileSize = 51,
    ProcessorIdleStatesHv = 52,
    ProcessorPerfStatesHv = 53,
    ProcessorPerfCapHv = 54,
    ProcessorSetIdle = 55,
    LogicalProcessorIdling = 56,
    UserPresence = 57,
    PowerSettingNotificationName = 58,
    GetPowerSettingValue = 59,
    IdleResiliency = 60,
    SessionRITState = 61,
    SessionConnectNotification = 62,
    SessionPowerCleanup = 63,
    SessionLockState = 64,
    SystemHiberbootState = 65,
    PlatformInformation = 66,
    PdcInvocation = 67,
    MonitorInvocation = 68,
    FirmwareTableInformationRegistered = 69,
    SetShutdownSelectedTime = 70,
    SuspendResumeInvocation = 71,
    PlmPowerRequestCreate = 72,
    ScreenOff = 73,
    CsDeviceNotification = 74,
    PlatformRole = 75,
    LastResumePerformance = 76,
    DisplayBurst = 77,
    ExitLatencySamplingPercentage = 78,
    RegisterSpmPowerSettings = 79,
    PlatformIdleStates = 80,
    ProcessorIdleVeto = 81,
    PlatformIdleVeto = 82,
    SystemBatteryStatePrecise = 83,
    ThermalEvent = 84,
    PowerRequestActionInternal = 85,
    BatteryDeviceState = 86,
    PowerInformationInternal = 87,
    ThermalStandby = 88,
    SystemHiberFileType = 89,
    PhysicalPowerButtonPress = 90,
    QueryPotentialDripsConstraint = 91,
    EnergyTrackerCreate = 92,
    EnergyTrackerQuery = 93,
    UpdateBlackBoxRecorder = 94,
    PowerInformationLevelMaximum = 95,
};
pub const UserNotPresent = 0;
pub const UserPresent = 1;
pub const UserUnknown = 255;
pub const POWER_USER_PRESENCE_TYPE = extern enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 255,
};
pub const PPOWER_USER_PRESENCE_TYPE = [*c]extern enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 255,
};
pub const struct__POWER_USER_PRESENCE = extern struct {
    UserPresence: POWER_USER_PRESENCE_TYPE,
};
pub const POWER_USER_PRESENCE = struct__POWER_USER_PRESENCE;
pub const PPOWER_USER_PRESENCE = [*c]struct__POWER_USER_PRESENCE;
pub const struct__POWER_SESSION_CONNECT = extern struct {
    Connected: BOOLEAN,
    Console: BOOLEAN,
};
pub const POWER_SESSION_CONNECT = struct__POWER_SESSION_CONNECT;
pub const PPOWER_SESSION_CONNECT = [*c]struct__POWER_SESSION_CONNECT;
pub const struct__POWER_SESSION_TIMEOUTS = extern struct {
    InputTimeout: DWORD,
    DisplayTimeout: DWORD,
};
pub const POWER_SESSION_TIMEOUTS = struct__POWER_SESSION_TIMEOUTS;
pub const PPOWER_SESSION_TIMEOUTS = [*c]struct__POWER_SESSION_TIMEOUTS;
pub const struct__POWER_SESSION_RIT_STATE = extern struct {
    Active: BOOLEAN,
    LastInputTime: DWORD,
};
pub const POWER_SESSION_RIT_STATE = struct__POWER_SESSION_RIT_STATE;
pub const PPOWER_SESSION_RIT_STATE = [*c]struct__POWER_SESSION_RIT_STATE;
pub const struct__POWER_SESSION_WINLOGON = extern struct {
    SessionId: DWORD,
    Console: BOOLEAN,
    Locked: BOOLEAN,
};
pub const POWER_SESSION_WINLOGON = struct__POWER_SESSION_WINLOGON;
pub const PPOWER_SESSION_WINLOGON = [*c]struct__POWER_SESSION_WINLOGON;
pub const struct__POWER_IDLE_RESILIENCY = extern struct {
    CoalescingTimeout: DWORD,
    IdleResiliencyPeriod: DWORD,
};
pub const POWER_IDLE_RESILIENCY = struct__POWER_IDLE_RESILIENCY;
pub const PPOWER_IDLE_RESILIENCY = [*c]struct__POWER_IDLE_RESILIENCY;
pub const MonitorRequestReasonUnknown = 0;
pub const MonitorRequestReasonPowerButton = 1;
pub const MonitorRequestReasonRemoteConnection = 2;
pub const MonitorRequestReasonScMonitorpower = 3;
pub const MonitorRequestReasonUserInput = 4;
pub const MonitorRequestReasonAcDcDisplayBurst = 5;
pub const MonitorRequestReasonUserDisplayBurst = 6;
pub const MonitorRequestReasonPoSetSystemState = 7;
pub const MonitorRequestReasonSetThreadExecutionState = 8;
pub const MonitorRequestReasonFullWake = 9;
pub const MonitorRequestReasonSessionUnlock = 10;
pub const MonitorRequestReasonScreenOffRequest = 11;
pub const MonitorRequestReasonIdleTimeout = 12;
pub const MonitorRequestReasonPolicyChange = 13;
pub const MonitorRequestReasonSleepButton = 14;
pub const MonitorRequestReasonLid = 15;
pub const MonitorRequestReasonBatteryCountChange = 16;
pub const MonitorRequestReasonGracePeriod = 17;
pub const MonitorRequestReasonPnP = 18;
pub const MonitorRequestReasonDP = 19;
pub const MonitorRequestReasonSxTransition = 20;
pub const MonitorRequestReasonSystemIdle = 21;
pub const MonitorRequestReasonNearProximity = 22;
pub const MonitorRequestReasonThermalStandby = 23;
pub const MonitorRequestReasonResumePdc = 24;
pub const MonitorRequestReasonResumeS4 = 25;
pub const MonitorRequestReasonTerminal = 26;
pub const MonitorRequestReasonPdcSignal = 27;
pub const MonitorRequestReasonAcDcDisplayBurstSuppressed = 28;
pub const MonitorRequestReasonSystemStateEntered = 29;
pub const MonitorRequestReasonWinrt = 30;
pub const MonitorRequestReasonUserInputKeyboard = 31;
pub const MonitorRequestReasonUserInputMouse = 32;
pub const MonitorRequestReasonUserInputTouch = 33;
pub const MonitorRequestReasonUserInputPen = 34;
pub const MonitorRequestReasonUserInputAccelerometer = 35;
pub const MonitorRequestReasonUserInputHid = 36;
pub const MonitorRequestReasonUserInputPoUserPresent = 37;
pub const MonitorRequestReasonUserInputSessionSwitch = 38;
pub const MonitorRequestReasonUserInputInitialization = 39;
pub const MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40;
pub const MonitorRequestReasonPdcSignalWindowsMobileShell = 41;
pub const MonitorRequestReasonPdcSignalHeyCortana = 42;
pub const MonitorRequestReasonPdcSignalHolographicShell = 43;
pub const MonitorRequestReasonPdcSignalFingerprint = 44;
pub const MonitorRequestReasonDirectedDrips = 45;
pub const MonitorRequestReasonMax = 46;
pub const POWER_MONITOR_REQUEST_REASON = extern enum {
    MonitorRequestReasonUnknown = 0,
    MonitorRequestReasonPowerButton = 1,
    MonitorRequestReasonRemoteConnection = 2,
    MonitorRequestReasonScMonitorpower = 3,
    MonitorRequestReasonUserInput = 4,
    MonitorRequestReasonAcDcDisplayBurst = 5,
    MonitorRequestReasonUserDisplayBurst = 6,
    MonitorRequestReasonPoSetSystemState = 7,
    MonitorRequestReasonSetThreadExecutionState = 8,
    MonitorRequestReasonFullWake = 9,
    MonitorRequestReasonSessionUnlock = 10,
    MonitorRequestReasonScreenOffRequest = 11,
    MonitorRequestReasonIdleTimeout = 12,
    MonitorRequestReasonPolicyChange = 13,
    MonitorRequestReasonSleepButton = 14,
    MonitorRequestReasonLid = 15,
    MonitorRequestReasonBatteryCountChange = 16,
    MonitorRequestReasonGracePeriod = 17,
    MonitorRequestReasonPnP = 18,
    MonitorRequestReasonDP = 19,
    MonitorRequestReasonSxTransition = 20,
    MonitorRequestReasonSystemIdle = 21,
    MonitorRequestReasonNearProximity = 22,
    MonitorRequestReasonThermalStandby = 23,
    MonitorRequestReasonResumePdc = 24,
    MonitorRequestReasonResumeS4 = 25,
    MonitorRequestReasonTerminal = 26,
    MonitorRequestReasonPdcSignal = 27,
    MonitorRequestReasonAcDcDisplayBurstSuppressed = 28,
    MonitorRequestReasonSystemStateEntered = 29,
    MonitorRequestReasonWinrt = 30,
    MonitorRequestReasonUserInputKeyboard = 31,
    MonitorRequestReasonUserInputMouse = 32,
    MonitorRequestReasonUserInputTouch = 33,
    MonitorRequestReasonUserInputPen = 34,
    MonitorRequestReasonUserInputAccelerometer = 35,
    MonitorRequestReasonUserInputHid = 36,
    MonitorRequestReasonUserInputPoUserPresent = 37,
    MonitorRequestReasonUserInputSessionSwitch = 38,
    MonitorRequestReasonUserInputInitialization = 39,
    MonitorRequestReasonPdcSignalWindowsMobilePwrNotif = 40,
    MonitorRequestReasonPdcSignalWindowsMobileShell = 41,
    MonitorRequestReasonPdcSignalHeyCortana = 42,
    MonitorRequestReasonPdcSignalHolographicShell = 43,
    MonitorRequestReasonPdcSignalFingerprint = 44,
    MonitorRequestReasonDirectedDrips = 45,
    MonitorRequestReasonMax = 46,
};
pub const MonitorRequestTypeOff = enum__POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeOff;
pub const MonitorRequestTypeOnAndPresent = enum__POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeOnAndPresent;
pub const MonitorRequestTypeToggleOn = enum__POWER_MONITOR_REQUEST_TYPE.MonitorRequestTypeToggleOn;
pub const enum__POWER_MONITOR_REQUEST_TYPE = extern enum {
    MonitorRequestTypeOff,
    MonitorRequestTypeOnAndPresent,
    MonitorRequestTypeToggleOn,
};
pub const POWER_MONITOR_REQUEST_TYPE = enum__POWER_MONITOR_REQUEST_TYPE;
pub const struct__POWER_MONITOR_INVOCATION = extern struct {
    Console: BOOLEAN,
    RequestReason: POWER_MONITOR_REQUEST_REASON,
};
pub const POWER_MONITOR_INVOCATION = struct__POWER_MONITOR_INVOCATION;
pub const PPOWER_MONITOR_INVOCATION = [*c]struct__POWER_MONITOR_INVOCATION;
pub const struct__RESUME_PERFORMANCE = extern struct {
    PostTimeMs: DWORD,
    TotalResumeTimeMs: ULONGLONG,
    ResumeCompleteTimestamp: ULONGLONG,
};
pub const RESUME_PERFORMANCE = struct__RESUME_PERFORMANCE;
pub const PRESUME_PERFORMANCE = [*c]struct__RESUME_PERFORMANCE;
pub const PoAc = 0;
pub const PoDc = 1;
pub const PoHot = 2;
pub const PoConditionMaximum = 3;
pub const SYSTEM_POWER_CONDITION = extern enum {
    PoAc = 0,
    PoDc = 1,
    PoHot = 2,
    PoConditionMaximum = 3,
};
pub const SET_POWER_SETTING_VALUE = extern struct {
    Version: DWORD,
    Guid: GUID,
    PowerCondition: SYSTEM_POWER_CONDITION,
    DataLength: DWORD,
    Data: [1]BYTE,
};
pub const PSET_POWER_SETTING_VALUE = [*c]extern struct {
    Version: DWORD,
    Guid: GUID,
    PowerCondition: SYSTEM_POWER_CONDITION,
    DataLength: DWORD,
    Data: [1]BYTE,
};
pub const NOTIFY_USER_POWER_SETTING = extern struct {
    Guid: GUID,
};
pub const PNOTIFY_USER_POWER_SETTING = [*c]extern struct {
    Guid: GUID,
};
pub const struct__APPLICATIONLAUNCH_SETTING_VALUE = extern struct {
    ActivationTime: LARGE_INTEGER,
    Flags: DWORD,
    ButtonInstanceID: DWORD,
};
pub const APPLICATIONLAUNCH_SETTING_VALUE = struct__APPLICATIONLAUNCH_SETTING_VALUE;
pub const PAPPLICATIONLAUNCH_SETTING_VALUE = [*c]struct__APPLICATIONLAUNCH_SETTING_VALUE;
pub const PlatformRoleUnspecified = enum__POWER_PLATFORM_ROLE.PlatformRoleUnspecified;
pub const PlatformRoleDesktop = enum__POWER_PLATFORM_ROLE.PlatformRoleDesktop;
pub const PlatformRoleMobile = enum__POWER_PLATFORM_ROLE.PlatformRoleMobile;
pub const PlatformRoleWorkstation = enum__POWER_PLATFORM_ROLE.PlatformRoleWorkstation;
pub const PlatformRoleEnterpriseServer = enum__POWER_PLATFORM_ROLE.PlatformRoleEnterpriseServer;
pub const PlatformRoleSOHOServer = enum__POWER_PLATFORM_ROLE.PlatformRoleSOHOServer;
pub const PlatformRoleAppliancePC = enum__POWER_PLATFORM_ROLE.PlatformRoleAppliancePC;
pub const PlatformRolePerformanceServer = enum__POWER_PLATFORM_ROLE.PlatformRolePerformanceServer;
pub const PlatformRoleSlate = enum__POWER_PLATFORM_ROLE.PlatformRoleSlate;
pub const PlatformRoleMaximum = enum__POWER_PLATFORM_ROLE.PlatformRoleMaximum;
pub const enum__POWER_PLATFORM_ROLE = extern enum {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop = 1,
    PlatformRoleMobile = 2,
    PlatformRoleWorkstation = 3,
    PlatformRoleEnterpriseServer = 4,
    PlatformRoleSOHOServer = 5,
    PlatformRoleAppliancePC = 6,
    PlatformRolePerformanceServer = 7,
    PlatformRoleSlate = 8,
    PlatformRoleMaximum = 9,
};
pub const POWER_PLATFORM_ROLE = enum__POWER_PLATFORM_ROLE;
pub const PPOWER_PLATFORM_ROLE = [*c]enum__POWER_PLATFORM_ROLE;
pub const struct__POWER_PLATFORM_INFORMATION = extern struct {
    AoAc: BOOLEAN,
};
pub const POWER_PLATFORM_INFORMATION = struct__POWER_PLATFORM_INFORMATION;
pub const PPOWER_PLATFORM_INFORMATION = [*c]struct__POWER_PLATFORM_INFORMATION;
pub const BATTERY_REPORTING_SCALE = extern struct {
    Granularity: DWORD,
    Capacity: DWORD,
};
pub const PBATTERY_REPORTING_SCALE = [*c]extern struct {
    Granularity: DWORD,
    Capacity: DWORD,
};
pub const PPM_WMI_LEGACY_PERFSTATE = extern struct {
    Frequency: DWORD,
    Flags: DWORD,
    PercentFrequency: DWORD,
};
pub const PPPM_WMI_LEGACY_PERFSTATE = [*c]extern struct {
    Frequency: DWORD,
    Flags: DWORD,
    PercentFrequency: DWORD,
};
pub const PPM_WMI_IDLE_STATE = extern struct {
    Latency: DWORD,
    Power: DWORD,
    TimeCheck: DWORD,
    PromotePercent: BYTE,
    DemotePercent: BYTE,
    StateType: BYTE,
    Reserved: BYTE,
    StateFlags: DWORD,
    Context: DWORD,
    IdleHandler: DWORD,
    Reserved1: DWORD,
};
pub const PPPM_WMI_IDLE_STATE = [*c]extern struct {
    Latency: DWORD,
    Power: DWORD,
    TimeCheck: DWORD,
    PromotePercent: BYTE,
    DemotePercent: BYTE,
    StateType: BYTE,
    Reserved: BYTE,
    StateFlags: DWORD,
    Context: DWORD,
    IdleHandler: DWORD,
    Reserved1: DWORD,
};
pub const PPM_WMI_IDLE_STATES = extern struct {
    Type: DWORD,
    Count: DWORD,
    TargetState: DWORD,
    OldState: DWORD,
    TargetProcessors: DWORD64,
    State: [1]PPM_WMI_IDLE_STATE,
};
pub const PPPM_WMI_IDLE_STATES = [*c]extern struct {
    Type: DWORD,
    Count: DWORD,
    TargetState: DWORD,
    OldState: DWORD,
    TargetProcessors: DWORD64,
    State: [1]PPM_WMI_IDLE_STATE,
};
pub const PPM_WMI_IDLE_STATES_EX = extern struct {
    Type: DWORD,
    Count: DWORD,
    TargetState: DWORD,
    OldState: DWORD,
    TargetProcessors: PVOID,
    State: [1]PPM_WMI_IDLE_STATE,
};
pub const PPPM_WMI_IDLE_STATES_EX = [*c]extern struct {
    Type: DWORD,
    Count: DWORD,
    TargetState: DWORD,
    OldState: DWORD,
    TargetProcessors: PVOID,
    State: [1]PPM_WMI_IDLE_STATE,
};
pub const PPM_WMI_PERF_STATE = extern struct {
    Frequency: DWORD,
    Power: DWORD,
    PercentFrequency: BYTE,
    IncreaseLevel: BYTE,
    DecreaseLevel: BYTE,
    Type: BYTE,
    IncreaseTime: DWORD,
    DecreaseTime: DWORD,
    Control: DWORD64,
    Status: DWORD64,
    HitCount: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    Reserved3: DWORD64,
};
pub const PPPM_WMI_PERF_STATE = [*c]extern struct {
    Frequency: DWORD,
    Power: DWORD,
    PercentFrequency: BYTE,
    IncreaseLevel: BYTE,
    DecreaseLevel: BYTE,
    Type: BYTE,
    IncreaseTime: DWORD,
    DecreaseTime: DWORD,
    Control: DWORD64,
    Status: DWORD64,
    HitCount: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    Reserved3: DWORD64,
};
pub const PPM_WMI_PERF_STATES = extern struct {
    Count: DWORD,
    MaxFrequency: DWORD,
    CurrentState: DWORD,
    MaxPerfState: DWORD,
    MinPerfState: DWORD,
    LowestPerfState: DWORD,
    ThermalConstraint: DWORD,
    BusyAdjThreshold: BYTE,
    PolicyType: BYTE,
    Type: BYTE,
    Reserved: BYTE,
    TimerInterval: DWORD,
    TargetProcessors: DWORD64,
    PStateHandler: DWORD,
    PStateContext: DWORD,
    TStateHandler: DWORD,
    TStateContext: DWORD,
    FeedbackHandler: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    State: [1]PPM_WMI_PERF_STATE,
};
pub const PPPM_WMI_PERF_STATES = [*c]extern struct {
    Count: DWORD,
    MaxFrequency: DWORD,
    CurrentState: DWORD,
    MaxPerfState: DWORD,
    MinPerfState: DWORD,
    LowestPerfState: DWORD,
    ThermalConstraint: DWORD,
    BusyAdjThreshold: BYTE,
    PolicyType: BYTE,
    Type: BYTE,
    Reserved: BYTE,
    TimerInterval: DWORD,
    TargetProcessors: DWORD64,
    PStateHandler: DWORD,
    PStateContext: DWORD,
    TStateHandler: DWORD,
    TStateContext: DWORD,
    FeedbackHandler: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    State: [1]PPM_WMI_PERF_STATE,
};
pub const PPM_WMI_PERF_STATES_EX = extern struct {
    Count: DWORD,
    MaxFrequency: DWORD,
    CurrentState: DWORD,
    MaxPerfState: DWORD,
    MinPerfState: DWORD,
    LowestPerfState: DWORD,
    ThermalConstraint: DWORD,
    BusyAdjThreshold: BYTE,
    PolicyType: BYTE,
    Type: BYTE,
    Reserved: BYTE,
    TimerInterval: DWORD,
    TargetProcessors: PVOID,
    PStateHandler: DWORD,
    PStateContext: DWORD,
    TStateHandler: DWORD,
    TStateContext: DWORD,
    FeedbackHandler: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    State: [1]PPM_WMI_PERF_STATE,
};
pub const PPPM_WMI_PERF_STATES_EX = [*c]extern struct {
    Count: DWORD,
    MaxFrequency: DWORD,
    CurrentState: DWORD,
    MaxPerfState: DWORD,
    MinPerfState: DWORD,
    LowestPerfState: DWORD,
    ThermalConstraint: DWORD,
    BusyAdjThreshold: BYTE,
    PolicyType: BYTE,
    Type: BYTE,
    Reserved: BYTE,
    TimerInterval: DWORD,
    TargetProcessors: PVOID,
    PStateHandler: DWORD,
    PStateContext: DWORD,
    TStateHandler: DWORD,
    TStateContext: DWORD,
    FeedbackHandler: DWORD,
    Reserved1: DWORD,
    Reserved2: DWORD64,
    State: [1]PPM_WMI_PERF_STATE,
};
pub const PPM_IDLE_STATE_ACCOUNTING = extern struct {
    IdleTransitions: DWORD,
    FailedTransitions: DWORD,
    InvalidBucketIndex: DWORD,
    TotalTime: DWORD64,
    IdleTimeBuckets: [6]DWORD,
};
pub const PPPM_IDLE_STATE_ACCOUNTING = [*c]extern struct {
    IdleTransitions: DWORD,
    FailedTransitions: DWORD,
    InvalidBucketIndex: DWORD,
    TotalTime: DWORD64,
    IdleTimeBuckets: [6]DWORD,
};
pub const PPM_IDLE_ACCOUNTING = extern struct {
    StateCount: DWORD,
    TotalTransitions: DWORD,
    ResetCount: DWORD,
    StartTime: DWORD64,
    State: [1]PPM_IDLE_STATE_ACCOUNTING,
};
pub const PPPM_IDLE_ACCOUNTING = [*c]extern struct {
    StateCount: DWORD,
    TotalTransitions: DWORD,
    ResetCount: DWORD,
    StartTime: DWORD64,
    State: [1]PPM_IDLE_STATE_ACCOUNTING,
};
pub const PPM_IDLE_STATE_BUCKET_EX = extern struct {
    TotalTimeUs: DWORD64,
    MinTimeUs: DWORD,
    MaxTimeUs: DWORD,
    Count: DWORD,
};
pub const PPPM_IDLE_STATE_BUCKET_EX = [*c]extern struct {
    TotalTimeUs: DWORD64,
    MinTimeUs: DWORD,
    MaxTimeUs: DWORD,
    Count: DWORD,
};
pub const PPM_IDLE_STATE_ACCOUNTING_EX = extern struct {
    TotalTime: DWORD64,
    IdleTransitions: DWORD,
    FailedTransitions: DWORD,
    InvalidBucketIndex: DWORD,
    MinTimeUs: DWORD,
    MaxTimeUs: DWORD,
    CancelledTransitions: DWORD,
    IdleTimeBuckets: [16]PPM_IDLE_STATE_BUCKET_EX,
};
pub const PPPM_IDLE_STATE_ACCOUNTING_EX = [*c]extern struct {
    TotalTime: DWORD64,
    IdleTransitions: DWORD,
    FailedTransitions: DWORD,
    InvalidBucketIndex: DWORD,
    MinTimeUs: DWORD,
    MaxTimeUs: DWORD,
    CancelledTransitions: DWORD,
    IdleTimeBuckets: [16]PPM_IDLE_STATE_BUCKET_EX,
};
pub const PPM_IDLE_ACCOUNTING_EX = extern struct {
    StateCount: DWORD,
    TotalTransitions: DWORD,
    ResetCount: DWORD,
    AbortCount: DWORD,
    StartTime: DWORD64,
    State: [1]PPM_IDLE_STATE_ACCOUNTING_EX,
};
pub const PPPM_IDLE_ACCOUNTING_EX = [*c]extern struct {
    StateCount: DWORD,
    TotalTransitions: DWORD,
    ResetCount: DWORD,
    AbortCount: DWORD,
    StartTime: DWORD64,
    State: [1]PPM_IDLE_STATE_ACCOUNTING_EX,
};
extern const PPM_PERFSTATE_CHANGE_GUID: GUID;
extern const PPM_PERFSTATE_DOMAIN_CHANGE_GUID: GUID;
extern const PPM_IDLESTATE_CHANGE_GUID: GUID;
extern const PPM_PERFSTATES_DATA_GUID: GUID;
extern const PPM_IDLESTATES_DATA_GUID: GUID;
extern const PPM_IDLE_ACCOUNTING_GUID: GUID;
extern const PPM_IDLE_ACCOUNTING_EX_GUID: GUID;
extern const PPM_THERMALCONSTRAINT_GUID: GUID;
extern const PPM_PERFMON_PERFSTATE_GUID: GUID;
extern const PPM_THERMAL_POLICY_CHANGE_GUID: GUID;
pub const PPM_PERFSTATE_EVENT = extern struct {
    State: DWORD,
    Status: DWORD,
    Latency: DWORD,
    Speed: DWORD,
    Processor: DWORD,
};
pub const PPPM_PERFSTATE_EVENT = [*c]extern struct {
    State: DWORD,
    Status: DWORD,
    Latency: DWORD,
    Speed: DWORD,
    Processor: DWORD,
};
pub const PPM_PERFSTATE_DOMAIN_EVENT = extern struct {
    State: DWORD,
    Latency: DWORD,
    Speed: DWORD,
    Processors: DWORD64,
};
pub const PPPM_PERFSTATE_DOMAIN_EVENT = [*c]extern struct {
    State: DWORD,
    Latency: DWORD,
    Speed: DWORD,
    Processors: DWORD64,
};
pub const PPM_IDLESTATE_EVENT = extern struct {
    NewState: DWORD,
    OldState: DWORD,
    Processors: DWORD64,
};
pub const PPPM_IDLESTATE_EVENT = [*c]extern struct {
    NewState: DWORD,
    OldState: DWORD,
    Processors: DWORD64,
};
pub const PPM_THERMALCHANGE_EVENT = extern struct {
    ThermalConstraint: DWORD,
    Processors: DWORD64,
};
pub const PPPM_THERMALCHANGE_EVENT = [*c]extern struct {
    ThermalConstraint: DWORD,
    Processors: DWORD64,
};
pub const PPM_THERMAL_POLICY_EVENT = extern struct {
    Mode: BYTE,
    Processors: DWORD64,
};
pub const PPPM_THERMAL_POLICY_EVENT = [*c]extern struct {
    Mode: BYTE,
    Processors: DWORD64,
};
pub const POWER_ACTION_POLICY = extern struct {
    Action: POWER_ACTION,
    Flags: DWORD,
    EventCode: DWORD,
};
pub const PPOWER_ACTION_POLICY = [*c]extern struct {
    Action: POWER_ACTION,
    Flags: DWORD,
    EventCode: DWORD,
};
pub const SYSTEM_POWER_LEVEL = extern struct {
    Enable: BOOLEAN,
    Spare: [3]BYTE,
    BatteryLevel: DWORD,
    PowerPolicy: POWER_ACTION_POLICY,
    MinSystemState: SYSTEM_POWER_STATE,
};
pub const PSYSTEM_POWER_LEVEL = [*c]extern struct {
    Enable: BOOLEAN,
    Spare: [3]BYTE,
    BatteryLevel: DWORD,
    PowerPolicy: POWER_ACTION_POLICY,
    MinSystemState: SYSTEM_POWER_STATE,
};
pub const struct__SYSTEM_POWER_POLICY = extern struct {
    Revision: DWORD,
    PowerButton: POWER_ACTION_POLICY,
    SleepButton: POWER_ACTION_POLICY,
    LidClose: POWER_ACTION_POLICY,
    LidOpenWake: SYSTEM_POWER_STATE,
    Reserved: DWORD,
    Idle: POWER_ACTION_POLICY,
    IdleTimeout: DWORD,
    IdleSensitivity: BYTE,
    DynamicThrottle: BYTE,
    Spare2: [2]BYTE,
    MinSleep: SYSTEM_POWER_STATE,
    MaxSleep: SYSTEM_POWER_STATE,
    ReducedLatencySleep: SYSTEM_POWER_STATE,
    WinLogonFlags: DWORD,
    Spare3: DWORD,
    DozeS4Timeout: DWORD,
    BroadcastCapacityResolution: DWORD,
    DischargePolicy: [4]SYSTEM_POWER_LEVEL,
    VideoTimeout: DWORD,
    VideoDimDisplay: BOOLEAN,
    VideoReserved: [3]DWORD,
    SpindownTimeout: DWORD,
    OptimizeForPower: BOOLEAN,
    FanThrottleTolerance: BYTE,
    ForcedThrottle: BYTE,
    MinThrottle: BYTE,
    OverThrottled: POWER_ACTION_POLICY,
};
pub const SYSTEM_POWER_POLICY = struct__SYSTEM_POWER_POLICY;
pub const PSYSTEM_POWER_POLICY = [*c]struct__SYSTEM_POWER_POLICY;
pub const PROCESSOR_IDLESTATE_INFO = extern struct {
    TimeCheck: DWORD,
    DemotePercent: BYTE,
    PromotePercent: BYTE,
    Spare: [2]BYTE,
};
pub const PPROCESSOR_IDLESTATE_INFO = [*c]extern struct {
    TimeCheck: DWORD,
    DemotePercent: BYTE,
    PromotePercent: BYTE,
    Spare: [2]BYTE,
};
pub const PROCESSOR_IDLESTATE_POLICY = extern struct {
    Revision: WORD,
    Flags: extern union {
        AsWORD: WORD,
        @"": opaque {},
    },
    PolicyCount: DWORD,
    Policy: [3]PROCESSOR_IDLESTATE_INFO,
};
pub const PPROCESSOR_IDLESTATE_POLICY = [*c]extern struct {
    Revision: WORD,
    Flags: extern union {
        AsWORD: WORD,
        @"": opaque {},
    },
    PolicyCount: DWORD,
    Policy: [3]PROCESSOR_IDLESTATE_INFO,
};
pub const struct__PROCESSOR_POWER_POLICY_INFO = opaque {};
pub const PROCESSOR_POWER_POLICY_INFO = struct__PROCESSOR_POWER_POLICY_INFO;
pub const PPROCESSOR_POWER_POLICY_INFO = ?*struct__PROCESSOR_POWER_POLICY_INFO;
pub const struct__PROCESSOR_POWER_POLICY = opaque {};
pub const PROCESSOR_POWER_POLICY = struct__PROCESSOR_POWER_POLICY;
pub const PPROCESSOR_POWER_POLICY = ?*struct__PROCESSOR_POWER_POLICY;
pub const PROCESSOR_PERFSTATE_POLICY = extern struct {
    Revision: DWORD,
    MaxThrottle: BYTE,
    MinThrottle: BYTE,
    BusyAdjThreshold: BYTE,
    @"": extern union {
        Spare: BYTE,
        Flags: extern union {
            AsBYTE: BYTE,
            @"": opaque {},
        },
    },
    TimeCheck: DWORD,
    IncreaseTime: DWORD,
    DecreaseTime: DWORD,
    IncreasePercent: DWORD,
    DecreasePercent: DWORD,
};
pub const PPROCESSOR_PERFSTATE_POLICY = [*c]extern struct {
    Revision: DWORD,
    MaxThrottle: BYTE,
    MinThrottle: BYTE,
    BusyAdjThreshold: BYTE,
    @"": extern union {
        Spare: BYTE,
        Flags: extern union {
            AsBYTE: BYTE,
            @"": opaque {},
        },
    },
    TimeCheck: DWORD,
    IncreaseTime: DWORD,
    DecreaseTime: DWORD,
    IncreasePercent: DWORD,
    DecreasePercent: DWORD,
};
pub const struct__ADMINISTRATOR_POWER_POLICY = extern struct {
    MinSleep: SYSTEM_POWER_STATE,
    MaxSleep: SYSTEM_POWER_STATE,
    MinVideoTimeout: DWORD,
    MaxVideoTimeout: DWORD,
    MinSpindownTimeout: DWORD,
    MaxSpindownTimeout: DWORD,
};
pub const ADMINISTRATOR_POWER_POLICY = struct__ADMINISTRATOR_POWER_POLICY;
pub const PADMINISTRATOR_POWER_POLICY = [*c]struct__ADMINISTRATOR_POWER_POLICY;
pub const HiberFileBucket1GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket1GB;
pub const HiberFileBucket2GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket2GB;
pub const HiberFileBucket4GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket4GB;
pub const HiberFileBucket8GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket8GB;
pub const HiberFileBucket16GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket16GB;
pub const HiberFileBucket32GB = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucket32GB;
pub const HiberFileBucketUnlimited = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucketUnlimited;
pub const HiberFileBucketMax = enum__HIBERFILE_BUCKET_SIZE.HiberFileBucketMax;
pub const enum__HIBERFILE_BUCKET_SIZE = extern enum {
    HiberFileBucket1GB = 0,
    HiberFileBucket2GB = 1,
    HiberFileBucket4GB = 2,
    HiberFileBucket8GB = 3,
    HiberFileBucket16GB = 4,
    HiberFileBucket32GB = 5,
    HiberFileBucketUnlimited = 6,
    HiberFileBucketMax = 7,
};
pub const HIBERFILE_BUCKET_SIZE = enum__HIBERFILE_BUCKET_SIZE;
pub const PHIBERFILE_BUCKET_SIZE = [*c]enum__HIBERFILE_BUCKET_SIZE;
pub const struct__HIBERFILE_BUCKET = extern struct {
    MaxPhysicalMemory: DWORD64,
    PhysicalMemoryPercent: [3]DWORD,
};
pub const HIBERFILE_BUCKET = struct__HIBERFILE_BUCKET;
pub const PHIBERFILE_BUCKET = [*c]struct__HIBERFILE_BUCKET;
pub const SYSTEM_POWER_CAPABILITIES = extern struct {
    PowerButtonPresent: BOOLEAN,
    SleepButtonPresent: BOOLEAN,
    LidPresent: BOOLEAN,
    SystemS1: BOOLEAN,
    SystemS2: BOOLEAN,
    SystemS3: BOOLEAN,
    SystemS4: BOOLEAN,
    SystemS5: BOOLEAN,
    HiberFilePresent: BOOLEAN,
    FullWake: BOOLEAN,
    VideoDimPresent: BOOLEAN,
    ApmPresent: BOOLEAN,
    UpsPresent: BOOLEAN,
    ThermalControl: BOOLEAN,
    ProcessorThrottle: BOOLEAN,
    ProcessorMinThrottle: BYTE,
    ProcessorMaxThrottle: BYTE,
    FastSystemS4: BOOLEAN,
    Hiberboot: BOOLEAN,
    WakeAlarmPresent: BOOLEAN,
    AoAc: BOOLEAN,
    DiskSpinDown: BOOLEAN,
    HiberFileType: BYTE,
    AoAcConnectivitySupported: BOOLEAN,
    spare3: [6]BYTE,
    SystemBatteriesPresent: BOOLEAN,
    BatteriesAreShortTerm: BOOLEAN,
    BatteryScale: [3]BATTERY_REPORTING_SCALE,
    AcOnLineWake: SYSTEM_POWER_STATE,
    SoftLidWake: SYSTEM_POWER_STATE,
    RtcWake: SYSTEM_POWER_STATE,
    MinDeviceWakeState: SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: SYSTEM_POWER_STATE,
};
pub const PSYSTEM_POWER_CAPABILITIES = [*c]extern struct {
    PowerButtonPresent: BOOLEAN,
    SleepButtonPresent: BOOLEAN,
    LidPresent: BOOLEAN,
    SystemS1: BOOLEAN,
    SystemS2: BOOLEAN,
    SystemS3: BOOLEAN,
    SystemS4: BOOLEAN,
    SystemS5: BOOLEAN,
    HiberFilePresent: BOOLEAN,
    FullWake: BOOLEAN,
    VideoDimPresent: BOOLEAN,
    ApmPresent: BOOLEAN,
    UpsPresent: BOOLEAN,
    ThermalControl: BOOLEAN,
    ProcessorThrottle: BOOLEAN,
    ProcessorMinThrottle: BYTE,
    ProcessorMaxThrottle: BYTE,
    FastSystemS4: BOOLEAN,
    Hiberboot: BOOLEAN,
    WakeAlarmPresent: BOOLEAN,
    AoAc: BOOLEAN,
    DiskSpinDown: BOOLEAN,
    HiberFileType: BYTE,
    AoAcConnectivitySupported: BOOLEAN,
    spare3: [6]BYTE,
    SystemBatteriesPresent: BOOLEAN,
    BatteriesAreShortTerm: BOOLEAN,
    BatteryScale: [3]BATTERY_REPORTING_SCALE,
    AcOnLineWake: SYSTEM_POWER_STATE,
    SoftLidWake: SYSTEM_POWER_STATE,
    RtcWake: SYSTEM_POWER_STATE,
    MinDeviceWakeState: SYSTEM_POWER_STATE,
    DefaultLowLatencyWake: SYSTEM_POWER_STATE,
};
pub const SYSTEM_BATTERY_STATE = extern struct {
    AcOnLine: BOOLEAN,
    BatteryPresent: BOOLEAN,
    Charging: BOOLEAN,
    Discharging: BOOLEAN,
    Spare1: [3]BOOLEAN,
    Tag: BYTE,
    MaxCapacity: DWORD,
    RemainingCapacity: DWORD,
    Rate: DWORD,
    EstimatedTime: DWORD,
    DefaultAlert1: DWORD,
    DefaultAlert2: DWORD,
};
pub const PSYSTEM_BATTERY_STATE = [*c]extern struct {
    AcOnLine: BOOLEAN,
    BatteryPresent: BOOLEAN,
    Charging: BOOLEAN,
    Discharging: BOOLEAN,
    Spare1: [3]BOOLEAN,
    Tag: BYTE,
    MaxCapacity: DWORD,
    RemainingCapacity: DWORD,
    Rate: DWORD,
    EstimatedTime: DWORD,
    DefaultAlert1: DWORD,
    DefaultAlert2: DWORD,
};
pub const struct__IMAGE_DOS_HEADER = extern struct {
    e_magic: WORD,
    e_cblp: WORD,
    e_cp: WORD,
    e_crlc: WORD,
    e_cparhdr: WORD,
    e_minalloc: WORD,
    e_maxalloc: WORD,
    e_ss: WORD,
    e_sp: WORD,
    e_csum: WORD,
    e_ip: WORD,
    e_cs: WORD,
    e_lfarlc: WORD,
    e_ovno: WORD,
    e_res: [4]WORD,
    e_oemid: WORD,
    e_oeminfo: WORD,
    e_res2: [10]WORD,
    e_lfanew: LONG,
};
pub const IMAGE_DOS_HEADER = struct__IMAGE_DOS_HEADER;
pub const PIMAGE_DOS_HEADER = [*c]struct__IMAGE_DOS_HEADER;
pub const struct__IMAGE_OS2_HEADER = extern struct {
    ne_magic: WORD,
    ne_ver: CHAR,
    ne_rev: CHAR,
    ne_enttab: WORD,
    ne_cbenttab: WORD,
    ne_crc: LONG,
    ne_flags: WORD,
    ne_autodata: WORD,
    ne_heap: WORD,
    ne_stack: WORD,
    ne_csip: LONG,
    ne_sssp: LONG,
    ne_cseg: WORD,
    ne_cmod: WORD,
    ne_cbnrestab: WORD,
    ne_segtab: WORD,
    ne_rsrctab: WORD,
    ne_restab: WORD,
    ne_modtab: WORD,
    ne_imptab: WORD,
    ne_nrestab: LONG,
    ne_cmovent: WORD,
    ne_align: WORD,
    ne_cres: WORD,
    ne_exetyp: BYTE,
    ne_flagsothers: BYTE,
    ne_pretthunks: WORD,
    ne_psegrefbytes: WORD,
    ne_swaparea: WORD,
    ne_expver: WORD,
};
pub const IMAGE_OS2_HEADER = struct__IMAGE_OS2_HEADER;
pub const PIMAGE_OS2_HEADER = [*c]struct__IMAGE_OS2_HEADER;
pub const struct__IMAGE_VXD_HEADER = extern struct {
    e32_magic: WORD,
    e32_border: BYTE,
    e32_worder: BYTE,
    e32_level: DWORD,
    e32_cpu: WORD,
    e32_os: WORD,
    e32_ver: DWORD,
    e32_mflags: DWORD,
    e32_mpages: DWORD,
    e32_startobj: DWORD,
    e32_eip: DWORD,
    e32_stackobj: DWORD,
    e32_esp: DWORD,
    e32_pagesize: DWORD,
    e32_lastpagesize: DWORD,
    e32_fixupsize: DWORD,
    e32_fixupsum: DWORD,
    e32_ldrsize: DWORD,
    e32_ldrsum: DWORD,
    e32_objtab: DWORD,
    e32_objcnt: DWORD,
    e32_objmap: DWORD,
    e32_itermap: DWORD,
    e32_rsrctab: DWORD,
    e32_rsrccnt: DWORD,
    e32_restab: DWORD,
    e32_enttab: DWORD,
    e32_dirtab: DWORD,
    e32_dircnt: DWORD,
    e32_fpagetab: DWORD,
    e32_frectab: DWORD,
    e32_impmod: DWORD,
    e32_impmodcnt: DWORD,
    e32_impproc: DWORD,
    e32_pagesum: DWORD,
    e32_datapage: DWORD,
    e32_preload: DWORD,
    e32_nrestab: DWORD,
    e32_cbnrestab: DWORD,
    e32_nressum: DWORD,
    e32_autodata: DWORD,
    e32_debuginfo: DWORD,
    e32_debuglen: DWORD,
    e32_instpreload: DWORD,
    e32_instdemand: DWORD,
    e32_heapsize: DWORD,
    e32_res3: [12]BYTE,
    e32_winresoff: DWORD,
    e32_winreslen: DWORD,
    e32_devid: WORD,
    e32_ddkver: WORD,
};
pub const IMAGE_VXD_HEADER = struct__IMAGE_VXD_HEADER;
pub const PIMAGE_VXD_HEADER = [*c]struct__IMAGE_VXD_HEADER;
pub const struct__IMAGE_FILE_HEADER = extern struct {
    Machine: WORD,
    NumberOfSections: WORD,
    TimeDateStamp: DWORD,
    PointerToSymbolTable: DWORD,
    NumberOfSymbols: DWORD,
    SizeOfOptionalHeader: WORD,
    Characteristics: WORD,
};
pub const IMAGE_FILE_HEADER = struct__IMAGE_FILE_HEADER;
pub const PIMAGE_FILE_HEADER = [*c]struct__IMAGE_FILE_HEADER;
pub const struct__IMAGE_DATA_DIRECTORY = extern struct {
    VirtualAddress: DWORD,
    Size: DWORD,
};
pub const IMAGE_DATA_DIRECTORY = struct__IMAGE_DATA_DIRECTORY;
pub const PIMAGE_DATA_DIRECTORY = [*c]struct__IMAGE_DATA_DIRECTORY;
pub const struct__IMAGE_OPTIONAL_HEADER = extern struct {
    Magic: WORD,
    MajorLinkerVersion: BYTE,
    MinorLinkerVersion: BYTE,
    SizeOfCode: DWORD,
    SizeOfInitializedData: DWORD,
    SizeOfUninitializedData: DWORD,
    AddressOfEntryPoint: DWORD,
    BaseOfCode: DWORD,
    BaseOfData: DWORD,
    ImageBase: DWORD,
    SectionAlignment: DWORD,
    FileAlignment: DWORD,
    MajorOperatingSystemVersion: WORD,
    MinorOperatingSystemVersion: WORD,
    MajorImageVersion: WORD,
    MinorImageVersion: WORD,
    MajorSubsystemVersion: WORD,
    MinorSubsystemVersion: WORD,
    Win32VersionValue: DWORD,
    SizeOfImage: DWORD,
    SizeOfHeaders: DWORD,
    CheckSum: DWORD,
    Subsystem: WORD,
    DllCharacteristics: WORD,
    SizeOfStackReserve: DWORD,
    SizeOfStackCommit: DWORD,
    SizeOfHeapReserve: DWORD,
    SizeOfHeapCommit: DWORD,
    LoaderFlags: DWORD,
    NumberOfRvaAndSizes: DWORD,
    DataDirectory: [16]IMAGE_DATA_DIRECTORY,
};
pub const IMAGE_OPTIONAL_HEADER32 = struct__IMAGE_OPTIONAL_HEADER;
pub const PIMAGE_OPTIONAL_HEADER32 = [*c]struct__IMAGE_OPTIONAL_HEADER;
pub const struct__IMAGE_ROM_OPTIONAL_HEADER = extern struct {
    Magic: WORD,
    MajorLinkerVersion: BYTE,
    MinorLinkerVersion: BYTE,
    SizeOfCode: DWORD,
    SizeOfInitializedData: DWORD,
    SizeOfUninitializedData: DWORD,
    AddressOfEntryPoint: DWORD,
    BaseOfCode: DWORD,
    BaseOfData: DWORD,
    BaseOfBss: DWORD,
    GprMask: DWORD,
    CprMask: [4]DWORD,
    GpValue: DWORD,
};
pub const IMAGE_ROM_OPTIONAL_HEADER = struct__IMAGE_ROM_OPTIONAL_HEADER;
pub const PIMAGE_ROM_OPTIONAL_HEADER = [*c]struct__IMAGE_ROM_OPTIONAL_HEADER;
pub const struct__IMAGE_OPTIONAL_HEADER64 = extern struct {
    Magic: WORD,
    MajorLinkerVersion: BYTE,
    MinorLinkerVersion: BYTE,
    SizeOfCode: DWORD,
    SizeOfInitializedData: DWORD,
    SizeOfUninitializedData: DWORD,
    AddressOfEntryPoint: DWORD,
    BaseOfCode: DWORD,
    ImageBase: ULONGLONG,
    SectionAlignment: DWORD,
    FileAlignment: DWORD,
    MajorOperatingSystemVersion: WORD,
    MinorOperatingSystemVersion: WORD,
    MajorImageVersion: WORD,
    MinorImageVersion: WORD,
    MajorSubsystemVersion: WORD,
    MinorSubsystemVersion: WORD,
    Win32VersionValue: DWORD,
    SizeOfImage: DWORD,
    SizeOfHeaders: DWORD,
    CheckSum: DWORD,
    Subsystem: WORD,
    DllCharacteristics: WORD,
    SizeOfStackReserve: ULONGLONG,
    SizeOfStackCommit: ULONGLONG,
    SizeOfHeapReserve: ULONGLONG,
    SizeOfHeapCommit: ULONGLONG,
    LoaderFlags: DWORD,
    NumberOfRvaAndSizes: DWORD,
    DataDirectory: [16]IMAGE_DATA_DIRECTORY,
};
pub const IMAGE_OPTIONAL_HEADER64 = struct__IMAGE_OPTIONAL_HEADER64;
pub const PIMAGE_OPTIONAL_HEADER64 = [*c]struct__IMAGE_OPTIONAL_HEADER64;
pub const IMAGE_OPTIONAL_HEADER = IMAGE_OPTIONAL_HEADER64;
pub const PIMAGE_OPTIONAL_HEADER = PIMAGE_OPTIONAL_HEADER64;
pub const struct__IMAGE_NT_HEADERS64 = extern struct {
    Signature: DWORD,
    FileHeader: IMAGE_FILE_HEADER,
    OptionalHeader: IMAGE_OPTIONAL_HEADER64,
};
pub const IMAGE_NT_HEADERS64 = struct__IMAGE_NT_HEADERS64;
pub const PIMAGE_NT_HEADERS64 = [*c]struct__IMAGE_NT_HEADERS64;
pub const struct__IMAGE_NT_HEADERS = extern struct {
    Signature: DWORD,
    FileHeader: IMAGE_FILE_HEADER,
    OptionalHeader: IMAGE_OPTIONAL_HEADER32,
};
pub const IMAGE_NT_HEADERS32 = struct__IMAGE_NT_HEADERS;
pub const PIMAGE_NT_HEADERS32 = [*c]struct__IMAGE_NT_HEADERS;
pub const struct__IMAGE_ROM_HEADERS = extern struct {
    FileHeader: IMAGE_FILE_HEADER,
    OptionalHeader: IMAGE_ROM_OPTIONAL_HEADER,
};
pub const IMAGE_ROM_HEADERS = struct__IMAGE_ROM_HEADERS;
pub const PIMAGE_ROM_HEADERS = [*c]struct__IMAGE_ROM_HEADERS;
pub const IMAGE_NT_HEADERS = IMAGE_NT_HEADERS64;
pub const PIMAGE_NT_HEADERS = PIMAGE_NT_HEADERS64;
pub const struct_ANON_OBJECT_HEADER = extern struct {
    Sig1: WORD,
    Sig2: WORD,
    Version: WORD,
    Machine: WORD,
    TimeDateStamp: DWORD,
    ClassID: CLSID,
    SizeOfData: DWORD,
};
pub const ANON_OBJECT_HEADER = struct_ANON_OBJECT_HEADER;
pub const struct_ANON_OBJECT_HEADER_V2 = extern struct {
    Sig1: WORD,
    Sig2: WORD,
    Version: WORD,
    Machine: WORD,
    TimeDateStamp: DWORD,
    ClassID: CLSID,
    SizeOfData: DWORD,
    Flags: DWORD,
    MetaDataSize: DWORD,
    MetaDataOffset: DWORD,
};
pub const ANON_OBJECT_HEADER_V2 = struct_ANON_OBJECT_HEADER_V2;
pub const struct_ANON_OBJECT_HEADER_BIGOBJ = extern struct {
    Sig1: WORD,
    Sig2: WORD,
    Version: WORD,
    Machine: WORD,
    TimeDateStamp: DWORD,
    ClassID: CLSID,
    SizeOfData: DWORD,
    Flags: DWORD,
    MetaDataSize: DWORD,
    MetaDataOffset: DWORD,
    NumberOfSections: DWORD,
    PointerToSymbolTable: DWORD,
    NumberOfSymbols: DWORD,
};
pub const ANON_OBJECT_HEADER_BIGOBJ = struct_ANON_OBJECT_HEADER_BIGOBJ;
pub const struct__IMAGE_SECTION_HEADER = extern struct {
    Name: [8]BYTE,
    Misc: extern union {
        PhysicalAddress: DWORD,
        VirtualSize: DWORD,
    },
    VirtualAddress: DWORD,
    SizeOfRawData: DWORD,
    PointerToRawData: DWORD,
    PointerToRelocations: DWORD,
    PointerToLinenumbers: DWORD,
    NumberOfRelocations: WORD,
    NumberOfLinenumbers: WORD,
    Characteristics: DWORD,
};
pub const IMAGE_SECTION_HEADER = struct__IMAGE_SECTION_HEADER;
pub const PIMAGE_SECTION_HEADER = [*c]struct__IMAGE_SECTION_HEADER;
pub const struct__IMAGE_SYMBOL = extern struct {
    N: extern union {
        ShortName: [8]BYTE,
        Name: extern struct {
            Short: DWORD,
            Long: DWORD,
        },
        LongName: [2]DWORD,
    },
    Value: DWORD,
    SectionNumber: SHORT,
    Type: WORD,
    StorageClass: BYTE,
    NumberOfAuxSymbols: BYTE,
};
pub const IMAGE_SYMBOL = struct__IMAGE_SYMBOL;
pub const PIMAGE_SYMBOL = [*c]IMAGE_SYMBOL;
pub const struct__IMAGE_SYMBOL_EX = extern struct {
    N: extern union {
        ShortName: [8]BYTE,
        Name: extern struct {
            Short: DWORD,
            Long: DWORD,
        },
        LongName: [2]DWORD,
    },
    Value: DWORD,
    SectionNumber: LONG,
    Type: WORD,
    StorageClass: BYTE,
    NumberOfAuxSymbols: BYTE,
};
pub const IMAGE_SYMBOL_EX = struct__IMAGE_SYMBOL_EX;
pub const PIMAGE_SYMBOL_EX = [*c]IMAGE_SYMBOL_EX;
pub const struct_IMAGE_AUX_SYMBOL_TOKEN_DEF = extern struct {
    bAuxType: BYTE,
    bReserved: BYTE,
    SymbolTableIndex: DWORD,
    rgbReserved: [12]BYTE,
};
pub const IMAGE_AUX_SYMBOL_TOKEN_DEF = struct_IMAGE_AUX_SYMBOL_TOKEN_DEF;
pub const PIMAGE_AUX_SYMBOL_TOKEN_DEF = [*c]IMAGE_AUX_SYMBOL_TOKEN_DEF;
pub const union__IMAGE_AUX_SYMBOL = extern union {
    Sym: extern struct {
        TagIndex: DWORD,
        Misc: extern union {
            LnSz: extern struct {
                Linenumber: WORD,
                Size: WORD,
            },
            TotalSize: DWORD,
        },
        FcnAry: extern union {
            Function: extern struct {
                PointerToLinenumber: DWORD,
                PointerToNextFunction: DWORD,
            },
            Array: extern struct {
                Dimension: [4]WORD,
            },
        },
        TvIndex: WORD,
    },
    File: extern struct {
        Name: [18]BYTE,
    },
    Section: extern struct {
        Length: DWORD,
        NumberOfRelocations: WORD,
        NumberOfLinenumbers: WORD,
        CheckSum: DWORD,
        Number: SHORT,
        Selection: BYTE,
        bReserved: BYTE,
        HighNumber: SHORT,
    },
    TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
    CRC: extern struct {
        crc: DWORD,
        rgbReserved: [14]BYTE,
    },
};
pub const IMAGE_AUX_SYMBOL = union__IMAGE_AUX_SYMBOL;
pub const PIMAGE_AUX_SYMBOL = [*c]IMAGE_AUX_SYMBOL;
pub const union__IMAGE_AUX_SYMBOL_EX = extern union {
    Sym: extern struct {
        WeakDefaultSymIndex: DWORD,
        WeakSearchType: DWORD,
        rgbReserved: [12]BYTE,
    },
    File: extern struct {
        Name: [20]BYTE,
    },
    Section: extern struct {
        Length: DWORD,
        NumberOfRelocations: WORD,
        NumberOfLinenumbers: WORD,
        CheckSum: DWORD,
        Number: SHORT,
        Selection: BYTE,
        bReserved: BYTE,
        HighNumber: SHORT,
        rgbReserved: [2]BYTE,
    },
    @"": extern struct {
        TokenDef: IMAGE_AUX_SYMBOL_TOKEN_DEF,
        rgbReserved: [2]BYTE,
    },
    CRC: extern struct {
        crc: DWORD,
        rgbReserved: [16]BYTE,
    },
};
pub const IMAGE_AUX_SYMBOL_EX = union__IMAGE_AUX_SYMBOL_EX;
pub const PIMAGE_AUX_SYMBOL_EX = [*c]IMAGE_AUX_SYMBOL_EX;
pub const IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = enum_IMAGE_AUX_SYMBOL_TYPE._TOKEN_DEF;
pub const enum_IMAGE_AUX_SYMBOL_TYPE = extern enum {
    _TOKEN_DEF = 1,
};
pub const IMAGE_AUX_SYMBOL_TYPE = enum_IMAGE_AUX_SYMBOL_TYPE;
pub const struct__IMAGE_RELOCATION = extern struct {
    @"": extern union {
        VirtualAddress: DWORD,
        RelocCount: DWORD,
    },
    SymbolTableIndex: DWORD,
    Type: WORD,
};
pub const IMAGE_RELOCATION = struct__IMAGE_RELOCATION;
pub const PIMAGE_RELOCATION = [*c]IMAGE_RELOCATION;
pub const struct__IMAGE_LINENUMBER = extern struct {
    Type: extern union {
        SymbolTableIndex: DWORD,
        VirtualAddress: DWORD,
    },
    Linenumber: WORD,
};
pub const IMAGE_LINENUMBER = struct__IMAGE_LINENUMBER;
pub const PIMAGE_LINENUMBER = [*c]IMAGE_LINENUMBER;
pub const struct__IMAGE_BASE_RELOCATION = extern struct {
    VirtualAddress: DWORD,
    SizeOfBlock: DWORD,
};
pub const IMAGE_BASE_RELOCATION = struct__IMAGE_BASE_RELOCATION;
pub const PIMAGE_BASE_RELOCATION = [*c]IMAGE_BASE_RELOCATION;
pub const struct__IMAGE_ARCHIVE_MEMBER_HEADER = extern struct {
    Name: [16]BYTE,
    Date: [12]BYTE,
    UserID: [6]BYTE,
    GroupID: [6]BYTE,
    Mode: [8]BYTE,
    Size: [10]BYTE,
    EndHeader: [2]BYTE,
};
pub const IMAGE_ARCHIVE_MEMBER_HEADER = struct__IMAGE_ARCHIVE_MEMBER_HEADER;
pub const PIMAGE_ARCHIVE_MEMBER_HEADER = [*c]struct__IMAGE_ARCHIVE_MEMBER_HEADER;
pub const struct__IMAGE_EXPORT_DIRECTORY = extern struct {
    Characteristics: DWORD,
    TimeDateStamp: DWORD,
    MajorVersion: WORD,
    MinorVersion: WORD,
    Name: DWORD,
    Base: DWORD,
    NumberOfFunctions: DWORD,
    NumberOfNames: DWORD,
    AddressOfFunctions: DWORD,
    AddressOfNames: DWORD,
    AddressOfNameOrdinals: DWORD,
};
pub const IMAGE_EXPORT_DIRECTORY = struct__IMAGE_EXPORT_DIRECTORY;
pub const PIMAGE_EXPORT_DIRECTORY = [*c]struct__IMAGE_EXPORT_DIRECTORY;
pub const struct__IMAGE_IMPORT_BY_NAME = extern struct {
    Hint: WORD,
    Name: [1]CHAR,
};
pub const IMAGE_IMPORT_BY_NAME = struct__IMAGE_IMPORT_BY_NAME;
pub const PIMAGE_IMPORT_BY_NAME = [*c]struct__IMAGE_IMPORT_BY_NAME;
pub const struct__IMAGE_THUNK_DATA64 = extern struct {
    u1: extern union {
        ForwarderString: ULONGLONG,
        Function: ULONGLONG,
        Ordinal: ULONGLONG,
        AddressOfData: ULONGLONG,
    },
};
pub const IMAGE_THUNK_DATA64 = struct__IMAGE_THUNK_DATA64;
pub const PIMAGE_THUNK_DATA64 = [*c]IMAGE_THUNK_DATA64;
pub const struct__IMAGE_THUNK_DATA32 = extern struct {
    u1: extern union {
        ForwarderString: DWORD,
        Function: DWORD,
        Ordinal: DWORD,
        AddressOfData: DWORD,
    },
};
pub const IMAGE_THUNK_DATA32 = struct__IMAGE_THUNK_DATA32;
pub const PIMAGE_THUNK_DATA32 = [*c]IMAGE_THUNK_DATA32;
pub const PIMAGE_TLS_CALLBACK = ?fn (PVOID, DWORD, PVOID) callconv(std.os.windows.WINAPI) void;
pub const struct__IMAGE_TLS_DIRECTORY64 = extern struct {
    StartAddressOfRawData: ULONGLONG,
    EndAddressOfRawData: ULONGLONG,
    AddressOfIndex: ULONGLONG,
    AddressOfCallBacks: ULONGLONG,
    SizeOfZeroFill: DWORD,
    @"": extern union {
        Characteristics: DWORD,
        @"": opaque {},
    },
};
pub const IMAGE_TLS_DIRECTORY64 = struct__IMAGE_TLS_DIRECTORY64;
pub const PIMAGE_TLS_DIRECTORY64 = [*c]IMAGE_TLS_DIRECTORY64;
pub const struct__IMAGE_TLS_DIRECTORY32 = extern struct {
    StartAddressOfRawData: DWORD,
    EndAddressOfRawData: DWORD,
    AddressOfIndex: DWORD,
    AddressOfCallBacks: DWORD,
    SizeOfZeroFill: DWORD,
    @"": extern union {
        Characteristics: DWORD,
        @"": opaque {},
    },
};
pub const IMAGE_TLS_DIRECTORY32 = struct__IMAGE_TLS_DIRECTORY32;
pub const PIMAGE_TLS_DIRECTORY32 = [*c]IMAGE_TLS_DIRECTORY32;
pub const IMAGE_THUNK_DATA = IMAGE_THUNK_DATA64;
pub const PIMAGE_THUNK_DATA = PIMAGE_THUNK_DATA64;
pub const IMAGE_TLS_DIRECTORY = IMAGE_TLS_DIRECTORY64;
pub const PIMAGE_TLS_DIRECTORY = PIMAGE_TLS_DIRECTORY64;
pub const struct__IMAGE_IMPORT_DESCRIPTOR = extern struct {
    @"": extern union {
        Characteristics: DWORD,
        OriginalFirstThunk: DWORD,
    },
    TimeDateStamp: DWORD,
    ForwarderChain: DWORD,
    Name: DWORD,
    FirstThunk: DWORD,
};
pub const IMAGE_IMPORT_DESCRIPTOR = struct__IMAGE_IMPORT_DESCRIPTOR;
pub const PIMAGE_IMPORT_DESCRIPTOR = [*c]IMAGE_IMPORT_DESCRIPTOR;
pub const struct__IMAGE_BOUND_IMPORT_DESCRIPTOR = extern struct {
    TimeDateStamp: DWORD,
    OffsetModuleName: WORD,
    NumberOfModuleForwarderRefs: WORD,
};
pub const IMAGE_BOUND_IMPORT_DESCRIPTOR = struct__IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub const PIMAGE_BOUND_IMPORT_DESCRIPTOR = [*c]struct__IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub const struct__IMAGE_BOUND_FORWARDER_REF = extern struct {
    TimeDateStamp: DWORD,
    OffsetModuleName: WORD,
    Reserved: WORD,
};
pub const IMAGE_BOUND_FORWARDER_REF = struct__IMAGE_BOUND_FORWARDER_REF;
pub const PIMAGE_BOUND_FORWARDER_REF = [*c]struct__IMAGE_BOUND_FORWARDER_REF;
pub const struct__IMAGE_DELAYLOAD_DESCRIPTOR = extern struct {
    Attributes: extern union {
        AllAttributes: DWORD,
        @"": opaque {},
    },
    DllNameRVA: DWORD,
    ModuleHandleRVA: DWORD,
    ImportAddressTableRVA: DWORD,
    ImportNameTableRVA: DWORD,
    BoundImportAddressTableRVA: DWORD,
    UnloadInformationTableRVA: DWORD,
    TimeDateStamp: DWORD,
};
pub const IMAGE_DELAYLOAD_DESCRIPTOR = struct__IMAGE_DELAYLOAD_DESCRIPTOR;
pub const PIMAGE_DELAYLOAD_DESCRIPTOR = [*c]struct__IMAGE_DELAYLOAD_DESCRIPTOR;
pub const PCIMAGE_DELAYLOAD_DESCRIPTOR = [*c]const IMAGE_DELAYLOAD_DESCRIPTOR;
pub const struct__IMAGE_RESOURCE_DIRECTORY = extern struct {
    Characteristics: DWORD,
    TimeDateStamp: DWORD,
    MajorVersion: WORD,
    MinorVersion: WORD,
    NumberOfNamedEntries: WORD,
    NumberOfIdEntries: WORD,
};
pub const IMAGE_RESOURCE_DIRECTORY = struct__IMAGE_RESOURCE_DIRECTORY;
pub const PIMAGE_RESOURCE_DIRECTORY = [*c]struct__IMAGE_RESOURCE_DIRECTORY;
pub const struct__IMAGE_RESOURCE_DIRECTORY_ENTRY = extern struct {
    @"": extern union {
        @"": opaque {},
        Name: DWORD,
        Id: WORD,
    },
    @"": extern union {
        OffsetToData: DWORD,
        @"": opaque {},
    },
};
pub const IMAGE_RESOURCE_DIRECTORY_ENTRY = struct__IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub const PIMAGE_RESOURCE_DIRECTORY_ENTRY = [*c]struct__IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub const struct__IMAGE_RESOURCE_DIRECTORY_STRING = extern struct {
    Length: WORD,
    NameString: [1]CHAR,
};
pub const IMAGE_RESOURCE_DIRECTORY_STRING = struct__IMAGE_RESOURCE_DIRECTORY_STRING;
pub const PIMAGE_RESOURCE_DIRECTORY_STRING = [*c]struct__IMAGE_RESOURCE_DIRECTORY_STRING;
pub const struct__IMAGE_RESOURCE_DIR_STRING_U = extern struct {
    Length: WORD,
    NameString: [1]WCHAR,
};
pub const IMAGE_RESOURCE_DIR_STRING_U = struct__IMAGE_RESOURCE_DIR_STRING_U;
pub const PIMAGE_RESOURCE_DIR_STRING_U = [*c]struct__IMAGE_RESOURCE_DIR_STRING_U;
pub const struct__IMAGE_RESOURCE_DATA_ENTRY = extern struct {
    OffsetToData: DWORD,
    Size: DWORD,
    CodePage: DWORD,
    Reserved: DWORD,
};
pub const IMAGE_RESOURCE_DATA_ENTRY = struct__IMAGE_RESOURCE_DATA_ENTRY;
pub const PIMAGE_RESOURCE_DATA_ENTRY = [*c]struct__IMAGE_RESOURCE_DATA_ENTRY;
pub const struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY = extern struct {
    Flags: WORD,
    Catalog: WORD,
    CatalogOffset: DWORD,
    Reserved: DWORD,
};
pub const IMAGE_LOAD_CONFIG_CODE_INTEGRITY = struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
pub const PIMAGE_LOAD_CONFIG_CODE_INTEGRITY = [*c]struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
pub const struct__IMAGE_DYNAMIC_RELOCATION_TABLE = extern struct {
    Version: DWORD,
    Size: DWORD,
};
pub const IMAGE_DYNAMIC_RELOCATION_TABLE = struct__IMAGE_DYNAMIC_RELOCATION_TABLE;
pub const PIMAGE_DYNAMIC_RELOCATION_TABLE = [*c]struct__IMAGE_DYNAMIC_RELOCATION_TABLE;
pub const struct__IMAGE_DYNAMIC_RELOCATION32 = extern struct {
    Symbol: DWORD,
    BaseRelocSize: DWORD,
};
pub const IMAGE_DYNAMIC_RELOCATION32 = struct__IMAGE_DYNAMIC_RELOCATION32;
pub const PIMAGE_DYNAMIC_RELOCATION32 = [*c]struct__IMAGE_DYNAMIC_RELOCATION32;
pub const struct__IMAGE_DYNAMIC_RELOCATION64 = extern struct {
    Symbol: ULONGLONG,
    BaseRelocSize: DWORD,
};
pub const IMAGE_DYNAMIC_RELOCATION64 = struct__IMAGE_DYNAMIC_RELOCATION64;
pub const PIMAGE_DYNAMIC_RELOCATION64 = [*c]struct__IMAGE_DYNAMIC_RELOCATION64;
pub const struct__IMAGE_DYNAMIC_RELOCATION32_V2 = extern struct {
    HeaderSize: DWORD,
    FixupInfoSize: DWORD,
    Symbol: DWORD,
    SymbolGroup: DWORD,
    Flags: DWORD,
};
pub const IMAGE_DYNAMIC_RELOCATION32_V2 = struct__IMAGE_DYNAMIC_RELOCATION32_V2;
pub const PIMAGE_DYNAMIC_RELOCATION32_V2 = [*c]struct__IMAGE_DYNAMIC_RELOCATION32_V2;
pub const struct__IMAGE_DYNAMIC_RELOCATION64_V2 = extern struct {
    HeaderSize: DWORD,
    FixupInfoSize: DWORD,
    Symbol: ULONGLONG,
    SymbolGroup: DWORD,
    Flags: DWORD,
};
pub const IMAGE_DYNAMIC_RELOCATION64_V2 = struct__IMAGE_DYNAMIC_RELOCATION64_V2;
pub const PIMAGE_DYNAMIC_RELOCATION64_V2 = [*c]struct__IMAGE_DYNAMIC_RELOCATION64_V2;
pub const IMAGE_DYNAMIC_RELOCATION = IMAGE_DYNAMIC_RELOCATION64;
pub const PIMAGE_DYNAMIC_RELOCATION = PIMAGE_DYNAMIC_RELOCATION64;
pub const IMAGE_DYNAMIC_RELOCATION_V2 = IMAGE_DYNAMIC_RELOCATION64_V2;
pub const PIMAGE_DYNAMIC_RELOCATION_V2 = PIMAGE_DYNAMIC_RELOCATION64_V2;
pub const struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = extern struct {
    PrologueByteCount: BYTE,
};
pub const IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
pub const PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = [*c]IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
pub const struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = extern struct {
    EpilogueCount: DWORD,
    EpilogueByteCount: BYTE,
    BranchDescriptorElementSize: BYTE,
    BranchDescriptorCount: WORD,
};
pub const IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
pub const PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = [*c]IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
pub const struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = opaque {};
pub const IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = ?*IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = opaque {};
pub const IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = ?*IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = opaque {};
pub const IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
pub const PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = ?*IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
pub const struct__IMAGE_LOAD_CONFIG_DIRECTORY32 = extern struct {
    Size: DWORD,
    TimeDateStamp: DWORD,
    MajorVersion: WORD,
    MinorVersion: WORD,
    GlobalFlagsClear: DWORD,
    GlobalFlagsSet: DWORD,
    CriticalSectionDefaultTimeout: DWORD,
    DeCommitFreeBlockThreshold: DWORD,
    DeCommitTotalFreeThreshold: DWORD,
    LockPrefixTable: DWORD,
    MaximumAllocationSize: DWORD,
    VirtualMemoryThreshold: DWORD,
    ProcessHeapFlags: DWORD,
    ProcessAffinityMask: DWORD,
    CSDVersion: WORD,
    DependentLoadFlags: WORD,
    EditList: DWORD,
    SecurityCookie: DWORD,
    SEHandlerTable: DWORD,
    SEHandlerCount: DWORD,
    GuardCFCheckFunctionPointer: DWORD,
    GuardCFDispatchFunctionPointer: DWORD,
    GuardCFFunctionTable: DWORD,
    GuardCFFunctionCount: DWORD,
    GuardFlags: DWORD,
    CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    GuardAddressTakenIatEntryTable: DWORD,
    GuardAddressTakenIatEntryCount: DWORD,
    GuardLongJumpTargetTable: DWORD,
    GuardLongJumpTargetCount: DWORD,
    DynamicValueRelocTable: DWORD,
    CHPEMetadataPointer: DWORD,
    GuardRFFailureRoutine: DWORD,
    GuardRFFailureRoutineFunctionPointer: DWORD,
    DynamicValueRelocTableOffset: DWORD,
    DynamicValueRelocTableSection: WORD,
    Reserved2: WORD,
    GuardRFVerifyStackPointerFunctionPointer: DWORD,
    HotPatchTableOffset: DWORD,
    Reserved3: DWORD,
    EnclaveConfigurationPointer: DWORD,
    VolatileMetadataPointer: DWORD,
};
pub const IMAGE_LOAD_CONFIG_DIRECTORY32 = struct__IMAGE_LOAD_CONFIG_DIRECTORY32;
pub const PIMAGE_LOAD_CONFIG_DIRECTORY32 = [*c]struct__IMAGE_LOAD_CONFIG_DIRECTORY32;
pub const struct__IMAGE_LOAD_CONFIG_DIRECTORY64 = extern struct {
    Size: DWORD,
    TimeDateStamp: DWORD,
    MajorVersion: WORD,
    MinorVersion: WORD,
    GlobalFlagsClear: DWORD,
    GlobalFlagsSet: DWORD,
    CriticalSectionDefaultTimeout: DWORD,
    DeCommitFreeBlockThreshold: ULONGLONG,
    DeCommitTotalFreeThreshold: ULONGLONG,
    LockPrefixTable: ULONGLONG,
    MaximumAllocationSize: ULONGLONG,
    VirtualMemoryThreshold: ULONGLONG,
    ProcessAffinityMask: ULONGLONG,
    ProcessHeapFlags: DWORD,
    CSDVersion: WORD,
    DependentLoadFlags: WORD,
    EditList: ULONGLONG,
    SecurityCookie: ULONGLONG,
    SEHandlerTable: ULONGLONG,
    SEHandlerCount: ULONGLONG,
    GuardCFCheckFunctionPointer: ULONGLONG,
    GuardCFDispatchFunctionPointer: ULONGLONG,
    GuardCFFunctionTable: ULONGLONG,
    GuardCFFunctionCount: ULONGLONG,
    GuardFlags: DWORD,
    CodeIntegrity: IMAGE_LOAD_CONFIG_CODE_INTEGRITY,
    GuardAddressTakenIatEntryTable: ULONGLONG,
    GuardAddressTakenIatEntryCount: ULONGLONG,
    GuardLongJumpTargetTable: ULONGLONG,
    GuardLongJumpTargetCount: ULONGLONG,
    DynamicValueRelocTable: ULONGLONG,
    CHPEMetadataPointer: ULONGLONG,
    GuardRFFailureRoutine: ULONGLONG,
    GuardRFFailureRoutineFunctionPointer: ULONGLONG,
    DynamicValueRelocTableOffset: DWORD,
    DynamicValueRelocTableSection: WORD,
    Reserved2: WORD,
    GuardRFVerifyStackPointerFunctionPointer: ULONGLONG,
    HotPatchTableOffset: DWORD,
    Reserved3: DWORD,
    EnclaveConfigurationPointer: ULONGLONG,
    VolatileMetadataPointer: ULONGLONG,
};
pub const IMAGE_LOAD_CONFIG_DIRECTORY64 = struct__IMAGE_LOAD_CONFIG_DIRECTORY64;
pub const PIMAGE_LOAD_CONFIG_DIRECTORY64 = [*c]struct__IMAGE_LOAD_CONFIG_DIRECTORY64;
pub const IMAGE_LOAD_CONFIG_DIRECTORY = IMAGE_LOAD_CONFIG_DIRECTORY64;
pub const PIMAGE_LOAD_CONFIG_DIRECTORY = PIMAGE_LOAD_CONFIG_DIRECTORY64;
pub const struct__IMAGE_HOT_PATCH_INFO = extern struct {
    Version: DWORD,
    Size: DWORD,
    SequenceNumber: DWORD,
    BaseImageList: DWORD,
    BaseImageCount: DWORD,
    BufferOffset: DWORD,
    ExtraPatchSize: DWORD,
};
pub const IMAGE_HOT_PATCH_INFO = struct__IMAGE_HOT_PATCH_INFO;
pub const PIMAGE_HOT_PATCH_INFO = [*c]struct__IMAGE_HOT_PATCH_INFO;
pub const struct__IMAGE_HOT_PATCH_BASE = extern struct {
    SequenceNumber: DWORD,
    Flags: DWORD,
    OriginalTimeDateStamp: DWORD,
    OriginalCheckSum: DWORD,
    CodeIntegrityInfo: DWORD,
    CodeIntegritySize: DWORD,
    PatchTable: DWORD,
    BufferOffset: DWORD,
};
pub const IMAGE_HOT_PATCH_BASE = struct__IMAGE_HOT_PATCH_BASE;
pub const PIMAGE_HOT_PATCH_BASE = [*c]struct__IMAGE_HOT_PATCH_BASE;
pub const struct__IMAGE_HOT_PATCH_HASHES = extern struct {
    SHA256: [32]BYTE,
    SHA1: [20]BYTE,
};
pub const IMAGE_HOT_PATCH_HASHES = struct__IMAGE_HOT_PATCH_HASHES;
pub const PIMAGE_HOT_PATCH_HASHES = [*c]struct__IMAGE_HOT_PATCH_HASHES;
pub const struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY = opaque {};
pub const IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_CE_RUNTIME_FUNCTION_ENTRY = ?*struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
pub const struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: DWORD,
    @"": extern union {
        UnwindData: DWORD,
        @"": opaque {},
    },
};
pub const IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY = [*c]struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub const struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: DWORD,
    @"": extern union {
        UnwindData: DWORD,
        @"": opaque {},
    },
};
pub const IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = [*c]struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub const struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: ULONGLONG,
    EndAddress: ULONGLONG,
    ExceptionHandler: ULONGLONG,
    HandlerData: ULONGLONG,
    PrologEndAddress: ULONGLONG,
};
pub const IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = [*c]struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
pub const struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = extern struct {
    BeginAddress: DWORD,
    EndAddress: DWORD,
    ExceptionHandler: DWORD,
    HandlerData: DWORD,
    PrologEndAddress: DWORD,
};
pub const IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = [*c]struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const _PIMAGE_RUNTIME_FUNCTION_ENTRY = [*c]struct__IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const IMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub const IMAGE_RUNTIME_FUNCTION_ENTRY = _IMAGE_RUNTIME_FUNCTION_ENTRY;
pub const PIMAGE_RUNTIME_FUNCTION_ENTRY = _PIMAGE_RUNTIME_FUNCTION_ENTRY;
pub const struct__IMAGE_ENCLAVE_CONFIG32 = extern struct {
    Size: DWORD,
    MinimumRequiredConfigSize: DWORD,
    PolicyFlags: DWORD,
    NumberOfImports: DWORD,
    ImportList: DWORD,
    ImportEntrySize: DWORD,
    FamilyID: [16]BYTE,
    ImageID: [16]BYTE,
    ImageVersion: DWORD,
    SecurityVersion: DWORD,
    EnclaveSize: DWORD,
    NumberOfThreads: DWORD,
    EnclaveFlags: DWORD,
};
pub const IMAGE_ENCLAVE_CONFIG32 = struct__IMAGE_ENCLAVE_CONFIG32;
pub const PIMAGE_ENCLAVE_CONFIG32 = [*c]struct__IMAGE_ENCLAVE_CONFIG32;
pub const struct__IMAGE_ENCLAVE_CONFIG64 = extern struct {
    Size: DWORD,
    MinimumRequiredConfigSize: DWORD,
    PolicyFlags: DWORD,
    NumberOfImports: DWORD,
    ImportList: DWORD,
    ImportEntrySize: DWORD,
    FamilyID: [16]BYTE,
    ImageID: [16]BYTE,
    ImageVersion: DWORD,
    SecurityVersion: DWORD,
    EnclaveSize: ULONGLONG,
    NumberOfThreads: DWORD,
    EnclaveFlags: DWORD,
};
pub const IMAGE_ENCLAVE_CONFIG64 = struct__IMAGE_ENCLAVE_CONFIG64;
pub const PIMAGE_ENCLAVE_CONFIG64 = [*c]struct__IMAGE_ENCLAVE_CONFIG64;
pub const IMAGE_ENCLAVE_CONFIG = IMAGE_ENCLAVE_CONFIG64;
pub const PIMAGE_ENCLAVE_CONFIG = PIMAGE_ENCLAVE_CONFIG64;
pub const struct__IMAGE_ENCLAVE_IMPORT = extern struct {
    MatchType: DWORD,
    MinimumSecurityVersion: DWORD,
    UniqueOrAuthorID: [32]BYTE,
    FamilyID: [16]BYTE,
    ImageID: [16]BYTE,
    ImportName: DWORD,
    Reserved: DWORD,
};
pub const IMAGE_ENCLAVE_IMPORT = struct__IMAGE_ENCLAVE_IMPORT;
pub const PIMAGE_ENCLAVE_IMPORT = [*c]struct__IMAGE_ENCLAVE_IMPORT;
pub const struct__IMAGE_DEBUG_DIRECTORY = extern struct {
    Characteristics: DWORD,
    TimeDateStamp: DWORD,
    MajorVersion: WORD,
    MinorVersion: WORD,
    Type: DWORD,
    SizeOfData: DWORD,
    AddressOfRawData: DWORD,
    PointerToRawData: DWORD,
};
pub const IMAGE_DEBUG_DIRECTORY = struct__IMAGE_DEBUG_DIRECTORY;
pub const PIMAGE_DEBUG_DIRECTORY = [*c]struct__IMAGE_DEBUG_DIRECTORY;
pub const struct__IMAGE_COFF_SYMBOLS_HEADER = extern struct {
    NumberOfSymbols: DWORD,
    LvaToFirstSymbol: DWORD,
    NumberOfLinenumbers: DWORD,
    LvaToFirstLinenumber: DWORD,
    RvaToFirstByteOfCode: DWORD,
    RvaToLastByteOfCode: DWORD,
    RvaToFirstByteOfData: DWORD,
    RvaToLastByteOfData: DWORD,
};
pub const IMAGE_COFF_SYMBOLS_HEADER = struct__IMAGE_COFF_SYMBOLS_HEADER;
pub const PIMAGE_COFF_SYMBOLS_HEADER = [*c]struct__IMAGE_COFF_SYMBOLS_HEADER;
pub const struct__FPO_DATA = opaque {};
pub const FPO_DATA = struct__FPO_DATA;
pub const PFPO_DATA = ?*struct__FPO_DATA;
pub const struct__IMAGE_DEBUG_MISC = extern struct {
    DataType: DWORD,
    Length: DWORD,
    Unicode: BOOLEAN,
    Reserved: [3]BYTE,
    Data: [1]BYTE,
};
pub const IMAGE_DEBUG_MISC = struct__IMAGE_DEBUG_MISC;
pub const PIMAGE_DEBUG_MISC = [*c]struct__IMAGE_DEBUG_MISC;
pub const struct__IMAGE_FUNCTION_ENTRY = extern struct {
    StartingAddress: DWORD,
    EndingAddress: DWORD,
    EndOfPrologue: DWORD,
};
pub const IMAGE_FUNCTION_ENTRY = struct__IMAGE_FUNCTION_ENTRY;
pub const PIMAGE_FUNCTION_ENTRY = [*c]struct__IMAGE_FUNCTION_ENTRY;
pub const struct__IMAGE_FUNCTION_ENTRY64 = extern struct {
    StartingAddress: ULONGLONG,
    EndingAddress: ULONGLONG,
    @"": extern union {
        EndOfPrologue: ULONGLONG,
        UnwindInfoAddress: ULONGLONG,
    },
};
pub const IMAGE_FUNCTION_ENTRY64 = struct__IMAGE_FUNCTION_ENTRY64;
pub const PIMAGE_FUNCTION_ENTRY64 = [*c]struct__IMAGE_FUNCTION_ENTRY64;
pub const struct__IMAGE_SEPARATE_DEBUG_HEADER = extern struct {
    Signature: WORD,
    Flags: WORD,
    Machine: WORD,
    Characteristics: WORD,
    TimeDateStamp: DWORD,
    CheckSum: DWORD,
    ImageBase: DWORD,
    SizeOfImage: DWORD,
    NumberOfSections: DWORD,
    ExportedNamesSize: DWORD,
    DebugDirectorySize: DWORD,
    SectionAlignment: DWORD,
    Reserved: [2]DWORD,
};
pub const IMAGE_SEPARATE_DEBUG_HEADER = struct__IMAGE_SEPARATE_DEBUG_HEADER;
pub const PIMAGE_SEPARATE_DEBUG_HEADER = [*c]struct__IMAGE_SEPARATE_DEBUG_HEADER;
pub const struct__NON_PAGED_DEBUG_INFO = extern struct {
    Signature: WORD,
    Flags: WORD,
    Size: DWORD,
    Machine: WORD,
    Characteristics: WORD,
    TimeDateStamp: DWORD,
    CheckSum: DWORD,
    SizeOfImage: DWORD,
    ImageBase: ULONGLONG,
};
pub const NON_PAGED_DEBUG_INFO = struct__NON_PAGED_DEBUG_INFO;
pub const PNON_PAGED_DEBUG_INFO = [*c]struct__NON_PAGED_DEBUG_INFO;
pub const struct__ImageArchitectureHeader = opaque {};
pub const IMAGE_ARCHITECTURE_HEADER = struct__ImageArchitectureHeader;
pub const PIMAGE_ARCHITECTURE_HEADER = ?*struct__ImageArchitectureHeader;
pub const struct__ImageArchitectureEntry = extern struct {
    FixupInstRVA: DWORD,
    NewInst: DWORD,
};
pub const IMAGE_ARCHITECTURE_ENTRY = struct__ImageArchitectureEntry;
pub const PIMAGE_ARCHITECTURE_ENTRY = [*c]struct__ImageArchitectureEntry;
pub const struct_IMPORT_OBJECT_HEADER = opaque {};
pub const IMPORT_OBJECT_HEADER = struct_IMPORT_OBJECT_HEADER;
pub const IMPORT_OBJECT_CODE = enum_IMPORT_OBJECT_TYPE.IMPORT_OBJECT_CODE;
pub const IMPORT_OBJECT_DATA = enum_IMPORT_OBJECT_TYPE.IMPORT_OBJECT_DATA;
pub const IMPORT_OBJECT_CONST = enum_IMPORT_OBJECT_TYPE.IMPORT_OBJECT_CONST;
pub const enum_IMPORT_OBJECT_TYPE = extern enum {
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
};
pub const IMPORT_OBJECT_TYPE = enum_IMPORT_OBJECT_TYPE;
pub const IMPORT_OBJECT_ORDINAL = enum_IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_ORDINAL;
pub const IMPORT_OBJECT_NAME = enum_IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME;
pub const IMPORT_OBJECT_NAME_NO_PREFIX = enum_IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_NO_PREFIX;
pub const IMPORT_OBJECT_NAME_UNDECORATE = enum_IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_UNDECORATE;
pub const IMPORT_OBJECT_NAME_EXPORTAS = enum_IMPORT_OBJECT_NAME_TYPE.IMPORT_OBJECT_NAME_EXPORTAS;
pub const enum_IMPORT_OBJECT_NAME_TYPE = extern enum {
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,
    IMPORT_OBJECT_NAME_EXPORTAS = 4,
};
pub const IMPORT_OBJECT_NAME_TYPE = enum_IMPORT_OBJECT_NAME_TYPE;
pub const COMIMAGE_FLAGS_ILONLY = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_ILONLY;
pub const COMIMAGE_FLAGS_32BITREQUIRED = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_32BITREQUIRED;
pub const COMIMAGE_FLAGS_IL_LIBRARY = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_IL_LIBRARY;
pub const COMIMAGE_FLAGS_STRONGNAMESIGNED = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_STRONGNAMESIGNED;
pub const COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_NATIVE_ENTRYPOINT;
pub const COMIMAGE_FLAGS_TRACKDEBUGDATA = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_TRACKDEBUGDATA;
pub const COMIMAGE_FLAGS_32BITPREFERRED = enum_ReplacesCorHdrNumericDefines.COMIMAGE_FLAGS_32BITPREFERRED;
pub const COR_VERSION_MAJOR_V2 = enum_ReplacesCorHdrNumericDefines.COR_VERSION_MAJOR_V2;
pub const COR_VERSION_MAJOR = enum_ReplacesCorHdrNumericDefines.COR_VERSION_MAJOR;
pub const COR_VERSION_MINOR = enum_ReplacesCorHdrNumericDefines.COR_VERSION_MINOR;
pub const COR_DELETED_NAME_LENGTH = enum_ReplacesCorHdrNumericDefines.COR_DELETED_NAME_LENGTH;
pub const COR_VTABLEGAP_NAME_LENGTH = enum_ReplacesCorHdrNumericDefines.COR_VTABLEGAP_NAME_LENGTH;
pub const NATIVE_TYPE_MAX_CB = enum_ReplacesCorHdrNumericDefines.NATIVE_TYPE_MAX_CB;
pub const COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = enum_ReplacesCorHdrNumericDefines.COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE;
pub const IMAGE_COR_MIH_METHODRVA = enum_ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_METHODRVA;
pub const IMAGE_COR_MIH_EHRVA = enum_ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_EHRVA;
pub const IMAGE_COR_MIH_BASICBLOCK = enum_ReplacesCorHdrNumericDefines.IMAGE_COR_MIH_BASICBLOCK;
pub const COR_VTABLE_32BIT = enum_ReplacesCorHdrNumericDefines.COR_VTABLE_32BIT;
pub const COR_VTABLE_64BIT = enum_ReplacesCorHdrNumericDefines.COR_VTABLE_64BIT;
pub const COR_VTABLE_FROM_UNMANAGED = enum_ReplacesCorHdrNumericDefines.COR_VTABLE_FROM_UNMANAGED;
pub const COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = enum_ReplacesCorHdrNumericDefines.COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN;
pub const COR_VTABLE_CALL_MOST_DERIVED = enum_ReplacesCorHdrNumericDefines.COR_VTABLE_CALL_MOST_DERIVED;
pub const IMAGE_COR_EATJ_THUNK_SIZE = enum_ReplacesCorHdrNumericDefines.IMAGE_COR_EATJ_THUNK_SIZE;
pub const MAX_CLASS_NAME = enum_ReplacesCorHdrNumericDefines.MAX_CLASS_NAME;
pub const MAX_PACKAGE_NAME = enum_ReplacesCorHdrNumericDefines.MAX_PACKAGE_NAME;
pub const enum_ReplacesCorHdrNumericDefines = extern enum {
    COMIMAGE_FLAGS_ILONLY = 1,
    COMIMAGE_FLAGS_32BITREQUIRED = 2,
    COMIMAGE_FLAGS_IL_LIBRARY = 4,
    COMIMAGE_FLAGS_STRONGNAMESIGNED = 8,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 16,
    COMIMAGE_FLAGS_TRACKDEBUGDATA = 65536,
    COMIMAGE_FLAGS_32BITPREFERRED = 131072,
    COR_VERSION_MAJOR_V2 = 2,
    COR_VERSION_MAJOR = 2,
    COR_VERSION_MINOR = 5,
    COR_DELETED_NAME_LENGTH = 8,
    COR_VTABLEGAP_NAME_LENGTH = 8,
    NATIVE_TYPE_MAX_CB = 1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 255,
    IMAGE_COR_MIH_METHODRVA = 1,
    IMAGE_COR_MIH_EHRVA = 2,
    IMAGE_COR_MIH_BASICBLOCK = 8,
    COR_VTABLE_32BIT = 1,
    COR_VTABLE_64BIT = 2,
    COR_VTABLE_FROM_UNMANAGED = 4,
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 8,
    COR_VTABLE_CALL_MOST_DERIVED = 16,
    IMAGE_COR_EATJ_THUNK_SIZE = 32,
    MAX_CLASS_NAME = 1024,
    MAX_PACKAGE_NAME = 1024,
};
pub const ReplacesCorHdrNumericDefines = enum_ReplacesCorHdrNumericDefines;
pub const struct_IMAGE_COR20_HEADER = extern struct {
    cb: DWORD,
    MajorRuntimeVersion: WORD,
    MinorRuntimeVersion: WORD,
    MetaData: IMAGE_DATA_DIRECTORY,
    Flags: DWORD,
    @"": extern union {
        EntryPointToken: DWORD,
        EntryPointRVA: DWORD,
    },
    Resources: IMAGE_DATA_DIRECTORY,
    StrongNameSignature: IMAGE_DATA_DIRECTORY,
    CodeManagerTable: IMAGE_DATA_DIRECTORY,
    VTableFixups: IMAGE_DATA_DIRECTORY,
    ExportAddressTableJumps: IMAGE_DATA_DIRECTORY,
    ManagedNativeHeader: IMAGE_DATA_DIRECTORY,
};
pub const IMAGE_COR20_HEADER = struct_IMAGE_COR20_HEADER;
pub const PIMAGE_COR20_HEADER = [*c]struct_IMAGE_COR20_HEADER;
extern fn RtlCaptureStackBackTrace(FramesToSkip: DWORD, FramesToCapture: DWORD, BackTrace: [*c]PVOID, BackTraceHash: PDWORD) WORD;
extern fn RtlCaptureContext(ContextRecord: PCONTEXT) void;
extern fn RtlUnwind(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID) void;
extern fn RtlAddFunctionTable(FunctionTable: PRUNTIME_FUNCTION, EntryCount: DWORD, BaseAddress: DWORD64) BOOLEAN;
extern fn RtlDeleteFunctionTable(FunctionTable: PRUNTIME_FUNCTION) BOOLEAN;
extern fn RtlInstallFunctionTableCallback(TableIdentifier: DWORD64, BaseAddress: DWORD64, Length: DWORD, Callback: PGET_RUNTIME_FUNCTION_CALLBACK, Context: PVOID, OutOfProcessCallbackDll: PCWSTR) BOOLEAN;
extern fn RtlAddGrowableFunctionTable(DynamicTable: [*c]PVOID, FunctionTable: PRUNTIME_FUNCTION, EntryCount: DWORD, MaximumEntryCount: DWORD, RangeBase: ULONG_PTR, RangeEnd: ULONG_PTR) DWORD;
extern fn RtlGrowFunctionTable(DynamicTable: PVOID, NewEntryCount: DWORD) void;
extern fn RtlDeleteGrowableFunctionTable(DynamicTable: PVOID) void;
extern fn RtlLookupFunctionEntry(ControlPc: DWORD64, ImageBase: PDWORD64, HistoryTable: PUNWIND_HISTORY_TABLE) PRUNTIME_FUNCTION;
extern fn RtlRestoreContext(ContextRecord: PCONTEXT, ExceptionRecord: [*c]struct__EXCEPTION_RECORD) void;
extern fn RtlUnwindEx(TargetFrame: PVOID, TargetIp: PVOID, ExceptionRecord: PEXCEPTION_RECORD, ReturnValue: PVOID, ContextRecord: PCONTEXT, HistoryTable: PUNWIND_HISTORY_TABLE) void;
extern fn RtlVirtualUnwind(HandlerType: DWORD, ImageBase: DWORD64, ControlPc: DWORD64, FunctionEntry: PRUNTIME_FUNCTION, ContextRecord: PCONTEXT, HandlerData: [*c]PVOID, EstablisherFrame: PDWORD64, ContextPointers: PKNONVOLATILE_CONTEXT_POINTERS) PEXCEPTION_ROUTINE;
extern fn RtlRaiseException(ExceptionRecord: PEXCEPTION_RECORD) void;
extern fn RtlPcToFileHeader(PcValue: PVOID, BaseOfImage: [*c]PVOID) PVOID;
extern fn RtlCompareMemory(Source1: ?*const c_void, Source2: ?*const c_void, Length: SIZE_T) SIZE_T;
pub const struct__SLIST_ENTRY = extern struct {
    Next: [*c]struct__SLIST_ENTRY,
};
pub const SLIST_ENTRY = struct__SLIST_ENTRY;
pub const PSLIST_ENTRY = [*c]struct__SLIST_ENTRY;
pub const union__SLIST_HEADER = extern union {
    @"": extern struct {
        Alignment: ULONGLONG,
        Region: ULONGLONG,
    },
    HeaderX64: opaque {},
};
pub const SLIST_HEADER = union__SLIST_HEADER;
pub const PSLIST_HEADER = [*c]union__SLIST_HEADER;
extern fn RtlInitializeSListHead(ListHead: PSLIST_HEADER) void;
extern fn RtlFirstEntrySList(ListHead: [*c]const SLIST_HEADER) PSLIST_ENTRY;
extern fn RtlInterlockedPopEntrySList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
extern fn RtlInterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY) PSLIST_ENTRY;
extern fn RtlInterlockedPushListSListEx(ListHead: PSLIST_HEADER, List: PSLIST_ENTRY, ListEnd: PSLIST_ENTRY, Count: DWORD) PSLIST_ENTRY;
extern fn RtlInterlockedFlushSList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
extern fn RtlQueryDepthSList(ListHead: PSLIST_HEADER) WORD;
pub const union__RTL_RUN_ONCE = extern union {
    Ptr: PVOID,
};
pub const RTL_RUN_ONCE = union__RTL_RUN_ONCE;
pub const PRTL_RUN_ONCE = [*c]union__RTL_RUN_ONCE;
pub const struct__RTL_BARRIER = extern struct {
    Reserved1: DWORD,
    Reserved2: DWORD,
    Reserved3: [2]ULONG_PTR,
    Reserved4: DWORD,
    Reserved5: DWORD,
};
pub const RTL_BARRIER = struct__RTL_BARRIER;
pub const PRTL_BARRIER = [*c]struct__RTL_BARRIER;
extern fn __fastfail(Code: c_uint) noreturn;
pub fn @as(HEAP_MAKE_TAG_FLAGS, TagBase: DWORD, Tag: DWORD) DWORD {
    return @as(DWORD, TagBase +% (Tag << @import("std").math.Log2Int(DWORD)(18)));
}
pub const struct__MESSAGE_RESOURCE_ENTRY = extern struct {
    Length: WORD,
    Flags: WORD,
    Text: [1]BYTE,
};
pub const MESSAGE_RESOURCE_ENTRY = struct__MESSAGE_RESOURCE_ENTRY;
pub const PMESSAGE_RESOURCE_ENTRY = [*c]struct__MESSAGE_RESOURCE_ENTRY;
pub const struct__MESSAGE_RESOURCE_BLOCK = extern struct {
    LowId: DWORD,
    HighId: DWORD,
    OffsetToEntries: DWORD,
};
pub const MESSAGE_RESOURCE_BLOCK = struct__MESSAGE_RESOURCE_BLOCK;
pub const PMESSAGE_RESOURCE_BLOCK = [*c]struct__MESSAGE_RESOURCE_BLOCK;
pub const struct__MESSAGE_RESOURCE_DATA = extern struct {
    NumberOfBlocks: DWORD,
    Blocks: [1]MESSAGE_RESOURCE_BLOCK,
};
pub const MESSAGE_RESOURCE_DATA = struct__MESSAGE_RESOURCE_DATA;
pub const PMESSAGE_RESOURCE_DATA = [*c]struct__MESSAGE_RESOURCE_DATA;
pub const struct__OSVERSIONINFOA = extern struct {
    dwOSVersionInfoSize: DWORD,
    dwMajorVersion: DWORD,
    dwMinorVersion: DWORD,
    dwBuildNumber: DWORD,
    dwPlatformId: DWORD,
    szCSDVersion: [128]CHAR,
};
pub const OSVERSIONINFOA = struct__OSVERSIONINFOA;
pub const POSVERSIONINFOA = [*c]struct__OSVERSIONINFOA;
pub const LPOSVERSIONINFOA = [*c]struct__OSVERSIONINFOA;
pub const struct__OSVERSIONINFOW = extern struct {
    dwOSVersionInfoSize: DWORD,
    dwMajorVersion: DWORD,
    dwMinorVersion: DWORD,
    dwBuildNumber: DWORD,
    dwPlatformId: DWORD,
    szCSDVersion: [128]WCHAR,
};
pub const OSVERSIONINFOW = struct__OSVERSIONINFOW;
pub const POSVERSIONINFOW = [*c]struct__OSVERSIONINFOW;
pub const LPOSVERSIONINFOW = [*c]struct__OSVERSIONINFOW;
pub const RTL_OSVERSIONINFOW = struct__OSVERSIONINFOW;
pub const PRTL_OSVERSIONINFOW = [*c]struct__OSVERSIONINFOW;
pub const OSVERSIONINFO = OSVERSIONINFOA;
pub const POSVERSIONINFO = POSVERSIONINFOA;
pub const LPOSVERSIONINFO = LPOSVERSIONINFOA;
pub const struct__OSVERSIONINFOEXA = extern struct {
    dwOSVersionInfoSize: DWORD,
    dwMajorVersion: DWORD,
    dwMinorVersion: DWORD,
    dwBuildNumber: DWORD,
    dwPlatformId: DWORD,
    szCSDVersion: [128]CHAR,
    wServicePackMajor: WORD,
    wServicePackMinor: WORD,
    wSuiteMask: WORD,
    wProductType: BYTE,
    wReserved: BYTE,
};
pub const OSVERSIONINFOEXA = struct__OSVERSIONINFOEXA;
pub const POSVERSIONINFOEXA = [*c]struct__OSVERSIONINFOEXA;
pub const LPOSVERSIONINFOEXA = [*c]struct__OSVERSIONINFOEXA;
pub const struct__OSVERSIONINFOEXW = extern struct {
    dwOSVersionInfoSize: DWORD,
    dwMajorVersion: DWORD,
    dwMinorVersion: DWORD,
    dwBuildNumber: DWORD,
    dwPlatformId: DWORD,
    szCSDVersion: [128]WCHAR,
    wServicePackMajor: WORD,
    wServicePackMinor: WORD,
    wSuiteMask: WORD,
    wProductType: BYTE,
    wReserved: BYTE,
};
pub const OSVERSIONINFOEXW = struct__OSVERSIONINFOEXW;
pub const POSVERSIONINFOEXW = [*c]struct__OSVERSIONINFOEXW;
pub const LPOSVERSIONINFOEXW = [*c]struct__OSVERSIONINFOEXW;
pub const RTL_OSVERSIONINFOEXW = struct__OSVERSIONINFOEXW;
pub const PRTL_OSVERSIONINFOEXW = [*c]struct__OSVERSIONINFOEXW;
pub const OSVERSIONINFOEX = OSVERSIONINFOEXA;
pub const POSVERSIONINFOEX = POSVERSIONINFOEXA;
pub const LPOSVERSIONINFOEX = LPOSVERSIONINFOEXA;
extern fn VerSetConditionMask(ConditionMask: ULONGLONG, TypeMask: DWORD, Condition: BYTE) ULONGLONG;
extern fn RtlGetProductInfo(OSMajorVersion: DWORD, OSMinorVersion: DWORD, SpMajorVersion: DWORD, SpMinorVersion: DWORD, ReturnedProductType: PDWORD) BOOLEAN;
pub const UmsThreadInvalidInfoClass = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadInvalidInfoClass;
pub const UmsThreadUserContext = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadUserContext;
pub const UmsThreadPriority = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadPriority;
pub const UmsThreadAffinity = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadAffinity;
pub const UmsThreadTeb = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadTeb;
pub const UmsThreadIsSuspended = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadIsSuspended;
pub const UmsThreadIsTerminated = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadIsTerminated;
pub const UmsThreadMaxInfoClass = enum__RTL_UMS_THREAD_INFO_CLASS.UmsThreadMaxInfoClass;
pub const enum__RTL_UMS_THREAD_INFO_CLASS = extern enum {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext = 1,
    UmsThreadPriority = 2,
    UmsThreadAffinity = 3,
    UmsThreadTeb = 4,
    UmsThreadIsSuspended = 5,
    UmsThreadIsTerminated = 6,
    UmsThreadMaxInfoClass = 7,
};
pub const RTL_UMS_THREAD_INFO_CLASS = enum__RTL_UMS_THREAD_INFO_CLASS;
pub const PRTL_UMS_THREAD_INFO_CLASS = [*c]enum__RTL_UMS_THREAD_INFO_CLASS;
pub const UmsSchedulerStartup = enum__RTL_UMS_SCHEDULER_REASON.UmsSchedulerStartup;
pub const UmsSchedulerThreadBlocked = enum__RTL_UMS_SCHEDULER_REASON.UmsSchedulerThreadBlocked;
pub const UmsSchedulerThreadYield = enum__RTL_UMS_SCHEDULER_REASON.UmsSchedulerThreadYield;
pub const enum__RTL_UMS_SCHEDULER_REASON = extern enum {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked = 1,
    UmsSchedulerThreadYield = 2,
};
pub const RTL_UMS_SCHEDULER_REASON = enum__RTL_UMS_SCHEDULER_REASON;
pub const PRTL_UMS_SCHEDULER_REASON = [*c]enum__RTL_UMS_SCHEDULER_REASON;
pub const RTL_UMS_SCHEDULER_ENTRY_POINT = fn (RTL_UMS_SCHEDULER_REASON, ULONG_PTR, PVOID) callconv(std.os.windows.WINAPI) void;
pub const PRTL_UMS_SCHEDULER_ENTRY_POINT = [*c]RTL_UMS_SCHEDULER_ENTRY_POINT;
extern fn RtlCrc32(Buffer: ?*const c_void, Size: usize, InitialCrc: DWORD) DWORD;
extern fn RtlCrc64(Buffer: ?*const c_void, Size: usize, InitialCrc: ULONGLONG) ULONGLONG;
pub const OS_DEPLOYMENT_STANDARD = enum__OS_DEPLOYEMENT_STATE_VALUES.OS_DEPLOYMENT_STANDARD;
pub const OS_DEPLOYMENT_COMPACT = enum__OS_DEPLOYEMENT_STATE_VALUES.OS_DEPLOYMENT_COMPACT;
pub const enum__OS_DEPLOYEMENT_STATE_VALUES = extern enum {
    OS_DEPLOYMENT_STANDARD = 1,
    OS_DEPLOYMENT_COMPACT = 2,
};
pub const OS_DEPLOYEMENT_STATE_VALUES = enum__OS_DEPLOYEMENT_STATE_VALUES;
extern fn RtlOsDeploymentState(Flags: DWORD) OS_DEPLOYEMENT_STATE_VALUES;
pub const struct__NV_MEMORY_RANGE = extern struct {
    BaseAddress: ?*c_void,
    Length: SIZE_T,
};
pub const NV_MEMORY_RANGE = struct__NV_MEMORY_RANGE;
pub const PNV_MEMORY_RANGE = [*c]struct__NV_MEMORY_RANGE;
extern fn RtlGetNonVolatileToken(NvBuffer: PVOID, Size: SIZE_T, NvToken: [*c]PVOID) DWORD;
extern fn RtlFreeNonVolatileToken(NvToken: PVOID) DWORD;
extern fn RtlFlushNonVolatileMemory(NvToken: PVOID, NvBuffer: PVOID, Size: SIZE_T, Flags: DWORD) DWORD;
extern fn RtlDrainNonVolatileFlush(NvToken: PVOID) DWORD;
extern fn RtlWriteNonVolatileMemory(NvToken: PVOID, NvDestination: ?*c_void, Source: ?*const c_void, Size: SIZE_T, Flags: DWORD) DWORD;
extern fn RtlFillNonVolatileMemory(NvToken: PVOID, NvDestination: ?*c_void, Size: SIZE_T, Value: BYTE, Flags: DWORD) DWORD;
extern fn RtlFlushNonVolatileMemoryRanges(NvToken: PVOID, NvRanges: PNV_MEMORY_RANGE, NumRanges: SIZE_T, Flags: DWORD) DWORD;
pub const struct_CORRELATION_VECTOR = extern struct {
    Version: CHAR,
    Vector: [129]CHAR,
};
pub const CORRELATION_VECTOR = struct_CORRELATION_VECTOR;
pub const PCORRELATION_VECTOR = [*c]CORRELATION_VECTOR;
extern fn RtlInitializeCorrelationVector(CorrelationVector: PCORRELATION_VECTOR, Version: c_int, Guid: [*c]const GUID) DWORD;
extern fn RtlIncrementCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) DWORD;
extern fn RtlExtendCorrelationVector(CorrelationVector: PCORRELATION_VECTOR) DWORD;
extern fn RtlValidateCorrelationVector(Vector: PCORRELATION_VECTOR) DWORD;
pub const struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = extern struct {
    Size: DWORD,
    TriggerId: PCWSTR,
};
pub const CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
pub const PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = [*c]struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
pub fn @as(CUSTOM_SYSTEM_EVENT_TRIGGER_INIT, Config: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, TriggerId: PCWSTR) void {
    _ = memset(@ptrCast(?*c_void, Config), 0, @sizeOf(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG));
    Config.?.Size = @as(DWORD, @sizeOf(CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG));
    Config.?.TriggerId = TriggerId;
}
extern fn RtlRaiseCustomSystemEventTrigger(TriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG) DWORD;
pub const ImagePolicyEntryTypeNone = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeNone;
pub const ImagePolicyEntryTypeBool = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeBool;
pub const ImagePolicyEntryTypeInt8 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt8;
pub const ImagePolicyEntryTypeUInt8 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt8;
pub const ImagePolicyEntryTypeInt16 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt16;
pub const ImagePolicyEntryTypeUInt16 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt16;
pub const ImagePolicyEntryTypeInt32 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt32;
pub const ImagePolicyEntryTypeUInt32 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt32;
pub const ImagePolicyEntryTypeInt64 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeInt64;
pub const ImagePolicyEntryTypeUInt64 = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUInt64;
pub const ImagePolicyEntryTypeAnsiString = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeAnsiString;
pub const ImagePolicyEntryTypeUnicodeString = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeUnicodeString;
pub const ImagePolicyEntryTypeOverride = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeOverride;
pub const ImagePolicyEntryTypeMaximum = enum__IMAGE_POLICY_ENTRY_TYPE.ImagePolicyEntryTypeMaximum;
pub const enum__IMAGE_POLICY_ENTRY_TYPE = extern enum {
    ImagePolicyEntryTypeNone = 0,
    ImagePolicyEntryTypeBool = 1,
    ImagePolicyEntryTypeInt8 = 2,
    ImagePolicyEntryTypeUInt8 = 3,
    ImagePolicyEntryTypeInt16 = 4,
    ImagePolicyEntryTypeUInt16 = 5,
    ImagePolicyEntryTypeInt32 = 6,
    ImagePolicyEntryTypeUInt32 = 7,
    ImagePolicyEntryTypeInt64 = 8,
    ImagePolicyEntryTypeUInt64 = 9,
    ImagePolicyEntryTypeAnsiString = 10,
    ImagePolicyEntryTypeUnicodeString = 11,
    ImagePolicyEntryTypeOverride = 12,
    ImagePolicyEntryTypeMaximum = 13,
};
pub const IMAGE_POLICY_ENTRY_TYPE = enum__IMAGE_POLICY_ENTRY_TYPE;
pub const ImagePolicyIdNone = enum__IMAGE_POLICY_ID.ImagePolicyIdNone;
pub const ImagePolicyIdEtw = enum__IMAGE_POLICY_ID.ImagePolicyIdEtw;
pub const ImagePolicyIdDebug = enum__IMAGE_POLICY_ID.ImagePolicyIdDebug;
pub const ImagePolicyIdCrashDump = enum__IMAGE_POLICY_ID.ImagePolicyIdCrashDump;
pub const ImagePolicyIdCrashDumpKey = enum__IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKey;
pub const ImagePolicyIdCrashDumpKeyGuid = enum__IMAGE_POLICY_ID.ImagePolicyIdCrashDumpKeyGuid;
pub const ImagePolicyIdParentSd = enum__IMAGE_POLICY_ID.ImagePolicyIdParentSd;
pub const ImagePolicyIdParentSdRev = enum__IMAGE_POLICY_ID.ImagePolicyIdParentSdRev;
pub const ImagePolicyIdSvn = enum__IMAGE_POLICY_ID.ImagePolicyIdSvn;
pub const ImagePolicyIdDeviceId = enum__IMAGE_POLICY_ID.ImagePolicyIdDeviceId;
pub const ImagePolicyIdCapability = enum__IMAGE_POLICY_ID.ImagePolicyIdCapability;
pub const ImagePolicyIdScenarioId = enum__IMAGE_POLICY_ID.ImagePolicyIdScenarioId;
pub const ImagePolicyIdMaximum = enum__IMAGE_POLICY_ID.ImagePolicyIdMaximum;
pub const enum__IMAGE_POLICY_ID = extern enum {
    ImagePolicyIdNone = 0,
    ImagePolicyIdEtw = 1,
    ImagePolicyIdDebug = 2,
    ImagePolicyIdCrashDump = 3,
    ImagePolicyIdCrashDumpKey = 4,
    ImagePolicyIdCrashDumpKeyGuid = 5,
    ImagePolicyIdParentSd = 6,
    ImagePolicyIdParentSdRev = 7,
    ImagePolicyIdSvn = 8,
    ImagePolicyIdDeviceId = 9,
    ImagePolicyIdCapability = 10,
    ImagePolicyIdScenarioId = 11,
    ImagePolicyIdMaximum = 12,
};
pub const IMAGE_POLICY_ID = enum__IMAGE_POLICY_ID;
pub const struct__IMAGE_POLICY_ENTRY = extern struct {
    Type: IMAGE_POLICY_ENTRY_TYPE,
    PolicyId: IMAGE_POLICY_ID,
    u: extern union {
        None: ?*const c_void,
        BoolValue: BOOLEAN,
        Int8Value: INT8,
        UInt8Value: UINT8,
        Int16Value: INT16,
        UInt16Value: UINT16,
        Int32Value: INT32,
        UInt32Value: UINT32,
        Int64Value: INT64,
        UInt64Value: UINT64,
        AnsiStringValue: PCSTR,
        UnicodeStringValue: PCWSTR,
    },
};
pub const IMAGE_POLICY_ENTRY = struct__IMAGE_POLICY_ENTRY;
pub const PCIMAGE_POLICY_ENTRY = [*c]const IMAGE_POLICY_ENTRY;
pub const struct__IMAGE_POLICY_METADATA = extern struct {
    Version: BYTE,
    Reserved0: [7]BYTE,
    ApplicationId: ULONGLONG,
    Policies: [*c]IMAGE_POLICY_ENTRY,
};
pub const IMAGE_POLICY_METADATA = struct__IMAGE_POLICY_METADATA;
pub const PCIMAGE_POLICY_METADATA = [*c]const IMAGE_POLICY_METADATA;
pub const PRTL_CRITICAL_SECTION_DEBUG = [*c]struct__RTL_CRITICAL_SECTION_DEBUG;
pub const struct__RTL_CRITICAL_SECTION = extern struct {
    DebugInfo: PRTL_CRITICAL_SECTION_DEBUG,
    LockCount: LONG,
    RecursionCount: LONG,
    OwningThread: HANDLE,
    LockSemaphore: HANDLE,
    SpinCount: ULONG_PTR,
};
pub const struct__RTL_CRITICAL_SECTION_DEBUG = extern struct {
    Type: WORD,
    CreatorBackTraceIndex: WORD,
    CriticalSection: [*c]struct__RTL_CRITICAL_SECTION,
    ProcessLocksList: LIST_ENTRY,
    EntryCount: DWORD,
    ContentionCount: DWORD,
    Flags: DWORD,
    CreatorBackTraceIndexHigh: WORD,
    SpareWORD: WORD,
};
pub const RTL_CRITICAL_SECTION_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG;
pub const RTL_RESOURCE_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG;
pub const PRTL_RESOURCE_DEBUG = [*c]struct__RTL_CRITICAL_SECTION_DEBUG;
pub const RTL_CRITICAL_SECTION = struct__RTL_CRITICAL_SECTION;
pub const PRTL_CRITICAL_SECTION = [*c]struct__RTL_CRITICAL_SECTION;
pub const struct__RTL_SRWLOCK = extern struct {
    Ptr: PVOID,
};
pub const RTL_SRWLOCK = struct__RTL_SRWLOCK;
pub const PRTL_SRWLOCK = [*c]struct__RTL_SRWLOCK;
pub const struct__RTL_CONDITION_VARIABLE = extern struct {
    Ptr: PVOID,
};
pub const RTL_CONDITION_VARIABLE = struct__RTL_CONDITION_VARIABLE;
pub const PRTL_CONDITION_VARIABLE = [*c]struct__RTL_CONDITION_VARIABLE;
pub const PAPCFUNC = ?fn (ULONG_PTR) callconv(std.os.windows.WINAPI) void;
pub const PVECTORED_EXCEPTION_HANDLER = ?fn ([*c]struct__EXCEPTION_POINTERS) callconv(std.os.windows.WINAPI) LONG;
pub const HeapCompatibilityInformation = enum__HEAP_INFORMATION_CLASS.HeapCompatibilityInformation;
pub const HeapEnableTerminationOnCorruption = enum__HEAP_INFORMATION_CLASS.HeapEnableTerminationOnCorruption;
pub const HeapOptimizeResources = enum__HEAP_INFORMATION_CLASS.HeapOptimizeResources;
pub const enum__HEAP_INFORMATION_CLASS = extern enum {
    HeapCompatibilityInformation = 0,
    HeapEnableTerminationOnCorruption = 1,
    HeapOptimizeResources = 3,
};
pub const HEAP_INFORMATION_CLASS = enum__HEAP_INFORMATION_CLASS;
pub const struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION = extern struct {
    Version: DWORD,
    Flags: DWORD,
};
pub const HEAP_OPTIMIZE_RESOURCES_INFORMATION = struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub const PHEAP_OPTIMIZE_RESOURCES_INFORMATION = [*c]struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub const WAITORTIMERCALLBACKFUNC = ?fn (PVOID, BOOLEAN) callconv(std.os.windows.WINAPI) void;
pub const WORKERCALLBACKFUNC = ?fn (PVOID) callconv(std.os.windows.WINAPI) void;
pub const APC_CALLBACK_FUNCTION = ?fn (DWORD, PVOID, PVOID) callconv(std.os.windows.WINAPI) void;
pub const WAITORTIMERCALLBACK = WAITORTIMERCALLBACKFUNC;
pub const PFLS_CALLBACK_FUNCTION = ?fn (PVOID) callconv(std.os.windows.WINAPI) void;
pub const PSECURE_MEMORY_CACHE_CALLBACK = ?fn (PVOID, SIZE_T) callconv(std.os.windows.WINAPI) BOOLEAN;
pub const ActivationContextBasicInformation = enum__ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextBasicInformation;
pub const ActivationContextDetailedInformation = enum__ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextDetailedInformation;
pub const AssemblyDetailedInformationInActivationContext = enum__ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContext;
pub const FileInformationInAssemblyOfAssemblyInActivationContext = enum__ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContext;
pub const RunlevelInformationInActivationContext = enum__ACTIVATION_CONTEXT_INFO_CLASS.RunlevelInformationInActivationContext;
pub const CompatibilityInformationInActivationContext = enum__ACTIVATION_CONTEXT_INFO_CLASS.CompatibilityInformationInActivationContext;
pub const ActivationContextManifestResourceName = enum__ACTIVATION_CONTEXT_INFO_CLASS.ActivationContextManifestResourceName;
pub const MaxActivationContextInfoClass = enum__ACTIVATION_CONTEXT_INFO_CLASS.MaxActivationContextInfoClass;
pub const AssemblyDetailedInformationInActivationContxt = enum__ACTIVATION_CONTEXT_INFO_CLASS.AssemblyDetailedInformationInActivationContxt;
pub const FileInformationInAssemblyOfAssemblyInActivationContxt = enum__ACTIVATION_CONTEXT_INFO_CLASS.FileInformationInAssemblyOfAssemblyInActivationContxt;
pub const enum__ACTIVATION_CONTEXT_INFO_CLASS = extern enum {
    ActivationContextBasicInformation = 1,
    ActivationContextDetailedInformation = 2,
    AssemblyDetailedInformationInActivationContext = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext = 4,
    RunlevelInformationInActivationContext = 5,
    CompatibilityInformationInActivationContext = 6,
    ActivationContextManifestResourceName = 7,
    MaxActivationContextInfoClass = 8,
    AssemblyDetailedInformationInActivationContxt = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt = 4,
};
pub const ACTIVATION_CONTEXT_INFO_CLASS = enum__ACTIVATION_CONTEXT_INFO_CLASS;
pub const struct__ACTIVATION_CONTEXT_QUERY_INDEX = extern struct {
    ulAssemblyIndex: DWORD,
    ulFileIndexInAssembly: DWORD,
};
pub const ACTIVATION_CONTEXT_QUERY_INDEX = struct__ACTIVATION_CONTEXT_QUERY_INDEX;
pub const PACTIVATION_CONTEXT_QUERY_INDEX = [*c]struct__ACTIVATION_CONTEXT_QUERY_INDEX;
pub const PCACTIVATION_CONTEXT_QUERY_INDEX = [*c]const struct__ACTIVATION_CONTEXT_QUERY_INDEX;
pub const struct__ASSEMBLY_FILE_DETAILED_INFORMATION = extern struct {
    ulFlags: DWORD,
    ulFilenameLength: DWORD,
    ulPathLength: DWORD,
    lpFileName: PCWSTR,
    lpFilePath: PCWSTR,
};
pub const ASSEMBLY_FILE_DETAILED_INFORMATION = struct__ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const PASSEMBLY_FILE_DETAILED_INFORMATION = [*c]struct__ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const PCASSEMBLY_FILE_DETAILED_INFORMATION = [*c]const ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = extern struct {
    ulFlags: DWORD,
    ulEncodedAssemblyIdentityLength: DWORD,
    ulManifestPathType: DWORD,
    ulManifestPathLength: DWORD,
    liManifestLastWriteTime: LARGE_INTEGER,
    ulPolicyPathType: DWORD,
    ulPolicyPathLength: DWORD,
    liPolicyLastWriteTime: LARGE_INTEGER,
    ulMetadataSatelliteRosterIndex: DWORD,
    ulManifestVersionMajor: DWORD,
    ulManifestVersionMinor: DWORD,
    ulPolicyVersionMajor: DWORD,
    ulPolicyVersionMinor: DWORD,
    ulAssemblyDirectoryNameLength: DWORD,
    lpAssemblyEncodedAssemblyIdentity: PCWSTR,
    lpAssemblyManifestPath: PCWSTR,
    lpAssemblyPolicyPath: PCWSTR,
    lpAssemblyDirectoryName: PCWSTR,
    ulFileCount: DWORD,
};
pub const ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = [*c]struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = [*c]const struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const ACTCTX_RUN_LEVEL_UNSPECIFIED = 0;
pub const ACTCTX_RUN_LEVEL_AS_INVOKER = 1;
pub const ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2;
pub const ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3;
pub const ACTCTX_RUN_LEVEL_NUMBERS = 4;
pub const ACTCTX_REQUESTED_RUN_LEVEL = extern enum {
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER = 1,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE = 2,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN = 3,
    ACTCTX_RUN_LEVEL_NUMBERS = 4,
};
pub const struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = extern struct {
    ulFlags: DWORD,
    RunLevel: ACTCTX_REQUESTED_RUN_LEVEL,
    UiAccess: DWORD,
};
pub const ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = [*c]struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = [*c]const struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3;
pub const ACTCTX_COMPATIBILITY_ELEMENT_TYPE = extern enum {
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS = 1,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION = 2,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED = 3,
};
pub const struct__COMPATIBILITY_CONTEXT_ELEMENT = extern struct {
    Id: GUID,
    Type: ACTCTX_COMPATIBILITY_ELEMENT_TYPE,
    MaxVersionTested: ULONGLONG,
};
pub const COMPATIBILITY_CONTEXT_ELEMENT = struct__COMPATIBILITY_CONTEXT_ELEMENT;
pub const PCOMPATIBILITY_CONTEXT_ELEMENT = [*c]struct__COMPATIBILITY_CONTEXT_ELEMENT;
pub const PCCOMPATIBILITY_CONTEXT_ELEMENT = [*c]const struct__COMPATIBILITY_CONTEXT_ELEMENT;
pub const struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = extern struct {
    ElementCount: DWORD,
    Elements: [*c]COMPATIBILITY_CONTEXT_ELEMENT,
};
pub const ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub const PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = [*c]struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub const PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = [*c]const struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub const struct__SUPPORTED_OS_INFO = extern struct {
    MajorVersion: WORD,
    MinorVersion: WORD,
};
pub const SUPPORTED_OS_INFO = struct__SUPPORTED_OS_INFO;
pub const PSUPPORTED_OS_INFO = [*c]struct__SUPPORTED_OS_INFO;
pub const struct__MAXVERSIONTESTED_INFO = extern struct {
    MaxVersionTested: ULONGLONG,
};
pub const MAXVERSIONTESTED_INFO = struct__MAXVERSIONTESTED_INFO;
pub const PMAXVERSIONTESTED_INFO = [*c]struct__MAXVERSIONTESTED_INFO;
pub const struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION = extern struct {
    dwFlags: DWORD,
    ulFormatVersion: DWORD,
    ulAssemblyCount: DWORD,
    ulRootManifestPathType: DWORD,
    ulRootManifestPathChars: DWORD,
    ulRootConfigurationPathType: DWORD,
    ulRootConfigurationPathChars: DWORD,
    ulAppDirPathType: DWORD,
    ulAppDirPathChars: DWORD,
    lpRootManifestPath: PCWSTR,
    lpRootConfigurationPath: PCWSTR,
    lpAppDirPath: PCWSTR,
};
pub const ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub const PACTIVATION_CONTEXT_DETAILED_INFORMATION = [*c]struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub const PCACTIVATION_CONTEXT_DETAILED_INFORMATION = [*c]const struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub const struct__HARDWARE_COUNTER_DATA = extern struct {
    Type: HARDWARE_COUNTER_TYPE,
    Reserved: DWORD,
    Value: DWORD64,
};
pub const HARDWARE_COUNTER_DATA = struct__HARDWARE_COUNTER_DATA;
pub const PHARDWARE_COUNTER_DATA = [*c]struct__HARDWARE_COUNTER_DATA;
pub const struct__PERFORMANCE_DATA = extern struct {
    Size: WORD,
    Version: BYTE,
    HwCountersCount: BYTE,
    ContextSwitchCount: DWORD,
    WaitReasonBitMap: DWORD64,
    CycleTime: DWORD64,
    RetryCount: DWORD,
    Reserved: DWORD,
    HwCounters: [16]HARDWARE_COUNTER_DATA,
};
pub const PERFORMANCE_DATA = struct__PERFORMANCE_DATA;
pub const PPERFORMANCE_DATA = [*c]struct__PERFORMANCE_DATA;
extern fn RtlGetDeviceFamilyInfoEnum(pullUAPInfo: [*c]ULONGLONG, pulDeviceFamily: [*c]DWORD, pulDeviceForm: [*c]DWORD) void;
extern fn RtlConvertDeviceFamilyInfoToString(pulDeviceFamilyBufferSize: PDWORD, pulDeviceFormBufferSize: PDWORD, DeviceFamily: PWSTR, DeviceForm: PWSTR) DWORD;
extern fn RtlSwitchedVVI(VersionInfo: PRTL_OSVERSIONINFOEXW, TypeMask: DWORD, ConditionMask: ULONGLONG) DWORD;
pub const struct__EVENTLOGRECORD = extern struct {
    Length: DWORD,
    Reserved: DWORD,
    RecordNumber: DWORD,
    TimeGenerated: DWORD,
    TimeWritten: DWORD,
    EventID: DWORD,
    EventType: WORD,
    NumStrings: WORD,
    EventCategory: WORD,
    ReservedFlags: WORD,
    ClosingRecordNumber: DWORD,
    StringOffset: DWORD,
    UserSidLength: DWORD,
    UserSidOffset: DWORD,
    DataLength: DWORD,
    DataOffset: DWORD,
};
pub const EVENTLOGRECORD = struct__EVENTLOGRECORD;
pub const PEVENTLOGRECORD = [*c]struct__EVENTLOGRECORD;
pub const struct__EVENTSFORLOGFILE = extern struct {
    ulSize: DWORD,
    szLogicalLogFile: [256]WCHAR,
    ulNumRecords: DWORD,
    pEventLogRecords: [*c]EVENTLOGRECORD,
};
pub const EVENTSFORLOGFILE = struct__EVENTSFORLOGFILE;
pub const PEVENTSFORLOGFILE = [*c]struct__EVENTSFORLOGFILE;
pub const struct__PACKEDEVENTINFO = extern struct {
    ulSize: DWORD,
    ulNumEventsForLogFile: DWORD,
    ulOffsets: [*c]DWORD,
};
pub const PACKEDEVENTINFO = struct__PACKEDEVENTINFO;
pub const PPACKEDEVENTINFO = [*c]struct__PACKEDEVENTINFO;
pub const DriverType = enum__CM_SERVICE_NODE_TYPE.DriverType;
pub const FileSystemType = enum__CM_SERVICE_NODE_TYPE.FileSystemType;
pub const Win32ServiceOwnProcess = enum__CM_SERVICE_NODE_TYPE.Win32ServiceOwnProcess;
pub const Win32ServiceShareProcess = enum__CM_SERVICE_NODE_TYPE.Win32ServiceShareProcess;
pub const AdapterType = enum__CM_SERVICE_NODE_TYPE.AdapterType;
pub const RecognizerType = enum__CM_SERVICE_NODE_TYPE.RecognizerType;
pub const enum__CM_SERVICE_NODE_TYPE = extern enum {
    DriverType = 1,
    FileSystemType = 2,
    Win32ServiceOwnProcess = 16,
    Win32ServiceShareProcess = 32,
    AdapterType = 4,
    RecognizerType = 8,
};
pub const SERVICE_NODE_TYPE = enum__CM_SERVICE_NODE_TYPE;
pub const BootLoad = enum__CM_SERVICE_LOAD_TYPE.BootLoad;
pub const SystemLoad = enum__CM_SERVICE_LOAD_TYPE.SystemLoad;
pub const AutoLoad = enum__CM_SERVICE_LOAD_TYPE.AutoLoad;
pub const DemandLoad = enum__CM_SERVICE_LOAD_TYPE.DemandLoad;
pub const DisableLoad = enum__CM_SERVICE_LOAD_TYPE.DisableLoad;
pub const enum__CM_SERVICE_LOAD_TYPE = extern enum {
    BootLoad = 0,
    SystemLoad = 1,
    AutoLoad = 2,
    DemandLoad = 3,
    DisableLoad = 4,
};
pub const SERVICE_LOAD_TYPE = enum__CM_SERVICE_LOAD_TYPE;
pub const IgnoreError = enum__CM_ERROR_CONTROL_TYPE.IgnoreError;
pub const NormalError = enum__CM_ERROR_CONTROL_TYPE.NormalError;
pub const SevereError = enum__CM_ERROR_CONTROL_TYPE.SevereError;
pub const CriticalError = enum__CM_ERROR_CONTROL_TYPE.CriticalError;
pub const enum__CM_ERROR_CONTROL_TYPE = extern enum {
    IgnoreError = 0,
    NormalError = 1,
    SevereError = 2,
    CriticalError = 3,
};
pub const SERVICE_ERROR_TYPE = enum__CM_ERROR_CONTROL_TYPE;
pub const struct__TAPE_ERASE = extern struct {
    Type: DWORD,
    Immediate: BOOLEAN,
};
pub const TAPE_ERASE = struct__TAPE_ERASE;
pub const PTAPE_ERASE = [*c]struct__TAPE_ERASE;
pub const struct__TAPE_PREPARE = extern struct {
    Operation: DWORD,
    Immediate: BOOLEAN,
};
pub const TAPE_PREPARE = struct__TAPE_PREPARE;
pub const PTAPE_PREPARE = [*c]struct__TAPE_PREPARE;
pub const struct__TAPE_WRITE_MARKS = extern struct {
    Type: DWORD,
    Count: DWORD,
    Immediate: BOOLEAN,
};
pub const TAPE_WRITE_MARKS = struct__TAPE_WRITE_MARKS;
pub const PTAPE_WRITE_MARKS = [*c]struct__TAPE_WRITE_MARKS;
pub const struct__TAPE_GET_POSITION = extern struct {
    Type: DWORD,
    Partition: DWORD,
    Offset: LARGE_INTEGER,
};
pub const TAPE_GET_POSITION = struct__TAPE_GET_POSITION;
pub const PTAPE_GET_POSITION = [*c]struct__TAPE_GET_POSITION;
pub const struct__TAPE_SET_POSITION = extern struct {
    Method: DWORD,
    Partition: DWORD,
    Offset: LARGE_INTEGER,
    Immediate: BOOLEAN,
};
pub const TAPE_SET_POSITION = struct__TAPE_SET_POSITION;
pub const PTAPE_SET_POSITION = [*c]struct__TAPE_SET_POSITION;
pub const struct__TAPE_GET_DRIVE_PARAMETERS = extern struct {
    ECC: BOOLEAN,
    Compression: BOOLEAN,
    DataPadding: BOOLEAN,
    ReportSetmarks: BOOLEAN,
    DefaultBlockSize: DWORD,
    MaximumBlockSize: DWORD,
    MinimumBlockSize: DWORD,
    MaximumPartitionCount: DWORD,
    FeaturesLow: DWORD,
    FeaturesHigh: DWORD,
    EOTWarningZoneSize: DWORD,
};
pub const TAPE_GET_DRIVE_PARAMETERS = struct__TAPE_GET_DRIVE_PARAMETERS;
pub const PTAPE_GET_DRIVE_PARAMETERS = [*c]struct__TAPE_GET_DRIVE_PARAMETERS;
pub const struct__TAPE_SET_DRIVE_PARAMETERS = extern struct {
    ECC: BOOLEAN,
    Compression: BOOLEAN,
    DataPadding: BOOLEAN,
    ReportSetmarks: BOOLEAN,
    EOTWarningZoneSize: DWORD,
};
pub const TAPE_SET_DRIVE_PARAMETERS = struct__TAPE_SET_DRIVE_PARAMETERS;
pub const PTAPE_SET_DRIVE_PARAMETERS = [*c]struct__TAPE_SET_DRIVE_PARAMETERS;
pub const struct__TAPE_GET_MEDIA_PARAMETERS = extern struct {
    Capacity: LARGE_INTEGER,
    Remaining: LARGE_INTEGER,
    BlockSize: DWORD,
    PartitionCount: DWORD,
    WriteProtected: BOOLEAN,
};
pub const TAPE_GET_MEDIA_PARAMETERS = struct__TAPE_GET_MEDIA_PARAMETERS;
pub const PTAPE_GET_MEDIA_PARAMETERS = [*c]struct__TAPE_GET_MEDIA_PARAMETERS;
pub const struct__TAPE_SET_MEDIA_PARAMETERS = extern struct {
    BlockSize: DWORD,
};
pub const TAPE_SET_MEDIA_PARAMETERS = struct__TAPE_SET_MEDIA_PARAMETERS;
pub const PTAPE_SET_MEDIA_PARAMETERS = [*c]struct__TAPE_SET_MEDIA_PARAMETERS;
pub const struct__TAPE_CREATE_PARTITION = extern struct {
    Method: DWORD,
    Count: DWORD,
    Size: DWORD,
};
pub const TAPE_CREATE_PARTITION = struct__TAPE_CREATE_PARTITION;
pub const PTAPE_CREATE_PARTITION = [*c]struct__TAPE_CREATE_PARTITION;
pub const struct__TAPE_WMI_OPERATIONS = extern struct {
    Method: DWORD,
    DataBufferSize: DWORD,
    DataBuffer: PVOID,
};
pub const TAPE_WMI_OPERATIONS = struct__TAPE_WMI_OPERATIONS;
pub const PTAPE_WMI_OPERATIONS = [*c]struct__TAPE_WMI_OPERATIONS;
pub const TapeDriveProblemNone = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveProblemNone;
pub const TapeDriveReadWriteWarning = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteWarning;
pub const TapeDriveReadWriteError = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWriteError;
pub const TapeDriveReadWarning = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadWarning;
pub const TapeDriveWriteWarning = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteWarning;
pub const TapeDriveReadError = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveReadError;
pub const TapeDriveWriteError = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveWriteError;
pub const TapeDriveHardwareError = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveHardwareError;
pub const TapeDriveUnsupportedMedia = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveUnsupportedMedia;
pub const TapeDriveScsiConnectionError = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveScsiConnectionError;
pub const TapeDriveTimetoClean = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveTimetoClean;
pub const TapeDriveCleanDriveNow = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveCleanDriveNow;
pub const TapeDriveMediaLifeExpired = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveMediaLifeExpired;
pub const TapeDriveSnappedTape = enum__TAPE_DRIVE_PROBLEM_TYPE.TapeDriveSnappedTape;
pub const enum__TAPE_DRIVE_PROBLEM_TYPE = extern enum {
    TapeDriveProblemNone,
    TapeDriveReadWriteWarning,
    TapeDriveReadWriteError,
    TapeDriveReadWarning,
    TapeDriveWriteWarning,
    TapeDriveReadError,
    TapeDriveWriteError,
    TapeDriveHardwareError,
    TapeDriveUnsupportedMedia,
    TapeDriveScsiConnectionError,
    TapeDriveTimetoClean,
    TapeDriveCleanDriveNow,
    TapeDriveMediaLifeExpired,
    TapeDriveSnappedTape,
};
pub const TAPE_DRIVE_PROBLEM_TYPE = enum__TAPE_DRIVE_PROBLEM_TYPE;
pub const UOW = GUID;
pub const PUOW = [*c]GUID;
pub const CRM_PROTOCOL_ID = GUID;
pub const PCRM_PROTOCOL_ID = [*c]GUID;
pub const NOTIFICATION_MASK = ULONG;
pub const struct__TRANSACTION_NOTIFICATION = extern struct {
    TransactionKey: PVOID,
    TransactionNotification: ULONG,
    TmVirtualClock: LARGE_INTEGER,
    ArgumentLength: ULONG,
};
pub const TRANSACTION_NOTIFICATION = struct__TRANSACTION_NOTIFICATION;
pub const PTRANSACTION_NOTIFICATION = [*c]struct__TRANSACTION_NOTIFICATION;
pub const struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = extern struct {
    EnlistmentId: GUID,
    UOW: UOW,
};
pub const TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = [*c]struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
pub const struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = extern struct {
    TmIdentity: GUID,
    Flags: ULONG,
};
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = [*c]struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub const SAVEPOINT_ID = ULONG;
pub const PSAVEPOINT_ID = [*c]ULONG;
pub const struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = extern struct {
    SavepointId: SAVEPOINT_ID,
};
pub const TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = [*c]struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
pub const struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = extern struct {
    PropagationCookie: ULONG,
    UOW: GUID,
    TmIdentity: GUID,
    BufferLength: ULONG,
};
pub const TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = [*c]struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub const struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = extern struct {
    MarshalCookie: ULONG,
    UOW: GUID,
};
pub const TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = [*c]struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub const TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub const PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT = [*c]TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub const struct__KCRM_MARSHAL_HEADER = extern struct {
    VersionMajor: ULONG,
    VersionMinor: ULONG,
    NumProtocols: ULONG,
    Unused: ULONG,
};
pub const KCRM_MARSHAL_HEADER = struct__KCRM_MARSHAL_HEADER;
pub const PKCRM_MARSHAL_HEADER = [*c]struct__KCRM_MARSHAL_HEADER;
pub const PRKCRM_MARSHAL_HEADER = [*c]struct__KCRM_MARSHAL_HEADER;
pub const struct__KCRM_TRANSACTION_BLOB = extern struct {
    UOW: UOW,
    TmIdentity: GUID,
    IsolationLevel: ULONG,
    IsolationFlags: ULONG,
    Timeout: ULONG,
    Description: [64]WCHAR,
};
pub const KCRM_TRANSACTION_BLOB = struct__KCRM_TRANSACTION_BLOB;
pub const PKCRM_TRANSACTION_BLOB = [*c]struct__KCRM_TRANSACTION_BLOB;
pub const PRKCRM_TRANSACTION_BLOB = [*c]struct__KCRM_TRANSACTION_BLOB;
pub const struct__KCRM_PROTOCOL_BLOB = extern struct {
    ProtocolId: CRM_PROTOCOL_ID,
    StaticInfoLength: ULONG,
    TransactionIdInfoLength: ULONG,
    Unused1: ULONG,
    Unused2: ULONG,
};
pub const KCRM_PROTOCOL_BLOB = struct__KCRM_PROTOCOL_BLOB;
pub const PKCRM_PROTOCOL_BLOB = [*c]struct__KCRM_PROTOCOL_BLOB;
pub const PRKCRM_PROTOCOL_BLOB = [*c]struct__KCRM_PROTOCOL_BLOB;
pub const TransactionOutcomeUndetermined = enum__TRANSACTION_OUTCOME.TransactionOutcomeUndetermined;
pub const TransactionOutcomeCommitted = enum__TRANSACTION_OUTCOME.TransactionOutcomeCommitted;
pub const TransactionOutcomeAborted = enum__TRANSACTION_OUTCOME.TransactionOutcomeAborted;
pub const enum__TRANSACTION_OUTCOME = extern enum {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted = 2,
    TransactionOutcomeAborted = 3,
};
pub const TRANSACTION_OUTCOME = enum__TRANSACTION_OUTCOME;
pub const TransactionStateNormal = enum__TRANSACTION_STATE.TransactionStateNormal;
pub const TransactionStateIndoubt = enum__TRANSACTION_STATE.TransactionStateIndoubt;
pub const TransactionStateCommittedNotify = enum__TRANSACTION_STATE.TransactionStateCommittedNotify;
pub const enum__TRANSACTION_STATE = extern enum {
    TransactionStateNormal = 1,
    TransactionStateIndoubt = 2,
    TransactionStateCommittedNotify = 3,
};
pub const TRANSACTION_STATE = enum__TRANSACTION_STATE;
pub const struct__TRANSACTION_BASIC_INFORMATION = extern struct {
    TransactionId: GUID,
    State: DWORD,
    Outcome: DWORD,
};
pub const TRANSACTION_BASIC_INFORMATION = struct__TRANSACTION_BASIC_INFORMATION;
pub const PTRANSACTION_BASIC_INFORMATION = [*c]struct__TRANSACTION_BASIC_INFORMATION;
pub const struct__TRANSACTIONMANAGER_BASIC_INFORMATION = extern struct {
    TmIdentity: GUID,
    VirtualClock: LARGE_INTEGER,
};
pub const TRANSACTIONMANAGER_BASIC_INFORMATION = struct__TRANSACTIONMANAGER_BASIC_INFORMATION;
pub const PTRANSACTIONMANAGER_BASIC_INFORMATION = [*c]struct__TRANSACTIONMANAGER_BASIC_INFORMATION;
pub const struct__TRANSACTIONMANAGER_LOG_INFORMATION = extern struct {
    LogIdentity: GUID,
};
pub const TRANSACTIONMANAGER_LOG_INFORMATION = struct__TRANSACTIONMANAGER_LOG_INFORMATION;
pub const PTRANSACTIONMANAGER_LOG_INFORMATION = [*c]struct__TRANSACTIONMANAGER_LOG_INFORMATION;
pub const struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION = extern struct {
    LogPathLength: DWORD,
    LogPath: [1]WCHAR,
};
pub const TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION;
pub const PTRANSACTIONMANAGER_LOGPATH_INFORMATION = [*c]struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION;
pub const struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION = extern struct {
    LastRecoveredLsn: ULONGLONG,
};
pub const TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION;
pub const PTRANSACTIONMANAGER_RECOVERY_INFORMATION = [*c]struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION;
pub const struct__TRANSACTIONMANAGER_OLDEST_INFORMATION = extern struct {
    OldestTransactionGuid: GUID,
};
pub const TRANSACTIONMANAGER_OLDEST_INFORMATION = struct__TRANSACTIONMANAGER_OLDEST_INFORMATION;
pub const PTRANSACTIONMANAGER_OLDEST_INFORMATION = [*c]struct__TRANSACTIONMANAGER_OLDEST_INFORMATION;
pub const struct__TRANSACTION_PROPERTIES_INFORMATION = extern struct {
    IsolationLevel: DWORD,
    IsolationFlags: DWORD,
    Timeout: LARGE_INTEGER,
    Outcome: DWORD,
    DescriptionLength: DWORD,
    Description: [1]WCHAR,
};
pub const TRANSACTION_PROPERTIES_INFORMATION = struct__TRANSACTION_PROPERTIES_INFORMATION;
pub const PTRANSACTION_PROPERTIES_INFORMATION = [*c]struct__TRANSACTION_PROPERTIES_INFORMATION;
pub const struct__TRANSACTION_BIND_INFORMATION = extern struct {
    TmHandle: HANDLE,
};
pub const TRANSACTION_BIND_INFORMATION = struct__TRANSACTION_BIND_INFORMATION;
pub const PTRANSACTION_BIND_INFORMATION = [*c]struct__TRANSACTION_BIND_INFORMATION;
pub const struct__TRANSACTION_ENLISTMENT_PAIR = extern struct {
    EnlistmentId: GUID,
    ResourceManagerId: GUID,
};
pub const TRANSACTION_ENLISTMENT_PAIR = struct__TRANSACTION_ENLISTMENT_PAIR;
pub const PTRANSACTION_ENLISTMENT_PAIR = [*c]struct__TRANSACTION_ENLISTMENT_PAIR;
pub const struct__TRANSACTION_ENLISTMENTS_INFORMATION = extern struct {
    NumberOfEnlistments: DWORD,
    EnlistmentPair: [1]TRANSACTION_ENLISTMENT_PAIR,
};
pub const TRANSACTION_ENLISTMENTS_INFORMATION = struct__TRANSACTION_ENLISTMENTS_INFORMATION;
pub const PTRANSACTION_ENLISTMENTS_INFORMATION = [*c]struct__TRANSACTION_ENLISTMENTS_INFORMATION;
pub const struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = extern struct {
    SuperiorEnlistmentPair: TRANSACTION_ENLISTMENT_PAIR,
};
pub const TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
pub const PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = [*c]struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
pub const struct__RESOURCEMANAGER_BASIC_INFORMATION = extern struct {
    ResourceManagerId: GUID,
    DescriptionLength: DWORD,
    Description: [1]WCHAR,
};
pub const RESOURCEMANAGER_BASIC_INFORMATION = struct__RESOURCEMANAGER_BASIC_INFORMATION;
pub const PRESOURCEMANAGER_BASIC_INFORMATION = [*c]struct__RESOURCEMANAGER_BASIC_INFORMATION;
pub const struct__RESOURCEMANAGER_COMPLETION_INFORMATION = extern struct {
    IoCompletionPortHandle: HANDLE,
    CompletionKey: ULONG_PTR,
};
pub const RESOURCEMANAGER_COMPLETION_INFORMATION = struct__RESOURCEMANAGER_COMPLETION_INFORMATION;
pub const PRESOURCEMANAGER_COMPLETION_INFORMATION = [*c]struct__RESOURCEMANAGER_COMPLETION_INFORMATION;
pub const TransactionBasicInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionBasicInformation;
pub const TransactionPropertiesInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionPropertiesInformation;
pub const TransactionEnlistmentInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionEnlistmentInformation;
pub const TransactionSuperiorEnlistmentInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionSuperiorEnlistmentInformation;
pub const TransactionBindInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionBindInformation;
pub const TransactionDTCPrivateInformation = enum__TRANSACTION_INFORMATION_CLASS.TransactionDTCPrivateInformation;
pub const enum__TRANSACTION_INFORMATION_CLASS = extern enum {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation,
    TransactionBindInformation,
    TransactionDTCPrivateInformation,
};
pub const TRANSACTION_INFORMATION_CLASS = enum__TRANSACTION_INFORMATION_CLASS;
pub const TransactionManagerBasicInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerBasicInformation;
pub const TransactionManagerLogInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogInformation;
pub const TransactionManagerLogPathInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerLogPathInformation;
pub const TransactionManagerRecoveryInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerRecoveryInformation;
pub const TransactionManagerOnlineProbeInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOnlineProbeInformation;
pub const TransactionManagerOldestTransactionInformation = enum__TRANSACTIONMANAGER_INFORMATION_CLASS.TransactionManagerOldestTransactionInformation;
pub const enum__TRANSACTIONMANAGER_INFORMATION_CLASS = extern enum {
    TransactionManagerBasicInformation = 0,
    TransactionManagerLogInformation = 1,
    TransactionManagerLogPathInformation = 2,
    TransactionManagerRecoveryInformation = 4,
    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5,
};
pub const TRANSACTIONMANAGER_INFORMATION_CLASS = enum__TRANSACTIONMANAGER_INFORMATION_CLASS;
pub const ResourceManagerBasicInformation = enum__RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerBasicInformation;
pub const ResourceManagerCompletionInformation = enum__RESOURCEMANAGER_INFORMATION_CLASS.ResourceManagerCompletionInformation;
pub const enum__RESOURCEMANAGER_INFORMATION_CLASS = extern enum {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
};
pub const RESOURCEMANAGER_INFORMATION_CLASS = enum__RESOURCEMANAGER_INFORMATION_CLASS;
pub const struct__ENLISTMENT_BASIC_INFORMATION = extern struct {
    EnlistmentId: GUID,
    TransactionId: GUID,
    ResourceManagerId: GUID,
};
pub const ENLISTMENT_BASIC_INFORMATION = struct__ENLISTMENT_BASIC_INFORMATION;
pub const PENLISTMENT_BASIC_INFORMATION = [*c]struct__ENLISTMENT_BASIC_INFORMATION;
pub const struct__ENLISTMENT_CRM_INFORMATION = extern struct {
    CrmTransactionManagerId: GUID,
    CrmResourceManagerId: GUID,
    CrmEnlistmentId: GUID,
};
pub const ENLISTMENT_CRM_INFORMATION = struct__ENLISTMENT_CRM_INFORMATION;
pub const PENLISTMENT_CRM_INFORMATION = [*c]struct__ENLISTMENT_CRM_INFORMATION;
pub const EnlistmentBasicInformation = enum__ENLISTMENT_INFORMATION_CLASS.EnlistmentBasicInformation;
pub const EnlistmentRecoveryInformation = enum__ENLISTMENT_INFORMATION_CLASS.EnlistmentRecoveryInformation;
pub const EnlistmentCrmInformation = enum__ENLISTMENT_INFORMATION_CLASS.EnlistmentCrmInformation;
pub const enum__ENLISTMENT_INFORMATION_CLASS = extern enum {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation,
};
pub const ENLISTMENT_INFORMATION_CLASS = enum__ENLISTMENT_INFORMATION_CLASS;
pub const struct__TRANSACTION_LIST_ENTRY = extern struct {
    UOW: UOW,
};
pub const TRANSACTION_LIST_ENTRY = struct__TRANSACTION_LIST_ENTRY;
pub const PTRANSACTION_LIST_ENTRY = [*c]struct__TRANSACTION_LIST_ENTRY;
pub const struct__TRANSACTION_LIST_INFORMATION = extern struct {
    NumberOfTransactions: DWORD,
    TransactionInformation: [1]TRANSACTION_LIST_ENTRY,
};
pub const TRANSACTION_LIST_INFORMATION = struct__TRANSACTION_LIST_INFORMATION;
pub const PTRANSACTION_LIST_INFORMATION = [*c]struct__TRANSACTION_LIST_INFORMATION;
pub const KTMOBJECT_TRANSACTION = enum__KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION;
pub const KTMOBJECT_TRANSACTION_MANAGER = enum__KTMOBJECT_TYPE.KTMOBJECT_TRANSACTION_MANAGER;
pub const KTMOBJECT_RESOURCE_MANAGER = enum__KTMOBJECT_TYPE.KTMOBJECT_RESOURCE_MANAGER;
pub const KTMOBJECT_ENLISTMENT = enum__KTMOBJECT_TYPE.KTMOBJECT_ENLISTMENT;
pub const KTMOBJECT_INVALID = enum__KTMOBJECT_TYPE.KTMOBJECT_INVALID;
pub const enum__KTMOBJECT_TYPE = extern enum {
    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID,
};
pub const KTMOBJECT_TYPE = enum__KTMOBJECT_TYPE;
pub const PKTMOBJECT_TYPE = [*c]enum__KTMOBJECT_TYPE;
pub const struct__KTMOBJECT_CURSOR = extern struct {
    LastQuery: GUID,
    ObjectIdCount: DWORD,
    ObjectIds: [1]GUID,
};
pub const KTMOBJECT_CURSOR = struct__KTMOBJECT_CURSOR;
pub const PKTMOBJECT_CURSOR = [*c]struct__KTMOBJECT_CURSOR;
pub const TP_VERSION = DWORD;
pub const PTP_VERSION = [*c]DWORD;
pub const struct__TP_CALLBACK_INSTANCE = opaque {};
pub const TP_CALLBACK_INSTANCE = struct__TP_CALLBACK_INSTANCE;
pub const PTP_CALLBACK_INSTANCE = ?*struct__TP_CALLBACK_INSTANCE;
pub const PTP_SIMPLE_CALLBACK = ?fn (PTP_CALLBACK_INSTANCE, PVOID) callconv(std.os.windows.WINAPI) void;
pub const struct__TP_POOL = opaque {};
pub const TP_POOL = struct__TP_POOL;
pub const PTP_POOL = ?*struct__TP_POOL;
pub const TP_CALLBACK_PRIORITY_HIGH = enum__TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_HIGH;
pub const TP_CALLBACK_PRIORITY_NORMAL = enum__TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_NORMAL;
pub const TP_CALLBACK_PRIORITY_LOW = enum__TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_LOW;
pub const TP_CALLBACK_PRIORITY_INVALID = enum__TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_INVALID;
pub const TP_CALLBACK_PRIORITY_COUNT = enum__TP_CALLBACK_PRIORITY.TP_CALLBACK_PRIORITY_COUNT;
pub const enum__TP_CALLBACK_PRIORITY = extern enum {
    TP_CALLBACK_PRIORITY_HIGH = 0,
    TP_CALLBACK_PRIORITY_NORMAL = 1,
    TP_CALLBACK_PRIORITY_LOW = 2,
    TP_CALLBACK_PRIORITY_INVALID = 3,
    TP_CALLBACK_PRIORITY_COUNT = 3,
};
pub const TP_CALLBACK_PRIORITY = enum__TP_CALLBACK_PRIORITY;
pub const struct__TP_POOL_STACK_INFORMATION = extern struct {
    StackReserve: SIZE_T,
    StackCommit: SIZE_T,
};
pub const TP_POOL_STACK_INFORMATION = struct__TP_POOL_STACK_INFORMATION;
pub const PTP_POOL_STACK_INFORMATION = [*c]struct__TP_POOL_STACK_INFORMATION;
pub const struct__TP_CLEANUP_GROUP = opaque {};
pub const TP_CLEANUP_GROUP = struct__TP_CLEANUP_GROUP;
pub const PTP_CLEANUP_GROUP = ?*struct__TP_CLEANUP_GROUP;
pub const PTP_CLEANUP_GROUP_CANCEL_CALLBACK = ?fn (PVOID, PVOID) callconv(std.os.windows.WINAPI) void;
pub const struct__ACTIVATION_CONTEXT = opaque {};
pub const struct__TP_CALLBACK_ENVIRON_V3 = extern struct {
    Version: TP_VERSION,
    Pool: PTP_POOL,
    CleanupGroup: PTP_CLEANUP_GROUP,
    CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK,
    RaceDll: PVOID,
    ActivationContext: ?*struct__ACTIVATION_CONTEXT,
    FinalizationCallback: PTP_SIMPLE_CALLBACK,
    u: extern union {
        Flags: DWORD,
        s: opaque {},
    },
    CallbackPriority: TP_CALLBACK_PRIORITY,
    Size: DWORD,
};
pub const TP_CALLBACK_ENVIRON_V3 = struct__TP_CALLBACK_ENVIRON_V3;
pub const TP_CALLBACK_ENVIRON = TP_CALLBACK_ENVIRON_V3;
pub const PTP_CALLBACK_ENVIRON = [*c]TP_CALLBACK_ENVIRON_V3;
pub fn TpInitializeCallbackEnviron(CallbackEnviron: PTP_CALLBACK_ENVIRON) void {
    CallbackEnviron.?.Version = @as(TP_VERSION, 3);
    CallbackEnviron.?.Pool = null;
    CallbackEnviron.?.CleanupGroup = null;
    CallbackEnviron.?.CleanupGroupCancelCallback = null;
    CallbackEnviron.?.RaceDll = (?*c_void)(0);
    CallbackEnviron.?.ActivationContext = null;
    CallbackEnviron.?.FinalizationCallback = null;
    CallbackEnviron.?.u.Flags = @as(DWORD, 0);
    CallbackEnviron.?.CallbackPriority = @as(TP_CALLBACK_PRIORITY, TP_CALLBACK_PRIORITY_NORMAL);
    CallbackEnviron.?.Size = @as(DWORD, @sizeOf(TP_CALLBACK_ENVIRON));
}
pub fn TpSetCallbackThreadpool(CallbackEnviron: PTP_CALLBACK_ENVIRON, Pool: PTP_POOL) void {
    CallbackEnviron.?.Pool = Pool;
}
pub fn TpSetCallbackCleanupGroup(CallbackEnviron: PTP_CALLBACK_ENVIRON, CleanupGroup: PTP_CLEANUP_GROUP, CleanupGroupCancelCallback: PTP_CLEANUP_GROUP_CANCEL_CALLBACK) void {
    CallbackEnviron.?.CleanupGroup = CleanupGroup;
    CallbackEnviron.?.CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}
pub fn TpSetCallbackActivationContext(CallbackEnviron: PTP_CALLBACK_ENVIRON, ActivationContext: ?*struct__ACTIVATION_CONTEXT) void {
    CallbackEnviron.?.ActivationContext = ActivationContext;
}
pub fn TpSetCallbackNoActivationContext(CallbackEnviron: PTP_CALLBACK_ENVIRON) void {
    CallbackEnviron.?.ActivationContext = (?*struct__ACTIVATION_CONTEXT)(@as(LONG_PTR, -1));
}
pub fn TpSetCallbackLongFunction(CallbackEnviron: PTP_CALLBACK_ENVIRON) void {
    CallbackEnviron.?.u.s.LongFunction = @as(DWORD, 1);
}
pub fn TpSetCallbackRaceWithDll(CallbackEnviron: PTP_CALLBACK_ENVIRON, DllHandle: PVOID) void {
    CallbackEnviron.?.RaceDll = DllHandle;
}
pub fn TpSetCallbackFinalizationCallback(CallbackEnviron: PTP_CALLBACK_ENVIRON, FinalizationCallback: PTP_SIMPLE_CALLBACK) void {
    CallbackEnviron.?.FinalizationCallback = FinalizationCallback;
}
pub fn TpSetCallbackPriority(CallbackEnviron: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY) void {
    CallbackEnviron.?.CallbackPriority = Priority;
}
pub fn TpSetCallbackPersistent(CallbackEnviron: PTP_CALLBACK_ENVIRON) void {
    CallbackEnviron.?.u.s.Persistent = @as(DWORD, 1);
}
pub fn TpDestroyCallbackEnviron(CallbackEnviron: PTP_CALLBACK_ENVIRON) void {
    CallbackEnviron;
}
pub const struct__TP_WORK = opaque {};
pub const TP_WORK = struct__TP_WORK;
pub const PTP_WORK = ?*struct__TP_WORK;
pub const PTP_WORK_CALLBACK = ?fn (PTP_CALLBACK_INSTANCE, PVOID, PTP_WORK) callconv(std.os.windows.WINAPI) void;
pub const struct__TP_TIMER = opaque {};
pub const TP_TIMER = struct__TP_TIMER;
pub const PTP_TIMER = ?*struct__TP_TIMER;
pub const PTP_TIMER_CALLBACK = ?fn (PTP_CALLBACK_INSTANCE, PVOID, PTP_TIMER) callconv(std.os.windows.WINAPI) void;
pub const TP_WAIT_RESULT = DWORD;
pub const struct__TP_WAIT = opaque {};
pub const TP_WAIT = struct__TP_WAIT;
pub const PTP_WAIT = ?*struct__TP_WAIT;
pub const PTP_WAIT_CALLBACK = ?fn (PTP_CALLBACK_INSTANCE, PVOID, PTP_WAIT, TP_WAIT_RESULT) callconv(std.os.windows.WINAPI) void;
pub const struct__TP_IO = opaque {};
pub const TP_IO = struct__TP_IO;
pub const PTP_IO = ?*struct__TP_IO;
pub const struct__TEB = opaque {};
pub fn GetFiberData() PVOID {
    return @ptrCast([*c]PVOID, @alignCast(@alignOf(PVOID), GetCurrentFiber())).?.*;
}
pub const WPARAM = UINT_PTR;
pub const LPARAM = LONG_PTR;
pub const LRESULT = LONG_PTR;
pub const SPHANDLE = [*c]HANDLE;
pub const LPHANDLE = [*c]HANDLE;
pub const HGLOBAL = HANDLE;
pub const HLOCAL = HANDLE;
pub const GLOBALHANDLE = HANDLE;
pub const LOCALHANDLE = HANDLE;
pub const FARPROC = [*c]fn () callconv(std.os.windows.WINAPI) INT_PTR;
pub const NEARPROC = [*c]fn () callconv(std.os.windows.WINAPI) INT_PTR;
pub const PROC = [*c]fn () callconv(std.os.windows.WINAPI) INT_PTR;
pub const ATOM = WORD;
pub const struct_HKEY__ = extern struct {
    unused: c_int,
};
pub const HKEY = [*c]struct_HKEY__;
pub const PHKEY = [*c]HKEY;
pub const struct_HMETAFILE__ = extern struct {
    unused: c_int,
};
pub const HMETAFILE = [*c]struct_HMETAFILE__;
pub const struct_HINSTANCE__ = extern struct {
    unused: c_int,
};
pub const HINSTANCE = [*c]struct_HINSTANCE__;
pub const HMODULE = HINSTANCE;
pub const struct_HRGN__ = extern struct {
    unused: c_int,
};
pub const HRGN = [*c]struct_HRGN__;
pub const struct_HRSRC__ = extern struct {
    unused: c_int,
};
pub const HRSRC = [*c]struct_HRSRC__;
pub const struct_HSPRITE__ = extern struct {
    unused: c_int,
};
pub const HSPRITE = [*c]struct_HSPRITE__;
pub const struct_HLSURF__ = extern struct {
    unused: c_int,
};
pub const HLSURF = [*c]struct_HLSURF__;
pub const struct_HSTR__ = extern struct {
    unused: c_int,
};
pub const HSTR = [*c]struct_HSTR__;
pub const struct_HTASK__ = extern struct {
    unused: c_int,
};
pub const HTASK = [*c]struct_HTASK__;
pub const struct_HWINSTA__ = extern struct {
    unused: c_int,
};
pub const HWINSTA = [*c]struct_HWINSTA__;
pub const struct_HKL__ = extern struct {
    unused: c_int,
};
pub const HKL = [*c]struct_HKL__;
pub const HFILE = c_int;
pub const struct__FILETIME = extern struct {
    dwLowDateTime: DWORD,
    dwHighDateTime: DWORD,
};
pub const FILETIME = struct__FILETIME;
pub const PFILETIME = [*c]struct__FILETIME;
pub const LPFILETIME = [*c]struct__FILETIME;
pub const struct_HWND__ = extern struct {
    unused: c_int,
};
pub const HWND = [*c]struct_HWND__;
pub const struct_HHOOK__ = extern struct {
    unused: c_int,
};
pub const HHOOK = [*c]struct_HHOOK__;
pub const HGDIOBJ = ?*c_void;
pub const struct_HACCEL__ = extern struct {
    unused: c_int,
};
pub const HACCEL = [*c]struct_HACCEL__;
pub const struct_HBITMAP__ = extern struct {
    unused: c_int,
};
pub const HBITMAP = [*c]struct_HBITMAP__;
pub const struct_HBRUSH__ = extern struct {
    unused: c_int,
};
pub const HBRUSH = [*c]struct_HBRUSH__;
pub const struct_HCOLORSPACE__ = extern struct {
    unused: c_int,
};
pub const HCOLORSPACE = [*c]struct_HCOLORSPACE__;
pub const struct_HDC__ = extern struct {
    unused: c_int,
};
pub const HDC = [*c]struct_HDC__;
pub const struct_HGLRC__ = extern struct {
    unused: c_int,
};
pub const HGLRC = [*c]struct_HGLRC__;
pub const struct_HDESK__ = extern struct {
    unused: c_int,
};
pub const HDESK = [*c]struct_HDESK__;
pub const struct_HENHMETAFILE__ = extern struct {
    unused: c_int,
};
pub const HENHMETAFILE = [*c]struct_HENHMETAFILE__;
pub const struct_HFONT__ = extern struct {
    unused: c_int,
};
pub const HFONT = [*c]struct_HFONT__;
pub const struct_HICON__ = extern struct {
    unused: c_int,
};
pub const HICON = [*c]struct_HICON__;
pub const struct_HMENU__ = extern struct {
    unused: c_int,
};
pub const HMENU = [*c]struct_HMENU__;
pub const struct_HPALETTE__ = extern struct {
    unused: c_int,
};
pub const HPALETTE = [*c]struct_HPALETTE__;
pub const struct_HPEN__ = extern struct {
    unused: c_int,
};
pub const HPEN = [*c]struct_HPEN__;
pub const struct_HWINEVENTHOOK__ = extern struct {
    unused: c_int,
};
pub const HWINEVENTHOOK = [*c]struct_HWINEVENTHOOK__;
pub const struct_HMONITOR__ = extern struct {
    unused: c_int,
};
pub const HMONITOR = [*c]struct_HMONITOR__;
pub const struct_HUMPD__ = extern struct {
    unused: c_int,
};
pub const HUMPD = [*c]struct_HUMPD__;
pub const HCURSOR = HICON;
pub const COLORREF = DWORD;
pub const LPCOLORREF = [*c]DWORD;
pub const struct_tagRECT = extern struct {
    left: LONG,
    top: LONG,
    right: LONG,
    bottom: LONG,
};
pub const RECT = struct_tagRECT;
pub const PRECT = [*c]struct_tagRECT;
pub const NPRECT = [*c]struct_tagRECT;
pub const LPRECT = [*c]struct_tagRECT;
pub const LPCRECT = [*c]const RECT;
pub const struct__RECTL = extern struct {
    left: LONG,
    top: LONG,
    right: LONG,
    bottom: LONG,
};
pub const RECTL = struct__RECTL;
pub const PRECTL = [*c]struct__RECTL;
pub const LPRECTL = [*c]struct__RECTL;
pub const LPCRECTL = [*c]const RECTL;
pub const struct_tagPOINT = extern struct {
    x: LONG,
    y: LONG,
};
pub const POINT = struct_tagPOINT;
pub const PPOINT = [*c]struct_tagPOINT;
pub const NPPOINT = [*c]struct_tagPOINT;
pub const LPPOINT = [*c]struct_tagPOINT;
pub const struct__POINTL = extern struct {
    x: LONG,
    y: LONG,
};
pub const POINTL = struct__POINTL;
pub const PPOINTL = [*c]struct__POINTL;
pub const struct_tagSIZE = extern struct {
    cx: LONG,
    cy: LONG,
};
pub const SIZE = struct_tagSIZE;
pub const PSIZE = [*c]struct_tagSIZE;
pub const LPSIZE = [*c]struct_tagSIZE;
pub const SIZEL = SIZE;
pub const PSIZEL = [*c]SIZE;
pub const LPSIZEL = [*c]SIZE;
pub const struct_tagPOINTS = extern struct {
    x: SHORT,
    y: SHORT,
};
pub const POINTS = struct_tagPOINTS;
pub const PPOINTS = [*c]struct_tagPOINTS;
pub const LPPOINTS = [*c]struct_tagPOINTS;
pub const struct_DPI_AWARENESS_CONTEXT__ = extern struct {
    unused: c_int,
};
pub const DPI_AWARENESS_CONTEXT = [*c]struct_DPI_AWARENESS_CONTEXT__;
pub const DPI_AWARENESS_INVALID = enum_DPI_AWARENESS._INVALID;
pub const DPI_AWARENESS_UNAWARE = enum_DPI_AWARENESS._UNAWARE;
pub const DPI_AWARENESS_SYSTEM_AWARE = enum_DPI_AWARENESS._SYSTEM_AWARE;
pub const DPI_AWARENESS_PER_MONITOR_AWARE = enum_DPI_AWARENESS._PER_MONITOR_AWARE;
pub const enum_DPI_AWARENESS = extern enum {
    _INVALID = -1,
    _UNAWARE = 0,
    _SYSTEM_AWARE = 1,
    _PER_MONITOR_AWARE = 2,
};
pub const DPI_AWARENESS = enum_DPI_AWARENESS;
pub const DPI_HOSTING_BEHAVIOR_INVALID = enum_DPI_HOSTING_BEHAVIOR._INVALID;
pub const DPI_HOSTING_BEHAVIOR_DEFAULT = enum_DPI_HOSTING_BEHAVIOR._DEFAULT;
pub const DPI_HOSTING_BEHAVIOR_MIXED = enum_DPI_HOSTING_BEHAVIOR._MIXED;
pub const enum_DPI_HOSTING_BEHAVIOR = extern enum {
    _INVALID = -1,
    _DEFAULT = 0,
    _MIXED = 1,
};
pub const DPI_HOSTING_BEHAVIOR = enum_DPI_HOSTING_BEHAVIOR;
pub const struct__SECURITY_ATTRIBUTES = extern struct {
    nLength: DWORD,
    lpSecurityDescriptor: LPVOID,
    bInheritHandle: BOOL,
};
pub const SECURITY_ATTRIBUTES = struct__SECURITY_ATTRIBUTES;
pub const PSECURITY_ATTRIBUTES = [*c]struct__SECURITY_ATTRIBUTES;
pub const LPSECURITY_ATTRIBUTES = [*c]struct__SECURITY_ATTRIBUTES;
pub const struct__OVERLAPPED = extern struct {
    Internal: ULONG_PTR,
    InternalHigh: ULONG_PTR,
    @"": extern union {
        @"": extern struct {
            Offset: DWORD,
            OffsetHigh: DWORD,
        },
        Pointer: PVOID,
    },
    hEvent: HANDLE,
};
pub const OVERLAPPED = struct__OVERLAPPED;
pub const LPOVERLAPPED = [*c]struct__OVERLAPPED;
pub const struct__OVERLAPPED_ENTRY = extern struct {
    lpCompletionKey: ULONG_PTR,
    lpOverlapped: LPOVERLAPPED,
    Internal: ULONG_PTR,
    dwNumberOfBytesTransferred: DWORD,
};
pub const OVERLAPPED_ENTRY = struct__OVERLAPPED_ENTRY;
pub const LPOVERLAPPED_ENTRY = [*c]struct__OVERLAPPED_ENTRY;
pub const struct__SYSTEMTIME = extern struct {
    wYear: WORD,
    wMonth: WORD,
    wDayOfWeek: WORD,
    wDay: WORD,
    wHour: WORD,
    wMinute: WORD,
    wSecond: WORD,
    wMilliseconds: WORD,
};
pub const SYSTEMTIME = struct__SYSTEMTIME;
pub const PSYSTEMTIME = [*c]struct__SYSTEMTIME;
pub const LPSYSTEMTIME = [*c]struct__SYSTEMTIME;
pub const struct__WIN32_FIND_DATAA = extern struct {
    dwFileAttributes: DWORD,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    nFileSizeHigh: DWORD,
    nFileSizeLow: DWORD,
    dwReserved0: DWORD,
    dwReserved1: DWORD,
    cFileName: [260]CHAR,
    cAlternateFileName: [14]CHAR,
};
pub const WIN32_FIND_DATAA = struct__WIN32_FIND_DATAA;
pub const PWIN32_FIND_DATAA = [*c]struct__WIN32_FIND_DATAA;
pub const LPWIN32_FIND_DATAA = [*c]struct__WIN32_FIND_DATAA;
pub const struct__WIN32_FIND_DATAW = extern struct {
    dwFileAttributes: DWORD,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    nFileSizeHigh: DWORD,
    nFileSizeLow: DWORD,
    dwReserved0: DWORD,
    dwReserved1: DWORD,
    cFileName: [260]WCHAR,
    cAlternateFileName: [14]WCHAR,
};
pub const WIN32_FIND_DATAW = struct__WIN32_FIND_DATAW;
pub const PWIN32_FIND_DATAW = [*c]struct__WIN32_FIND_DATAW;
pub const LPWIN32_FIND_DATAW = [*c]struct__WIN32_FIND_DATAW;
pub const WIN32_FIND_DATA = WIN32_FIND_DATAA;
pub const PWIN32_FIND_DATA = PWIN32_FIND_DATAA;
pub const LPWIN32_FIND_DATA = LPWIN32_FIND_DATAA;
pub const FindExInfoStandard = enum__FINDEX_INFO_LEVELS.FindExInfoStandard;
pub const FindExInfoBasic = enum__FINDEX_INFO_LEVELS.FindExInfoBasic;
pub const FindExInfoMaxInfoLevel = enum__FINDEX_INFO_LEVELS.FindExInfoMaxInfoLevel;
pub const enum__FINDEX_INFO_LEVELS = extern enum {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel,
};
pub const FINDEX_INFO_LEVELS = enum__FINDEX_INFO_LEVELS;
pub const FindExSearchNameMatch = enum__FINDEX_SEARCH_OPS.FindExSearchNameMatch;
pub const FindExSearchLimitToDirectories = enum__FINDEX_SEARCH_OPS.FindExSearchLimitToDirectories;
pub const FindExSearchLimitToDevices = enum__FINDEX_SEARCH_OPS.FindExSearchLimitToDevices;
pub const FindExSearchMaxSearchOp = enum__FINDEX_SEARCH_OPS.FindExSearchMaxSearchOp;
pub const enum__FINDEX_SEARCH_OPS = extern enum {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp,
};
pub const FINDEX_SEARCH_OPS = enum__FINDEX_SEARCH_OPS;
pub const ReadDirectoryNotifyInformation = enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyInformation;
pub const ReadDirectoryNotifyExtendedInformation = enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS.ReadDirectoryNotifyExtendedInformation;
pub const enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = extern enum {
    ReadDirectoryNotifyInformation = 1,
    ReadDirectoryNotifyExtendedInformation = 2,
};
pub const READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
pub const PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS = [*c]enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
pub const GetFileExInfoStandard = enum__GET_FILEEX_INFO_LEVELS.GetFileExInfoStandard;
pub const GetFileExMaxInfoLevel = enum__GET_FILEEX_INFO_LEVELS.GetFileExMaxInfoLevel;
pub const enum__GET_FILEEX_INFO_LEVELS = extern enum {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel,
};
pub const GET_FILEEX_INFO_LEVELS = enum__GET_FILEEX_INFO_LEVELS;
pub const FileBasicInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileBasicInfo;
pub const FileStandardInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileStandardInfo;
pub const FileNameInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileNameInfo;
pub const FileRenameInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileRenameInfo;
pub const FileDispositionInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfo;
pub const FileAllocationInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileAllocationInfo;
pub const FileEndOfFileInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileEndOfFileInfo;
pub const FileStreamInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileStreamInfo;
pub const FileCompressionInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileCompressionInfo;
pub const FileAttributeTagInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileAttributeTagInfo;
pub const FileIdBothDirectoryInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryInfo;
pub const FileIdBothDirectoryRestartInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIdBothDirectoryRestartInfo;
pub const FileIoPriorityHintInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIoPriorityHintInfo;
pub const FileRemoteProtocolInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileRemoteProtocolInfo;
pub const FileFullDirectoryInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryInfo;
pub const FileFullDirectoryRestartInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileFullDirectoryRestartInfo;
pub const FileStorageInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileStorageInfo;
pub const FileAlignmentInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileAlignmentInfo;
pub const FileIdInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIdInfo;
pub const FileIdExtdDirectoryInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryInfo;
pub const FileIdExtdDirectoryRestartInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileIdExtdDirectoryRestartInfo;
pub const FileDispositionInfoEx = enum__FILE_INFO_BY_HANDLE_CLASS.FileDispositionInfoEx;
pub const FileRenameInfoEx = enum__FILE_INFO_BY_HANDLE_CLASS.FileRenameInfoEx;
pub const FileCaseSensitiveInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileCaseSensitiveInfo;
pub const FileNormalizedNameInfo = enum__FILE_INFO_BY_HANDLE_CLASS.FileNormalizedNameInfo;
pub const MaximumFileInfoByHandleClass = enum__FILE_INFO_BY_HANDLE_CLASS.MaximumFileInfoByHandleClass;
pub const enum__FILE_INFO_BY_HANDLE_CLASS = extern enum {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,
    FileStorageInfo,
    FileAlignmentInfo,
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
    FileDispositionInfoEx,
    FileRenameInfoEx,
    FileCaseSensitiveInfo,
    FileNormalizedNameInfo,
    MaximumFileInfoByHandleClass,
};
pub const FILE_INFO_BY_HANDLE_CLASS = enum__FILE_INFO_BY_HANDLE_CLASS;
pub const PFILE_INFO_BY_HANDLE_CLASS = [*c]enum__FILE_INFO_BY_HANDLE_CLASS;
pub const CRITICAL_SECTION = RTL_CRITICAL_SECTION;
pub const PCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
pub const LPCRITICAL_SECTION = PRTL_CRITICAL_SECTION;
pub const CRITICAL_SECTION_DEBUG = RTL_CRITICAL_SECTION_DEBUG;
pub const PCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;
pub const LPCRITICAL_SECTION_DEBUG = PRTL_CRITICAL_SECTION_DEBUG;
pub const LPOVERLAPPED_COMPLETION_ROUTINE = ?fn (DWORD, DWORD, LPOVERLAPPED) callconv(std.os.windows.WINAPI) void;
pub const struct__PROCESS_HEAP_ENTRY = extern struct {
    lpData: PVOID,
    cbData: DWORD,
    cbOverhead: BYTE,
    iRegionIndex: BYTE,
    wFlags: WORD,
    @"": extern union {
        Block: extern struct {
            hMem: HANDLE,
            dwReserved: [3]DWORD,
        },
        Region: extern struct {
            dwCommittedSize: DWORD,
            dwUnCommittedSize: DWORD,
            lpFirstBlock: LPVOID,
            lpLastBlock: LPVOID,
        },
    },
};
pub const PROCESS_HEAP_ENTRY = struct__PROCESS_HEAP_ENTRY;
pub const LPPROCESS_HEAP_ENTRY = [*c]struct__PROCESS_HEAP_ENTRY;
pub const PPROCESS_HEAP_ENTRY = [*c]struct__PROCESS_HEAP_ENTRY;
pub const struct__REASON_CONTEXT = extern struct {
    Version: ULONG,
    Flags: DWORD,
    Reason: extern union {
        Detailed: extern struct {
            LocalizedReasonModule: HMODULE,
            LocalizedReasonId: ULONG,
            ReasonStringCount: ULONG,
            ReasonStrings: [*c]LPWSTR,
        },
        SimpleReasonString: LPWSTR,
    },
};
pub const REASON_CONTEXT = struct__REASON_CONTEXT;
pub const PREASON_CONTEXT = [*c]struct__REASON_CONTEXT;
pub const PTHREAD_START_ROUTINE = ?fn (LPVOID) callconv(std.os.windows.WINAPI) DWORD;
pub const LPTHREAD_START_ROUTINE = PTHREAD_START_ROUTINE;
pub const PENCLAVE_ROUTINE = ?fn (LPVOID) callconv(std.os.windows.WINAPI) LPVOID;
pub const LPENCLAVE_ROUTINE = PENCLAVE_ROUTINE;
pub const struct__EXCEPTION_DEBUG_INFO = extern struct {
    ExceptionRecord: EXCEPTION_RECORD,
    dwFirstChance: DWORD,
};
pub const EXCEPTION_DEBUG_INFO = struct__EXCEPTION_DEBUG_INFO;
pub const LPEXCEPTION_DEBUG_INFO = [*c]struct__EXCEPTION_DEBUG_INFO;
pub const struct__CREATE_THREAD_DEBUG_INFO = extern struct {
    hThread: HANDLE,
    lpThreadLocalBase: LPVOID,
    lpStartAddress: LPTHREAD_START_ROUTINE,
};
pub const CREATE_THREAD_DEBUG_INFO = struct__CREATE_THREAD_DEBUG_INFO;
pub const LPCREATE_THREAD_DEBUG_INFO = [*c]struct__CREATE_THREAD_DEBUG_INFO;
pub const struct__CREATE_PROCESS_DEBUG_INFO = extern struct {
    hFile: HANDLE,
    hProcess: HANDLE,
    hThread: HANDLE,
    lpBaseOfImage: LPVOID,
    dwDebugInfoFileOffset: DWORD,
    nDebugInfoSize: DWORD,
    lpThreadLocalBase: LPVOID,
    lpStartAddress: LPTHREAD_START_ROUTINE,
    lpImageName: LPVOID,
    fUnicode: WORD,
};
pub const CREATE_PROCESS_DEBUG_INFO = struct__CREATE_PROCESS_DEBUG_INFO;
pub const LPCREATE_PROCESS_DEBUG_INFO = [*c]struct__CREATE_PROCESS_DEBUG_INFO;
pub const struct__EXIT_THREAD_DEBUG_INFO = extern struct {
    dwExitCode: DWORD,
};
pub const EXIT_THREAD_DEBUG_INFO = struct__EXIT_THREAD_DEBUG_INFO;
pub const LPEXIT_THREAD_DEBUG_INFO = [*c]struct__EXIT_THREAD_DEBUG_INFO;
pub const struct__EXIT_PROCESS_DEBUG_INFO = extern struct {
    dwExitCode: DWORD,
};
pub const EXIT_PROCESS_DEBUG_INFO = struct__EXIT_PROCESS_DEBUG_INFO;
pub const LPEXIT_PROCESS_DEBUG_INFO = [*c]struct__EXIT_PROCESS_DEBUG_INFO;
pub const struct__LOAD_DLL_DEBUG_INFO = extern struct {
    hFile: HANDLE,
    lpBaseOfDll: LPVOID,
    dwDebugInfoFileOffset: DWORD,
    nDebugInfoSize: DWORD,
    lpImageName: LPVOID,
    fUnicode: WORD,
};
pub const LOAD_DLL_DEBUG_INFO = struct__LOAD_DLL_DEBUG_INFO;
pub const LPLOAD_DLL_DEBUG_INFO = [*c]struct__LOAD_DLL_DEBUG_INFO;
pub const struct__UNLOAD_DLL_DEBUG_INFO = extern struct {
    lpBaseOfDll: LPVOID,
};
pub const UNLOAD_DLL_DEBUG_INFO = struct__UNLOAD_DLL_DEBUG_INFO;
pub const LPUNLOAD_DLL_DEBUG_INFO = [*c]struct__UNLOAD_DLL_DEBUG_INFO;
pub const struct__OUTPUT_DEBUG_STRING_INFO = extern struct {
    lpDebugStringData: LPSTR,
    fUnicode: WORD,
    nDebugStringLength: WORD,
};
pub const OUTPUT_DEBUG_STRING_INFO = struct__OUTPUT_DEBUG_STRING_INFO;
pub const LPOUTPUT_DEBUG_STRING_INFO = [*c]struct__OUTPUT_DEBUG_STRING_INFO;
pub const struct__RIP_INFO = extern struct {
    dwError: DWORD,
    dwType: DWORD,
};
pub const RIP_INFO = struct__RIP_INFO;
pub const LPRIP_INFO = [*c]struct__RIP_INFO;
pub const struct__DEBUG_EVENT = extern struct {
    dwDebugEventCode: DWORD,
    dwProcessId: DWORD,
    dwThreadId: DWORD,
    u: extern union {
        Exception: EXCEPTION_DEBUG_INFO,
        CreateThread: CREATE_THREAD_DEBUG_INFO,
        CreateProcessInfo: CREATE_PROCESS_DEBUG_INFO,
        ExitThread: EXIT_THREAD_DEBUG_INFO,
        ExitProcess: EXIT_PROCESS_DEBUG_INFO,
        LoadDll: LOAD_DLL_DEBUG_INFO,
        UnloadDll: UNLOAD_DLL_DEBUG_INFO,
        DebugString: OUTPUT_DEBUG_STRING_INFO,
        RipInfo: RIP_INFO,
    },
};
pub const DEBUG_EVENT = struct__DEBUG_EVENT;
pub const LPDEBUG_EVENT = [*c]struct__DEBUG_EVENT;
pub const LPCONTEXT = PCONTEXT;
extern fn IsApiSetImplemented(Contract: PCSTR) BOOL;
extern fn SetEnvironmentStringsW(NewEnvironment: LPWCH) BOOL;
extern fn GetStdHandle(nStdHandle: DWORD) HANDLE;
extern fn SetStdHandle(nStdHandle: DWORD, hHandle: HANDLE) BOOL;
extern fn SetStdHandleEx(nStdHandle: DWORD, hHandle: HANDLE, phPrevValue: PHANDLE) BOOL;
extern fn GetCommandLineA() LPSTR;
extern fn GetCommandLineW() LPWSTR;
extern fn GetEnvironmentStrings() LPCH;
extern fn GetEnvironmentStringsW() LPWCH;
extern fn FreeEnvironmentStringsA(penv: LPCH) BOOL;
extern fn FreeEnvironmentStringsW(penv: LPWCH) BOOL;
extern fn GetEnvironmentVariableA(lpName: LPCSTR, lpBuffer: LPSTR, nSize: DWORD) DWORD;
extern fn GetEnvironmentVariableW(lpName: LPCWSTR, lpBuffer: LPWSTR, nSize: DWORD) DWORD;
extern fn SetEnvironmentVariableA(lpName: LPCSTR, lpValue: LPCSTR) BOOL;
extern fn SetEnvironmentVariableW(lpName: LPCWSTR, lpValue: LPCWSTR) BOOL;
extern fn ExpandEnvironmentStringsA(lpSrc: LPCSTR, lpDst: LPSTR, nSize: DWORD) DWORD;
extern fn ExpandEnvironmentStringsW(lpSrc: LPCWSTR, lpDst: LPWSTR, nSize: DWORD) DWORD;
extern fn SetCurrentDirectoryA(lpPathName: LPCSTR) BOOL;
extern fn SetCurrentDirectoryW(lpPathName: LPCWSTR) BOOL;
extern fn GetCurrentDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
extern fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
extern fn SearchPathW(lpPath: LPCWSTR, lpFileName: LPCWSTR, lpExtension: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: [*c]LPWSTR) DWORD;
extern fn SearchPathA(lpPath: LPCSTR, lpFileName: LPCSTR, lpExtension: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: [*c]LPSTR) DWORD;
extern fn NeedCurrentDirectoryForExePathA(ExeName: LPCSTR) BOOL;
extern fn NeedCurrentDirectoryForExePathW(ExeName: LPCWSTR) BOOL;
extern fn CompareFileTime(lpFileTime1: [*c]const FILETIME, lpFileTime2: [*c]const FILETIME) LONG;
extern fn CreateDirectoryA(lpPathName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateDirectoryW(lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateFileA(lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE) HANDLE;
extern fn CreateFileW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE) HANDLE;
extern fn DefineDosDeviceW(dwFlags: DWORD, lpDeviceName: LPCWSTR, lpTargetPath: LPCWSTR) BOOL;
extern fn DeleteFileA(lpFileName: LPCSTR) BOOL;
extern fn DeleteFileW(lpFileName: LPCWSTR) BOOL;
extern fn DeleteVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR) BOOL;
extern fn FileTimeToLocalFileTime(lpFileTime: [*c]const FILETIME, lpLocalFileTime: LPFILETIME) BOOL;
extern fn FindClose(hFindFile: HANDLE) BOOL;
extern fn FindCloseChangeNotification(hChangeHandle: HANDLE) BOOL;
extern fn FindFirstChangeNotificationA(lpPathName: LPCSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD) HANDLE;
extern fn FindFirstChangeNotificationW(lpPathName: LPCWSTR, bWatchSubtree: BOOL, dwNotifyFilter: DWORD) HANDLE;
extern fn FindFirstFileA(lpFileName: LPCSTR, lpFindFileData: LPWIN32_FIND_DATAA) HANDLE;
extern fn FindFirstFileW(lpFileName: LPCWSTR, lpFindFileData: LPWIN32_FIND_DATAW) HANDLE;
extern fn FindFirstFileExA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD) HANDLE;
extern fn FindFirstFileExW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD) HANDLE;
extern fn FindFirstVolumeW(lpszVolumeName: LPWSTR, cchBufferLength: DWORD) HANDLE;
extern fn FindNextChangeNotification(hChangeHandle: HANDLE) BOOL;
extern fn FindNextFileA(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAA) BOOL;
extern fn FindNextFileW(hFindFile: HANDLE, lpFindFileData: LPWIN32_FIND_DATAW) BOOL;
extern fn FindNextVolumeW(hFindVolume: HANDLE, lpszVolumeName: LPWSTR, cchBufferLength: DWORD) BOOL;
extern fn FindVolumeClose(hFindVolume: HANDLE) BOOL;
extern fn FlushFileBuffers(hFile: HANDLE) BOOL;
extern fn GetDiskFreeSpaceA(lpRootPathName: LPCSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD) BOOL;
extern fn GetDiskFreeSpaceW(lpRootPathName: LPCWSTR, lpSectorsPerCluster: LPDWORD, lpBytesPerSector: LPDWORD, lpNumberOfFreeClusters: LPDWORD, lpTotalNumberOfClusters: LPDWORD) BOOL;
extern fn GetDiskFreeSpaceExA(lpDirectoryName: LPCSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER) BOOL;
extern fn GetDiskFreeSpaceExW(lpDirectoryName: LPCWSTR, lpFreeBytesAvailableToCaller: PULARGE_INTEGER, lpTotalNumberOfBytes: PULARGE_INTEGER, lpTotalNumberOfFreeBytes: PULARGE_INTEGER) BOOL;
pub const struct_DISK_SPACE_INFORMATION = extern struct {
    ActualTotalAllocationUnits: ULONGLONG,
    ActualAvailableAllocationUnits: ULONGLONG,
    ActualPoolUnavailableAllocationUnits: ULONGLONG,
    CallerTotalAllocationUnits: ULONGLONG,
    CallerAvailableAllocationUnits: ULONGLONG,
    CallerPoolUnavailableAllocationUnits: ULONGLONG,
    UsedAllocationUnits: ULONGLONG,
    TotalReservedAllocationUnits: ULONGLONG,
    VolumeStorageReserveAllocationUnits: ULONGLONG,
    AvailableCommittedAllocationUnits: ULONGLONG,
    PoolAvailableAllocationUnits: ULONGLONG,
    SectorsPerAllocationUnit: DWORD,
    BytesPerSector: DWORD,
};
pub const DISK_SPACE_INFORMATION = struct_DISK_SPACE_INFORMATION;
extern fn GetDiskSpaceInformationA(rootPath: LPCSTR, diskSpaceInfo: [*c]DISK_SPACE_INFORMATION) HRESULT;
extern fn GetDiskSpaceInformationW(rootPath: LPCWSTR, diskSpaceInfo: [*c]DISK_SPACE_INFORMATION) HRESULT;
extern fn GetDriveTypeA(lpRootPathName: LPCSTR) UINT;
extern fn GetDriveTypeW(lpRootPathName: LPCWSTR) UINT;
pub const struct__WIN32_FILE_ATTRIBUTE_DATA = extern struct {
    dwFileAttributes: DWORD,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    nFileSizeHigh: DWORD,
    nFileSizeLow: DWORD,
};
pub const WIN32_FILE_ATTRIBUTE_DATA = struct__WIN32_FILE_ATTRIBUTE_DATA;
pub const LPWIN32_FILE_ATTRIBUTE_DATA = [*c]struct__WIN32_FILE_ATTRIBUTE_DATA;
extern fn GetFileAttributesA(lpFileName: LPCSTR) DWORD;
extern fn GetFileAttributesW(lpFileName: LPCWSTR) DWORD;
extern fn GetFileAttributesExA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID) BOOL;
extern fn GetFileAttributesExW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID) BOOL;
pub const struct__BY_HANDLE_FILE_INFORMATION = extern struct {
    dwFileAttributes: DWORD,
    ftCreationTime: FILETIME,
    ftLastAccessTime: FILETIME,
    ftLastWriteTime: FILETIME,
    dwVolumeSerialNumber: DWORD,
    nFileSizeHigh: DWORD,
    nFileSizeLow: DWORD,
    nNumberOfLinks: DWORD,
    nFileIndexHigh: DWORD,
    nFileIndexLow: DWORD,
};
pub const BY_HANDLE_FILE_INFORMATION = struct__BY_HANDLE_FILE_INFORMATION;
pub const PBY_HANDLE_FILE_INFORMATION = [*c]struct__BY_HANDLE_FILE_INFORMATION;
pub const LPBY_HANDLE_FILE_INFORMATION = [*c]struct__BY_HANDLE_FILE_INFORMATION;
extern fn GetFileInformationByHandle(hFile: HANDLE, lpFileInformation: LPBY_HANDLE_FILE_INFORMATION) BOOL;
extern fn GetFileSize(hFile: HANDLE, lpFileSizeHigh: LPDWORD) DWORD;
extern fn GetFileSizeEx(hFile: HANDLE, lpFileSize: PLARGE_INTEGER) BOOL;
extern fn GetFileType(hFile: HANDLE) DWORD;
extern fn GetFinalPathNameByHandleA(hFile: HANDLE, lpszFilePath: LPSTR, cchFilePath: DWORD, dwFlags: DWORD) DWORD;
extern fn GetFinalPathNameByHandleW(hFile: HANDLE, lpszFilePath: LPWSTR, cchFilePath: DWORD, dwFlags: DWORD) DWORD;
extern fn GetFileTime(hFile: HANDLE, lpCreationTime: LPFILETIME, lpLastAccessTime: LPFILETIME, lpLastWriteTime: LPFILETIME) BOOL;
extern fn GetFullPathNameW(lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: [*c]LPWSTR) DWORD;
extern fn GetFullPathNameA(lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: [*c]LPSTR) DWORD;
extern fn GetLogicalDrives() DWORD;
extern fn GetLogicalDriveStringsW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
extern fn GetLongPathNameA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD) DWORD;
extern fn GetLongPathNameW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD) DWORD;
extern fn GetShortPathNameW(lpszLongPath: LPCWSTR, lpszShortPath: LPWSTR, cchBuffer: DWORD) DWORD;
extern fn GetTempFileNameW(lpPathName: LPCWSTR, lpPrefixString: LPCWSTR, uUnique: UINT, lpTempFileName: LPWSTR) UINT;
extern fn GetVolumeInformationByHandleW(hFile: HANDLE, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD) BOOL;
extern fn GetVolumeInformationW(lpRootPathName: LPCWSTR, lpVolumeNameBuffer: LPWSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPWSTR, nFileSystemNameSize: DWORD) BOOL;
extern fn GetVolumePathNameW(lpszFileName: LPCWSTR, lpszVolumePathName: LPWSTR, cchBufferLength: DWORD) BOOL;
extern fn LocalFileTimeToFileTime(lpLocalFileTime: [*c]const FILETIME, lpFileTime: LPFILETIME) BOOL;
extern fn LockFile(hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD) BOOL;
extern fn LockFileEx(hFile: HANDLE, dwFlags: DWORD, dwReserved: DWORD, nNumberOfBytesToLockLow: DWORD, nNumberOfBytesToLockHigh: DWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn QueryDosDeviceW(lpDeviceName: LPCWSTR, lpTargetPath: LPWSTR, ucchMax: DWORD) DWORD;
extern fn ReadFile(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn ReadFileEx(hFile: HANDLE, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
extern fn ReadFileScatter(hFile: HANDLE, aSegmentArray: [*c]FILE_SEGMENT_ELEMENT, nNumberOfBytesToRead: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn RemoveDirectoryA(lpPathName: LPCSTR) BOOL;
extern fn RemoveDirectoryW(lpPathName: LPCWSTR) BOOL;
extern fn SetEndOfFile(hFile: HANDLE) BOOL;
extern fn SetFileAttributesA(lpFileName: LPCSTR, dwFileAttributes: DWORD) BOOL;
extern fn SetFileAttributesW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) BOOL;
extern fn SetFileInformationByHandle(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD) BOOL;
extern fn SetFilePointer(hFile: HANDLE, lDistanceToMove: LONG, lpDistanceToMoveHigh: PLONG, dwMoveMethod: DWORD) DWORD;
extern fn SetFilePointerEx(hFile: HANDLE, liDistanceToMove: LARGE_INTEGER, lpNewFilePointer: PLARGE_INTEGER, dwMoveMethod: DWORD) BOOL;
extern fn SetFileTime(hFile: HANDLE, lpCreationTime: [*c]const FILETIME, lpLastAccessTime: [*c]const FILETIME, lpLastWriteTime: [*c]const FILETIME) BOOL;
extern fn SetFileValidData(hFile: HANDLE, ValidDataLength: LONGLONG) BOOL;
extern fn UnlockFile(hFile: HANDLE, dwFileOffsetLow: DWORD, dwFileOffsetHigh: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD) BOOL;
extern fn UnlockFileEx(hFile: HANDLE, dwReserved: DWORD, nNumberOfBytesToUnlockLow: DWORD, nNumberOfBytesToUnlockHigh: DWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn WriteFile(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn WriteFileEx(hFile: HANDLE, lpBuffer: LPCVOID, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
extern fn WriteFileGather(hFile: HANDLE, aSegmentArray: [*c]FILE_SEGMENT_ELEMENT, nNumberOfBytesToWrite: DWORD, lpReserved: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn GetTempPathW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
extern fn GetVolumeNameForVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPWSTR, cchBufferLength: DWORD) BOOL;
extern fn GetVolumePathNamesForVolumeNameW(lpszVolumeName: LPCWSTR, lpszVolumePathNames: LPWCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD) BOOL;
pub const struct__CREATEFILE2_EXTENDED_PARAMETERS = extern struct {
    dwSize: DWORD,
    dwFileAttributes: DWORD,
    dwFileFlags: DWORD,
    dwSecurityQosFlags: DWORD,
    lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    hTemplateFile: HANDLE,
};
pub const CREATEFILE2_EXTENDED_PARAMETERS = struct__CREATEFILE2_EXTENDED_PARAMETERS;
pub const PCREATEFILE2_EXTENDED_PARAMETERS = [*c]struct__CREATEFILE2_EXTENDED_PARAMETERS;
pub const LPCREATEFILE2_EXTENDED_PARAMETERS = [*c]struct__CREATEFILE2_EXTENDED_PARAMETERS;
extern fn CreateFile2(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwCreationDisposition: DWORD, pCreateExParams: LPCREATEFILE2_EXTENDED_PARAMETERS) HANDLE;
extern fn SetFileIoOverlappedRange(FileHandle: HANDLE, OverlappedRangeStart: PUCHAR, Length: ULONG) BOOL;
extern fn GetCompressedFileSizeA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD) DWORD;
extern fn GetCompressedFileSizeW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD) DWORD;
pub const FindStreamInfoStandard = enum__STREAM_INFO_LEVELS.FindStreamInfoStandard;
pub const FindStreamInfoMaxInfoLevel = enum__STREAM_INFO_LEVELS.FindStreamInfoMaxInfoLevel;
pub const enum__STREAM_INFO_LEVELS = extern enum {
    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel,
};
pub const STREAM_INFO_LEVELS = enum__STREAM_INFO_LEVELS;
pub const struct__WIN32_FIND_STREAM_DATA = extern struct {
    StreamSize: LARGE_INTEGER,
    cStreamName: [296]WCHAR,
};
pub const WIN32_FIND_STREAM_DATA = struct__WIN32_FIND_STREAM_DATA;
pub const PWIN32_FIND_STREAM_DATA = [*c]struct__WIN32_FIND_STREAM_DATA;
extern fn FindFirstStreamW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD) HANDLE;
extern fn FindNextStreamW(hFindStream: HANDLE, lpFindStreamData: LPVOID) BOOL;
extern fn AreFileApisANSI() BOOL;
extern fn GetTempPathA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
extern fn FindFirstFileNameW(lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWSTR) HANDLE;
extern fn FindNextFileNameW(hFindStream: HANDLE, StringLength: LPDWORD, LinkName: PWSTR) BOOL;
extern fn GetVolumeInformationA(lpRootPathName: LPCSTR, lpVolumeNameBuffer: LPSTR, nVolumeNameSize: DWORD, lpVolumeSerialNumber: LPDWORD, lpMaximumComponentLength: LPDWORD, lpFileSystemFlags: LPDWORD, lpFileSystemNameBuffer: LPSTR, nFileSystemNameSize: DWORD) BOOL;
extern fn GetTempFileNameA(lpPathName: LPCSTR, lpPrefixString: LPCSTR, uUnique: UINT, lpTempFileName: LPSTR) UINT;
extern fn SetFileApisToOEM() void;
extern fn SetFileApisToANSI() void;
extern fn CopyFileFromAppW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL) BOOL;
extern fn CreateDirectoryFromAppW(lpPathName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateFileFromAppW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE) HANDLE;
extern fn CreateFile2FromAppW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwCreationDisposition: DWORD, pCreateExParams: LPCREATEFILE2_EXTENDED_PARAMETERS) HANDLE;
extern fn DeleteFileFromAppW(lpFileName: LPCWSTR) BOOL;
extern fn FindFirstFileExFromAppW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD) HANDLE;
extern fn GetFileAttributesExFromAppW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID) BOOL;
extern fn MoveFileFromAppW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR) BOOL;
extern fn RemoveDirectoryFromAppW(lpPathName: LPCWSTR) BOOL;
extern fn ReplaceFileFromAppW(lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID) BOOL;
extern fn SetFileAttributesFromAppW(lpFileName: LPCWSTR, dwFileAttributes: DWORD) BOOL;
extern fn IsDebuggerPresent() BOOL;
extern fn DebugBreak() void;
extern fn OutputDebugStringA(lpOutputString: LPCSTR) void;
extern fn OutputDebugStringW(lpOutputString: LPCWSTR) void;
extern fn ContinueDebugEvent(dwProcessId: DWORD, dwThreadId: DWORD, dwContinueStatus: DWORD) BOOL;
extern fn WaitForDebugEvent(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) BOOL;
extern fn DebugActiveProcess(dwProcessId: DWORD) BOOL;
extern fn DebugActiveProcessStop(dwProcessId: DWORD) BOOL;
extern fn CheckRemoteDebuggerPresent(hProcess: HANDLE, pbDebuggerPresent: PBOOL) BOOL;
extern fn WaitForDebugEventEx(lpDebugEvent: LPDEBUG_EVENT, dwMilliseconds: DWORD) BOOL;
extern fn EncodePointer(Ptr: PVOID) PVOID;
extern fn DecodePointer(Ptr: PVOID) PVOID;
extern fn EncodeSystemPointer(Ptr: PVOID) PVOID;
extern fn DecodeSystemPointer(Ptr: PVOID) PVOID;
extern fn EncodeRemotePointer(ProcessHandle: HANDLE, Ptr: PVOID, EncodedPtr: [*c]PVOID) HRESULT;
extern fn DecodeRemotePointer(ProcessHandle: HANDLE, Ptr: PVOID, DecodedPtr: [*c]PVOID) HRESULT;
extern fn Beep(dwFreq: DWORD, dwDuration: DWORD) BOOL;
extern fn CloseHandle(hObject: HANDLE) BOOL;
extern fn DuplicateHandle(hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: LPHANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD) BOOL;
extern fn CompareObjectHandles(hFirstObjectHandle: HANDLE, hSecondObjectHandle: HANDLE) BOOL;
extern fn GetHandleInformation(hObject: HANDLE, lpdwFlags: LPDWORD) BOOL;
extern fn SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD) BOOL;
pub const PTOP_LEVEL_EXCEPTION_FILTER = ?fn ([*c]struct__EXCEPTION_POINTERS) callconv(std.os.windows.WINAPI) LONG;
pub const LPTOP_LEVEL_EXCEPTION_FILTER = PTOP_LEVEL_EXCEPTION_FILTER;
extern fn RaiseException(dwExceptionCode: DWORD, dwExceptionFlags: DWORD, nNumberOfArguments: DWORD, lpArguments: [*c]const ULONG_PTR) void;
extern fn UnhandledExceptionFilter(ExceptionInfo: [*c]struct__EXCEPTION_POINTERS) LONG;
extern fn SetUnhandledExceptionFilter(lpTopLevelExceptionFilter: LPTOP_LEVEL_EXCEPTION_FILTER) LPTOP_LEVEL_EXCEPTION_FILTER;
extern fn GetLastError() DWORD;
extern fn SetLastError(dwErrCode: DWORD) void;
extern fn GetErrorMode() UINT;
extern fn SetErrorMode(uMode: UINT) UINT;
extern fn AddVectoredExceptionHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER) PVOID;
extern fn RemoveVectoredExceptionHandler(Handle: PVOID) ULONG;
extern fn AddVectoredContinueHandler(First: ULONG, Handler: PVECTORED_EXCEPTION_HANDLER) PVOID;
extern fn RemoveVectoredContinueHandler(Handle: PVOID) ULONG;
extern fn RaiseFailFastException(pExceptionRecord: PEXCEPTION_RECORD, pContextRecord: PCONTEXT, dwFlags: DWORD) void;
extern fn FatalAppExitA(uAction: UINT, lpMessageText: LPCSTR) void;
extern fn FatalAppExitW(uAction: UINT, lpMessageText: LPCWSTR) void;
extern fn GetThreadErrorMode() DWORD;
extern fn SetThreadErrorMode(dwNewMode: DWORD, lpOldMode: LPDWORD) BOOL;
extern fn TerminateProcessOnMemoryExhaustion(FailedAllocationSize: SIZE_T) void;
extern fn FlsAlloc(lpCallback: PFLS_CALLBACK_FUNCTION) DWORD;
extern fn FlsGetValue(dwFlsIndex: DWORD) PVOID;
extern fn FlsSetValue(dwFlsIndex: DWORD, lpFlsData: PVOID) BOOL;
extern fn FlsFree(dwFlsIndex: DWORD) BOOL;
extern fn IsThreadAFiber() BOOL;
extern fn CreatePipe(hReadPipe: PHANDLE, hWritePipe: PHANDLE, lpPipeAttributes: LPSECURITY_ATTRIBUTES, nSize: DWORD) BOOL;
extern fn ConnectNamedPipe(hNamedPipe: HANDLE, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn DisconnectNamedPipe(hNamedPipe: HANDLE) BOOL;
extern fn SetNamedPipeHandleState(hNamedPipe: HANDLE, lpMode: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD) BOOL;
extern fn PeekNamedPipe(hNamedPipe: HANDLE, lpBuffer: LPVOID, nBufferSize: DWORD, lpBytesRead: LPDWORD, lpTotalBytesAvail: LPDWORD, lpBytesLeftThisMessage: LPDWORD) BOOL;
extern fn TransactNamedPipe(hNamedPipe: HANDLE, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn CreateNamedPipeW(lpName: LPCWSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
extern fn WaitNamedPipeW(lpNamedPipeName: LPCWSTR, nTimeOut: DWORD) BOOL;
extern fn GetNamedPipeClientComputerNameW(Pipe: HANDLE, ClientComputerName: LPWSTR, ClientComputerNameLength: ULONG) BOOL;
extern fn ImpersonateNamedPipeClient(hNamedPipe: HANDLE) BOOL;
extern fn GetNamedPipeInfo(hNamedPipe: HANDLE, lpFlags: LPDWORD, lpOutBufferSize: LPDWORD, lpInBufferSize: LPDWORD, lpMaxInstances: LPDWORD) BOOL;
extern fn GetNamedPipeHandleStateW(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPWSTR, nMaxUserNameSize: DWORD) BOOL;
extern fn CallNamedPipeW(lpNamedPipeName: LPCWSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD) BOOL;
extern fn QueryPerformanceCounter(lpPerformanceCount: [*c]LARGE_INTEGER) BOOL;
extern fn QueryPerformanceFrequency(lpFrequency: [*c]LARGE_INTEGER) BOOL;
pub const struct__HEAP_SUMMARY = extern struct {
    cb: DWORD,
    cbAllocated: SIZE_T,
    cbCommitted: SIZE_T,
    cbReserved: SIZE_T,
    cbMaxReserve: SIZE_T,
};
pub const HEAP_SUMMARY = struct__HEAP_SUMMARY;
pub const PHEAP_SUMMARY = [*c]struct__HEAP_SUMMARY;
pub const LPHEAP_SUMMARY = PHEAP_SUMMARY;
extern fn HeapCreate(flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T) HANDLE;
extern fn HeapDestroy(hHeap: HANDLE) BOOL;
extern fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) LPVOID;
extern fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) LPVOID;
extern fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) BOOL;
extern fn HeapSize(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) SIZE_T;
extern fn GetProcessHeap() HANDLE;
extern fn HeapCompact(hHeap: HANDLE, dwFlags: DWORD) SIZE_T;
extern fn HeapSetInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T) BOOL;
extern fn HeapValidate(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPCVOID) BOOL;
extern fn HeapSummary(hHeap: HANDLE, dwFlags: DWORD, lpSummary: LPHEAP_SUMMARY) BOOL;
extern fn GetProcessHeaps(NumberOfHeaps: DWORD, ProcessHeaps: PHANDLE) DWORD;
extern fn HeapLock(hHeap: HANDLE) BOOL;
extern fn HeapUnlock(hHeap: HANDLE) BOOL;
extern fn HeapWalk(hHeap: HANDLE, lpEntry: LPPROCESS_HEAP_ENTRY) BOOL;
extern fn HeapQueryInformation(HeapHandle: HANDLE, HeapInformationClass: HEAP_INFORMATION_CLASS, HeapInformation: PVOID, HeapInformationLength: SIZE_T, ReturnLength: PSIZE_T) BOOL;
extern fn CreateIoCompletionPort(FileHandle: HANDLE, ExistingCompletionPort: HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD) HANDLE;
extern fn GetQueuedCompletionStatus(CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: PULONG_PTR, lpOverlapped: [*c]LPOVERLAPPED, dwMilliseconds: DWORD) BOOL;
extern fn GetQueuedCompletionStatusEx(CompletionPort: HANDLE, lpCompletionPortEntries: LPOVERLAPPED_ENTRY, ulCount: ULONG, ulNumEntriesRemoved: PULONG, dwMilliseconds: DWORD, fAlertable: BOOL) BOOL;
extern fn PostQueuedCompletionStatus(CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn DeviceIoControl(hDevice: HANDLE, dwIoControlCode: DWORD, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn GetOverlappedResult(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: BOOL) BOOL;
extern fn CancelIoEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn CancelIo(hFile: HANDLE) BOOL;
extern fn GetOverlappedResultEx(hFile: HANDLE, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, dwMilliseconds: DWORD, bAlertable: BOOL) BOOL;
extern fn CancelSynchronousIo(hThread: HANDLE) BOOL;
pub const SRWLOCK = RTL_SRWLOCK;
pub const PSRWLOCK = [*c]RTL_SRWLOCK;
extern fn InitializeSRWLock(SRWLock: PSRWLOCK) void;
extern fn ReleaseSRWLockExclusive(SRWLock: PSRWLOCK) void;
extern fn ReleaseSRWLockShared(SRWLock: PSRWLOCK) void;
extern fn AcquireSRWLockExclusive(SRWLock: PSRWLOCK) void;
extern fn AcquireSRWLockShared(SRWLock: PSRWLOCK) void;
extern fn TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK) BOOLEAN;
extern fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) BOOLEAN;
extern fn InitializeCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
extern fn EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
extern fn LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
extern fn InitializeCriticalSectionAndSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD) BOOL;
extern fn InitializeCriticalSectionEx(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD, Flags: DWORD) BOOL;
extern fn SetCriticalSectionSpinCount(lpCriticalSection: LPCRITICAL_SECTION, dwSpinCount: DWORD) DWORD;
extern fn TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) BOOL;
extern fn DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) void;
pub const INIT_ONCE = RTL_RUN_ONCE;
pub const PINIT_ONCE = PRTL_RUN_ONCE;
pub const LPINIT_ONCE = PRTL_RUN_ONCE;
pub const PINIT_ONCE_FN = ?fn (PINIT_ONCE, PVOID, [*c]PVOID) callconv(std.os.windows.WINAPI) BOOL;
extern fn InitOnceInitialize(InitOnce: PINIT_ONCE) void;
extern fn InitOnceExecuteOnce(InitOnce: PINIT_ONCE, InitFn: PINIT_ONCE_FN, Parameter: PVOID, Context: [*c]LPVOID) BOOL;
extern fn InitOnceBeginInitialize(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, fPending: PBOOL, lpContext: [*c]LPVOID) BOOL;
extern fn InitOnceComplete(lpInitOnce: LPINIT_ONCE, dwFlags: DWORD, lpContext: LPVOID) BOOL;
pub const CONDITION_VARIABLE = RTL_CONDITION_VARIABLE;
pub const PCONDITION_VARIABLE = [*c]RTL_CONDITION_VARIABLE;
extern fn InitializeConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
extern fn WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
extern fn WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE) void;
extern fn SleepConditionVariableCS(ConditionVariable: PCONDITION_VARIABLE, CriticalSection: PCRITICAL_SECTION, dwMilliseconds: DWORD) BOOL;
extern fn SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE, SRWLock: PSRWLOCK, dwMilliseconds: DWORD, Flags: ULONG) BOOL;
extern fn SetEvent(hEvent: HANDLE) BOOL;
extern fn ResetEvent(hEvent: HANDLE) BOOL;
extern fn ReleaseSemaphore(hSemaphore: HANDLE, lReleaseCount: LONG, lpPreviousCount: LPLONG) BOOL;
extern fn ReleaseMutex(hMutex: HANDLE) BOOL;
extern fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) DWORD;
extern fn SleepEx(dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
extern fn WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
extern fn WaitForMultipleObjectsEx(nCount: DWORD, lpHandles: [*c]const HANDLE, bWaitAll: BOOL, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
extern fn CreateMutexA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCSTR) HANDLE;
extern fn CreateMutexW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, bInitialOwner: BOOL, lpName: LPCWSTR) HANDLE;
extern fn OpenMutexW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
extern fn CreateEventA(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCSTR) HANDLE;
extern fn CreateEventW(lpEventAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, bInitialState: BOOL, lpName: LPCWSTR) HANDLE;
extern fn OpenEventA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
extern fn OpenEventW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
extern fn OpenSemaphoreW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
pub const PTIMERAPCROUTINE = ?fn (LPVOID, DWORD, DWORD) callconv(std.os.windows.WINAPI) void;
extern fn OpenWaitableTimerW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCWSTR) HANDLE;
extern fn SetWaitableTimerEx(hTimer: HANDLE, lpDueTime: [*c]const LARGE_INTEGER, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, WakeContext: PREASON_CONTEXT, TolerableDelay: ULONG) BOOL;
extern fn SetWaitableTimer(hTimer: HANDLE, lpDueTime: [*c]const LARGE_INTEGER, lPeriod: LONG, pfnCompletionRoutine: PTIMERAPCROUTINE, lpArgToCompletionRoutine: LPVOID, fResume: BOOL) BOOL;
extern fn CancelWaitableTimer(hTimer: HANDLE) BOOL;
extern fn CreateMutexExA(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateMutexExW(lpMutexAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateEventExA(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateEventExW(lpEventAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateSemaphoreExW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateWaitableTimerExW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
pub const SYNCHRONIZATION_BARRIER = RTL_BARRIER;
pub const PSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
pub const LPSYNCHRONIZATION_BARRIER = PRTL_BARRIER;
extern fn EnterSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, dwFlags: DWORD) BOOL;
extern fn InitializeSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER, lTotalThreads: LONG, lSpinCount: LONG) BOOL;
extern fn DeleteSynchronizationBarrier(lpBarrier: LPSYNCHRONIZATION_BARRIER) BOOL;
extern fn Sleep(dwMilliseconds: DWORD) void;
extern fn WaitOnAddress(Address: ?*volatile c_void, CompareAddress: PVOID, AddressSize: SIZE_T, dwMilliseconds: DWORD) BOOL;
extern fn WakeByAddressSingle(Address: PVOID) void;
extern fn WakeByAddressAll(Address: PVOID) void;
extern fn SignalObjectAndWait(hObjectToSignal: HANDLE, hObjectToWaitOn: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL) DWORD;
extern fn WaitForMultipleObjects(nCount: DWORD, lpHandles: [*c]const HANDLE, bWaitAll: BOOL, dwMilliseconds: DWORD) DWORD;
extern fn CreateSemaphoreW(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCWSTR) HANDLE;
extern fn CreateWaitableTimerW(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCWSTR) HANDLE;
extern fn InitializeSListHead(ListHead: PSLIST_HEADER) void;
extern fn InterlockedPopEntrySList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
extern fn InterlockedPushEntrySList(ListHead: PSLIST_HEADER, ListEntry: PSLIST_ENTRY) PSLIST_ENTRY;
extern fn InterlockedPushListSListEx(ListHead: PSLIST_HEADER, List: PSLIST_ENTRY, ListEnd: PSLIST_ENTRY, Count: ULONG) PSLIST_ENTRY;
extern fn InterlockedFlushSList(ListHead: PSLIST_HEADER) PSLIST_ENTRY;
extern fn QueryDepthSList(ListHead: PSLIST_HEADER) USHORT;
pub const struct__PROCESS_INFORMATION = extern struct {
    hProcess: HANDLE,
    hThread: HANDLE,
    dwProcessId: DWORD,
    dwThreadId: DWORD,
};
pub const PROCESS_INFORMATION = struct__PROCESS_INFORMATION;
pub const PPROCESS_INFORMATION = [*c]struct__PROCESS_INFORMATION;
pub const LPPROCESS_INFORMATION = [*c]struct__PROCESS_INFORMATION;
pub const struct__STARTUPINFOA = extern struct {
    cb: DWORD,
    lpReserved: LPSTR,
    lpDesktop: LPSTR,
    lpTitle: LPSTR,
    dwX: DWORD,
    dwY: DWORD,
    dwXSize: DWORD,
    dwYSize: DWORD,
    dwXCountChars: DWORD,
    dwYCountChars: DWORD,
    dwFillAttribute: DWORD,
    dwFlags: DWORD,
    wShowWindow: WORD,
    cbReserved2: WORD,
    lpReserved2: LPBYTE,
    hStdInput: HANDLE,
    hStdOutput: HANDLE,
    hStdError: HANDLE,
};
pub const STARTUPINFOA = struct__STARTUPINFOA;
pub const LPSTARTUPINFOA = [*c]struct__STARTUPINFOA;
pub const struct__STARTUPINFOW = extern struct {
    cb: DWORD,
    lpReserved: LPWSTR,
    lpDesktop: LPWSTR,
    lpTitle: LPWSTR,
    dwX: DWORD,
    dwY: DWORD,
    dwXSize: DWORD,
    dwYSize: DWORD,
    dwXCountChars: DWORD,
    dwYCountChars: DWORD,
    dwFillAttribute: DWORD,
    dwFlags: DWORD,
    wShowWindow: WORD,
    cbReserved2: WORD,
    lpReserved2: LPBYTE,
    hStdInput: HANDLE,
    hStdOutput: HANDLE,
    hStdError: HANDLE,
};
pub const STARTUPINFOW = struct__STARTUPINFOW;
pub const LPSTARTUPINFOW = [*c]struct__STARTUPINFOW;
pub const STARTUPINFO = STARTUPINFOA;
pub const LPSTARTUPINFO = LPSTARTUPINFOA;
extern fn QueueUserAPC(pfnAPC: PAPCFUNC, hThread: HANDLE, dwData: ULONG_PTR) DWORD;
extern fn GetProcessTimes(hProcess: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME) BOOL;
extern fn GetCurrentProcess() HANDLE;
extern fn GetCurrentProcessId() DWORD;
extern fn ExitProcess(uExitCode: UINT) noreturn;
extern fn TerminateProcess(hProcess: HANDLE, uExitCode: UINT) BOOL;
extern fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: LPDWORD) BOOL;
extern fn SwitchToThread() BOOL;
extern fn CreateThread(lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) HANDLE;
extern fn CreateRemoteThread(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpThreadId: LPDWORD) HANDLE;
extern fn GetCurrentThread() HANDLE;
extern fn GetCurrentThreadId() DWORD;
extern fn OpenThread(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwThreadId: DWORD) HANDLE;
extern fn SetThreadPriority(hThread: HANDLE, nPriority: c_int) BOOL;
extern fn SetThreadPriorityBoost(hThread: HANDLE, bDisablePriorityBoost: BOOL) BOOL;
extern fn GetThreadPriorityBoost(hThread: HANDLE, pDisablePriorityBoost: PBOOL) BOOL;
extern fn GetThreadPriority(hThread: HANDLE) c_int;
extern fn ExitThread(dwExitCode: DWORD) noreturn;
extern fn TerminateThread(hThread: HANDLE, dwExitCode: DWORD) BOOL;
extern fn GetExitCodeThread(hThread: HANDLE, lpExitCode: LPDWORD) BOOL;
extern fn SuspendThread(hThread: HANDLE) DWORD;
extern fn ResumeThread(hThread: HANDLE) DWORD;
extern fn TlsAlloc() DWORD;
extern fn TlsGetValue(dwTlsIndex: DWORD) LPVOID;
extern fn TlsSetValue(dwTlsIndex: DWORD, lpTlsValue: LPVOID) BOOL;
extern fn TlsFree(dwTlsIndex: DWORD) BOOL;
extern fn CreateProcessA(lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
extern fn CreateProcessW(lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
extern fn SetProcessShutdownParameters(dwLevel: DWORD, dwFlags: DWORD) BOOL;
extern fn GetProcessVersion(ProcessId: DWORD) DWORD;
extern fn GetStartupInfoW(lpStartupInfo: LPSTARTUPINFOW) void;
extern fn CreateProcessAsUserW(hToken: HANDLE, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
pub fn GetCurrentProcessToken() HANDLE {
    return @as(HANDLE, @as(LONG_PTR, -4));
}
pub fn GetCurrentThreadToken() HANDLE {
    return @as(HANDLE, @as(LONG_PTR, -5));
}
pub fn GetCurrentThreadEffectiveToken() HANDLE {
    return @as(HANDLE, @as(LONG_PTR, -6));
}
extern fn SetThreadToken(Thread: PHANDLE, Token: HANDLE) BOOL;
extern fn OpenProcessToken(ProcessHandle: HANDLE, DesiredAccess: DWORD, TokenHandle: PHANDLE) BOOL;
extern fn OpenThreadToken(ThreadHandle: HANDLE, DesiredAccess: DWORD, OpenAsSelf: BOOL, TokenHandle: PHANDLE) BOOL;
extern fn SetPriorityClass(hProcess: HANDLE, dwPriorityClass: DWORD) BOOL;
extern fn GetPriorityClass(hProcess: HANDLE) DWORD;
extern fn SetThreadStackGuarantee(StackSizeInBytes: PULONG) BOOL;
extern fn ProcessIdToSessionId(dwProcessId: DWORD, pSessionId: [*c]DWORD) BOOL;
pub const struct__PROC_THREAD_ATTRIBUTE_LIST = opaque {};
pub const PPROC_THREAD_ATTRIBUTE_LIST = ?*struct__PROC_THREAD_ATTRIBUTE_LIST;
pub const LPPROC_THREAD_ATTRIBUTE_LIST = ?*struct__PROC_THREAD_ATTRIBUTE_LIST;
extern fn GetProcessId(Process: HANDLE) DWORD;
extern fn GetThreadId(Thread: HANDLE) DWORD;
extern fn FlushProcessWriteBuffers() void;
extern fn GetProcessIdOfThread(Thread: HANDLE) DWORD;
extern fn InitializeProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwAttributeCount: DWORD, dwFlags: DWORD, lpSize: PSIZE_T) BOOL;
extern fn DeleteProcThreadAttributeList(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST) void;
extern fn SetProcessAffinityUpdateMode(hProcess: HANDLE, dwFlags: DWORD) BOOL;
extern fn QueryProcessAffinityUpdateMode(hProcess: HANDLE, lpdwFlags: LPDWORD) BOOL;
extern fn UpdateProcThreadAttribute(lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, dwFlags: DWORD, Attribute: DWORD_PTR, lpValue: PVOID, cbSize: SIZE_T, lpPreviousValue: PVOID, lpReturnSize: PSIZE_T) BOOL;
extern fn CreateRemoteThreadEx(hProcess: HANDLE, lpThreadAttributes: LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: LPVOID, dwCreationFlags: DWORD, lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST, lpThreadId: LPDWORD) HANDLE;
extern fn GetCurrentThreadStackLimits(LowLimit: PULONG_PTR, HighLimit: PULONG_PTR) void;
extern fn GetThreadContext(hThread: HANDLE, lpContext: LPCONTEXT) BOOL;
extern fn GetProcessMitigationPolicy(hProcess: HANDLE, MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: PVOID, dwLength: SIZE_T) BOOL;
extern fn SetThreadContext(hThread: HANDLE, lpContext: [*c]const CONTEXT) BOOL;
extern fn SetProcessMitigationPolicy(MitigationPolicy: PROCESS_MITIGATION_POLICY, lpBuffer: PVOID, dwLength: SIZE_T) BOOL;
extern fn FlushInstructionCache(hProcess: HANDLE, lpBaseAddress: LPCVOID, dwSize: SIZE_T) BOOL;
extern fn GetThreadTimes(hThread: HANDLE, lpCreationTime: LPFILETIME, lpExitTime: LPFILETIME, lpKernelTime: LPFILETIME, lpUserTime: LPFILETIME) BOOL;
extern fn OpenProcess(dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwProcessId: DWORD) HANDLE;
extern fn IsProcessorFeaturePresent(ProcessorFeature: DWORD) BOOL;
extern fn GetProcessHandleCount(hProcess: HANDLE, pdwHandleCount: PDWORD) BOOL;
extern fn GetCurrentProcessorNumber() DWORD;
extern fn SetThreadIdealProcessorEx(hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER, lpPreviousIdealProcessor: PPROCESSOR_NUMBER) BOOL;
extern fn GetThreadIdealProcessorEx(hThread: HANDLE, lpIdealProcessor: PPROCESSOR_NUMBER) BOOL;
extern fn GetCurrentProcessorNumberEx(ProcNumber: PPROCESSOR_NUMBER) void;
extern fn GetProcessPriorityBoost(hProcess: HANDLE, pDisablePriorityBoost: PBOOL) BOOL;
extern fn SetProcessPriorityBoost(hProcess: HANDLE, bDisablePriorityBoost: BOOL) BOOL;
extern fn GetThreadIOPendingFlag(hThread: HANDLE, lpIOIsPending: PBOOL) BOOL;
extern fn GetSystemTimes(lpIdleTime: PFILETIME, lpKernelTime: PFILETIME, lpUserTime: PFILETIME) BOOL;
pub const ThreadMemoryPriority = enum__THREAD_INFORMATION_CLASS.ThreadMemoryPriority;
pub const ThreadAbsoluteCpuPriority = enum__THREAD_INFORMATION_CLASS.ThreadAbsoluteCpuPriority;
pub const ThreadDynamicCodePolicy = enum__THREAD_INFORMATION_CLASS.ThreadDynamicCodePolicy;
pub const ThreadPowerThrottling = enum__THREAD_INFORMATION_CLASS.ThreadPowerThrottling;
pub const ThreadInformationClassMax = enum__THREAD_INFORMATION_CLASS.ThreadInformationClassMax;
pub const enum__THREAD_INFORMATION_CLASS = extern enum {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadDynamicCodePolicy,
    ThreadPowerThrottling,
    ThreadInformationClassMax,
};
pub const THREAD_INFORMATION_CLASS = enum__THREAD_INFORMATION_CLASS;
pub const struct__MEMORY_PRIORITY_INFORMATION = extern struct {
    MemoryPriority: ULONG,
};
pub const MEMORY_PRIORITY_INFORMATION = struct__MEMORY_PRIORITY_INFORMATION;
pub const PMEMORY_PRIORITY_INFORMATION = [*c]struct__MEMORY_PRIORITY_INFORMATION;
extern fn GetThreadInformation(hThread: HANDLE, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: LPVOID, ThreadInformationSize: DWORD) BOOL;
extern fn SetThreadInformation(hThread: HANDLE, ThreadInformationClass: THREAD_INFORMATION_CLASS, ThreadInformation: LPVOID, ThreadInformationSize: DWORD) BOOL;
pub const struct__THREAD_POWER_THROTTLING_STATE = extern struct {
    Version: ULONG,
    ControlMask: ULONG,
    StateMask: ULONG,
};
pub const THREAD_POWER_THROTTLING_STATE = struct__THREAD_POWER_THROTTLING_STATE;
extern fn IsProcessCritical(hProcess: HANDLE, Critical: PBOOL) BOOL;
extern fn SetProtectedPolicy(PolicyGuid: LPCGUID, PolicyValue: ULONG_PTR, OldPolicyValue: PULONG_PTR) BOOL;
extern fn QueryProtectedPolicy(PolicyGuid: LPCGUID, PolicyValue: PULONG_PTR) BOOL;
extern fn SetThreadIdealProcessor(hThread: HANDLE, dwIdealProcessor: DWORD) DWORD;
pub const ProcessMemoryPriority = enum__PROCESS_INFORMATION_CLASS.ProcessMemoryPriority;
pub const ProcessMemoryExhaustionInfo = enum__PROCESS_INFORMATION_CLASS.ProcessMemoryExhaustionInfo;
pub const ProcessAppMemoryInfo = enum__PROCESS_INFORMATION_CLASS.ProcessAppMemoryInfo;
pub const ProcessInPrivateInfo = enum__PROCESS_INFORMATION_CLASS.ProcessInPrivateInfo;
pub const ProcessPowerThrottling = enum__PROCESS_INFORMATION_CLASS.ProcessPowerThrottling;
pub const ProcessReservedValue1 = enum__PROCESS_INFORMATION_CLASS.ProcessReservedValue1;
pub const ProcessTelemetryCoverageInfo = enum__PROCESS_INFORMATION_CLASS.ProcessTelemetryCoverageInfo;
pub const ProcessProtectionLevelInfo = enum__PROCESS_INFORMATION_CLASS.ProcessProtectionLevelInfo;
pub const ProcessLeapSecondInfo = enum__PROCESS_INFORMATION_CLASS.ProcessLeapSecondInfo;
pub const ProcessInformationClassMax = enum__PROCESS_INFORMATION_CLASS.ProcessInformationClassMax;
pub const enum__PROCESS_INFORMATION_CLASS = extern enum {
    ProcessMemoryPriority,
    ProcessMemoryExhaustionInfo,
    ProcessAppMemoryInfo,
    ProcessInPrivateInfo,
    ProcessPowerThrottling,
    ProcessReservedValue1,
    ProcessTelemetryCoverageInfo,
    ProcessProtectionLevelInfo,
    ProcessLeapSecondInfo,
    ProcessInformationClassMax,
};
pub const PROCESS_INFORMATION_CLASS = enum__PROCESS_INFORMATION_CLASS;
pub const struct__APP_MEMORY_INFORMATION = extern struct {
    AvailableCommit: ULONG64,
    PrivateCommitUsage: ULONG64,
    PeakPrivateCommitUsage: ULONG64,
    TotalCommitUsage: ULONG64,
};
pub const APP_MEMORY_INFORMATION = struct__APP_MEMORY_INFORMATION;
pub const PAPP_MEMORY_INFORMATION = [*c]struct__APP_MEMORY_INFORMATION;
pub const PMETypeFailFastOnCommitFailure = enum__PROCESS_MEMORY_EXHAUSTION_TYPE.PMETypeFailFastOnCommitFailure;
pub const PMETypeMax = enum__PROCESS_MEMORY_EXHAUSTION_TYPE.PMETypeMax;
pub const enum__PROCESS_MEMORY_EXHAUSTION_TYPE = extern enum {
    PMETypeFailFastOnCommitFailure,
    PMETypeMax,
};
pub const PROCESS_MEMORY_EXHAUSTION_TYPE = enum__PROCESS_MEMORY_EXHAUSTION_TYPE;
pub const PPROCESS_MEMORY_EXHAUSTION_TYPE = [*c]enum__PROCESS_MEMORY_EXHAUSTION_TYPE;
pub const struct__PROCESS_MEMORY_EXHAUSTION_INFO = extern struct {
    Version: USHORT,
    Reserved: USHORT,
    Type: PROCESS_MEMORY_EXHAUSTION_TYPE,
    Value: ULONG_PTR,
};
pub const PROCESS_MEMORY_EXHAUSTION_INFO = struct__PROCESS_MEMORY_EXHAUSTION_INFO;
pub const PPROCESS_MEMORY_EXHAUSTION_INFO = [*c]struct__PROCESS_MEMORY_EXHAUSTION_INFO;
pub const struct__PROCESS_POWER_THROTTLING_STATE = extern struct {
    Version: ULONG,
    ControlMask: ULONG,
    StateMask: ULONG,
};
pub const PROCESS_POWER_THROTTLING_STATE = struct__PROCESS_POWER_THROTTLING_STATE;
pub const PPROCESS_POWER_THROTTLING_STATE = [*c]struct__PROCESS_POWER_THROTTLING_STATE;
pub const struct_PROCESS_PROTECTION_LEVEL_INFORMATION = extern struct {
    ProtectionLevel: DWORD,
};
pub const PROCESS_PROTECTION_LEVEL_INFORMATION = struct_PROCESS_PROTECTION_LEVEL_INFORMATION;
pub const struct__PROCESS_LEAP_SECOND_INFO = extern struct {
    Flags: ULONG,
    Reserved: ULONG,
};
pub const PROCESS_LEAP_SECOND_INFO = struct__PROCESS_LEAP_SECOND_INFO;
pub const PPROCESS_LEAP_SECOND_INFO = [*c]struct__PROCESS_LEAP_SECOND_INFO;
extern fn SetProcessInformation(hProcess: HANDLE, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: LPVOID, ProcessInformationSize: DWORD) BOOL;
extern fn GetProcessInformation(hProcess: HANDLE, ProcessInformationClass: PROCESS_INFORMATION_CLASS, ProcessInformation: LPVOID, ProcessInformationSize: DWORD) BOOL;
extern fn GetSystemCpuSetInformation(Information: PSYSTEM_CPU_SET_INFORMATION, BufferLength: ULONG, ReturnedLength: PULONG, Process: HANDLE, Flags: ULONG) BOOL;
extern fn GetProcessDefaultCpuSets(Process: HANDLE, CpuSetIds: PULONG, CpuSetIdCount: ULONG, RequiredIdCount: PULONG) BOOL;
extern fn SetProcessDefaultCpuSets(Process: HANDLE, CpuSetIds: [*c]const ULONG, CpuSetIdCount: ULONG) BOOL;
extern fn GetThreadSelectedCpuSets(Thread: HANDLE, CpuSetIds: PULONG, CpuSetIdCount: ULONG, RequiredIdCount: PULONG) BOOL;
extern fn SetThreadSelectedCpuSets(Thread: HANDLE, CpuSetIds: [*c]const ULONG, CpuSetIdCount: ULONG) BOOL;
extern fn CreateProcessAsUserA(hToken: HANDLE, lpApplicationName: LPCSTR, lpCommandLine: LPSTR, lpProcessAttributes: LPSECURITY_ATTRIBUTES, lpThreadAttributes: LPSECURITY_ATTRIBUTES, bInheritHandles: BOOL, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCSTR, lpStartupInfo: LPSTARTUPINFOA, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
extern fn GetProcessShutdownParameters(lpdwLevel: LPDWORD, lpdwFlags: LPDWORD) BOOL;
extern fn SetThreadDescription(hThread: HANDLE, lpThreadDescription: PCWSTR) HRESULT;
extern fn GetThreadDescription(hThread: HANDLE, ppszThreadDescription: [*c]PWSTR) HRESULT;
pub const struct__SYSTEM_INFO = extern struct {
    @"": extern union {
        dwOemId: DWORD,
        @"": extern struct {
            wProcessorArchitecture: WORD,
            wReserved: WORD,
        },
    },
    dwPageSize: DWORD,
    lpMinimumApplicationAddress: LPVOID,
    lpMaximumApplicationAddress: LPVOID,
    dwActiveProcessorMask: DWORD_PTR,
    dwNumberOfProcessors: DWORD,
    dwProcessorType: DWORD,
    dwAllocationGranularity: DWORD,
    wProcessorLevel: WORD,
    wProcessorRevision: WORD,
};
pub const SYSTEM_INFO = struct__SYSTEM_INFO;
pub const LPSYSTEM_INFO = [*c]struct__SYSTEM_INFO;
pub const struct__MEMORYSTATUSEX = extern struct {
    dwLength: DWORD,
    dwMemoryLoad: DWORD,
    ullTotalPhys: DWORDLONG,
    ullAvailPhys: DWORDLONG,
    ullTotalPageFile: DWORDLONG,
    ullAvailPageFile: DWORDLONG,
    ullTotalVirtual: DWORDLONG,
    ullAvailVirtual: DWORDLONG,
    ullAvailExtendedVirtual: DWORDLONG,
};
pub const MEMORYSTATUSEX = struct__MEMORYSTATUSEX;
pub const LPMEMORYSTATUSEX = [*c]struct__MEMORYSTATUSEX;
extern fn GlobalMemoryStatusEx(lpBuffer: LPMEMORYSTATUSEX) BOOL;
extern fn GetSystemInfo(lpSystemInfo: LPSYSTEM_INFO) void;
extern fn GetSystemTime(lpSystemTime: LPSYSTEMTIME) void;
extern fn GetSystemTimeAsFileTime(lpSystemTimeAsFileTime: LPFILETIME) void;
extern fn GetLocalTime(lpSystemTime: LPSYSTEMTIME) void;
extern fn GetSystemLeapSecondInformation(Enabled: PBOOL, Flags: PDWORD) BOOL;
extern fn GetVersion() DWORD;
extern fn SetLocalTime(lpSystemTime: [*c]const SYSTEMTIME) BOOL;
extern fn GetTickCount() DWORD;
extern fn GetTickCount64() ULONGLONG;
extern fn GetSystemTimeAdjustment(lpTimeAdjustment: PDWORD, lpTimeIncrement: PDWORD, lpTimeAdjustmentDisabled: PBOOL) BOOL;
extern fn GetSystemTimeAdjustmentPrecise(lpTimeAdjustment: PDWORD64, lpTimeIncrement: PDWORD64, lpTimeAdjustmentDisabled: PBOOL) BOOL;
extern fn GetSystemDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
extern fn GetSystemDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
extern fn GetWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
extern fn GetWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
extern fn GetSystemWindowsDirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
extern fn GetSystemWindowsDirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
pub const ComputerNameNetBIOS = enum__COMPUTER_NAME_FORMAT.ComputerNameNetBIOS;
pub const ComputerNameDnsHostname = enum__COMPUTER_NAME_FORMAT.ComputerNameDnsHostname;
pub const ComputerNameDnsDomain = enum__COMPUTER_NAME_FORMAT.ComputerNameDnsDomain;
pub const ComputerNameDnsFullyQualified = enum__COMPUTER_NAME_FORMAT.ComputerNameDnsFullyQualified;
pub const ComputerNamePhysicalNetBIOS = enum__COMPUTER_NAME_FORMAT.ComputerNamePhysicalNetBIOS;
pub const ComputerNamePhysicalDnsHostname = enum__COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsHostname;
pub const ComputerNamePhysicalDnsDomain = enum__COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsDomain;
pub const ComputerNamePhysicalDnsFullyQualified = enum__COMPUTER_NAME_FORMAT.ComputerNamePhysicalDnsFullyQualified;
pub const ComputerNameMax = enum__COMPUTER_NAME_FORMAT.ComputerNameMax;
pub const enum__COMPUTER_NAME_FORMAT = extern enum {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax,
};
pub const COMPUTER_NAME_FORMAT = enum__COMPUTER_NAME_FORMAT;
extern fn GetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPSTR, nSize: LPDWORD) BOOL;
extern fn GetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPWSTR, nSize: LPDWORD) BOOL;
extern fn SetComputerNameExW(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCWSTR) BOOL;
extern fn SetSystemTime(lpSystemTime: [*c]const SYSTEMTIME) BOOL;
extern fn GetVersionExA(lpVersionInformation: LPOSVERSIONINFOA) BOOL;
extern fn GetVersionExW(lpVersionInformation: LPOSVERSIONINFOW) BOOL;
extern fn GetLogicalProcessorInformation(Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ReturnedLength: PDWORD) BOOL;
extern fn GetLogicalProcessorInformationEx(RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP, Buffer: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, ReturnedLength: PDWORD) BOOL;
extern fn GetNativeSystemInfo(lpSystemInfo: LPSYSTEM_INFO) void;
extern fn GetSystemTimePreciseAsFileTime(lpSystemTimeAsFileTime: LPFILETIME) void;
extern fn GetProductInfo(dwOSMajorVersion: DWORD, dwOSMinorVersion: DWORD, dwSpMajorVersion: DWORD, dwSpMinorVersion: DWORD, pdwReturnedProductType: PDWORD) BOOL;
extern fn GetOsSafeBootMode(Flags: PDWORD) BOOL;
extern fn EnumSystemFirmwareTables(FirmwareTableProviderSignature: DWORD, pFirmwareTableEnumBuffer: PVOID, BufferSize: DWORD) UINT;
extern fn GetSystemFirmwareTable(FirmwareTableProviderSignature: DWORD, FirmwareTableID: DWORD, pFirmwareTableBuffer: PVOID, BufferSize: DWORD) UINT;
extern fn DnsHostnameToComputerNameExW(Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD) BOOL;
extern fn GetPhysicallyInstalledSystemMemory(TotalMemoryInKilobytes: PULONGLONG) BOOL;
extern fn SetComputerNameEx2W(NameType: COMPUTER_NAME_FORMAT, Flags: DWORD, lpBuffer: LPCWSTR) BOOL;
extern fn SetSystemTimeAdjustment(dwTimeAdjustment: DWORD, bTimeAdjustmentDisabled: BOOL) BOOL;
extern fn SetSystemTimeAdjustmentPrecise(dwTimeAdjustment: DWORD64, bTimeAdjustmentDisabled: BOOL) BOOL;
extern fn InstallELAMCertificateInfo(ELAMFile: HANDLE) BOOL;
extern fn GetProcessorSystemCycleTime(Group: USHORT, Buffer: PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, ReturnedLength: PDWORD) BOOL;
extern fn GetOsManufacturingMode(pbEnabled: PBOOL) BOOL;
extern fn GetIntegratedDisplaySize(sizeInInches: [*c]f64) HRESULT;
extern fn SetComputerNameA(lpComputerName: LPCSTR) BOOL;
extern fn SetComputerNameW(lpComputerName: LPCWSTR) BOOL;
extern fn SetComputerNameExA(NameType: COMPUTER_NAME_FORMAT, lpBuffer: LPCSTR) BOOL;
extern fn VirtualAlloc(lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD) LPVOID;
extern fn VirtualProtect(lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD) BOOL;
extern fn VirtualFree(lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) BOOL;
extern fn VirtualQuery(lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T) SIZE_T;
extern fn VirtualAllocEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD) LPVOID;
extern fn VirtualProtectEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flNewProtect: DWORD, lpflOldProtect: PDWORD) BOOL;
extern fn VirtualQueryEx(hProcess: HANDLE, lpAddress: LPCVOID, lpBuffer: PMEMORY_BASIC_INFORMATION, dwLength: SIZE_T) SIZE_T;
extern fn ReadProcessMemory(hProcess: HANDLE, lpBaseAddress: LPCVOID, lpBuffer: LPVOID, nSize: SIZE_T, lpNumberOfBytesRead: [*c]SIZE_T) BOOL;
extern fn WriteProcessMemory(hProcess: HANDLE, lpBaseAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, lpNumberOfBytesWritten: [*c]SIZE_T) BOOL;
extern fn CreateFileMappingW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR) HANDLE;
extern fn OpenFileMappingW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
extern fn MapViewOfFile(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T) LPVOID;
extern fn MapViewOfFileEx(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID) LPVOID;
extern fn VirtualFreeEx(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) BOOL;
extern fn FlushViewOfFile(lpBaseAddress: LPCVOID, dwNumberOfBytesToFlush: SIZE_T) BOOL;
extern fn UnmapViewOfFile(lpBaseAddress: LPCVOID) BOOL;
extern fn GetLargePageMinimum() SIZE_T;
extern fn GetProcessWorkingSetSizeEx(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T, Flags: PDWORD) BOOL;
extern fn SetProcessWorkingSetSizeEx(hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T, Flags: DWORD) BOOL;
extern fn VirtualLock(lpAddress: LPVOID, dwSize: SIZE_T) BOOL;
extern fn VirtualUnlock(lpAddress: LPVOID, dwSize: SIZE_T) BOOL;
extern fn GetWriteWatch(dwFlags: DWORD, lpBaseAddress: PVOID, dwRegionSize: SIZE_T, lpAddresses: [*c]PVOID, lpdwCount: [*c]ULONG_PTR, lpdwGranularity: LPDWORD) UINT;
extern fn ResetWriteWatch(lpBaseAddress: LPVOID, dwRegionSize: SIZE_T) UINT;
pub const LowMemoryResourceNotification = enum__MEMORY_RESOURCE_NOTIFICATION_TYPE.LowMemoryResourceNotification;
pub const HighMemoryResourceNotification = enum__MEMORY_RESOURCE_NOTIFICATION_TYPE.HighMemoryResourceNotification;
pub const enum__MEMORY_RESOURCE_NOTIFICATION_TYPE = extern enum {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification,
};
pub const MEMORY_RESOURCE_NOTIFICATION_TYPE = enum__MEMORY_RESOURCE_NOTIFICATION_TYPE;
extern fn CreateMemoryResourceNotification(NotificationType: MEMORY_RESOURCE_NOTIFICATION_TYPE) HANDLE;
extern fn QueryMemoryResourceNotification(ResourceNotificationHandle: HANDLE, ResourceState: PBOOL) BOOL;
extern fn GetSystemFileCacheSize(lpMinimumFileCacheSize: PSIZE_T, lpMaximumFileCacheSize: PSIZE_T, lpFlags: PDWORD) BOOL;
extern fn SetSystemFileCacheSize(MinimumFileCacheSize: SIZE_T, MaximumFileCacheSize: SIZE_T, Flags: DWORD) BOOL;
extern fn CreateFileMappingNumaW(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCWSTR, nndPreferred: DWORD) HANDLE;
pub const struct__WIN32_MEMORY_RANGE_ENTRY = extern struct {
    VirtualAddress: PVOID,
    NumberOfBytes: SIZE_T,
};
pub const WIN32_MEMORY_RANGE_ENTRY = struct__WIN32_MEMORY_RANGE_ENTRY;
pub const PWIN32_MEMORY_RANGE_ENTRY = [*c]struct__WIN32_MEMORY_RANGE_ENTRY;
extern fn PrefetchVirtualMemory(hProcess: HANDLE, NumberOfEntries: ULONG_PTR, VirtualAddresses: PWIN32_MEMORY_RANGE_ENTRY, Flags: ULONG) BOOL;
extern fn CreateFileMappingFromApp(hFile: HANDLE, SecurityAttributes: PSECURITY_ATTRIBUTES, PageProtection: ULONG, MaximumSize: ULONG64, Name: PCWSTR) HANDLE;
extern fn MapViewOfFileFromApp(hFileMappingObject: HANDLE, DesiredAccess: ULONG, FileOffset: ULONG64, NumberOfBytesToMap: SIZE_T) PVOID;
extern fn UnmapViewOfFileEx(BaseAddress: PVOID, UnmapFlags: ULONG) BOOL;
extern fn AllocateUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR) BOOL;
extern fn FreeUserPhysicalPages(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR) BOOL;
extern fn MapUserPhysicalPages(VirtualAddress: PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR) BOOL;
extern fn AllocateUserPhysicalPagesNuma(hProcess: HANDLE, NumberOfPages: PULONG_PTR, PageArray: PULONG_PTR, nndPreferred: DWORD) BOOL;
extern fn VirtualAllocExNuma(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD, nndPreferred: DWORD) LPVOID;
extern fn GetMemoryErrorHandlingCapabilities(Capabilities: PULONG) BOOL;
pub const BAD_MEMORY_CALLBACK_ROUTINE = fn () callconv(std.os.windows.WINAPI) void;
pub const PBAD_MEMORY_CALLBACK_ROUTINE = [*c]BAD_MEMORY_CALLBACK_ROUTINE;
extern fn RegisterBadMemoryNotification(Callback: PBAD_MEMORY_CALLBACK_ROUTINE) PVOID;
extern fn UnregisterBadMemoryNotification(RegistrationHandle: PVOID) BOOL;
pub const VmOfferPriorityVeryLow = enum_OFFER_PRIORITY.VmOfferPriorityVeryLow;
pub const VmOfferPriorityLow = enum_OFFER_PRIORITY.VmOfferPriorityLow;
pub const VmOfferPriorityBelowNormal = enum_OFFER_PRIORITY.VmOfferPriorityBelowNormal;
pub const VmOfferPriorityNormal = enum_OFFER_PRIORITY.VmOfferPriorityNormal;
pub const enum_OFFER_PRIORITY = extern enum {
    VmOfferPriorityVeryLow = 1,
    VmOfferPriorityLow = 2,
    VmOfferPriorityBelowNormal = 3,
    VmOfferPriorityNormal = 4,
};
pub const OFFER_PRIORITY = enum_OFFER_PRIORITY;
extern fn OfferVirtualMemory(VirtualAddress: PVOID, Size: SIZE_T, Priority: OFFER_PRIORITY) DWORD;
extern fn ReclaimVirtualMemory(VirtualAddress: ?*const c_void, Size: SIZE_T) DWORD;
extern fn DiscardVirtualMemory(VirtualAddress: PVOID, Size: SIZE_T) DWORD;
extern fn SetProcessValidCallTargets(hProcess: HANDLE, VirtualAddress: PVOID, RegionSize: SIZE_T, NumberOfOffsets: ULONG, OffsetInformation: PCFG_CALL_TARGET_INFO) BOOL;
extern fn SetProcessValidCallTargetsForMappedView(Process: HANDLE, VirtualAddress: PVOID, RegionSize: SIZE_T, NumberOfOffsets: ULONG, OffsetInformation: PCFG_CALL_TARGET_INFO, Section: HANDLE, ExpectedFileOffset: ULONG64) BOOL;
extern fn VirtualAllocFromApp(BaseAddress: PVOID, Size: SIZE_T, AllocationType: ULONG, Protection: ULONG) PVOID;
extern fn VirtualProtectFromApp(Address: PVOID, Size: SIZE_T, NewProtection: ULONG, OldProtection: PULONG) BOOL;
extern fn OpenFileMappingFromApp(DesiredAccess: ULONG, InheritHandle: BOOL, Name: PCWSTR) HANDLE;
pub const MemoryRegionInfo = enum_WIN32_MEMORY_INFORMATION_CLASS.MemoryRegionInfo;
pub const enum_WIN32_MEMORY_INFORMATION_CLASS = extern enum {
    MemoryRegionInfo,
};
pub const WIN32_MEMORY_INFORMATION_CLASS = enum_WIN32_MEMORY_INFORMATION_CLASS;
pub const struct_WIN32_MEMORY_REGION_INFORMATION = extern struct {
    AllocationBase: PVOID,
    AllocationProtect: ULONG,
    @"": extern union {
        Flags: ULONG,
        @"": opaque {},
    },
    RegionSize: SIZE_T,
    CommitSize: SIZE_T,
};
pub const WIN32_MEMORY_REGION_INFORMATION = struct_WIN32_MEMORY_REGION_INFORMATION;
extern fn QueryVirtualMemoryInformation(Process: HANDLE, VirtualAddress: ?*const c_void, MemoryInformationClass: WIN32_MEMORY_INFORMATION_CLASS, MemoryInformation: PVOID, MemoryInformationSize: SIZE_T, ReturnSize: PSIZE_T) BOOL;
extern fn MapViewOfFileNuma2(FileMappingHandle: HANDLE, ProcessHandle: HANDLE, Offset: ULONG64, BaseAddress: PVOID, ViewSize: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, PreferredNode: ULONG) PVOID;
pub fn MapViewOfFile2(FileMappingHandle: HANDLE, ProcessHandle: HANDLE, Offset: ULONG64, BaseAddress: PVOID, ViewSize: SIZE_T, AllocationType: ULONG, PageProtection: ULONG) PVOID {
    return MapViewOfFileNuma2(FileMappingHandle, ProcessHandle, Offset, BaseAddress, ViewSize, AllocationType, PageProtection, @as(DWORD, -1));
}
extern fn UnmapViewOfFile2(Process: HANDLE, BaseAddress: PVOID, UnmapFlags: ULONG) BOOL;
extern fn VirtualUnlockEx(Process: HANDLE, Address: LPVOID, Size: SIZE_T) BOOL;
extern fn VirtualAlloc2(Process: HANDLE, BaseAddress: PVOID, Size: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, ExtendedParameters: [*c]MEM_EXTENDED_PARAMETER, ParameterCount: ULONG) PVOID;
extern fn MapViewOfFile3(FileMapping: HANDLE, Process: HANDLE, BaseAddress: PVOID, Offset: ULONG64, ViewSize: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, ExtendedParameters: [*c]MEM_EXTENDED_PARAMETER, ParameterCount: ULONG) PVOID;
extern fn VirtualAlloc2FromApp(Process: HANDLE, BaseAddress: PVOID, Size: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, ExtendedParameters: [*c]MEM_EXTENDED_PARAMETER, ParameterCount: ULONG) PVOID;
extern fn MapViewOfFile3FromApp(FileMapping: HANDLE, Process: HANDLE, BaseAddress: PVOID, Offset: ULONG64, ViewSize: SIZE_T, AllocationType: ULONG, PageProtection: ULONG, ExtendedParameters: [*c]MEM_EXTENDED_PARAMETER, ParameterCount: ULONG) PVOID;
extern fn CreateFileMapping2(File: HANDLE, SecurityAttributes: [*c]SECURITY_ATTRIBUTES, DesiredAccess: ULONG, PageProtection: ULONG, AllocationAttributes: ULONG, MaximumSize: ULONG64, Name: PCWSTR, ExtendedParameters: [*c]MEM_EXTENDED_PARAMETER, ParameterCount: ULONG) HANDLE;
extern fn IsEnclaveTypeSupported(flEnclaveType: DWORD) BOOL;
extern fn CreateEnclave(hProcess: HANDLE, lpAddress: LPVOID, dwSize: SIZE_T, dwInitialCommitment: SIZE_T, flEnclaveType: DWORD, lpEnclaveInformation: LPCVOID, dwInfoLength: DWORD, lpEnclaveError: LPDWORD) LPVOID;
extern fn LoadEnclaveData(hProcess: HANDLE, lpAddress: LPVOID, lpBuffer: LPCVOID, nSize: SIZE_T, flProtect: DWORD, lpPageInformation: LPCVOID, dwInfoLength: DWORD, lpNumberOfBytesWritten: PSIZE_T, lpEnclaveError: LPDWORD) BOOL;
extern fn InitializeEnclave(hProcess: HANDLE, lpAddress: LPVOID, lpEnclaveInformation: LPCVOID, dwInfoLength: DWORD, lpEnclaveError: LPDWORD) BOOL;
extern fn LoadEnclaveImageA(lpEnclaveAddress: LPVOID, lpImageName: LPCSTR) BOOL;
extern fn LoadEnclaveImageW(lpEnclaveAddress: LPVOID, lpImageName: LPCWSTR) BOOL;
extern fn CallEnclave(lpRoutine: LPENCLAVE_ROUTINE, lpParameter: LPVOID, fWaitForThread: BOOL, lpReturnValue: [*c]LPVOID) BOOL;
extern fn TerminateEnclave(lpAddress: LPVOID, fWait: BOOL) BOOL;
extern fn DeleteEnclave(lpAddress: LPVOID) BOOL;
extern fn QueueUserWorkItem(Function: LPTHREAD_START_ROUTINE, Context: PVOID, Flags: ULONG) BOOL;
extern fn UnregisterWaitEx(WaitHandle: HANDLE, CompletionEvent: HANDLE) BOOL;
extern fn CreateTimerQueue() HANDLE;
extern fn CreateTimerQueueTimer(phNewTimer: PHANDLE, TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, Flags: ULONG) BOOL;
extern fn ChangeTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, DueTime: ULONG, Period: ULONG) BOOL;
extern fn DeleteTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE, CompletionEvent: HANDLE) BOOL;
extern fn DeleteTimerQueueEx(TimerQueue: HANDLE, CompletionEvent: HANDLE) BOOL;
pub const PTP_WIN32_IO_CALLBACK = ?fn (PTP_CALLBACK_INSTANCE, PVOID, PVOID, ULONG, ULONG_PTR, PTP_IO) callconv(std.os.windows.WINAPI) void;
extern fn CreateThreadpool(reserved: PVOID) PTP_POOL;
extern fn SetThreadpoolThreadMaximum(ptpp: PTP_POOL, cthrdMost: DWORD) void;
extern fn SetThreadpoolThreadMinimum(ptpp: PTP_POOL, cthrdMic: DWORD) BOOL;
extern fn SetThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION) BOOL;
extern fn QueryThreadpoolStackInformation(ptpp: PTP_POOL, ptpsi: PTP_POOL_STACK_INFORMATION) BOOL;
extern fn CloseThreadpool(ptpp: PTP_POOL) void;
extern fn CreateThreadpoolCleanupGroup() PTP_CLEANUP_GROUP;
extern fn CloseThreadpoolCleanupGroupMembers(ptpcg: PTP_CLEANUP_GROUP, fCancelPendingCallbacks: BOOL, pvCleanupContext: PVOID) void;
extern fn CloseThreadpoolCleanupGroup(ptpcg: PTP_CLEANUP_GROUP) void;
extern fn SetEventWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, evt: HANDLE) void;
extern fn ReleaseSemaphoreWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, sem: HANDLE, crel: DWORD) void;
extern fn ReleaseMutexWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mut: HANDLE) void;
extern fn LeaveCriticalSectionWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, pcs: PCRITICAL_SECTION) void;
extern fn FreeLibraryWhenCallbackReturns(pci: PTP_CALLBACK_INSTANCE, mod: HMODULE) void;
extern fn CallbackMayRunLong(pci: PTP_CALLBACK_INSTANCE) BOOL;
extern fn DisassociateCurrentThreadFromCallback(pci: PTP_CALLBACK_INSTANCE) void;
extern fn TrySubmitThreadpoolCallback(pfns: PTP_SIMPLE_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) BOOL;
extern fn CreateThreadpoolWork(pfnwk: PTP_WORK_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_WORK;
extern fn SubmitThreadpoolWork(pwk: PTP_WORK) void;
extern fn WaitForThreadpoolWorkCallbacks(pwk: PTP_WORK, fCancelPendingCallbacks: BOOL) void;
extern fn CloseThreadpoolWork(pwk: PTP_WORK) void;
extern fn CreateThreadpoolTimer(pfnti: PTP_TIMER_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_TIMER;
extern fn SetThreadpoolTimer(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD) void;
extern fn IsThreadpoolTimerSet(pti: PTP_TIMER) BOOL;
extern fn WaitForThreadpoolTimerCallbacks(pti: PTP_TIMER, fCancelPendingCallbacks: BOOL) void;
extern fn CloseThreadpoolTimer(pti: PTP_TIMER) void;
extern fn CreateThreadpoolWait(pfnwa: PTP_WAIT_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_WAIT;
extern fn SetThreadpoolWait(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME) void;
extern fn WaitForThreadpoolWaitCallbacks(pwa: PTP_WAIT, fCancelPendingCallbacks: BOOL) void;
extern fn CloseThreadpoolWait(pwa: PTP_WAIT) void;
extern fn CreateThreadpoolIo(fl: HANDLE, pfnio: PTP_WIN32_IO_CALLBACK, pv: PVOID, pcbe: PTP_CALLBACK_ENVIRON) PTP_IO;
extern fn StartThreadpoolIo(pio: PTP_IO) void;
extern fn CancelThreadpoolIo(pio: PTP_IO) void;
extern fn WaitForThreadpoolIoCallbacks(pio: PTP_IO, fCancelPendingCallbacks: BOOL) void;
extern fn CloseThreadpoolIo(pio: PTP_IO) void;
extern fn SetThreadpoolTimerEx(pti: PTP_TIMER, pftDueTime: PFILETIME, msPeriod: DWORD, msWindowLength: DWORD) BOOL;
extern fn SetThreadpoolWaitEx(pwa: PTP_WAIT, h: HANDLE, pftTimeout: PFILETIME, Reserved: PVOID) BOOL;
extern fn IsProcessInJob(ProcessHandle: HANDLE, JobHandle: HANDLE, Result: PBOOL) BOOL;
pub const struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION = extern struct {
    MaxIops: LONG64,
    MaxBandwidth: LONG64,
    ReservationIops: LONG64,
    VolumeName: PCWSTR,
    BaseIoSize: ULONG,
    ControlFlags: ULONG,
};
pub const JOBOBJECT_IO_RATE_CONTROL_INFORMATION = struct_JOBOBJECT_IO_RATE_CONTROL_INFORMATION;
extern fn CreateJobObjectW(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCWSTR) HANDLE;
extern fn FreeMemoryJobObject(Buffer: ?*c_void) void;
extern fn OpenJobObjectW(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCWSTR) HANDLE;
extern fn AssignProcessToJobObject(hJob: HANDLE, hProcess: HANDLE) BOOL;
extern fn TerminateJobObject(hJob: HANDLE, uExitCode: UINT) BOOL;
extern fn SetInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD) BOOL;
extern fn SetIoRateControlInformationJobObject(hJob: HANDLE, IoRateControlInfo: [*c]JOBOBJECT_IO_RATE_CONTROL_INFORMATION) DWORD;
extern fn QueryInformationJobObject(hJob: HANDLE, JobObjectInformationClass: JOBOBJECTINFOCLASS, lpJobObjectInformation: LPVOID, cbJobObjectInformationLength: DWORD, lpReturnLength: LPDWORD) BOOL;
extern fn QueryIoRateControlInformationJobObject(hJob: HANDLE, VolumeName: PCWSTR, InfoBlocks: [*c]([*c]JOBOBJECT_IO_RATE_CONTROL_INFORMATION), InfoBlockCount: [*c]ULONG) DWORD;
extern fn Wow64DisableWow64FsRedirection(OldValue: [*c]PVOID) BOOL;
extern fn Wow64RevertWow64FsRedirection(OlValue: PVOID) BOOL;
extern fn IsWow64Process(hProcess: HANDLE, Wow64Process: PBOOL) BOOL;
extern fn GetSystemWow64DirectoryA(lpBuffer: LPSTR, uSize: UINT) UINT;
extern fn GetSystemWow64DirectoryW(lpBuffer: LPWSTR, uSize: UINT) UINT;
extern fn Wow64SetThreadDefaultGuestMachine(Machine: USHORT) USHORT;
extern fn IsWow64Process2(hProcess: HANDLE, pProcessMachine: [*c]USHORT, pNativeMachine: [*c]USHORT) BOOL;
extern fn GetSystemWow64Directory2A(lpBuffer: LPSTR, uSize: UINT, ImageFileMachineType: WORD) UINT;
extern fn GetSystemWow64Directory2W(lpBuffer: LPWSTR, uSize: UINT, ImageFileMachineType: WORD) UINT;
extern fn IsWow64GuestMachineSupported(WowGuestMachine: USHORT, MachineIsSupported: [*c]BOOL) HRESULT;
pub const struct_tagENUMUILANG = extern struct {
    NumOfEnumUILang: ULONG,
    SizeOfEnumUIBuffer: ULONG,
    pEnumUIBuffer: [*c]LANGID,
};
pub const ENUMUILANG = struct_tagENUMUILANG;
pub const PENUMUILANG = [*c]struct_tagENUMUILANG;
pub const ENUMRESLANGPROCA = ?fn (HMODULE, LPCSTR, LPCSTR, WORD, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const ENUMRESLANGPROCW = ?fn (HMODULE, LPCWSTR, LPCWSTR, WORD, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const ENUMRESNAMEPROCA = ?fn (HMODULE, LPCSTR, LPSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const ENUMRESNAMEPROCW = ?fn (HMODULE, LPCWSTR, LPWSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const ENUMRESTYPEPROCA = ?fn (HMODULE, LPSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const ENUMRESTYPEPROCW = ?fn (HMODULE, LPWSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
extern fn DisableThreadLibraryCalls(hLibModule: HMODULE) BOOL;
extern fn FindResourceExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD) HRSRC;
extern fn FindStringOrdinal(dwFindStringOrdinalFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, bIgnoreCase: BOOL) c_int;
extern fn FreeLibrary(hLibModule: HMODULE) BOOL;
extern fn FreeLibraryAndExitThread(hLibModule: HMODULE, dwExitCode: DWORD) noreturn;
extern fn FreeResource(hResData: HGLOBAL) BOOL;
extern fn GetModuleFileNameA(hModule: HMODULE, lpFilename: LPSTR, nSize: DWORD) DWORD;
extern fn GetModuleFileNameW(hModule: HMODULE, lpFilename: LPWSTR, nSize: DWORD) DWORD;
extern fn GetModuleHandleA(lpModuleName: LPCSTR) HMODULE;
extern fn GetModuleHandleW(lpModuleName: LPCWSTR) HMODULE;
pub const PGET_MODULE_HANDLE_EXA = ?fn (DWORD, LPCSTR, [*c]HMODULE) callconv(std.os.windows.WINAPI) BOOL;
pub const PGET_MODULE_HANDLE_EXW = ?fn (DWORD, LPCWSTR, [*c]HMODULE) callconv(std.os.windows.WINAPI) BOOL;
extern fn GetModuleHandleExA(dwFlags: DWORD, lpModuleName: LPCSTR, phModule: [*c]HMODULE) BOOL;
extern fn GetModuleHandleExW(dwFlags: DWORD, lpModuleName: LPCWSTR, phModule: [*c]HMODULE) BOOL;
extern fn GetProcAddress(hModule: HMODULE, lpProcName: LPCSTR) FARPROC;
pub const struct__REDIRECTION_FUNCTION_DESCRIPTOR = extern struct {
    DllName: PCSTR,
    FunctionName: PCSTR,
    RedirectionTarget: PVOID,
};
pub const REDIRECTION_FUNCTION_DESCRIPTOR = struct__REDIRECTION_FUNCTION_DESCRIPTOR;
pub const PREDIRECTION_FUNCTION_DESCRIPTOR = [*c]struct__REDIRECTION_FUNCTION_DESCRIPTOR;
pub const PCREDIRECTION_FUNCTION_DESCRIPTOR = [*c]const REDIRECTION_FUNCTION_DESCRIPTOR;
pub const struct__REDIRECTION_DESCRIPTOR = extern struct {
    Version: ULONG,
    FunctionCount: ULONG,
    Redirections: PCREDIRECTION_FUNCTION_DESCRIPTOR,
};
pub const REDIRECTION_DESCRIPTOR = struct__REDIRECTION_DESCRIPTOR;
pub const PREDIRECTION_DESCRIPTOR = [*c]struct__REDIRECTION_DESCRIPTOR;
pub const PCREDIRECTION_DESCRIPTOR = [*c]const REDIRECTION_DESCRIPTOR;
extern fn LoadLibraryExA(lpLibFileName: LPCSTR, hFile: HANDLE, dwFlags: DWORD) HMODULE;
extern fn LoadLibraryExW(lpLibFileName: LPCWSTR, hFile: HANDLE, dwFlags: DWORD) HMODULE;
extern fn LoadResource(hModule: HMODULE, hResInfo: HRSRC) HGLOBAL;
extern fn LoadStringA(hInstance: HINSTANCE, uID: UINT, lpBuffer: LPSTR, cchBufferMax: c_int) c_int;
extern fn LoadStringW(hInstance: HINSTANCE, uID: UINT, lpBuffer: LPWSTR, cchBufferMax: c_int) c_int;
extern fn LockResource(hResData: HGLOBAL) LPVOID;
extern fn SizeofResource(hModule: HMODULE, hResInfo: HRSRC) DWORD;
pub const DLL_DIRECTORY_COOKIE = PVOID;
pub const PDLL_DIRECTORY_COOKIE = [*c]PVOID;
extern fn AddDllDirectory(NewDirectory: PCWSTR) DLL_DIRECTORY_COOKIE;
extern fn RemoveDllDirectory(Cookie: DLL_DIRECTORY_COOKIE) BOOL;
extern fn SetDefaultDllDirectories(DirectoryFlags: DWORD) BOOL;
extern fn EnumResourceLanguagesExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn EnumResourceLanguagesExW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn EnumResourceNamesExA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn EnumResourceNamesExW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn EnumResourceTypesExA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn EnumResourceTypesExW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR, dwFlags: DWORD, LangId: LANGID) BOOL;
extern fn FindResourceW(hModule: HMODULE, lpName: LPCWSTR, lpType: LPCWSTR) HRSRC;
extern fn LoadLibraryA(lpLibFileName: LPCSTR) HMODULE;
extern fn LoadLibraryW(lpLibFileName: LPCWSTR) HMODULE;
extern fn EnumResourceNamesW(hModule: HMODULE, lpType: LPCWSTR, lpEnumFunc: ENUMRESNAMEPROCW, lParam: LONG_PTR) BOOL;
extern fn AccessCheck(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL) BOOL;
extern fn AccessCheckAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByType(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccess: LPDWORD, AccessStatus: LPBOOL) BOOL;
extern fn AccessCheckByTypeResultList(pSecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, ClientToken: HANDLE, DesiredAccess: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, PrivilegeSet: PPRIVILEGE_SET, PrivilegeSetLength: LPDWORD, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD) BOOL;
extern fn AccessCheckByTypeAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByTypeResultListAndAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByTypeResultListAndAuditAlarmByHandleW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCWSTR, ObjectName: LPCWSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccessList: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AddAccessAllowedAce(pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
extern fn AddAccessAllowedAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
extern fn AddAccessAllowedObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: [*c]GUID, InheritedObjectTypeGuid: [*c]GUID, pSid: PSID) BOOL;
extern fn AddAccessDeniedAce(pAcl: PACL, dwAceRevision: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
extern fn AddAccessDeniedAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
extern fn AddAccessDeniedObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: [*c]GUID, InheritedObjectTypeGuid: [*c]GUID, pSid: PSID) BOOL;
extern fn AddAce(pAcl: PACL, dwAceRevision: DWORD, dwStartingAceIndex: DWORD, pAceList: LPVOID, nAceListLength: DWORD) BOOL;
extern fn AddAuditAccessAce(pAcl: PACL, dwAceRevision: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
extern fn AddAuditAccessAceEx(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, dwAccessMask: DWORD, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
extern fn AddAuditAccessObjectAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, ObjectTypeGuid: [*c]GUID, InheritedObjectTypeGuid: [*c]GUID, pSid: PSID, bAuditSuccess: BOOL, bAuditFailure: BOOL) BOOL;
extern fn AddMandatoryAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, MandatoryPolicy: DWORD, pLabelSid: PSID) BOOL;
extern fn AddResourceAttributeAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID, pAttributeInfo: PCLAIM_SECURITY_ATTRIBUTES_INFORMATION, pReturnLength: PDWORD) BOOL;
extern fn AddScopedPolicyIDAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AccessMask: DWORD, pSid: PSID) BOOL;
extern fn AdjustTokenGroups(TokenHandle: HANDLE, ResetToDefault: BOOL, NewState: PTOKEN_GROUPS, BufferLength: DWORD, PreviousState: PTOKEN_GROUPS, ReturnLength: PDWORD) BOOL;
extern fn AdjustTokenPrivileges(TokenHandle: HANDLE, DisableAllPrivileges: BOOL, NewState: PTOKEN_PRIVILEGES, BufferLength: DWORD, PreviousState: PTOKEN_PRIVILEGES, ReturnLength: PDWORD) BOOL;
extern fn AllocateAndInitializeSid(pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE, nSubAuthority0: DWORD, nSubAuthority1: DWORD, nSubAuthority2: DWORD, nSubAuthority3: DWORD, nSubAuthority4: DWORD, nSubAuthority5: DWORD, nSubAuthority6: DWORD, nSubAuthority7: DWORD, pSid: [*c]PSID) BOOL;
extern fn AllocateLocallyUniqueId(Luid: PLUID) BOOL;
extern fn AreAllAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) BOOL;
extern fn AreAnyAccessesGranted(GrantedAccess: DWORD, DesiredAccess: DWORD) BOOL;
extern fn CheckTokenMembership(TokenHandle: HANDLE, SidToCheck: PSID, IsMember: PBOOL) BOOL;
extern fn CheckTokenCapability(TokenHandle: HANDLE, CapabilitySidToCheck: PSID, HasCapability: PBOOL) BOOL;
extern fn GetAppContainerAce(Acl: PACL, StartingAceIndex: DWORD, AppContainerAce: [*c]PVOID, AppContainerAceIndex: [*c]DWORD) BOOL;
extern fn CheckTokenMembershipEx(TokenHandle: HANDLE, SidToCheck: PSID, Flags: DWORD, IsMember: PBOOL) BOOL;
extern fn ConvertToAutoInheritPrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CurrentSecurityDescriptor: PSECURITY_DESCRIPTOR, NewSecurityDescriptor: [*c]PSECURITY_DESCRIPTOR, ObjectType: [*c]GUID, IsDirectoryObject: BOOLEAN, GenericMapping: PGENERIC_MAPPING) BOOL;
extern fn CopySid(nDestinationSidLength: DWORD, pDestinationSid: PSID, pSourceSid: PSID) BOOL;
extern fn CreatePrivateObjectSecurity(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: [*c]PSECURITY_DESCRIPTOR, IsDirectoryObject: BOOL, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
extern fn CreatePrivateObjectSecurityEx(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: [*c]PSECURITY_DESCRIPTOR, ObjectType: [*c]GUID, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
extern fn CreatePrivateObjectSecurityWithMultipleInheritance(ParentDescriptor: PSECURITY_DESCRIPTOR, CreatorDescriptor: PSECURITY_DESCRIPTOR, NewDescriptor: [*c]PSECURITY_DESCRIPTOR, ObjectTypes: [*c]([*c]GUID), GuidCount: ULONG, IsContainerObject: BOOL, AutoInheritFlags: ULONG, Token: HANDLE, GenericMapping: PGENERIC_MAPPING) BOOL;
extern fn CreateRestrictedToken(ExistingTokenHandle: HANDLE, Flags: DWORD, DisableSidCount: DWORD, SidsToDisable: PSID_AND_ATTRIBUTES, DeletePrivilegeCount: DWORD, PrivilegesToDelete: PLUID_AND_ATTRIBUTES, RestrictedSidCount: DWORD, SidsToRestrict: PSID_AND_ATTRIBUTES, NewTokenHandle: PHANDLE) BOOL;
extern fn CreateWellKnownSid(WellKnownSidType: WELL_KNOWN_SID_TYPE, DomainSid: PSID, pSid: PSID, cbSid: [*c]DWORD) BOOL;
extern fn EqualDomainSid(pSid1: PSID, pSid2: PSID, pfEqual: [*c]BOOL) BOOL;
extern fn DeleteAce(pAcl: PACL, dwAceIndex: DWORD) BOOL;
extern fn DestroyPrivateObjectSecurity(ObjectDescriptor: [*c]PSECURITY_DESCRIPTOR) BOOL;
extern fn DuplicateToken(ExistingTokenHandle: HANDLE, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, DuplicateTokenHandle: PHANDLE) BOOL;
extern fn DuplicateTokenEx(hExistingToken: HANDLE, dwDesiredAccess: DWORD, lpTokenAttributes: LPSECURITY_ATTRIBUTES, ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL, TokenType_0: TOKEN_TYPE, phNewToken: PHANDLE) BOOL;
extern fn EqualPrefixSid(pSid1: PSID, pSid2: PSID) BOOL;
extern fn EqualSid(pSid1: PSID, pSid2: PSID) BOOL;
extern fn FindFirstFreeAce(pAcl: PACL, pAce: [*c]LPVOID) BOOL;
extern fn FreeSid(pSid: PSID) PVOID;
extern fn GetAce(pAcl: PACL, dwAceIndex: DWORD, pAce: [*c]LPVOID) BOOL;
extern fn GetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS) BOOL;
extern fn GetFileSecurityW(lpFileName: LPCWSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
extern fn GetKernelObjectSecurity(Handle: HANDLE, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
extern fn GetLengthSid(pSid: PSID) DWORD;
extern fn GetPrivateObjectSecurity(ObjectDescriptor: PSECURITY_DESCRIPTOR, SecurityInformation: SECURITY_INFORMATION, ResultantDescriptor: PSECURITY_DESCRIPTOR, DescriptorLength: DWORD, ReturnLength: PDWORD) BOOL;
extern fn GetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pControl: PSECURITY_DESCRIPTOR_CONTROL, lpdwRevision: LPDWORD) BOOL;
extern fn GetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbDaclPresent: LPBOOL, pDacl: [*c]PACL, lpbDaclDefaulted: LPBOOL) BOOL;
extern fn GetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: [*c]PSID, lpbGroupDefaulted: LPBOOL) BOOL;
extern fn GetSecurityDescriptorLength(pSecurityDescriptor: PSECURITY_DESCRIPTOR) DWORD;
extern fn GetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: [*c]PSID, lpbOwnerDefaulted: LPBOOL) BOOL;
extern fn GetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR) DWORD;
extern fn GetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpbSaclPresent: LPBOOL, pSacl: [*c]PACL, lpbSaclDefaulted: LPBOOL) BOOL;
extern fn GetSidIdentifierAuthority(pSid: PSID) PSID_IDENTIFIER_AUTHORITY;
extern fn GetSidLengthRequired(nSubAuthorityCount: UCHAR) DWORD;
extern fn GetSidSubAuthority(pSid: PSID, nSubAuthority: DWORD) PDWORD;
extern fn GetSidSubAuthorityCount(pSid: PSID) PUCHAR;
extern fn GetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD, ReturnLength: PDWORD) BOOL;
extern fn GetWindowsAccountDomainSid(pSid: PSID, pDomainSid: PSID, cbDomainSid: [*c]DWORD) BOOL;
extern fn ImpersonateAnonymousToken(ThreadHandle: HANDLE) BOOL;
extern fn ImpersonateLoggedOnUser(hToken: HANDLE) BOOL;
extern fn ImpersonateSelf(ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL) BOOL;
extern fn InitializeAcl(pAcl: PACL, nAclLength: DWORD, dwAclRevision: DWORD) BOOL;
extern fn InitializeSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR, dwRevision: DWORD) BOOL;
extern fn InitializeSid(Sid: PSID, pIdentifierAuthority: PSID_IDENTIFIER_AUTHORITY, nSubAuthorityCount: BYTE) BOOL;
extern fn IsTokenRestricted(TokenHandle: HANDLE) BOOL;
extern fn IsValidAcl(pAcl: PACL) BOOL;
extern fn IsValidSecurityDescriptor(pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
extern fn IsValidSid(pSid: PSID) BOOL;
extern fn IsWellKnownSid(pSid: PSID, WellKnownSidType: WELL_KNOWN_SID_TYPE) BOOL;
extern fn MakeAbsoluteSD(pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwAbsoluteSecurityDescriptorSize: LPDWORD, pDacl: PACL, lpdwDaclSize: LPDWORD, pSacl: PACL, lpdwSaclSize: LPDWORD, pOwner: PSID, lpdwOwnerSize: LPDWORD, pPrimaryGroup: PSID, lpdwPrimaryGroupSize: LPDWORD) BOOL;
extern fn MakeSelfRelativeSD(pAbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR, pSelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR, lpdwBufferLength: LPDWORD) BOOL;
extern fn MapGenericMask(AccessMask: PDWORD, GenericMapping: PGENERIC_MAPPING) void;
extern fn ObjectCloseAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
extern fn ObjectDeleteAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
extern fn ObjectOpenAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ObjectTypeName: LPWSTR, ObjectName: LPWSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL) BOOL;
extern fn ObjectPrivilegeAuditAlarmW(SubsystemName: LPCWSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
extern fn PrivilegeCheck(ClientToken: HANDLE, RequiredPrivileges: PPRIVILEGE_SET, pfResult: LPBOOL) BOOL;
extern fn PrivilegedServiceAuditAlarmW(SubsystemName: LPCWSTR, ServiceName: LPCWSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
extern fn QuerySecurityAccessMask(SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD) void;
extern fn RevertToSelf() BOOL;
extern fn SetAclInformation(pAcl: PACL, pAclInformation: LPVOID, nAclInformationLength: DWORD, dwAclInformationClass: ACL_INFORMATION_CLASS) BOOL;
extern fn SetFileSecurityW(lpFileName: LPCWSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
extern fn SetKernelObjectSecurity(Handle: HANDLE, SecurityInformation: SECURITY_INFORMATION, SecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
extern fn SetPrivateObjectSecurity(SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: [*c]PSECURITY_DESCRIPTOR, GenericMapping: PGENERIC_MAPPING, Token: HANDLE) BOOL;
extern fn SetPrivateObjectSecurityEx(SecurityInformation: SECURITY_INFORMATION, ModificationDescriptor: PSECURITY_DESCRIPTOR, ObjectsSecurityDescriptor: [*c]PSECURITY_DESCRIPTOR, AutoInheritFlags: ULONG, GenericMapping: PGENERIC_MAPPING, Token: HANDLE) BOOL;
extern fn SetSecurityAccessMask(SecurityInformation: SECURITY_INFORMATION, DesiredAccess: LPDWORD) void;
extern fn SetSecurityDescriptorControl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, ControlBitsOfInterest: SECURITY_DESCRIPTOR_CONTROL, ControlBitsToSet: SECURITY_DESCRIPTOR_CONTROL) BOOL;
extern fn SetSecurityDescriptorDacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bDaclPresent: BOOL, pDacl: PACL, bDaclDefaulted: BOOL) BOOL;
extern fn SetSecurityDescriptorGroup(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pGroup: PSID, bGroupDefaulted: BOOL) BOOL;
extern fn SetSecurityDescriptorOwner(pSecurityDescriptor: PSECURITY_DESCRIPTOR, pOwner: PSID, bOwnerDefaulted: BOOL) BOOL;
extern fn SetSecurityDescriptorRMControl(SecurityDescriptor: PSECURITY_DESCRIPTOR, RMControl: PUCHAR) DWORD;
extern fn SetSecurityDescriptorSacl(pSecurityDescriptor: PSECURITY_DESCRIPTOR, bSaclPresent: BOOL, pSacl: PACL, bSaclDefaulted: BOOL) BOOL;
extern fn SetTokenInformation(TokenHandle: HANDLE, TokenInformationClass: TOKEN_INFORMATION_CLASS, TokenInformation: LPVOID, TokenInformationLength: DWORD) BOOL;
extern fn SetCachedSigningLevel(SourceFiles: PHANDLE, SourceFileCount: ULONG, Flags: ULONG, TargetFile: HANDLE) BOOL;
extern fn GetCachedSigningLevel(File: HANDLE, Flags: PULONG, SigningLevel: PULONG, Thumbprint: PUCHAR, ThumbprintSize: PULONG, ThumbprintAlgorithm: PULONG) BOOL;
extern fn CveEventWrite(CveId: PCWSTR, AdditionalDetails: PCWSTR) LONG;
extern fn DeriveCapabilitySidsFromName(CapName: LPCWSTR, CapabilityGroupSids: [*c]([*c]PSID), CapabilityGroupSidCount: [*c]DWORD, CapabilitySids: [*c]([*c]PSID), CapabilitySidCount: [*c]DWORD) BOOL;
extern fn CreatePrivateNamespaceW(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR) HANDLE;
extern fn OpenPrivateNamespaceW(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCWSTR) HANDLE;
extern fn ClosePrivateNamespace(Handle: HANDLE, Flags: ULONG) BOOLEAN;
extern fn CreateBoundaryDescriptorW(Name: LPCWSTR, Flags: ULONG) HANDLE;
extern fn AddSIDToBoundaryDescriptor(BoundaryDescriptor: [*c]HANDLE, RequiredSid: PSID) BOOL;
extern fn DeleteBoundaryDescriptor(BoundaryDescriptor: HANDLE) void;
extern fn GetNumaHighestNodeNumber(HighestNodeNumber: PULONG) BOOL;
extern fn GetNumaNodeProcessorMaskEx(Node: USHORT, ProcessorMask: PGROUP_AFFINITY) BOOL;
extern fn GetNumaProximityNodeEx(ProximityId: ULONG, NodeNumber: PUSHORT) BOOL;
extern fn GetProcessGroupAffinity(hProcess: HANDLE, GroupCount: PUSHORT, GroupArray: PUSHORT) BOOL;
extern fn GetThreadGroupAffinity(hThread: HANDLE, GroupAffinity: PGROUP_AFFINITY) BOOL;
extern fn SetThreadGroupAffinity(hThread: HANDLE, GroupAffinity: [*c]const GROUP_AFFINITY, PreviousGroupAffinity: PGROUP_AFFINITY) BOOL;
extern fn GetAppContainerNamedObjectPath(Token: HANDLE, AppContainerSid: PSID, ObjectPathLength: ULONG, ObjectPath: LPWSTR, ReturnLength: PULONG) BOOL;
extern fn QueryThreadCycleTime(ThreadHandle: HANDLE, CycleTime: PULONG64) BOOL;
extern fn QueryProcessCycleTime(ProcessHandle: HANDLE, CycleTime: PULONG64) BOOL;
extern fn QueryIdleProcessorCycleTime(BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64) BOOL;
extern fn QueryIdleProcessorCycleTimeEx(Group: USHORT, BufferLength: PULONG, ProcessorIdleCycleTime: PULONG64) BOOL;
extern fn QueryInterruptTimePrecise(lpInterruptTimePrecise: PULONGLONG) void;
extern fn QueryUnbiasedInterruptTimePrecise(lpUnbiasedInterruptTimePrecise: PULONGLONG) void;
extern fn QueryInterruptTime(lpInterruptTime: PULONGLONG) void;
extern fn QueryUnbiasedInterruptTime(UnbiasedTime: PULONGLONG) BOOL;
extern fn QueryAuxiliaryCounterFrequency(lpAuxiliaryCounterFrequency: PULONGLONG) HRESULT;
extern fn ConvertAuxiliaryCounterToPerformanceCounter(ullAuxiliaryCounterValue: ULONGLONG, lpPerformanceCounterValue: PULONGLONG, lpConversionError: PULONGLONG) HRESULT;
extern fn ConvertPerformanceCounterToAuxiliaryCounter(ullPerformanceCounterValue: ULONGLONG, lpAuxiliaryCounterValue: PULONGLONG, lpConversionError: PULONGLONG) HRESULT;
pub const PFIBER_START_ROUTINE = ?fn (LPVOID) callconv(std.os.windows.WINAPI) void;
pub const LPFIBER_START_ROUTINE = PFIBER_START_ROUTINE;
pub const PFIBER_CALLOUT_ROUTINE = ?fn (LPVOID) callconv(std.os.windows.WINAPI) LPVOID;
pub const LPLDT_ENTRY = LPVOID;
pub const struct__COMMPROP = extern struct {
    wPacketLength: WORD,
    wPacketVersion: WORD,
    dwServiceMask: DWORD,
    dwReserved1: DWORD,
    dwMaxTxQueue: DWORD,
    dwMaxRxQueue: DWORD,
    dwMaxBaud: DWORD,
    dwProvSubType: DWORD,
    dwProvCapabilities: DWORD,
    dwSettableParams: DWORD,
    dwSettableBaud: DWORD,
    wSettableData: WORD,
    wSettableStopParity: WORD,
    dwCurrentTxQueue: DWORD,
    dwCurrentRxQueue: DWORD,
    dwProvSpec1: DWORD,
    dwProvSpec2: DWORD,
    wcProvChar: [1]WCHAR,
};
pub const COMMPROP = struct__COMMPROP;
pub const LPCOMMPROP = [*c]struct__COMMPROP;
pub const struct__COMSTAT = opaque {};
pub const COMSTAT = struct__COMSTAT;
pub const LPCOMSTAT = ?*struct__COMSTAT;
pub const struct__DCB = opaque {};
pub const DCB = struct__DCB;
pub const LPDCB = ?*struct__DCB;
pub const struct__COMMTIMEOUTS = extern struct {
    ReadIntervalTimeout: DWORD,
    ReadTotalTimeoutMultiplier: DWORD,
    ReadTotalTimeoutConstant: DWORD,
    WriteTotalTimeoutMultiplier: DWORD,
    WriteTotalTimeoutConstant: DWORD,
};
pub const COMMTIMEOUTS = struct__COMMTIMEOUTS;
pub const LPCOMMTIMEOUTS = [*c]struct__COMMTIMEOUTS;
pub const struct__COMMCONFIG = extern struct {
    dwSize: DWORD,
    wVersion: WORD,
    wReserved: WORD,
    dcb: DCB,
    dwProviderSubType: DWORD,
    dwProviderOffset: DWORD,
    dwProviderSize: DWORD,
    wcProviderData: [1]WCHAR,
};
pub const COMMCONFIG = struct__COMMCONFIG;
pub const LPCOMMCONFIG = [*c]struct__COMMCONFIG;
pub const struct__MEMORYSTATUS = extern struct {
    dwLength: DWORD,
    dwMemoryLoad: DWORD,
    dwTotalPhys: SIZE_T,
    dwAvailPhys: SIZE_T,
    dwTotalPageFile: SIZE_T,
    dwAvailPageFile: SIZE_T,
    dwTotalVirtual: SIZE_T,
    dwAvailVirtual: SIZE_T,
};
pub const MEMORYSTATUS = struct__MEMORYSTATUS;
pub const LPMEMORYSTATUS = [*c]struct__MEMORYSTATUS;
pub const struct__JIT_DEBUG_INFO = extern struct {
    dwSize: DWORD,
    dwProcessorArchitecture: DWORD,
    dwThreadID: DWORD,
    dwReserved0: DWORD,
    lpExceptionAddress: ULONG64,
    lpExceptionRecord: ULONG64,
    lpContextRecord: ULONG64,
};
pub const JIT_DEBUG_INFO = struct__JIT_DEBUG_INFO;
pub const LPJIT_DEBUG_INFO = [*c]struct__JIT_DEBUG_INFO;
pub const JIT_DEBUG_INFO32 = JIT_DEBUG_INFO;
pub const LPJIT_DEBUG_INFO32 = [*c]JIT_DEBUG_INFO;
pub const JIT_DEBUG_INFO64 = JIT_DEBUG_INFO;
pub const LPJIT_DEBUG_INFO64 = [*c]JIT_DEBUG_INFO;
pub const LPEXCEPTION_RECORD = PEXCEPTION_RECORD;
pub const LPEXCEPTION_POINTERS = PEXCEPTION_POINTERS;
pub const struct__OFSTRUCT = extern struct {
    cBytes: BYTE,
    fFixedDisk: BYTE,
    nErrCode: WORD,
    Reserved1: WORD,
    Reserved2: WORD,
    szPathName: [128]CHAR,
};
pub const OFSTRUCT = struct__OFSTRUCT;
pub const LPOFSTRUCT = [*c]struct__OFSTRUCT;
pub const POFSTRUCT = [*c]struct__OFSTRUCT;
extern fn WinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPSTR, nShowCmd: c_int) c_int;
extern fn wWinMain(hInstance: HINSTANCE, hPrevInstance: HINSTANCE, lpCmdLine: LPWSTR, nShowCmd: c_int) c_int;
extern fn GlobalAlloc(uFlags: UINT, dwBytes: SIZE_T) HGLOBAL;
extern fn GlobalReAlloc(hMem: HGLOBAL, dwBytes: SIZE_T, uFlags: UINT) HGLOBAL;
extern fn GlobalSize(hMem: HGLOBAL) SIZE_T;
extern fn GlobalUnlock(hMem: HGLOBAL) BOOL;
extern fn GlobalLock(hMem: HGLOBAL) LPVOID;
extern fn GlobalFlags(hMem: HGLOBAL) UINT;
extern fn GlobalHandle(pMem: LPCVOID) HGLOBAL;
extern fn GlobalFree(hMem: HGLOBAL) HGLOBAL;
extern fn GlobalCompact(dwMinFree: DWORD) SIZE_T;
extern fn GlobalFix(hMem: HGLOBAL) void;
extern fn GlobalUnfix(hMem: HGLOBAL) void;
extern fn GlobalWire(hMem: HGLOBAL) LPVOID;
extern fn GlobalUnWire(hMem: HGLOBAL) BOOL;
extern fn GlobalMemoryStatus(lpBuffer: LPMEMORYSTATUS) void;
extern fn LocalAlloc(uFlags: UINT, uBytes: SIZE_T) HLOCAL;
extern fn LocalReAlloc(hMem: HLOCAL, uBytes: SIZE_T, uFlags: UINT) HLOCAL;
extern fn LocalLock(hMem: HLOCAL) LPVOID;
extern fn LocalHandle(pMem: LPCVOID) HLOCAL;
extern fn LocalUnlock(hMem: HLOCAL) BOOL;
extern fn LocalSize(hMem: HLOCAL) SIZE_T;
extern fn LocalFlags(hMem: HLOCAL) UINT;
extern fn LocalFree(hMem: HLOCAL) HLOCAL;
extern fn LocalShrink(hMem: HLOCAL, cbNewSize: UINT) SIZE_T;
extern fn LocalCompact(uMinFree: UINT) SIZE_T;
extern fn GetBinaryTypeA(lpApplicationName: LPCSTR, lpBinaryType: LPDWORD) BOOL;
extern fn GetBinaryTypeW(lpApplicationName: LPCWSTR, lpBinaryType: LPDWORD) BOOL;
extern fn GetShortPathNameA(lpszLongPath: LPCSTR, lpszShortPath: LPSTR, cchBuffer: DWORD) DWORD;
extern fn GetLongPathNameTransactedA(lpszShortPath: LPCSTR, lpszLongPath: LPSTR, cchBuffer: DWORD, hTransaction: HANDLE) DWORD;
extern fn GetLongPathNameTransactedW(lpszShortPath: LPCWSTR, lpszLongPath: LPWSTR, cchBuffer: DWORD, hTransaction: HANDLE) DWORD;
extern fn GetProcessAffinityMask(hProcess: HANDLE, lpProcessAffinityMask: PDWORD_PTR, lpSystemAffinityMask: PDWORD_PTR) BOOL;
extern fn SetProcessAffinityMask(hProcess: HANDLE, dwProcessAffinityMask: DWORD_PTR) BOOL;
extern fn GetProcessIoCounters(hProcess: HANDLE, lpIoCounters: PIO_COUNTERS) BOOL;
extern fn GetProcessWorkingSetSize(hProcess: HANDLE, lpMinimumWorkingSetSize: PSIZE_T, lpMaximumWorkingSetSize: PSIZE_T) BOOL;
extern fn SetProcessWorkingSetSize(hProcess: HANDLE, dwMinimumWorkingSetSize: SIZE_T, dwMaximumWorkingSetSize: SIZE_T) BOOL;
extern fn FatalExit(ExitCode: c_int) void;
extern fn SetEnvironmentStringsA(NewEnvironment: LPCH) BOOL;
extern fn SwitchToFiber(lpFiber: LPVOID) void;
extern fn DeleteFiber(lpFiber: LPVOID) void;
extern fn ConvertFiberToThread() BOOL;
extern fn CreateFiberEx(dwStackCommitSize: SIZE_T, dwStackReserveSize: SIZE_T, dwFlags: DWORD, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID) LPVOID;
extern fn ConvertThreadToFiberEx(lpParameter: LPVOID, dwFlags: DWORD) LPVOID;
extern fn CreateFiber(dwStackSize: SIZE_T, lpStartAddress: LPFIBER_START_ROUTINE, lpParameter: LPVOID) LPVOID;
extern fn ConvertThreadToFiber(lpParameter: LPVOID) LPVOID;
pub const PUMS_CONTEXT = ?*c_void;
pub const PUMS_COMPLETION_LIST = ?*c_void;
pub const UMS_THREAD_INFO_CLASS = enum__RTL_UMS_THREAD_INFO_CLASS;
pub const PUMS_THREAD_INFO_CLASS = [*c]enum__RTL_UMS_THREAD_INFO_CLASS;
pub const UMS_SCHEDULER_REASON = enum__RTL_UMS_SCHEDULER_REASON;
pub const PUMS_SCHEDULER_ENTRY_POINT = PRTL_UMS_SCHEDULER_ENTRY_POINT;
pub const struct__UMS_SCHEDULER_STARTUP_INFO = extern struct {
    UmsVersion: ULONG,
    CompletionList: PUMS_COMPLETION_LIST,
    SchedulerProc: PUMS_SCHEDULER_ENTRY_POINT,
    SchedulerParam: PVOID,
};
pub const UMS_SCHEDULER_STARTUP_INFO = struct__UMS_SCHEDULER_STARTUP_INFO;
pub const PUMS_SCHEDULER_STARTUP_INFO = [*c]struct__UMS_SCHEDULER_STARTUP_INFO;
pub const struct__UMS_SYSTEM_THREAD_INFORMATION = extern struct {
    UmsVersion: ULONG,
    @"": extern union {
        @"": opaque {},
        ThreadUmsFlags: ULONG,
    },
};
pub const UMS_SYSTEM_THREAD_INFORMATION = struct__UMS_SYSTEM_THREAD_INFORMATION;
pub const PUMS_SYSTEM_THREAD_INFORMATION = [*c]struct__UMS_SYSTEM_THREAD_INFORMATION;
extern fn CreateUmsCompletionList(UmsCompletionList: [*c]PUMS_COMPLETION_LIST) BOOL;
extern fn DequeueUmsCompletionListItems(UmsCompletionList: PUMS_COMPLETION_LIST, WaitTimeOut: DWORD, UmsThreadList: [*c]PUMS_CONTEXT) BOOL;
extern fn GetUmsCompletionListEvent(UmsCompletionList: PUMS_COMPLETION_LIST, UmsCompletionEvent: PHANDLE) BOOL;
extern fn ExecuteUmsThread(UmsThread: PUMS_CONTEXT) BOOL;
extern fn UmsThreadYield(SchedulerParam: PVOID) BOOL;
extern fn DeleteUmsCompletionList(UmsCompletionList: PUMS_COMPLETION_LIST) BOOL;
extern fn GetCurrentUmsThread() PUMS_CONTEXT;
extern fn GetNextUmsListItem(UmsContext: PUMS_CONTEXT) PUMS_CONTEXT;
extern fn QueryUmsThreadInformation(UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG, ReturnLength: PULONG) BOOL;
extern fn SetUmsThreadInformation(UmsThread: PUMS_CONTEXT, UmsThreadInfoClass: UMS_THREAD_INFO_CLASS, UmsThreadInformation: PVOID, UmsThreadInformationLength: ULONG) BOOL;
extern fn DeleteUmsThreadContext(UmsThread: PUMS_CONTEXT) BOOL;
extern fn CreateUmsThreadContext(lpUmsThread: [*c]PUMS_CONTEXT) BOOL;
extern fn EnterUmsSchedulingMode(SchedulerStartupInfo: PUMS_SCHEDULER_STARTUP_INFO) BOOL;
extern fn GetUmsSystemThreadInformation(ThreadHandle: HANDLE, SystemThreadInfo: PUMS_SYSTEM_THREAD_INFORMATION) BOOL;
extern fn SetThreadAffinityMask(hThread: HANDLE, dwThreadAffinityMask: DWORD_PTR) DWORD_PTR;
extern fn SetProcessDEPPolicy(dwFlags: DWORD) BOOL;
extern fn GetProcessDEPPolicy(hProcess: HANDLE, lpFlags: LPDWORD, lpPermanent: PBOOL) BOOL;
extern fn RequestWakeupLatency(latency: LATENCY_TIME) BOOL;
extern fn IsSystemResumeAutomatic() BOOL;
extern fn GetThreadSelectorEntry(hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: LPLDT_ENTRY) BOOL;
extern fn SetThreadExecutionState(esFlags: EXECUTION_STATE) EXECUTION_STATE;
pub const POWER_REQUEST_CONTEXT = REASON_CONTEXT;
pub const PPOWER_REQUEST_CONTEXT = [*c]REASON_CONTEXT;
pub const LPPOWER_REQUEST_CONTEXT = [*c]REASON_CONTEXT;
extern fn PowerCreateRequest(Context: PREASON_CONTEXT) HANDLE;
extern fn PowerSetRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) BOOL;
extern fn PowerClearRequest(PowerRequest: HANDLE, RequestType: POWER_REQUEST_TYPE) BOOL;
extern fn SetFileCompletionNotificationModes(FileHandle: HANDLE, Flags: UCHAR) BOOL;
extern fn Wow64GetThreadContext(hThread: HANDLE, lpContext: PWOW64_CONTEXT) BOOL;
extern fn Wow64SetThreadContext(hThread: HANDLE, lpContext: [*c]const WOW64_CONTEXT) BOOL;
extern fn Wow64GetThreadSelectorEntry(hThread: HANDLE, dwSelector: DWORD, lpSelectorEntry: PWOW64_LDT_ENTRY) BOOL;
extern fn Wow64SuspendThread(hThread: HANDLE) DWORD;
extern fn DebugSetProcessKillOnExit(KillOnExit: BOOL) BOOL;
extern fn DebugBreakProcess(Process: HANDLE) BOOL;
extern fn PulseEvent(hEvent: HANDLE) BOOL;
extern fn GlobalDeleteAtom(nAtom: ATOM) ATOM;
extern fn InitAtomTable(nSize: DWORD) BOOL;
extern fn DeleteAtom(nAtom: ATOM) ATOM;
extern fn SetHandleCount(uNumber: UINT) UINT;
extern fn RequestDeviceWakeup(hDevice: HANDLE) BOOL;
extern fn CancelDeviceWakeupRequest(hDevice: HANDLE) BOOL;
extern fn GetDevicePowerState(hDevice: HANDLE, pfOn: [*c]BOOL) BOOL;
extern fn SetMessageWaitingIndicator(hMsgIndicator: HANDLE, ulMsgCount: ULONG) BOOL;
extern fn SetFileShortNameA(hFile: HANDLE, lpShortName: LPCSTR) BOOL;
extern fn SetFileShortNameW(hFile: HANDLE, lpShortName: LPCWSTR) BOOL;
extern fn LoadModule(lpModuleName: LPCSTR, lpParameterBlock: LPVOID) DWORD;
extern fn WinExec(lpCmdLine: LPCSTR, uCmdShow: UINT) UINT;
extern fn ClearCommBreak(hFile: HANDLE) BOOL;
extern fn ClearCommError(hFile: HANDLE, lpErrors: LPDWORD, lpStat: LPCOMSTAT) BOOL;
extern fn SetupComm(hFile: HANDLE, dwInQueue: DWORD, dwOutQueue: DWORD) BOOL;
extern fn EscapeCommFunction(hFile: HANDLE, dwFunc: DWORD) BOOL;
extern fn GetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
extern fn GetCommMask(hFile: HANDLE, lpEvtMask: LPDWORD) BOOL;
extern fn GetCommProperties(hFile: HANDLE, lpCommProp: LPCOMMPROP) BOOL;
extern fn GetCommModemStatus(hFile: HANDLE, lpModemStat: LPDWORD) BOOL;
extern fn GetCommState(hFile: HANDLE, lpDCB: LPDCB) BOOL;
extern fn GetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
extern fn PurgeComm(hFile: HANDLE, dwFlags: DWORD) BOOL;
extern fn SetCommBreak(hFile: HANDLE) BOOL;
extern fn SetCommConfig(hCommDev: HANDLE, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
extern fn SetCommMask(hFile: HANDLE, dwEvtMask: DWORD) BOOL;
extern fn SetCommState(hFile: HANDLE, lpDCB: LPDCB) BOOL;
extern fn SetCommTimeouts(hFile: HANDLE, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
extern fn TransmitCommChar(hFile: HANDLE, cChar: u8) BOOL;
extern fn WaitCommEvent(hFile: HANDLE, lpEvtMask: LPDWORD, lpOverlapped: LPOVERLAPPED) BOOL;
extern fn OpenCommPort(uPortNumber: ULONG, dwDesiredAccess: DWORD, dwFlagsAndAttributes: DWORD) HANDLE;
extern fn GetCommPorts(lpPortNumbers: PULONG, uPortNumbersCount: ULONG, puPortNumbersFound: PULONG) ULONG;
extern fn SetTapePosition(hDevice: HANDLE, dwPositionMethod: DWORD, dwPartition: DWORD, dwOffsetLow: DWORD, dwOffsetHigh: DWORD, bImmediate: BOOL) DWORD;
extern fn GetTapePosition(hDevice: HANDLE, dwPositionType: DWORD, lpdwPartition: LPDWORD, lpdwOffsetLow: LPDWORD, lpdwOffsetHigh: LPDWORD) DWORD;
extern fn PrepareTape(hDevice: HANDLE, dwOperation: DWORD, bImmediate: BOOL) DWORD;
extern fn EraseTape(hDevice: HANDLE, dwEraseType: DWORD, bImmediate: BOOL) DWORD;
extern fn CreateTapePartition(hDevice: HANDLE, dwPartitionMethod: DWORD, dwCount: DWORD, dwSize: DWORD) DWORD;
extern fn WriteTapemark(hDevice: HANDLE, dwTapemarkType: DWORD, dwTapemarkCount: DWORD, bImmediate: BOOL) DWORD;
extern fn GetTapeStatus(hDevice: HANDLE) DWORD;
extern fn GetTapeParameters(hDevice: HANDLE, dwOperation: DWORD, lpdwSize: LPDWORD, lpTapeInformation: LPVOID) DWORD;
extern fn SetTapeParameters(hDevice: HANDLE, dwOperation: DWORD, lpTapeInformation: LPVOID) DWORD;
extern fn MulDiv(nNumber: c_int, nNumerator: c_int, nDenominator: c_int) c_int;
pub const DEPPolicyAlwaysOff = enum__DEP_SYSTEM_POLICY_TYPE.DEPPolicyAlwaysOff;
pub const DEPPolicyAlwaysOn = enum__DEP_SYSTEM_POLICY_TYPE.DEPPolicyAlwaysOn;
pub const DEPPolicyOptIn = enum__DEP_SYSTEM_POLICY_TYPE.DEPPolicyOptIn;
pub const DEPPolicyOptOut = enum__DEP_SYSTEM_POLICY_TYPE.DEPPolicyOptOut;
pub const DEPTotalPolicyCount = enum__DEP_SYSTEM_POLICY_TYPE.DEPTotalPolicyCount;
pub const enum__DEP_SYSTEM_POLICY_TYPE = extern enum {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn = 1,
    DEPPolicyOptIn = 2,
    DEPPolicyOptOut = 3,
    DEPTotalPolicyCount = 4,
};
pub const DEP_SYSTEM_POLICY_TYPE = enum__DEP_SYSTEM_POLICY_TYPE;
extern fn GetSystemDEPPolicy() DEP_SYSTEM_POLICY_TYPE;
extern fn GetSystemRegistryQuota(pdwQuotaAllowed: PDWORD, pdwQuotaUsed: PDWORD) BOOL;
extern fn FileTimeToDosDateTime(lpFileTime: [*c]const FILETIME, lpFatDate: LPWORD, lpFatTime: LPWORD) BOOL;
extern fn DosDateTimeToFileTime(wFatDate: WORD, wFatTime: WORD, lpFileTime: LPFILETIME) BOOL;
extern fn FormatMessageA(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPSTR, nSize: DWORD, Arguments: [*c]va_list) DWORD;
extern fn FormatMessageW(dwFlags: DWORD, lpSource: LPCVOID, dwMessageId: DWORD, dwLanguageId: DWORD, lpBuffer: LPWSTR, nSize: DWORD, Arguments: [*c]va_list) DWORD;
extern fn CreateMailslotA(lpName: LPCSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
extern fn CreateMailslotW(lpName: LPCWSTR, nMaxMessageSize: DWORD, lReadTimeout: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
extern fn GetMailslotInfo(hMailslot: HANDLE, lpMaxMessageSize: LPDWORD, lpNextSize: LPDWORD, lpMessageCount: LPDWORD, lpReadTimeout: LPDWORD) BOOL;
extern fn SetMailslotInfo(hMailslot: HANDLE, lReadTimeout: DWORD) BOOL;
extern fn EncryptFileA(lpFileName: LPCSTR) BOOL;
extern fn EncryptFileW(lpFileName: LPCWSTR) BOOL;
extern fn DecryptFileA(lpFileName: LPCSTR, dwReserved: DWORD) BOOL;
extern fn DecryptFileW(lpFileName: LPCWSTR, dwReserved: DWORD) BOOL;
extern fn FileEncryptionStatusA(lpFileName: LPCSTR, lpStatus: LPDWORD) BOOL;
extern fn FileEncryptionStatusW(lpFileName: LPCWSTR, lpStatus: LPDWORD) BOOL;
pub const PFE_EXPORT_FUNC = ?fn (PBYTE, PVOID, ULONG) callconv(std.os.windows.WINAPI) DWORD;
pub const PFE_IMPORT_FUNC = ?fn (PBYTE, PVOID, PULONG) callconv(std.os.windows.WINAPI) DWORD;
extern fn OpenEncryptedFileRawA(lpFileName: LPCSTR, ulFlags: ULONG, pvContext: [*c]PVOID) DWORD;
extern fn OpenEncryptedFileRawW(lpFileName: LPCWSTR, ulFlags: ULONG, pvContext: [*c]PVOID) DWORD;
extern fn ReadEncryptedFileRaw(pfExportCallback: PFE_EXPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID) DWORD;
extern fn WriteEncryptedFileRaw(pfImportCallback: PFE_IMPORT_FUNC, pvCallbackContext: PVOID, pvContext: PVOID) DWORD;
extern fn CloseEncryptedFileRaw(pvContext: PVOID) void;
extern fn lstrcmpA(lpString1: LPCSTR, lpString2: LPCSTR) c_int;
extern fn lstrcmpW(lpString1: LPCWSTR, lpString2: LPCWSTR) c_int;
extern fn lstrcmpiA(lpString1: LPCSTR, lpString2: LPCSTR) c_int;
extern fn lstrcmpiW(lpString1: LPCWSTR, lpString2: LPCWSTR) c_int;
extern fn lstrcpynA(lpString1: LPSTR, lpString2: LPCSTR, iMaxLength: c_int) LPSTR;
extern fn lstrcpynW(lpString1: LPWSTR, lpString2: LPCWSTR, iMaxLength: c_int) LPWSTR;
extern fn lstrcpyA(lpString1: LPSTR, lpString2: LPCSTR) LPSTR;
extern fn lstrcpyW(lpString1: LPWSTR, lpString2: LPCWSTR) LPWSTR;
extern fn lstrcatA(lpString1: LPSTR, lpString2: LPCSTR) LPSTR;
extern fn lstrcatW(lpString1: LPWSTR, lpString2: LPCWSTR) LPWSTR;
extern fn lstrlenA(lpString: LPCSTR) c_int;
extern fn lstrlenW(lpString: LPCWSTR) c_int;
extern fn OpenFile(lpFileName: LPCSTR, lpReOpenBuff: LPOFSTRUCT, uStyle: UINT) HFILE;
extern fn _lopen(lpPathName: LPCSTR, iReadWrite: c_int) HFILE;
extern fn _lcreat(lpPathName: LPCSTR, iAttribute: c_int) HFILE;
extern fn _lread(hFile: HFILE, lpBuffer: LPVOID, uBytes: UINT) UINT;
extern fn _lwrite(hFile: HFILE, lpBuffer: LPCCH, uBytes: UINT) UINT;
extern fn _hread(hFile: HFILE, lpBuffer: LPVOID, lBytes: c_long) c_long;
extern fn _hwrite(hFile: HFILE, lpBuffer: LPCCH, lBytes: c_long) c_long;
extern fn _lclose(hFile: HFILE) HFILE;
extern fn _llseek(hFile: HFILE, lOffset: LONG, iOrigin: c_int) LONG;
extern fn IsTextUnicode(lpv: ?*const c_void, iSize: c_int, lpiResult: LPINT) BOOL;
extern fn BackupRead(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: [*c]LPVOID) BOOL;
extern fn BackupSeek(hFile: HANDLE, dwLowBytesToSeek: DWORD, dwHighBytesToSeek: DWORD, lpdwLowByteSeeked: LPDWORD, lpdwHighByteSeeked: LPDWORD, lpContext: [*c]LPVOID) BOOL;
extern fn BackupWrite(hFile: HANDLE, lpBuffer: LPBYTE, nNumberOfBytesToWrite: DWORD, lpNumberOfBytesWritten: LPDWORD, bAbort: BOOL, bProcessSecurity: BOOL, lpContext: [*c]LPVOID) BOOL;
pub const struct__WIN32_STREAM_ID = extern struct {
    dwStreamId: DWORD,
    dwStreamAttributes: DWORD,
    Size: LARGE_INTEGER,
    dwStreamNameSize: DWORD,
    cStreamName: [1]WCHAR,
};
pub const WIN32_STREAM_ID = struct__WIN32_STREAM_ID;
pub const LPWIN32_STREAM_ID = [*c]struct__WIN32_STREAM_ID;
pub const struct__STARTUPINFOEXA = extern struct {
    StartupInfo: STARTUPINFOA,
    lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
};
pub const STARTUPINFOEXA = struct__STARTUPINFOEXA;
pub const LPSTARTUPINFOEXA = [*c]struct__STARTUPINFOEXA;
pub const struct__STARTUPINFOEXW = extern struct {
    StartupInfo: STARTUPINFOW,
    lpAttributeList: LPPROC_THREAD_ATTRIBUTE_LIST,
};
pub const STARTUPINFOEXW = struct__STARTUPINFOEXW;
pub const LPSTARTUPINFOEXW = [*c]struct__STARTUPINFOEXW;
pub const STARTUPINFOEX = STARTUPINFOEXA;
pub const LPSTARTUPINFOEX = LPSTARTUPINFOEXA;
extern fn OpenMutexA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
extern fn CreateSemaphoreA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR) HANDLE;
extern fn OpenSemaphoreA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
extern fn CreateWaitableTimerA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, bManualReset: BOOL, lpTimerName: LPCSTR) HANDLE;
extern fn OpenWaitableTimerA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpTimerName: LPCSTR) HANDLE;
extern fn CreateSemaphoreExA(lpSemaphoreAttributes: LPSECURITY_ATTRIBUTES, lInitialCount: LONG, lMaximumCount: LONG, lpName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateWaitableTimerExA(lpTimerAttributes: LPSECURITY_ATTRIBUTES, lpTimerName: LPCSTR, dwFlags: DWORD, dwDesiredAccess: DWORD) HANDLE;
extern fn CreateFileMappingA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR) HANDLE;
extern fn CreateFileMappingNumaA(hFile: HANDLE, lpFileMappingAttributes: LPSECURITY_ATTRIBUTES, flProtect: DWORD, dwMaximumSizeHigh: DWORD, dwMaximumSizeLow: DWORD, lpName: LPCSTR, nndPreferred: DWORD) HANDLE;
extern fn OpenFileMappingA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
extern fn GetLogicalDriveStringsA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
extern fn LoadPackagedLibrary(lpwLibFileName: LPCWSTR, Reserved: DWORD) HMODULE;
extern fn QueryFullProcessImageNameA(hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPSTR, lpdwSize: PDWORD) BOOL;
extern fn QueryFullProcessImageNameW(hProcess: HANDLE, dwFlags: DWORD, lpExeName: LPWSTR, lpdwSize: PDWORD) BOOL;
pub const ProcThreadAttributeParentProcess = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeParentProcess;
pub const ProcThreadAttributeHandleList = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeHandleList;
pub const ProcThreadAttributeGroupAffinity = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeGroupAffinity;
pub const ProcThreadAttributePreferredNode = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributePreferredNode;
pub const ProcThreadAttributeIdealProcessor = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeIdealProcessor;
pub const ProcThreadAttributeUmsThread = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeUmsThread;
pub const ProcThreadAttributeMitigationPolicy = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeMitigationPolicy;
pub const ProcThreadAttributeSecurityCapabilities = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeSecurityCapabilities;
pub const ProcThreadAttributeProtectionLevel = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeProtectionLevel;
pub const ProcThreadAttributeJobList = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeJobList;
pub const ProcThreadAttributeChildProcessPolicy = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeChildProcessPolicy;
pub const ProcThreadAttributeAllApplicationPackagesPolicy = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeAllApplicationPackagesPolicy;
pub const ProcThreadAttributeWin32kFilter = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeWin32kFilter;
pub const ProcThreadAttributeSafeOpenPromptOriginClaim = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeSafeOpenPromptOriginClaim;
pub const ProcThreadAttributeDesktopAppPolicy = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributeDesktopAppPolicy;
pub const ProcThreadAttributePseudoConsole = enum__PROC_THREAD_ATTRIBUTE_NUM.ProcThreadAttributePseudoConsole;
pub const enum__PROC_THREAD_ATTRIBUTE_NUM = extern enum {
    ProcThreadAttributeParentProcess = 0,
    ProcThreadAttributeHandleList = 2,
    ProcThreadAttributeGroupAffinity = 3,
    ProcThreadAttributePreferredNode = 4,
    ProcThreadAttributeIdealProcessor = 5,
    ProcThreadAttributeUmsThread = 6,
    ProcThreadAttributeMitigationPolicy = 7,
    ProcThreadAttributeSecurityCapabilities = 9,
    ProcThreadAttributeProtectionLevel = 11,
    ProcThreadAttributeJobList = 13,
    ProcThreadAttributeChildProcessPolicy = 14,
    ProcThreadAttributeAllApplicationPackagesPolicy = 15,
    ProcThreadAttributeWin32kFilter = 16,
    ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
    ProcThreadAttributeDesktopAppPolicy = 18,
    ProcThreadAttributePseudoConsole = 22,
};
pub const PROC_THREAD_ATTRIBUTE_NUM = enum__PROC_THREAD_ATTRIBUTE_NUM;
extern fn GetStartupInfoA(lpStartupInfo: LPSTARTUPINFOA) void;
extern fn GetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD) DWORD;
extern fn GetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD) DWORD;
extern fn GetFirmwareEnvironmentVariableExA(lpName: LPCSTR, lpGuid: LPCSTR, pBuffer: PVOID, nSize: DWORD, pdwAttribubutes: PDWORD) DWORD;
extern fn GetFirmwareEnvironmentVariableExW(lpName: LPCWSTR, lpGuid: LPCWSTR, pBuffer: PVOID, nSize: DWORD, pdwAttribubutes: PDWORD) DWORD;
extern fn SetFirmwareEnvironmentVariableA(lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD) BOOL;
extern fn SetFirmwareEnvironmentVariableW(lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD) BOOL;
extern fn SetFirmwareEnvironmentVariableExA(lpName: LPCSTR, lpGuid: LPCSTR, pValue: PVOID, nSize: DWORD, dwAttributes: DWORD) BOOL;
extern fn SetFirmwareEnvironmentVariableExW(lpName: LPCWSTR, lpGuid: LPCWSTR, pValue: PVOID, nSize: DWORD, dwAttributes: DWORD) BOOL;
extern fn GetFirmwareType(FirmwareType: PFIRMWARE_TYPE) BOOL;
extern fn IsNativeVhdBoot(NativeVhdBoot: PBOOL) BOOL;
extern fn FindResourceA(hModule: HMODULE, lpName: LPCSTR, lpType: LPCSTR) HRSRC;
extern fn FindResourceExA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD) HRSRC;
extern fn EnumResourceTypesA(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCA, lParam: LONG_PTR) BOOL;
extern fn EnumResourceTypesW(hModule: HMODULE, lpEnumFunc: ENUMRESTYPEPROCW, lParam: LONG_PTR) BOOL;
extern fn EnumResourceNamesA(hModule: HMODULE, lpType: LPCSTR, lpEnumFunc: ENUMRESNAMEPROCA, lParam: LONG_PTR) BOOL;
extern fn EnumResourceLanguagesA(hModule: HMODULE, lpType: LPCSTR, lpName: LPCSTR, lpEnumFunc: ENUMRESLANGPROCA, lParam: LONG_PTR) BOOL;
extern fn EnumResourceLanguagesW(hModule: HMODULE, lpType: LPCWSTR, lpName: LPCWSTR, lpEnumFunc: ENUMRESLANGPROCW, lParam: LONG_PTR) BOOL;
extern fn BeginUpdateResourceA(pFileName: LPCSTR, bDeleteExistingResources: BOOL) HANDLE;
extern fn BeginUpdateResourceW(pFileName: LPCWSTR, bDeleteExistingResources: BOOL) HANDLE;
extern fn UpdateResourceA(hUpdate: HANDLE, lpType: LPCSTR, lpName: LPCSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD) BOOL;
extern fn UpdateResourceW(hUpdate: HANDLE, lpType: LPCWSTR, lpName: LPCWSTR, wLanguage: WORD, lpData: LPVOID, cb: DWORD) BOOL;
extern fn EndUpdateResourceA(hUpdate: HANDLE, fDiscard: BOOL) BOOL;
extern fn EndUpdateResourceW(hUpdate: HANDLE, fDiscard: BOOL) BOOL;
extern fn GlobalAddAtomA(lpString: LPCSTR) ATOM;
extern fn GlobalAddAtomW(lpString: LPCWSTR) ATOM;
extern fn GlobalAddAtomExA(lpString: LPCSTR, Flags: DWORD) ATOM;
extern fn GlobalAddAtomExW(lpString: LPCWSTR, Flags: DWORD) ATOM;
extern fn GlobalFindAtomA(lpString: LPCSTR) ATOM;
extern fn GlobalFindAtomW(lpString: LPCWSTR) ATOM;
extern fn GlobalGetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: c_int) UINT;
extern fn GlobalGetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: c_int) UINT;
extern fn AddAtomA(lpString: LPCSTR) ATOM;
extern fn AddAtomW(lpString: LPCWSTR) ATOM;
extern fn FindAtomA(lpString: LPCSTR) ATOM;
extern fn FindAtomW(lpString: LPCWSTR) ATOM;
extern fn GetAtomNameA(nAtom: ATOM, lpBuffer: LPSTR, nSize: c_int) UINT;
extern fn GetAtomNameW(nAtom: ATOM, lpBuffer: LPWSTR, nSize: c_int) UINT;
extern fn GetProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT) UINT;
extern fn GetProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT) UINT;
extern fn GetProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD) DWORD;
extern fn GetProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD) DWORD;
extern fn WriteProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR) BOOL;
extern fn WriteProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR) BOOL;
extern fn GetProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD) DWORD;
extern fn GetProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD) DWORD;
extern fn WriteProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR) BOOL;
extern fn WriteProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR) BOOL;
extern fn GetPrivateProfileIntA(lpAppName: LPCSTR, lpKeyName: LPCSTR, nDefault: INT, lpFileName: LPCSTR) UINT;
extern fn GetPrivateProfileIntW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, nDefault: INT, lpFileName: LPCWSTR) UINT;
extern fn GetPrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpDefault: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
extern fn GetPrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpDefault: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
extern fn WritePrivateProfileStringA(lpAppName: LPCSTR, lpKeyName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR) BOOL;
extern fn WritePrivateProfileStringW(lpAppName: LPCWSTR, lpKeyName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR) BOOL;
extern fn GetPrivateProfileSectionA(lpAppName: LPCSTR, lpReturnedString: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
extern fn GetPrivateProfileSectionW(lpAppName: LPCWSTR, lpReturnedString: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
extern fn WritePrivateProfileSectionA(lpAppName: LPCSTR, lpString: LPCSTR, lpFileName: LPCSTR) BOOL;
extern fn WritePrivateProfileSectionW(lpAppName: LPCWSTR, lpString: LPCWSTR, lpFileName: LPCWSTR) BOOL;
extern fn GetPrivateProfileSectionNamesA(lpszReturnBuffer: LPSTR, nSize: DWORD, lpFileName: LPCSTR) DWORD;
extern fn GetPrivateProfileSectionNamesW(lpszReturnBuffer: LPWSTR, nSize: DWORD, lpFileName: LPCWSTR) DWORD;
extern fn GetPrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR) BOOL;
extern fn GetPrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR) BOOL;
extern fn WritePrivateProfileStructA(lpszSection: LPCSTR, lpszKey: LPCSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCSTR) BOOL;
extern fn WritePrivateProfileStructW(lpszSection: LPCWSTR, lpszKey: LPCWSTR, lpStruct: LPVOID, uSizeStruct: UINT, szFile: LPCWSTR) BOOL;
extern fn Wow64EnableWow64FsRedirection(Wow64FsEnableRedirection: BOOLEAN) BOOLEAN;
pub const PGET_SYSTEM_WOW64_DIRECTORY_A = ?fn (LPSTR, UINT) callconv(std.os.windows.WINAPI) UINT;
pub const PGET_SYSTEM_WOW64_DIRECTORY_W = ?fn (LPWSTR, UINT) callconv(std.os.windows.WINAPI) UINT;
extern fn SetDllDirectoryA(lpPathName: LPCSTR) BOOL;
extern fn SetDllDirectoryW(lpPathName: LPCWSTR) BOOL;
extern fn GetDllDirectoryA(nBufferLength: DWORD, lpBuffer: LPSTR) DWORD;
extern fn GetDllDirectoryW(nBufferLength: DWORD, lpBuffer: LPWSTR) DWORD;
extern fn SetSearchPathMode(Flags: DWORD) BOOL;
extern fn CreateDirectoryExA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateDirectoryExW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateDirectoryTransactedA(lpTemplateDirectory: LPCSTR, lpNewDirectory: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
extern fn CreateDirectoryTransactedW(lpTemplateDirectory: LPCWSTR, lpNewDirectory: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
extern fn RemoveDirectoryTransactedA(lpPathName: LPCSTR, hTransaction: HANDLE) BOOL;
extern fn RemoveDirectoryTransactedW(lpPathName: LPCWSTR, hTransaction: HANDLE) BOOL;
extern fn GetFullPathNameTransactedA(lpFileName: LPCSTR, nBufferLength: DWORD, lpBuffer: LPSTR, lpFilePart: [*c]LPSTR, hTransaction: HANDLE) DWORD;
extern fn GetFullPathNameTransactedW(lpFileName: LPCWSTR, nBufferLength: DWORD, lpBuffer: LPWSTR, lpFilePart: [*c]LPWSTR, hTransaction: HANDLE) DWORD;
extern fn DefineDosDeviceA(dwFlags: DWORD, lpDeviceName: LPCSTR, lpTargetPath: LPCSTR) BOOL;
extern fn QueryDosDeviceA(lpDeviceName: LPCSTR, lpTargetPath: LPSTR, ucchMax: DWORD) DWORD;
extern fn CreateFileTransactedA(lpFileName: LPCSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID) HANDLE;
extern fn CreateFileTransactedW(lpFileName: LPCWSTR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE, hTransaction: HANDLE, pusMiniVersion: PUSHORT, lpExtendedParameter: PVOID) HANDLE;
extern fn ReOpenFile(hOriginalFile: HANDLE, dwDesiredAccess: DWORD, dwShareMode: DWORD, dwFlagsAndAttributes: DWORD) HANDLE;
extern fn SetFileAttributesTransactedA(lpFileName: LPCSTR, dwFileAttributes: DWORD, hTransaction: HANDLE) BOOL;
extern fn SetFileAttributesTransactedW(lpFileName: LPCWSTR, dwFileAttributes: DWORD, hTransaction: HANDLE) BOOL;
extern fn GetFileAttributesTransactedA(lpFileName: LPCSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE) BOOL;
extern fn GetFileAttributesTransactedW(lpFileName: LPCWSTR, fInfoLevelId: GET_FILEEX_INFO_LEVELS, lpFileInformation: LPVOID, hTransaction: HANDLE) BOOL;
extern fn GetCompressedFileSizeTransactedA(lpFileName: LPCSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE) DWORD;
extern fn GetCompressedFileSizeTransactedW(lpFileName: LPCWSTR, lpFileSizeHigh: LPDWORD, hTransaction: HANDLE) DWORD;
extern fn DeleteFileTransactedA(lpFileName: LPCSTR, hTransaction: HANDLE) BOOL;
extern fn DeleteFileTransactedW(lpFileName: LPCWSTR, hTransaction: HANDLE) BOOL;
extern fn CheckNameLegalDOS8Dot3A(lpName: LPCSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL) BOOL;
extern fn CheckNameLegalDOS8Dot3W(lpName: LPCWSTR, lpOemName: LPSTR, OemNameSize: DWORD, pbNameContainsSpaces: PBOOL, pbNameLegal: PBOOL) BOOL;
extern fn FindFirstFileTransactedA(lpFileName: LPCSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE) HANDLE;
extern fn FindFirstFileTransactedW(lpFileName: LPCWSTR, fInfoLevelId: FINDEX_INFO_LEVELS, lpFindFileData: LPVOID, fSearchOp: FINDEX_SEARCH_OPS, lpSearchFilter: LPVOID, dwAdditionalFlags: DWORD, hTransaction: HANDLE) HANDLE;
extern fn CopyFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, bFailIfExists: BOOL) BOOL;
extern fn CopyFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, bFailIfExists: BOOL) BOOL;
pub const LPPROGRESS_ROUTINE = ?fn (LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, LARGE_INTEGER, DWORD, DWORD, HANDLE, HANDLE, LPVOID) callconv(std.os.windows.WINAPI) DWORD;
extern fn CopyFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD) BOOL;
extern fn CopyFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD) BOOL;
extern fn CopyFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE) BOOL;
extern fn CopyFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, pbCancel: LPBOOL, dwCopyFlags: DWORD, hTransaction: HANDLE) BOOL;
pub const COPYFILE2_CALLBACK_NONE = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_NONE;
pub const COPYFILE2_CALLBACK_CHUNK_STARTED = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_CHUNK_STARTED;
pub const COPYFILE2_CALLBACK_CHUNK_FINISHED = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_CHUNK_FINISHED;
pub const COPYFILE2_CALLBACK_STREAM_STARTED = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_STREAM_STARTED;
pub const COPYFILE2_CALLBACK_STREAM_FINISHED = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_STREAM_FINISHED;
pub const COPYFILE2_CALLBACK_POLL_CONTINUE = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_POLL_CONTINUE;
pub const COPYFILE2_CALLBACK_ERROR = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_ERROR;
pub const COPYFILE2_CALLBACK_MAX = enum__COPYFILE2_MESSAGE_TYPE.COPYFILE2_CALLBACK_MAX;
pub const enum__COPYFILE2_MESSAGE_TYPE = extern enum {
    COPYFILE2_CALLBACK_NONE = 0,
    COPYFILE2_CALLBACK_CHUNK_STARTED = 1,
    COPYFILE2_CALLBACK_CHUNK_FINISHED = 2,
    COPYFILE2_CALLBACK_STREAM_STARTED = 3,
    COPYFILE2_CALLBACK_STREAM_FINISHED = 4,
    COPYFILE2_CALLBACK_POLL_CONTINUE = 5,
    COPYFILE2_CALLBACK_ERROR = 6,
    COPYFILE2_CALLBACK_MAX = 7,
};
pub const COPYFILE2_MESSAGE_TYPE = enum__COPYFILE2_MESSAGE_TYPE;
pub const COPYFILE2_PROGRESS_CONTINUE = enum__COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_CONTINUE;
pub const COPYFILE2_PROGRESS_CANCEL = enum__COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_CANCEL;
pub const COPYFILE2_PROGRESS_STOP = enum__COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_STOP;
pub const COPYFILE2_PROGRESS_QUIET = enum__COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_QUIET;
pub const COPYFILE2_PROGRESS_PAUSE = enum__COPYFILE2_MESSAGE_ACTION.COPYFILE2_PROGRESS_PAUSE;
pub const enum__COPYFILE2_MESSAGE_ACTION = extern enum {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL = 1,
    COPYFILE2_PROGRESS_STOP = 2,
    COPYFILE2_PROGRESS_QUIET = 3,
    COPYFILE2_PROGRESS_PAUSE = 4,
};
pub const COPYFILE2_MESSAGE_ACTION = enum__COPYFILE2_MESSAGE_ACTION;
pub const COPYFILE2_PHASE_NONE = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_NONE;
pub const COPYFILE2_PHASE_PREPARE_SOURCE = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_PREPARE_SOURCE;
pub const COPYFILE2_PHASE_PREPARE_DEST = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_PREPARE_DEST;
pub const COPYFILE2_PHASE_READ_SOURCE = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_READ_SOURCE;
pub const COPYFILE2_PHASE_WRITE_DESTINATION = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_WRITE_DESTINATION;
pub const COPYFILE2_PHASE_SERVER_COPY = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_SERVER_COPY;
pub const COPYFILE2_PHASE_NAMEGRAFT_COPY = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_NAMEGRAFT_COPY;
pub const COPYFILE2_PHASE_MAX = enum__COPYFILE2_COPY_PHASE.COPYFILE2_PHASE_MAX;
pub const enum__COPYFILE2_COPY_PHASE = extern enum {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE = 1,
    COPYFILE2_PHASE_PREPARE_DEST = 2,
    COPYFILE2_PHASE_READ_SOURCE = 3,
    COPYFILE2_PHASE_WRITE_DESTINATION = 4,
    COPYFILE2_PHASE_SERVER_COPY = 5,
    COPYFILE2_PHASE_NAMEGRAFT_COPY = 6,
    COPYFILE2_PHASE_MAX = 7,
};
pub const COPYFILE2_COPY_PHASE = enum__COPYFILE2_COPY_PHASE;
pub const struct_COPYFILE2_MESSAGE = extern struct {
    Type: COPYFILE2_MESSAGE_TYPE,
    dwPadding: DWORD,
    Info: extern union {
        ChunkStarted: extern struct {
            dwStreamNumber: DWORD,
            dwReserved: DWORD,
            hSourceFile: HANDLE,
            hDestinationFile: HANDLE,
            uliChunkNumber: ULARGE_INTEGER,
            uliChunkSize: ULARGE_INTEGER,
            uliStreamSize: ULARGE_INTEGER,
            uliTotalFileSize: ULARGE_INTEGER,
        },
        ChunkFinished: extern struct {
            dwStreamNumber: DWORD,
            dwFlags: DWORD,
            hSourceFile: HANDLE,
            hDestinationFile: HANDLE,
            uliChunkNumber: ULARGE_INTEGER,
            uliChunkSize: ULARGE_INTEGER,
            uliStreamSize: ULARGE_INTEGER,
            uliStreamBytesTransferred: ULARGE_INTEGER,
            uliTotalFileSize: ULARGE_INTEGER,
            uliTotalBytesTransferred: ULARGE_INTEGER,
        },
        StreamStarted: extern struct {
            dwStreamNumber: DWORD,
            dwReserved: DWORD,
            hSourceFile: HANDLE,
            hDestinationFile: HANDLE,
            uliStreamSize: ULARGE_INTEGER,
            uliTotalFileSize: ULARGE_INTEGER,
        },
        StreamFinished: extern struct {
            dwStreamNumber: DWORD,
            dwReserved: DWORD,
            hSourceFile: HANDLE,
            hDestinationFile: HANDLE,
            uliStreamSize: ULARGE_INTEGER,
            uliStreamBytesTransferred: ULARGE_INTEGER,
            uliTotalFileSize: ULARGE_INTEGER,
            uliTotalBytesTransferred: ULARGE_INTEGER,
        },
        PollContinue: extern struct {
            dwReserved: DWORD,
        },
        Error: extern struct {
            CopyPhase: COPYFILE2_COPY_PHASE,
            dwStreamNumber: DWORD,
            hrFailure: HRESULT,
            dwReserved: DWORD,
            uliChunkNumber: ULARGE_INTEGER,
            uliStreamSize: ULARGE_INTEGER,
            uliStreamBytesTransferred: ULARGE_INTEGER,
            uliTotalFileSize: ULARGE_INTEGER,
            uliTotalBytesTransferred: ULARGE_INTEGER,
        },
    },
};
pub const COPYFILE2_MESSAGE = struct_COPYFILE2_MESSAGE;
pub const PCOPYFILE2_PROGRESS_ROUTINE = ?fn ([*c]const COPYFILE2_MESSAGE, PVOID) callconv(std.os.windows.WINAPI) COPYFILE2_MESSAGE_ACTION;
pub const struct_COPYFILE2_EXTENDED_PARAMETERS = extern struct {
    dwSize: DWORD,
    dwCopyFlags: DWORD,
    pfCancel: [*c]BOOL,
    pProgressRoutine: PCOPYFILE2_PROGRESS_ROUTINE,
    pvCallbackContext: PVOID,
};
pub const COPYFILE2_EXTENDED_PARAMETERS = struct_COPYFILE2_EXTENDED_PARAMETERS;
extern fn CopyFile2(pwszExistingFileName: PCWSTR, pwszNewFileName: PCWSTR, pExtendedParameters: [*c]COPYFILE2_EXTENDED_PARAMETERS) HRESULT;
extern fn MoveFileA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR) BOOL;
extern fn MoveFileW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR) BOOL;
extern fn MoveFileExA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, dwFlags: DWORD) BOOL;
extern fn MoveFileExW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, dwFlags: DWORD) BOOL;
extern fn MoveFileWithProgressA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD) BOOL;
extern fn MoveFileWithProgressW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD) BOOL;
extern fn MoveFileTransactedA(lpExistingFileName: LPCSTR, lpNewFileName: LPCSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) BOOL;
extern fn MoveFileTransactedW(lpExistingFileName: LPCWSTR, lpNewFileName: LPCWSTR, lpProgressRoutine: LPPROGRESS_ROUTINE, lpData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) BOOL;
extern fn ReplaceFileA(lpReplacedFileName: LPCSTR, lpReplacementFileName: LPCSTR, lpBackupFileName: LPCSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID) BOOL;
extern fn ReplaceFileW(lpReplacedFileName: LPCWSTR, lpReplacementFileName: LPCWSTR, lpBackupFileName: LPCWSTR, dwReplaceFlags: DWORD, lpExclude: LPVOID, lpReserved: LPVOID) BOOL;
extern fn CreateHardLinkA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateHardLinkW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) BOOL;
extern fn CreateHardLinkTransactedA(lpFileName: LPCSTR, lpExistingFileName: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
extern fn CreateHardLinkTransactedW(lpFileName: LPCWSTR, lpExistingFileName: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, hTransaction: HANDLE) BOOL;
extern fn FindFirstStreamTransactedW(lpFileName: LPCWSTR, InfoLevel: STREAM_INFO_LEVELS, lpFindStreamData: LPVOID, dwFlags: DWORD, hTransaction: HANDLE) HANDLE;
extern fn FindFirstFileNameTransactedW(lpFileName: LPCWSTR, dwFlags: DWORD, StringLength: LPDWORD, LinkName: PWSTR, hTransaction: HANDLE) HANDLE;
extern fn CreateNamedPipeA(lpName: LPCSTR, dwOpenMode: DWORD, dwPipeMode: DWORD, nMaxInstances: DWORD, nOutBufferSize: DWORD, nInBufferSize: DWORD, nDefaultTimeOut: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) HANDLE;
extern fn GetNamedPipeHandleStateA(hNamedPipe: HANDLE, lpState: LPDWORD, lpCurInstances: LPDWORD, lpMaxCollectionCount: LPDWORD, lpCollectDataTimeout: LPDWORD, lpUserName: LPSTR, nMaxUserNameSize: DWORD) BOOL;
extern fn CallNamedPipeA(lpNamedPipeName: LPCSTR, lpInBuffer: LPVOID, nInBufferSize: DWORD, lpOutBuffer: LPVOID, nOutBufferSize: DWORD, lpBytesRead: LPDWORD, nTimeOut: DWORD) BOOL;
extern fn WaitNamedPipeA(lpNamedPipeName: LPCSTR, nTimeOut: DWORD) BOOL;
extern fn GetNamedPipeClientComputerNameA(Pipe: HANDLE, ClientComputerName: LPSTR, ClientComputerNameLength: ULONG) BOOL;
extern fn GetNamedPipeClientProcessId(Pipe: HANDLE, ClientProcessId: PULONG) BOOL;
extern fn GetNamedPipeClientSessionId(Pipe: HANDLE, ClientSessionId: PULONG) BOOL;
extern fn GetNamedPipeServerProcessId(Pipe: HANDLE, ServerProcessId: PULONG) BOOL;
extern fn GetNamedPipeServerSessionId(Pipe: HANDLE, ServerSessionId: PULONG) BOOL;
extern fn SetVolumeLabelA(lpRootPathName: LPCSTR, lpVolumeName: LPCSTR) BOOL;
extern fn SetVolumeLabelW(lpRootPathName: LPCWSTR, lpVolumeName: LPCWSTR) BOOL;
extern fn SetFileBandwidthReservation(hFile: HANDLE, nPeriodMilliseconds: DWORD, nBytesPerPeriod: DWORD, bDiscardable: BOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD) BOOL;
extern fn GetFileBandwidthReservation(hFile: HANDLE, lpPeriodMilliseconds: LPDWORD, lpBytesPerPeriod: LPDWORD, pDiscardable: LPBOOL, lpTransferSize: LPDWORD, lpNumOutstandingRequests: LPDWORD) BOOL;
extern fn ClearEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) BOOL;
extern fn ClearEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) BOOL;
extern fn BackupEventLogA(hEventLog: HANDLE, lpBackupFileName: LPCSTR) BOOL;
extern fn BackupEventLogW(hEventLog: HANDLE, lpBackupFileName: LPCWSTR) BOOL;
extern fn CloseEventLog(hEventLog: HANDLE) BOOL;
extern fn DeregisterEventSource(hEventLog: HANDLE) BOOL;
extern fn NotifyChangeEventLog(hEventLog: HANDLE, hEvent: HANDLE) BOOL;
extern fn GetNumberOfEventLogRecords(hEventLog: HANDLE, NumberOfRecords: PDWORD) BOOL;
extern fn GetOldestEventLogRecord(hEventLog: HANDLE, OldestRecord: PDWORD) BOOL;
extern fn OpenEventLogA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) HANDLE;
extern fn OpenEventLogW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) HANDLE;
extern fn RegisterEventSourceA(lpUNCServerName: LPCSTR, lpSourceName: LPCSTR) HANDLE;
extern fn RegisterEventSourceW(lpUNCServerName: LPCWSTR, lpSourceName: LPCWSTR) HANDLE;
extern fn OpenBackupEventLogA(lpUNCServerName: LPCSTR, lpFileName: LPCSTR) HANDLE;
extern fn OpenBackupEventLogW(lpUNCServerName: LPCWSTR, lpFileName: LPCWSTR) HANDLE;
extern fn ReadEventLogA(hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: [*c]DWORD, pnMinNumberOfBytesNeeded: [*c]DWORD) BOOL;
extern fn ReadEventLogW(hEventLog: HANDLE, dwReadFlags: DWORD, dwRecordOffset: DWORD, lpBuffer: LPVOID, nNumberOfBytesToRead: DWORD, pnBytesRead: [*c]DWORD, pnMinNumberOfBytesNeeded: [*c]DWORD) BOOL;
extern fn ReportEventA(hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: [*c]LPCSTR, lpRawData: LPVOID) BOOL;
extern fn ReportEventW(hEventLog: HANDLE, wType: WORD, wCategory: WORD, dwEventID: DWORD, lpUserSid: PSID, wNumStrings: WORD, dwDataSize: DWORD, lpStrings: [*c]LPCWSTR, lpRawData: LPVOID) BOOL;
pub const struct__EVENTLOG_FULL_INFORMATION = extern struct {
    dwFull: DWORD,
};
pub const EVENTLOG_FULL_INFORMATION = struct__EVENTLOG_FULL_INFORMATION;
pub const LPEVENTLOG_FULL_INFORMATION = [*c]struct__EVENTLOG_FULL_INFORMATION;
extern fn GetEventLogInformation(hEventLog: HANDLE, dwInfoLevel: DWORD, lpBuffer: LPVOID, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
pub const OPERATION_ID = ULONG;
pub const struct__OPERATION_START_PARAMETERS = extern struct {
    Version: ULONG,
    OperationId: OPERATION_ID,
    Flags: ULONG,
};
pub const OPERATION_START_PARAMETERS = struct__OPERATION_START_PARAMETERS;
pub const POPERATION_START_PARAMETERS = [*c]struct__OPERATION_START_PARAMETERS;
pub const struct__OPERATION_END_PARAMETERS = extern struct {
    Version: ULONG,
    OperationId: OPERATION_ID,
    Flags: ULONG,
};
pub const OPERATION_END_PARAMETERS = struct__OPERATION_END_PARAMETERS;
pub const POPERATION_END_PARAMETERS = [*c]struct__OPERATION_END_PARAMETERS;
extern fn OperationStart(OperationStartParams: [*c]OPERATION_START_PARAMETERS) BOOL;
extern fn OperationEnd(OperationEndParams: [*c]OPERATION_END_PARAMETERS) BOOL;
extern fn AccessCheckAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, DesiredAccess: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByTypeAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatus: LPBOOL, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByTypeResultListAndAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
extern fn AccessCheckByTypeResultListAndAuditAlarmByHandleA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, ObjectTypeName: LPCSTR, ObjectName: LPCSTR, SecurityDescriptor: PSECURITY_DESCRIPTOR, PrincipalSelfSid: PSID, DesiredAccess: DWORD, AuditType: AUDIT_EVENT_TYPE, Flags: DWORD, ObjectTypeList: POBJECT_TYPE_LIST, ObjectTypeListLength: DWORD, GenericMapping: PGENERIC_MAPPING, ObjectCreation: BOOL, GrantedAccess: LPDWORD, AccessStatusList: LPDWORD, pfGenerateOnClose: LPBOOL) BOOL;
extern fn ObjectOpenAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ObjectTypeName: LPSTR, ObjectName: LPSTR, pSecurityDescriptor: PSECURITY_DESCRIPTOR, ClientToken: HANDLE, DesiredAccess: DWORD, GrantedAccess: DWORD, Privileges: PPRIVILEGE_SET, ObjectCreation: BOOL, AccessGranted: BOOL, GenerateOnClose: LPBOOL) BOOL;
extern fn ObjectPrivilegeAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, ClientToken: HANDLE, DesiredAccess: DWORD, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
extern fn ObjectCloseAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
extern fn ObjectDeleteAuditAlarmA(SubsystemName: LPCSTR, HandleId: LPVOID, GenerateOnClose: BOOL) BOOL;
extern fn PrivilegedServiceAuditAlarmA(SubsystemName: LPCSTR, ServiceName: LPCSTR, ClientToken: HANDLE, Privileges: PPRIVILEGE_SET, AccessGranted: BOOL) BOOL;
extern fn AddConditionalAce(pAcl: PACL, dwAceRevision: DWORD, AceFlags: DWORD, AceType: UCHAR, AccessMask: DWORD, pSid: PSID, ConditionStr: PWCHAR, ReturnLength: [*c]DWORD) BOOL;
extern fn SetFileSecurityA(lpFileName: LPCSTR, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
extern fn GetFileSecurityA(lpFileName: LPCSTR, RequestedInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
extern fn ReadDirectoryChangesW(hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) BOOL;
extern fn ReadDirectoryChangesExW(hDirectory: HANDLE, lpBuffer: LPVOID, nBufferLength: DWORD, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, lpBytesReturned: LPDWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE, ReadDirectoryNotifyInformationClass: READ_DIRECTORY_NOTIFY_INFORMATION_CLASS) BOOL;
extern fn MapViewOfFileExNuma(hFileMappingObject: HANDLE, dwDesiredAccess: DWORD, dwFileOffsetHigh: DWORD, dwFileOffsetLow: DWORD, dwNumberOfBytesToMap: SIZE_T, lpBaseAddress: LPVOID, nndPreferred: DWORD) LPVOID;
extern fn IsBadReadPtr(lp: ?*const c_void, ucb: UINT_PTR) BOOL;
extern fn IsBadWritePtr(lp: LPVOID, ucb: UINT_PTR) BOOL;
extern fn IsBadHugeReadPtr(lp: ?*const c_void, ucb: UINT_PTR) BOOL;
extern fn IsBadHugeWritePtr(lp: LPVOID, ucb: UINT_PTR) BOOL;
extern fn IsBadCodePtr(lpfn: FARPROC) BOOL;
extern fn IsBadStringPtrA(lpsz: LPCSTR, ucchMax: UINT_PTR) BOOL;
extern fn IsBadStringPtrW(lpsz: LPCWSTR, ucchMax: UINT_PTR) BOOL;
extern fn LookupAccountSidA(lpSystemName: LPCSTR, Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountSidW(lpSystemName: LPCWSTR, Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountNameA(lpSystemName: LPCSTR, lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountNameW(lpSystemName: LPCWSTR, lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountNameLocalA(lpAccountName: LPCSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountNameLocalW(lpAccountName: LPCWSTR, Sid: PSID, cbSid: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountSidLocalA(Sid: PSID, Name: LPSTR, cchName: LPDWORD, ReferencedDomainName: LPSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupAccountSidLocalW(Sid: PSID, Name: LPWSTR, cchName: LPDWORD, ReferencedDomainName: LPWSTR, cchReferencedDomainName: LPDWORD, peUse: PSID_NAME_USE) BOOL;
extern fn LookupPrivilegeValueA(lpSystemName: LPCSTR, lpName: LPCSTR, lpLuid: PLUID) BOOL;
extern fn LookupPrivilegeValueW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpLuid: PLUID) BOOL;
extern fn LookupPrivilegeNameA(lpSystemName: LPCSTR, lpLuid: PLUID, lpName: LPSTR, cchName: LPDWORD) BOOL;
extern fn LookupPrivilegeNameW(lpSystemName: LPCWSTR, lpLuid: PLUID, lpName: LPWSTR, cchName: LPDWORD) BOOL;
extern fn LookupPrivilegeDisplayNameA(lpSystemName: LPCSTR, lpName: LPCSTR, lpDisplayName: LPSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD) BOOL;
extern fn LookupPrivilegeDisplayNameW(lpSystemName: LPCWSTR, lpName: LPCWSTR, lpDisplayName: LPWSTR, cchDisplayName: LPDWORD, lpLanguageId: LPDWORD) BOOL;
extern fn BuildCommDCBA(lpDef: LPCSTR, lpDCB: LPDCB) BOOL;
extern fn BuildCommDCBW(lpDef: LPCWSTR, lpDCB: LPDCB) BOOL;
extern fn BuildCommDCBAndTimeoutsA(lpDef: LPCSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
extern fn BuildCommDCBAndTimeoutsW(lpDef: LPCWSTR, lpDCB: LPDCB, lpCommTimeouts: LPCOMMTIMEOUTS) BOOL;
extern fn CommConfigDialogA(lpszName: LPCSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) BOOL;
extern fn CommConfigDialogW(lpszName: LPCWSTR, hWnd: HWND, lpCC: LPCOMMCONFIG) BOOL;
extern fn GetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
extern fn GetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, lpdwSize: LPDWORD) BOOL;
extern fn SetDefaultCommConfigA(lpszName: LPCSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
extern fn SetDefaultCommConfigW(lpszName: LPCWSTR, lpCC: LPCOMMCONFIG, dwSize: DWORD) BOOL;
extern fn GetComputerNameA(lpBuffer: LPSTR, nSize: LPDWORD) BOOL;
extern fn GetComputerNameW(lpBuffer: LPWSTR, nSize: LPDWORD) BOOL;
extern fn DnsHostnameToComputerNameA(Hostname: LPCSTR, ComputerName: LPSTR, nSize: LPDWORD) BOOL;
extern fn DnsHostnameToComputerNameW(Hostname: LPCWSTR, ComputerName: LPWSTR, nSize: LPDWORD) BOOL;
extern fn GetUserNameA(lpBuffer: LPSTR, pcbBuffer: LPDWORD) BOOL;
extern fn GetUserNameW(lpBuffer: LPWSTR, pcbBuffer: LPDWORD) BOOL;
extern fn LogonUserA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE) BOOL;
extern fn LogonUserW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE) BOOL;
extern fn LogonUserExA(lpszUsername: LPCSTR, lpszDomain: LPCSTR, lpszPassword: LPCSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: [*c]PSID, ppProfileBuffer: [*c]PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS) BOOL;
extern fn LogonUserExW(lpszUsername: LPCWSTR, lpszDomain: LPCWSTR, lpszPassword: LPCWSTR, dwLogonType: DWORD, dwLogonProvider: DWORD, phToken: PHANDLE, ppLogonSid: [*c]PSID, ppProfileBuffer: [*c]PVOID, pdwProfileLength: LPDWORD, pQuotaLimits: PQUOTA_LIMITS) BOOL;
extern fn CreateProcessWithLogonW(lpUsername: LPCWSTR, lpDomain: LPCWSTR, lpPassword: LPCWSTR, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
extern fn CreateProcessWithTokenW(hToken: HANDLE, dwLogonFlags: DWORD, lpApplicationName: LPCWSTR, lpCommandLine: LPWSTR, dwCreationFlags: DWORD, lpEnvironment: LPVOID, lpCurrentDirectory: LPCWSTR, lpStartupInfo: LPSTARTUPINFOW, lpProcessInformation: LPPROCESS_INFORMATION) BOOL;
extern fn IsTokenUntrusted(TokenHandle: HANDLE) BOOL;
extern fn RegisterWaitForSingleObject(phNewWaitObject: PHANDLE, hObject: HANDLE, Callback: WAITORTIMERCALLBACK, Context: PVOID, dwMilliseconds: ULONG, dwFlags: ULONG) BOOL;
extern fn UnregisterWait(WaitHandle: HANDLE) BOOL;
extern fn BindIoCompletionCallback(FileHandle: HANDLE, Function: LPOVERLAPPED_COMPLETION_ROUTINE, Flags: ULONG) BOOL;
extern fn SetTimerQueueTimer(TimerQueue: HANDLE, Callback: WAITORTIMERCALLBACK, Parameter: PVOID, DueTime: DWORD, Period: DWORD, PreferIo: BOOL) HANDLE;
extern fn CancelTimerQueueTimer(TimerQueue: HANDLE, Timer: HANDLE) BOOL;
extern fn DeleteTimerQueue(TimerQueue: HANDLE) BOOL;
pub fn InitializeThreadpoolEnvironment(pcbe: PTP_CALLBACK_ENVIRON) void {
    TpInitializeCallbackEnviron(pcbe);
}
pub fn SetThreadpoolCallbackPool(pcbe: PTP_CALLBACK_ENVIRON, ptpp: PTP_POOL) void {
    TpSetCallbackThreadpool(pcbe, ptpp);
}
pub fn SetThreadpoolCallbackCleanupGroup(pcbe: PTP_CALLBACK_ENVIRON, ptpcg: PTP_CLEANUP_GROUP, pfng: PTP_CLEANUP_GROUP_CANCEL_CALLBACK) void {
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}
pub fn SetThreadpoolCallbackRunsLong(pcbe: PTP_CALLBACK_ENVIRON) void {
    TpSetCallbackLongFunction(pcbe);
}
pub fn SetThreadpoolCallbackLibrary(pcbe: PTP_CALLBACK_ENVIRON, mod: PVOID) void {
    TpSetCallbackRaceWithDll(pcbe, mod);
}
pub fn SetThreadpoolCallbackPriority(pcbe: PTP_CALLBACK_ENVIRON, Priority: TP_CALLBACK_PRIORITY) void {
    TpSetCallbackPriority(pcbe, Priority);
}
pub fn DestroyThreadpoolEnvironment(pcbe: PTP_CALLBACK_ENVIRON) void {
    TpDestroyCallbackEnviron(pcbe);
}
pub fn SetThreadpoolCallbackPersistent(pcbe: PTP_CALLBACK_ENVIRON) void {
    TpSetCallbackPersistent(pcbe);
}
extern fn CreatePrivateNamespaceA(lpPrivateNamespaceAttributes: LPSECURITY_ATTRIBUTES, lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR) HANDLE;
extern fn OpenPrivateNamespaceA(lpBoundaryDescriptor: LPVOID, lpAliasPrefix: LPCSTR) HANDLE;
extern fn CreateBoundaryDescriptorA(Name: LPCSTR, Flags: ULONG) HANDLE;
extern fn AddIntegrityLabelToBoundaryDescriptor(BoundaryDescriptor: [*c]HANDLE, IntegrityLabel: PSID) BOOL;
pub const struct_tagHW_PROFILE_INFOA = extern struct {
    dwDockInfo: DWORD,
    szHwProfileGuid: [39]CHAR,
    szHwProfileName: [80]CHAR,
};
pub const HW_PROFILE_INFOA = struct_tagHW_PROFILE_INFOA;
pub const LPHW_PROFILE_INFOA = [*c]struct_tagHW_PROFILE_INFOA;
pub const struct_tagHW_PROFILE_INFOW = extern struct {
    dwDockInfo: DWORD,
    szHwProfileGuid: [39]WCHAR,
    szHwProfileName: [80]WCHAR,
};
pub const HW_PROFILE_INFOW = struct_tagHW_PROFILE_INFOW;
pub const LPHW_PROFILE_INFOW = [*c]struct_tagHW_PROFILE_INFOW;
pub const HW_PROFILE_INFO = HW_PROFILE_INFOA;
pub const LPHW_PROFILE_INFO = LPHW_PROFILE_INFOA;
extern fn GetCurrentHwProfileA(lpHwProfileInfo: LPHW_PROFILE_INFOA) BOOL;
extern fn GetCurrentHwProfileW(lpHwProfileInfo: LPHW_PROFILE_INFOW) BOOL;
extern fn VerifyVersionInfoA(lpVersionInformation: LPOSVERSIONINFOEXA, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG) BOOL;
extern fn VerifyVersionInfoW(lpVersionInformation: LPOSVERSIONINFOEXW, dwTypeMask: DWORD, dwlConditionMask: DWORDLONG) BOOL;
pub fn HRESULT_FROM_WIN32(x: c_ulong) HRESULT {
    return if (@as(HRESULT, x) <= c_long(0)) @as(HRESULT, x) else @as(HRESULT, ((x & c_ulong(65535)) | c_ulong(7 << @import("std").math.Log2Int(c_int)(16))) | c_ulong(2147483648));
}
pub const struct__TIME_ZONE_INFORMATION = extern struct {
    Bias: LONG,
    StandardName: [32]WCHAR,
    StandardDate: SYSTEMTIME,
    StandardBias: LONG,
    DaylightName: [32]WCHAR,
    DaylightDate: SYSTEMTIME,
    DaylightBias: LONG,
};
pub const TIME_ZONE_INFORMATION = struct__TIME_ZONE_INFORMATION;
pub const PTIME_ZONE_INFORMATION = [*c]struct__TIME_ZONE_INFORMATION;
pub const LPTIME_ZONE_INFORMATION = [*c]struct__TIME_ZONE_INFORMATION;
pub const struct__TIME_DYNAMIC_ZONE_INFORMATION = extern struct {
    Bias: LONG,
    StandardName: [32]WCHAR,
    StandardDate: SYSTEMTIME,
    StandardBias: LONG,
    DaylightName: [32]WCHAR,
    DaylightDate: SYSTEMTIME,
    DaylightBias: LONG,
    TimeZoneKeyName: [128]WCHAR,
    DynamicDaylightTimeDisabled: BOOLEAN,
};
pub const DYNAMIC_TIME_ZONE_INFORMATION = struct__TIME_DYNAMIC_ZONE_INFORMATION;
pub const PDYNAMIC_TIME_ZONE_INFORMATION = [*c]struct__TIME_DYNAMIC_ZONE_INFORMATION;
extern fn SystemTimeToTzSpecificLocalTime(lpTimeZoneInformation: [*c]const TIME_ZONE_INFORMATION, lpUniversalTime: [*c]const SYSTEMTIME, lpLocalTime: LPSYSTEMTIME) BOOL;
extern fn TzSpecificLocalTimeToSystemTime(lpTimeZoneInformation: [*c]const TIME_ZONE_INFORMATION, lpLocalTime: [*c]const SYSTEMTIME, lpUniversalTime: LPSYSTEMTIME) BOOL;
extern fn FileTimeToSystemTime(lpFileTime: [*c]const FILETIME, lpSystemTime: LPSYSTEMTIME) BOOL;
extern fn SystemTimeToFileTime(lpSystemTime: [*c]const SYSTEMTIME, lpFileTime: LPFILETIME) BOOL;
extern fn GetTimeZoneInformation(lpTimeZoneInformation: LPTIME_ZONE_INFORMATION) DWORD;
extern fn SetTimeZoneInformation(lpTimeZoneInformation: [*c]const TIME_ZONE_INFORMATION) BOOL;
extern fn SetDynamicTimeZoneInformation(lpTimeZoneInformation: [*c]const DYNAMIC_TIME_ZONE_INFORMATION) BOOL;
extern fn GetDynamicTimeZoneInformation(pTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION) DWORD;
extern fn GetTimeZoneInformationForYear(wYear: USHORT, pdtzi: PDYNAMIC_TIME_ZONE_INFORMATION, ptzi: LPTIME_ZONE_INFORMATION) BOOL;
extern fn EnumDynamicTimeZoneInformation(dwIndex: DWORD, lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION) DWORD;
extern fn GetDynamicTimeZoneInformationEffectiveYears(lpTimeZoneInformation: PDYNAMIC_TIME_ZONE_INFORMATION, FirstYear: LPDWORD, LastYear: LPDWORD) DWORD;
extern fn SystemTimeToTzSpecificLocalTimeEx(lpTimeZoneInformation: [*c]const DYNAMIC_TIME_ZONE_INFORMATION, lpUniversalTime: [*c]const SYSTEMTIME, lpLocalTime: LPSYSTEMTIME) BOOL;
extern fn TzSpecificLocalTimeToSystemTimeEx(lpTimeZoneInformation: [*c]const DYNAMIC_TIME_ZONE_INFORMATION, lpLocalTime: [*c]const SYSTEMTIME, lpUniversalTime: LPSYSTEMTIME) BOOL;
extern fn LocalFileTimeToLocalSystemTime(timeZoneInformation: [*c]const TIME_ZONE_INFORMATION, localFileTime: [*c]const FILETIME, localSystemTime: [*c]SYSTEMTIME) BOOL;
extern fn LocalSystemTimeToLocalFileTime(timeZoneInformation: [*c]const TIME_ZONE_INFORMATION, localSystemTime: [*c]const SYSTEMTIME, localFileTime: [*c]FILETIME) BOOL;
extern fn SetSystemPowerState(fSuspend: BOOL, fForce: BOOL) BOOL;
pub const struct__SYSTEM_POWER_STATUS = extern struct {
    ACLineStatus: BYTE,
    BatteryFlag: BYTE,
    BatteryLifePercent: BYTE,
    SystemStatusFlag: BYTE,
    BatteryLifeTime: DWORD,
    BatteryFullLifeTime: DWORD,
};
pub const SYSTEM_POWER_STATUS = struct__SYSTEM_POWER_STATUS;
pub const LPSYSTEM_POWER_STATUS = [*c]struct__SYSTEM_POWER_STATUS;
extern fn GetSystemPowerStatus(lpSystemPowerStatus: LPSYSTEM_POWER_STATUS) BOOL;
extern fn MapUserPhysicalPagesScatter(VirtualAddresses: [*c]PVOID, NumberOfPages: ULONG_PTR, PageArray: PULONG_PTR) BOOL;
extern fn CreateJobObjectA(lpJobAttributes: LPSECURITY_ATTRIBUTES, lpName: LPCSTR) HANDLE;
extern fn OpenJobObjectA(dwDesiredAccess: DWORD, bInheritHandle: BOOL, lpName: LPCSTR) HANDLE;
extern fn CreateJobSet(NumJob: ULONG, UserJobSet: PJOB_SET_ARRAY, Flags: ULONG) BOOL;
extern fn FindFirstVolumeA(lpszVolumeName: LPSTR, cchBufferLength: DWORD) HANDLE;
extern fn FindNextVolumeA(hFindVolume: HANDLE, lpszVolumeName: LPSTR, cchBufferLength: DWORD) BOOL;
extern fn FindFirstVolumeMountPointA(lpszRootPathName: LPCSTR, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD) HANDLE;
extern fn FindFirstVolumeMountPointW(lpszRootPathName: LPCWSTR, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD) HANDLE;
extern fn FindNextVolumeMountPointA(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPSTR, cchBufferLength: DWORD) BOOL;
extern fn FindNextVolumeMountPointW(hFindVolumeMountPoint: HANDLE, lpszVolumeMountPoint: LPWSTR, cchBufferLength: DWORD) BOOL;
extern fn FindVolumeMountPointClose(hFindVolumeMountPoint: HANDLE) BOOL;
extern fn SetVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPCSTR) BOOL;
extern fn SetVolumeMountPointW(lpszVolumeMountPoint: LPCWSTR, lpszVolumeName: LPCWSTR) BOOL;
extern fn DeleteVolumeMountPointA(lpszVolumeMountPoint: LPCSTR) BOOL;
extern fn GetVolumeNameForVolumeMountPointA(lpszVolumeMountPoint: LPCSTR, lpszVolumeName: LPSTR, cchBufferLength: DWORD) BOOL;
extern fn GetVolumePathNameA(lpszFileName: LPCSTR, lpszVolumePathName: LPSTR, cchBufferLength: DWORD) BOOL;
extern fn GetVolumePathNamesForVolumeNameA(lpszVolumeName: LPCSTR, lpszVolumePathNames: LPCH, cchBufferLength: DWORD, lpcchReturnLength: PDWORD) BOOL;
pub const struct_tagACTCTXA = extern struct {
    cbSize: ULONG,
    dwFlags: DWORD,
    lpSource: LPCSTR,
    wProcessorArchitecture: USHORT,
    wLangId: LANGID,
    lpAssemblyDirectory: LPCSTR,
    lpResourceName: LPCSTR,
    lpApplicationName: LPCSTR,
    hModule: HMODULE,
};
pub const ACTCTXA = struct_tagACTCTXA;
pub const PACTCTXA = [*c]struct_tagACTCTXA;
pub const struct_tagACTCTXW = extern struct {
    cbSize: ULONG,
    dwFlags: DWORD,
    lpSource: LPCWSTR,
    wProcessorArchitecture: USHORT,
    wLangId: LANGID,
    lpAssemblyDirectory: LPCWSTR,
    lpResourceName: LPCWSTR,
    lpApplicationName: LPCWSTR,
    hModule: HMODULE,
};
pub const ACTCTXW = struct_tagACTCTXW;
pub const PACTCTXW = [*c]struct_tagACTCTXW;
pub const ACTCTX = ACTCTXA;
pub const PACTCTX = PACTCTXA;
pub const PCACTCTXA = [*c]const ACTCTXA;
pub const PCACTCTXW = [*c]const ACTCTXW;
pub const PCACTCTX = PCACTCTXA;
extern fn CreateActCtxA(pActCtx: PCACTCTXA) HANDLE;
extern fn CreateActCtxW(pActCtx: PCACTCTXW) HANDLE;
extern fn AddRefActCtx(hActCtx: HANDLE) void;
extern fn ReleaseActCtx(hActCtx: HANDLE) void;
extern fn ZombifyActCtx(hActCtx: HANDLE) BOOL;
extern fn ActivateActCtx(hActCtx: HANDLE, lpCookie: [*c]ULONG_PTR) BOOL;
extern fn DeactivateActCtx(dwFlags: DWORD, ulCookie: ULONG_PTR) BOOL;
extern fn GetCurrentActCtx(lphActCtx: [*c]HANDLE) BOOL;
pub const struct_tagACTCTX_SECTION_KEYED_DATA_2600 = extern struct {
    cbSize: ULONG,
    ulDataFormatVersion: ULONG,
    lpData: PVOID,
    ulLength: ULONG,
    lpSectionGlobalData: PVOID,
    ulSectionGlobalDataLength: ULONG,
    lpSectionBase: PVOID,
    ulSectionTotalLength: ULONG,
    hActCtx: HANDLE,
    ulAssemblyRosterIndex: ULONG,
};
pub const ACTCTX_SECTION_KEYED_DATA_2600 = struct_tagACTCTX_SECTION_KEYED_DATA_2600;
pub const PACTCTX_SECTION_KEYED_DATA_2600 = [*c]struct_tagACTCTX_SECTION_KEYED_DATA_2600;
pub const PCACTCTX_SECTION_KEYED_DATA_2600 = [*c]const ACTCTX_SECTION_KEYED_DATA_2600;
pub const struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = extern struct {
    lpInformation: PVOID,
    lpSectionBase: PVOID,
    ulSectionLength: ULONG,
    lpSectionGlobalDataBase: PVOID,
    ulSectionGlobalDataLength: ULONG,
};
pub const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub const PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = [*c]struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub const PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = [*c]const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub const struct_tagACTCTX_SECTION_KEYED_DATA = extern struct {
    cbSize: ULONG,
    ulDataFormatVersion: ULONG,
    lpData: PVOID,
    ulLength: ULONG,
    lpSectionGlobalData: PVOID,
    ulSectionGlobalDataLength: ULONG,
    lpSectionBase: PVOID,
    ulSectionTotalLength: ULONG,
    hActCtx: HANDLE,
    ulAssemblyRosterIndex: ULONG,
    ulFlags: ULONG,
    AssemblyMetadata: ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA,
};
pub const ACTCTX_SECTION_KEYED_DATA = struct_tagACTCTX_SECTION_KEYED_DATA;
pub const PACTCTX_SECTION_KEYED_DATA = [*c]struct_tagACTCTX_SECTION_KEYED_DATA;
pub const PCACTCTX_SECTION_KEYED_DATA = [*c]const ACTCTX_SECTION_KEYED_DATA;
extern fn FindActCtxSectionStringA(dwFlags: DWORD, lpExtensionGuid: [*c]const GUID, ulSectionId: ULONG, lpStringToFind: LPCSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
extern fn FindActCtxSectionStringW(dwFlags: DWORD, lpExtensionGuid: [*c]const GUID, ulSectionId: ULONG, lpStringToFind: LPCWSTR, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
extern fn FindActCtxSectionGuid(dwFlags: DWORD, lpExtensionGuid: [*c]const GUID, ulSectionId: ULONG, lpGuidToFind: [*c]const GUID, ReturnedData: PACTCTX_SECTION_KEYED_DATA) BOOL;
pub const struct__ACTIVATION_CONTEXT_BASIC_INFORMATION = extern struct {
    hActCtx: HANDLE,
    dwFlags: DWORD,
};
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION = struct__ACTIVATION_CONTEXT_BASIC_INFORMATION;
pub const PACTIVATION_CONTEXT_BASIC_INFORMATION = [*c]struct__ACTIVATION_CONTEXT_BASIC_INFORMATION;
pub const PCACTIVATION_CONTEXT_BASIC_INFORMATION = [*c]const struct__ACTIVATION_CONTEXT_BASIC_INFORMATION;
extern fn QueryActCtxW(dwFlags: DWORD, hActCtx: HANDLE, pvSubInstance: PVOID, ulInfoClass: ULONG, pvBuffer: PVOID, cbBuffer: SIZE_T, pcbWrittenOrRequired: [*c]SIZE_T) BOOL;
pub const PQUERYACTCTXW_FUNC = ?fn (DWORD, HANDLE, PVOID, ULONG, PVOID, SIZE_T, [*c]SIZE_T) callconv(std.os.windows.WINAPI) BOOL;
extern fn WTSGetActiveConsoleSessionId() DWORD;
extern fn WTSGetServiceSessionId() DWORD;
extern fn WTSIsServerContainer() BOOLEAN;
extern fn GetActiveProcessorGroupCount() WORD;
extern fn GetMaximumProcessorGroupCount() WORD;
extern fn GetActiveProcessorCount(GroupNumber: WORD) DWORD;
extern fn GetMaximumProcessorCount(GroupNumber: WORD) DWORD;
extern fn GetNumaProcessorNode(Processor: UCHAR, NodeNumber: PUCHAR) BOOL;
extern fn GetNumaNodeNumberFromHandle(hFile: HANDLE, NodeNumber: PUSHORT) BOOL;
extern fn GetNumaProcessorNodeEx(Processor: PPROCESSOR_NUMBER, NodeNumber: PUSHORT) BOOL;
extern fn GetNumaNodeProcessorMask(Node: UCHAR, ProcessorMask: PULONGLONG) BOOL;
extern fn GetNumaAvailableMemoryNode(Node: UCHAR, AvailableBytes: PULONGLONG) BOOL;
extern fn GetNumaAvailableMemoryNodeEx(Node: USHORT, AvailableBytes: PULONGLONG) BOOL;
extern fn GetNumaProximityNode(ProximityId: ULONG, NodeNumber: PUCHAR) BOOL;
pub const APPLICATION_RECOVERY_CALLBACK = ?fn (PVOID) callconv(std.os.windows.WINAPI) DWORD;
extern fn RegisterApplicationRecoveryCallback(pRecoveyCallback: APPLICATION_RECOVERY_CALLBACK, pvParameter: PVOID, dwPingInterval: DWORD, dwFlags: DWORD) HRESULT;
extern fn UnregisterApplicationRecoveryCallback() HRESULT;
extern fn RegisterApplicationRestart(pwzCommandline: PCWSTR, dwFlags: DWORD) HRESULT;
extern fn UnregisterApplicationRestart() HRESULT;
extern fn GetApplicationRecoveryCallback(hProcess: HANDLE, pRecoveryCallback: [*c]APPLICATION_RECOVERY_CALLBACK, ppvParameter: [*c]PVOID, pdwPingInterval: PDWORD, pdwFlags: PDWORD) HRESULT;
extern fn GetApplicationRestartSettings(hProcess: HANDLE, pwzCommandline: PWSTR, pcchSize: PDWORD, pdwFlags: PDWORD) HRESULT;
extern fn ApplicationRecoveryInProgress(pbCancelled: PBOOL) HRESULT;
extern fn ApplicationRecoveryFinished(bSuccess: BOOL) void;
pub const struct__FILE_BASIC_INFO = extern struct {
    CreationTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    LastWriteTime: LARGE_INTEGER,
    ChangeTime: LARGE_INTEGER,
    FileAttributes: DWORD,
};
pub const FILE_BASIC_INFO = struct__FILE_BASIC_INFO;
pub const PFILE_BASIC_INFO = [*c]struct__FILE_BASIC_INFO;
pub const struct__FILE_STANDARD_INFO = extern struct {
    AllocationSize: LARGE_INTEGER,
    EndOfFile: LARGE_INTEGER,
    NumberOfLinks: DWORD,
    DeletePending: BOOLEAN,
    Directory: BOOLEAN,
};
pub const FILE_STANDARD_INFO = struct__FILE_STANDARD_INFO;
pub const PFILE_STANDARD_INFO = [*c]struct__FILE_STANDARD_INFO;
pub const struct__FILE_NAME_INFO = extern struct {
    FileNameLength: DWORD,
    FileName: [1]WCHAR,
};
pub const FILE_NAME_INFO = struct__FILE_NAME_INFO;
pub const PFILE_NAME_INFO = [*c]struct__FILE_NAME_INFO;
pub const struct__FILE_CASE_SENSITIVE_INFO = extern struct {
    Flags: ULONG,
};
pub const FILE_CASE_SENSITIVE_INFO = struct__FILE_CASE_SENSITIVE_INFO;
pub const PFILE_CASE_SENSITIVE_INFO = [*c]struct__FILE_CASE_SENSITIVE_INFO;
pub const struct__FILE_RENAME_INFO = extern struct {
    @"": extern union {
        ReplaceIfExists: BOOLEAN,
        Flags: DWORD,
    },
    RootDirectory: HANDLE,
    FileNameLength: DWORD,
    FileName: [1]WCHAR,
};
pub const FILE_RENAME_INFO = struct__FILE_RENAME_INFO;
pub const PFILE_RENAME_INFO = [*c]struct__FILE_RENAME_INFO;
pub const struct__FILE_ALLOCATION_INFO = extern struct {
    AllocationSize: LARGE_INTEGER,
};
pub const FILE_ALLOCATION_INFO = struct__FILE_ALLOCATION_INFO;
pub const PFILE_ALLOCATION_INFO = [*c]struct__FILE_ALLOCATION_INFO;
pub const struct__FILE_END_OF_FILE_INFO = extern struct {
    EndOfFile: LARGE_INTEGER,
};
pub const FILE_END_OF_FILE_INFO = struct__FILE_END_OF_FILE_INFO;
pub const PFILE_END_OF_FILE_INFO = [*c]struct__FILE_END_OF_FILE_INFO;
pub const struct__FILE_STREAM_INFO = extern struct {
    NextEntryOffset: DWORD,
    StreamNameLength: DWORD,
    StreamSize: LARGE_INTEGER,
    StreamAllocationSize: LARGE_INTEGER,
    StreamName: [1]WCHAR,
};
pub const FILE_STREAM_INFO = struct__FILE_STREAM_INFO;
pub const PFILE_STREAM_INFO = [*c]struct__FILE_STREAM_INFO;
pub const struct__FILE_COMPRESSION_INFO = extern struct {
    CompressedFileSize: LARGE_INTEGER,
    CompressionFormat: WORD,
    CompressionUnitShift: UCHAR,
    ChunkShift: UCHAR,
    ClusterShift: UCHAR,
    Reserved: [3]UCHAR,
};
pub const FILE_COMPRESSION_INFO = struct__FILE_COMPRESSION_INFO;
pub const PFILE_COMPRESSION_INFO = [*c]struct__FILE_COMPRESSION_INFO;
pub const struct__FILE_ATTRIBUTE_TAG_INFO = extern struct {
    FileAttributes: DWORD,
    ReparseTag: DWORD,
};
pub const FILE_ATTRIBUTE_TAG_INFO = struct__FILE_ATTRIBUTE_TAG_INFO;
pub const PFILE_ATTRIBUTE_TAG_INFO = [*c]struct__FILE_ATTRIBUTE_TAG_INFO;
pub const struct__FILE_DISPOSITION_INFO = extern struct {
    DeleteFileA: BOOLEAN,
};
pub const FILE_DISPOSITION_INFO = struct__FILE_DISPOSITION_INFO;
pub const PFILE_DISPOSITION_INFO = [*c]struct__FILE_DISPOSITION_INFO;
pub const struct__FILE_DISPOSITION_INFO_EX = extern struct {
    Flags: DWORD,
};
pub const FILE_DISPOSITION_INFO_EX = struct__FILE_DISPOSITION_INFO_EX;
pub const PFILE_DISPOSITION_INFO_EX = [*c]struct__FILE_DISPOSITION_INFO_EX;
pub const struct__FILE_ID_BOTH_DIR_INFO = extern struct {
    NextEntryOffset: DWORD,
    FileIndex: DWORD,
    CreationTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    LastWriteTime: LARGE_INTEGER,
    ChangeTime: LARGE_INTEGER,
    EndOfFile: LARGE_INTEGER,
    AllocationSize: LARGE_INTEGER,
    FileAttributes: DWORD,
    FileNameLength: DWORD,
    EaSize: DWORD,
    ShortNameLength: CCHAR,
    ShortName: [12]WCHAR,
    FileId: LARGE_INTEGER,
    FileName: [1]WCHAR,
};
pub const FILE_ID_BOTH_DIR_INFO = struct__FILE_ID_BOTH_DIR_INFO;
pub const PFILE_ID_BOTH_DIR_INFO = [*c]struct__FILE_ID_BOTH_DIR_INFO;
pub const struct__FILE_FULL_DIR_INFO = extern struct {
    NextEntryOffset: ULONG,
    FileIndex: ULONG,
    CreationTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    LastWriteTime: LARGE_INTEGER,
    ChangeTime: LARGE_INTEGER,
    EndOfFile: LARGE_INTEGER,
    AllocationSize: LARGE_INTEGER,
    FileAttributes: ULONG,
    FileNameLength: ULONG,
    EaSize: ULONG,
    FileName: [1]WCHAR,
};
pub const FILE_FULL_DIR_INFO = struct__FILE_FULL_DIR_INFO;
pub const PFILE_FULL_DIR_INFO = [*c]struct__FILE_FULL_DIR_INFO;
pub const IoPriorityHintVeryLow = enum__PRIORITY_HINT.IoPriorityHintVeryLow;
pub const IoPriorityHintLow = enum__PRIORITY_HINT.IoPriorityHintLow;
pub const IoPriorityHintNormal = enum__PRIORITY_HINT.IoPriorityHintNormal;
pub const MaximumIoPriorityHintType = enum__PRIORITY_HINT.MaximumIoPriorityHintType;
pub const enum__PRIORITY_HINT = extern enum {
    IoPriorityHintVeryLow = 0,
    IoPriorityHintLow = 1,
    IoPriorityHintNormal = 2,
    MaximumIoPriorityHintType = 3,
};
pub const PRIORITY_HINT = enum__PRIORITY_HINT;
pub const struct__FILE_IO_PRIORITY_HINT_INFO = extern struct {
    PriorityHint: PRIORITY_HINT,
};
pub const FILE_IO_PRIORITY_HINT_INFO = struct__FILE_IO_PRIORITY_HINT_INFO;
pub const PFILE_IO_PRIORITY_HINT_INFO = [*c]struct__FILE_IO_PRIORITY_HINT_INFO;
pub const struct__FILE_ALIGNMENT_INFO = extern struct {
    AlignmentRequirement: ULONG,
};
pub const FILE_ALIGNMENT_INFO = struct__FILE_ALIGNMENT_INFO;
pub const PFILE_ALIGNMENT_INFO = [*c]struct__FILE_ALIGNMENT_INFO;
pub const struct__FILE_STORAGE_INFO = extern struct {
    LogicalBytesPerSector: ULONG,
    PhysicalBytesPerSectorForAtomicity: ULONG,
    PhysicalBytesPerSectorForPerformance: ULONG,
    FileSystemEffectivePhysicalBytesPerSectorForAtomicity: ULONG,
    Flags: ULONG,
    ByteOffsetForSectorAlignment: ULONG,
    ByteOffsetForPartitionAlignment: ULONG,
};
pub const FILE_STORAGE_INFO = struct__FILE_STORAGE_INFO;
pub const PFILE_STORAGE_INFO = [*c]struct__FILE_STORAGE_INFO;
pub const struct__FILE_ID_INFO = extern struct {
    VolumeSerialNumber: ULONGLONG,
    FileId: FILE_ID_128,
};
pub const FILE_ID_INFO = struct__FILE_ID_INFO;
pub const PFILE_ID_INFO = [*c]struct__FILE_ID_INFO;
pub const struct__FILE_ID_EXTD_DIR_INFO = extern struct {
    NextEntryOffset: ULONG,
    FileIndex: ULONG,
    CreationTime: LARGE_INTEGER,
    LastAccessTime: LARGE_INTEGER,
    LastWriteTime: LARGE_INTEGER,
    ChangeTime: LARGE_INTEGER,
    EndOfFile: LARGE_INTEGER,
    AllocationSize: LARGE_INTEGER,
    FileAttributes: ULONG,
    FileNameLength: ULONG,
    EaSize: ULONG,
    ReparsePointTag: ULONG,
    FileId: FILE_ID_128,
    FileName: [1]WCHAR,
};
pub const FILE_ID_EXTD_DIR_INFO = struct__FILE_ID_EXTD_DIR_INFO;
pub const PFILE_ID_EXTD_DIR_INFO = [*c]struct__FILE_ID_EXTD_DIR_INFO;
pub const struct__FILE_REMOTE_PROTOCOL_INFO = extern struct {
    StructureVersion: USHORT,
    StructureSize: USHORT,
    Protocol: ULONG,
    ProtocolMajorVersion: USHORT,
    ProtocolMinorVersion: USHORT,
    ProtocolRevision: USHORT,
    Reserved: USHORT,
    Flags: ULONG,
    GenericReserved: extern struct {
        Reserved: [8]ULONG,
    },
    ProtocolSpecific: extern union {
        Smb2: extern struct {
            Server: extern struct {
                Capabilities: ULONG,
            },
            Share: extern struct {
                Capabilities: ULONG,
                CachingFlags: ULONG,
            },
        },
        Reserved: [16]ULONG,
    },
};
pub const FILE_REMOTE_PROTOCOL_INFO = struct__FILE_REMOTE_PROTOCOL_INFO;
pub const PFILE_REMOTE_PROTOCOL_INFO = [*c]struct__FILE_REMOTE_PROTOCOL_INFO;
extern fn GetFileInformationByHandleEx(hFile: HANDLE, FileInformationClass: FILE_INFO_BY_HANDLE_CLASS, lpFileInformation: LPVOID, dwBufferSize: DWORD) BOOL;
pub const FileIdType = enum__FILE_ID_TYPE.FileIdType;
pub const ObjectIdType = enum__FILE_ID_TYPE.ObjectIdType;
pub const ExtendedFileIdType = enum__FILE_ID_TYPE.ExtendedFileIdType;
pub const MaximumFileIdType = enum__FILE_ID_TYPE.MaximumFileIdType;
pub const enum__FILE_ID_TYPE = extern enum {
    FileIdType,
    ObjectIdType,
    ExtendedFileIdType,
    MaximumFileIdType,
};
pub const FILE_ID_TYPE = enum__FILE_ID_TYPE;
pub const PFILE_ID_TYPE = [*c]enum__FILE_ID_TYPE;
pub const struct_FILE_ID_DESCRIPTOR = extern struct {
    dwSize: DWORD,
    Type: FILE_ID_TYPE,
    @"": extern union {
        FileId: LARGE_INTEGER,
        ObjectId: GUID,
        ExtendedFileId: FILE_ID_128,
    },
};
pub const FILE_ID_DESCRIPTOR = struct_FILE_ID_DESCRIPTOR;
pub const LPFILE_ID_DESCRIPTOR = [*c]struct_FILE_ID_DESCRIPTOR;
extern fn OpenFileById(hVolumeHint: HANDLE, lpFileId: LPFILE_ID_DESCRIPTOR, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, dwFlagsAndAttributes: DWORD) HANDLE;
extern fn CreateSymbolicLinkA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD) BOOLEAN;
extern fn CreateSymbolicLinkW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD) BOOLEAN;
extern fn QueryActCtxSettingsW(dwFlags: DWORD, hActCtx: HANDLE, settingsNameSpace: PCWSTR, settingName: PCWSTR, pvBuffer: PWSTR, dwBuffer: SIZE_T, pdwWrittenOrRequired: [*c]SIZE_T) BOOL;
extern fn CreateSymbolicLinkTransactedA(lpSymlinkFileName: LPCSTR, lpTargetFileName: LPCSTR, dwFlags: DWORD, hTransaction: HANDLE) BOOLEAN;
extern fn CreateSymbolicLinkTransactedW(lpSymlinkFileName: LPCWSTR, lpTargetFileName: LPCWSTR, dwFlags: DWORD, hTransaction: HANDLE) BOOLEAN;
extern fn ReplacePartitionUnit(TargetPartition: PWSTR, SparePartition: PWSTR, Flags: ULONG) BOOL;
extern fn AddSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) BOOL;
extern fn RemoveSecureMemoryCacheCallback(pfnCallBack: PSECURE_MEMORY_CACHE_CALLBACK) BOOL;
extern fn CopyContext(Destination: PCONTEXT, ContextFlags: DWORD, Source: PCONTEXT) BOOL;
extern fn InitializeContext(Buffer: PVOID, ContextFlags: DWORD, Context: [*c]PCONTEXT, ContextLength: PDWORD) BOOL;
extern fn InitializeContext2(Buffer: PVOID, ContextFlags: DWORD, Context: [*c]PCONTEXT, ContextLength: PDWORD, XStateCompactionMask: ULONG64) BOOL;
extern fn GetEnabledXStateFeatures() DWORD64;
extern fn GetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: PDWORD64) BOOL;
extern fn LocateXStateFeature(Context: PCONTEXT, FeatureId: DWORD, Length: PDWORD) PVOID;
extern fn SetXStateFeaturesMask(Context: PCONTEXT, FeatureMask: DWORD64) BOOL;
extern fn EnableThreadProfiling(ThreadHandle: HANDLE, Flags: DWORD, HardwareCounters: DWORD64, PerformanceDataHandle: [*c]HANDLE) DWORD;
extern fn DisableThreadProfiling(PerformanceDataHandle: HANDLE) DWORD;
extern fn QueryThreadProfiling(ThreadHandle: HANDLE, Enabled: PBOOLEAN) DWORD;
extern fn ReadThreadProfilingData(PerformanceDataHandle: HANDLE, Flags: DWORD, PerformanceData: PPERFORMANCE_DATA) DWORD;
extern fn RaiseCustomSystemEventTrigger(CustomSystemEventTriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG) DWORD;
pub const struct__DRAWPATRECT = extern struct {
    ptPosition: POINT,
    ptSize: POINT,
    wStyle: WORD,
    wPattern: WORD,
};
pub const DRAWPATRECT = struct__DRAWPATRECT;
pub const PDRAWPATRECT = [*c]struct__DRAWPATRECT;
pub const struct__PSINJECTDATA = extern struct {
    DataBytes: DWORD,
    InjectionPoint: WORD,
    PageNumber: WORD,
};
pub const PSINJECTDATA = struct__PSINJECTDATA;
pub const PPSINJECTDATA = [*c]struct__PSINJECTDATA;
pub const struct__PSFEATURE_OUTPUT = extern struct {
    bPageIndependent: BOOL,
    bSetPageDevice: BOOL,
};
pub const PSFEATURE_OUTPUT = struct__PSFEATURE_OUTPUT;
pub const PPSFEATURE_OUTPUT = [*c]struct__PSFEATURE_OUTPUT;
pub const struct__PSFEATURE_CUSTPAPER = extern struct {
    lOrientation: LONG,
    lWidth: LONG,
    lHeight: LONG,
    lWidthOffset: LONG,
    lHeightOffset: LONG,
};
pub const PSFEATURE_CUSTPAPER = struct__PSFEATURE_CUSTPAPER;
pub const PPSFEATURE_CUSTPAPER = [*c]struct__PSFEATURE_CUSTPAPER;
pub const struct_tagXFORM = extern struct {
    eM11: FLOAT,
    eM12: FLOAT,
    eM21: FLOAT,
    eM22: FLOAT,
    eDx: FLOAT,
    eDy: FLOAT,
};
pub const XFORM = struct_tagXFORM;
pub const PXFORM = [*c]struct_tagXFORM;
pub const LPXFORM = [*c]struct_tagXFORM;
pub const struct_tagBITMAP = extern struct {
    bmType: LONG,
    bmWidth: LONG,
    bmHeight: LONG,
    bmWidthBytes: LONG,
    bmPlanes: WORD,
    bmBitsPixel: WORD,
    bmBits: LPVOID,
};
pub const BITMAP = struct_tagBITMAP;
pub const PBITMAP = [*c]struct_tagBITMAP;
pub const NPBITMAP = [*c]struct_tagBITMAP;
pub const LPBITMAP = [*c]struct_tagBITMAP;
pub const struct_tagRGBTRIPLE = extern struct {
    rgbtBlue: BYTE,
    rgbtGreen: BYTE,
    rgbtRed: BYTE,
};
pub const RGBTRIPLE = struct_tagRGBTRIPLE;
pub const PRGBTRIPLE = [*c]struct_tagRGBTRIPLE;
pub const NPRGBTRIPLE = [*c]struct_tagRGBTRIPLE;
pub const LPRGBTRIPLE = [*c]struct_tagRGBTRIPLE;
pub const struct_tagRGBQUAD = extern struct {
    rgbBlue: BYTE,
    rgbGreen: BYTE,
    rgbRed: BYTE,
    rgbReserved: BYTE,
};
pub const RGBQUAD = struct_tagRGBQUAD;
pub const LPRGBQUAD = [*c]RGBQUAD;
pub const LCSCSTYPE = LONG;
pub const LCSGAMUTMATCH = LONG;
pub const FXPT16DOT16 = c_long;
pub const LPFXPT16DOT16 = [*c]c_long;
pub const FXPT2DOT30 = c_long;
pub const LPFXPT2DOT30 = [*c]c_long;
pub const struct_tagCIEXYZ = extern struct {
    ciexyzX: FXPT2DOT30,
    ciexyzY: FXPT2DOT30,
    ciexyzZ: FXPT2DOT30,
};
pub const CIEXYZ = struct_tagCIEXYZ;
pub const LPCIEXYZ = [*c]CIEXYZ;
pub const struct_tagICEXYZTRIPLE = extern struct {
    ciexyzRed: CIEXYZ,
    ciexyzGreen: CIEXYZ,
    ciexyzBlue: CIEXYZ,
};
pub const CIEXYZTRIPLE = struct_tagICEXYZTRIPLE;
pub const LPCIEXYZTRIPLE = [*c]CIEXYZTRIPLE;
pub const struct_tagLOGCOLORSPACEA = extern struct {
    lcsSignature: DWORD,
    lcsVersion: DWORD,
    lcsSize: DWORD,
    lcsCSType: LCSCSTYPE,
    lcsIntent: LCSGAMUTMATCH,
    lcsEndpoints: CIEXYZTRIPLE,
    lcsGammaRed: DWORD,
    lcsGammaGreen: DWORD,
    lcsGammaBlue: DWORD,
    lcsFilename: [260]CHAR,
};
pub const LOGCOLORSPACEA = struct_tagLOGCOLORSPACEA;
pub const LPLOGCOLORSPACEA = [*c]struct_tagLOGCOLORSPACEA;
pub const struct_tagLOGCOLORSPACEW = extern struct {
    lcsSignature: DWORD,
    lcsVersion: DWORD,
    lcsSize: DWORD,
    lcsCSType: LCSCSTYPE,
    lcsIntent: LCSGAMUTMATCH,
    lcsEndpoints: CIEXYZTRIPLE,
    lcsGammaRed: DWORD,
    lcsGammaGreen: DWORD,
    lcsGammaBlue: DWORD,
    lcsFilename: [260]WCHAR,
};
pub const LOGCOLORSPACEW = struct_tagLOGCOLORSPACEW;
pub const LPLOGCOLORSPACEW = [*c]struct_tagLOGCOLORSPACEW;
pub const LOGCOLORSPACE = LOGCOLORSPACEA;
pub const LPLOGCOLORSPACE = LPLOGCOLORSPACEA;
pub const struct_tagBITMAPCOREHEADER = extern struct {
    bcSize: DWORD,
    bcWidth: WORD,
    bcHeight: WORD,
    bcPlanes: WORD,
    bcBitCount: WORD,
};
pub const BITMAPCOREHEADER = struct_tagBITMAPCOREHEADER;
pub const LPBITMAPCOREHEADER = [*c]struct_tagBITMAPCOREHEADER;
pub const PBITMAPCOREHEADER = [*c]struct_tagBITMAPCOREHEADER;
pub const struct_tagBITMAPINFOHEADER = extern struct {
    biSize: DWORD,
    biWidth: LONG,
    biHeight: LONG,
    biPlanes: WORD,
    biBitCount: WORD,
    biCompression: DWORD,
    biSizeImage: DWORD,
    biXPelsPerMeter: LONG,
    biYPelsPerMeter: LONG,
    biClrUsed: DWORD,
    biClrImportant: DWORD,
};
pub const BITMAPINFOHEADER = struct_tagBITMAPINFOHEADER;
pub const LPBITMAPINFOHEADER = [*c]struct_tagBITMAPINFOHEADER;
pub const PBITMAPINFOHEADER = [*c]struct_tagBITMAPINFOHEADER;
pub const BITMAPV4HEADER = extern struct {
    bV4Size: DWORD,
    bV4Width: LONG,
    bV4Height: LONG,
    bV4Planes: WORD,
    bV4BitCount: WORD,
    bV4V4Compression: DWORD,
    bV4SizeImage: DWORD,
    bV4XPelsPerMeter: LONG,
    bV4YPelsPerMeter: LONG,
    bV4ClrUsed: DWORD,
    bV4ClrImportant: DWORD,
    bV4RedMask: DWORD,
    bV4GreenMask: DWORD,
    bV4BlueMask: DWORD,
    bV4AlphaMask: DWORD,
    bV4CSType: DWORD,
    bV4Endpoints: CIEXYZTRIPLE,
    bV4GammaRed: DWORD,
    bV4GammaGreen: DWORD,
    bV4GammaBlue: DWORD,
};
pub const LPBITMAPV4HEADER = [*c]extern struct {
    bV4Size: DWORD,
    bV4Width: LONG,
    bV4Height: LONG,
    bV4Planes: WORD,
    bV4BitCount: WORD,
    bV4V4Compression: DWORD,
    bV4SizeImage: DWORD,
    bV4XPelsPerMeter: LONG,
    bV4YPelsPerMeter: LONG,
    bV4ClrUsed: DWORD,
    bV4ClrImportant: DWORD,
    bV4RedMask: DWORD,
    bV4GreenMask: DWORD,
    bV4BlueMask: DWORD,
    bV4AlphaMask: DWORD,
    bV4CSType: DWORD,
    bV4Endpoints: CIEXYZTRIPLE,
    bV4GammaRed: DWORD,
    bV4GammaGreen: DWORD,
    bV4GammaBlue: DWORD,
};
pub const PBITMAPV4HEADER = [*c]extern struct {
    bV4Size: DWORD,
    bV4Width: LONG,
    bV4Height: LONG,
    bV4Planes: WORD,
    bV4BitCount: WORD,
    bV4V4Compression: DWORD,
    bV4SizeImage: DWORD,
    bV4XPelsPerMeter: LONG,
    bV4YPelsPerMeter: LONG,
    bV4ClrUsed: DWORD,
    bV4ClrImportant: DWORD,
    bV4RedMask: DWORD,
    bV4GreenMask: DWORD,
    bV4BlueMask: DWORD,
    bV4AlphaMask: DWORD,
    bV4CSType: DWORD,
    bV4Endpoints: CIEXYZTRIPLE,
    bV4GammaRed: DWORD,
    bV4GammaGreen: DWORD,
    bV4GammaBlue: DWORD,
};
pub const BITMAPV5HEADER = extern struct {
    bV5Size: DWORD,
    bV5Width: LONG,
    bV5Height: LONG,
    bV5Planes: WORD,
    bV5BitCount: WORD,
    bV5Compression: DWORD,
    bV5SizeImage: DWORD,
    bV5XPelsPerMeter: LONG,
    bV5YPelsPerMeter: LONG,
    bV5ClrUsed: DWORD,
    bV5ClrImportant: DWORD,
    bV5RedMask: DWORD,
    bV5GreenMask: DWORD,
    bV5BlueMask: DWORD,
    bV5AlphaMask: DWORD,
    bV5CSType: DWORD,
    bV5Endpoints: CIEXYZTRIPLE,
    bV5GammaRed: DWORD,
    bV5GammaGreen: DWORD,
    bV5GammaBlue: DWORD,
    bV5Intent: DWORD,
    bV5ProfileData: DWORD,
    bV5ProfileSize: DWORD,
    bV5Reserved: DWORD,
};
pub const LPBITMAPV5HEADER = [*c]extern struct {
    bV5Size: DWORD,
    bV5Width: LONG,
    bV5Height: LONG,
    bV5Planes: WORD,
    bV5BitCount: WORD,
    bV5Compression: DWORD,
    bV5SizeImage: DWORD,
    bV5XPelsPerMeter: LONG,
    bV5YPelsPerMeter: LONG,
    bV5ClrUsed: DWORD,
    bV5ClrImportant: DWORD,
    bV5RedMask: DWORD,
    bV5GreenMask: DWORD,
    bV5BlueMask: DWORD,
    bV5AlphaMask: DWORD,
    bV5CSType: DWORD,
    bV5Endpoints: CIEXYZTRIPLE,
    bV5GammaRed: DWORD,
    bV5GammaGreen: DWORD,
    bV5GammaBlue: DWORD,
    bV5Intent: DWORD,
    bV5ProfileData: DWORD,
    bV5ProfileSize: DWORD,
    bV5Reserved: DWORD,
};
pub const PBITMAPV5HEADER = [*c]extern struct {
    bV5Size: DWORD,
    bV5Width: LONG,
    bV5Height: LONG,
    bV5Planes: WORD,
    bV5BitCount: WORD,
    bV5Compression: DWORD,
    bV5SizeImage: DWORD,
    bV5XPelsPerMeter: LONG,
    bV5YPelsPerMeter: LONG,
    bV5ClrUsed: DWORD,
    bV5ClrImportant: DWORD,
    bV5RedMask: DWORD,
    bV5GreenMask: DWORD,
    bV5BlueMask: DWORD,
    bV5AlphaMask: DWORD,
    bV5CSType: DWORD,
    bV5Endpoints: CIEXYZTRIPLE,
    bV5GammaRed: DWORD,
    bV5GammaGreen: DWORD,
    bV5GammaBlue: DWORD,
    bV5Intent: DWORD,
    bV5ProfileData: DWORD,
    bV5ProfileSize: DWORD,
    bV5Reserved: DWORD,
};
pub const struct_tagBITMAPINFO = extern struct {
    bmiHeader: BITMAPINFOHEADER,
    bmiColors: [1]RGBQUAD,
};
pub const BITMAPINFO = struct_tagBITMAPINFO;
pub const LPBITMAPINFO = [*c]struct_tagBITMAPINFO;
pub const PBITMAPINFO = [*c]struct_tagBITMAPINFO;
pub const struct_tagBITMAPCOREINFO = extern struct {
    bmciHeader: BITMAPCOREHEADER,
    bmciColors: [1]RGBTRIPLE,
};
pub const BITMAPCOREINFO = struct_tagBITMAPCOREINFO;
pub const LPBITMAPCOREINFO = [*c]struct_tagBITMAPCOREINFO;
pub const PBITMAPCOREINFO = [*c]struct_tagBITMAPCOREINFO;
pub const struct_tagBITMAPFILEHEADER = extern struct {
    bfType: WORD,
    bfSize: DWORD,
    bfReserved1: WORD,
    bfReserved2: WORD,
    bfOffBits: DWORD,
};
pub const BITMAPFILEHEADER = struct_tagBITMAPFILEHEADER;
pub const LPBITMAPFILEHEADER = [*c]struct_tagBITMAPFILEHEADER;
pub const PBITMAPFILEHEADER = [*c]struct_tagBITMAPFILEHEADER;
pub const struct_tagFONTSIGNATURE = extern struct {
    fsUsb: [4]DWORD,
    fsCsb: [2]DWORD,
};
pub const FONTSIGNATURE = struct_tagFONTSIGNATURE;
pub const PFONTSIGNATURE = [*c]struct_tagFONTSIGNATURE;
pub const LPFONTSIGNATURE = [*c]struct_tagFONTSIGNATURE;
pub const struct_tagCHARSETINFO = extern struct {
    ciCharset: UINT,
    ciACP: UINT,
    fs: FONTSIGNATURE,
};
pub const CHARSETINFO = struct_tagCHARSETINFO;
pub const PCHARSETINFO = [*c]struct_tagCHARSETINFO;
pub const NPCHARSETINFO = [*c]struct_tagCHARSETINFO;
pub const LPCHARSETINFO = [*c]struct_tagCHARSETINFO;
pub const struct_tagLOCALESIGNATURE = extern struct {
    lsUsb: [4]DWORD,
    lsCsbDefault: [2]DWORD,
    lsCsbSupported: [2]DWORD,
};
pub const LOCALESIGNATURE = struct_tagLOCALESIGNATURE;
pub const PLOCALESIGNATURE = [*c]struct_tagLOCALESIGNATURE;
pub const LPLOCALESIGNATURE = [*c]struct_tagLOCALESIGNATURE;
pub const struct_tagHANDLETABLE = extern struct {
    objectHandle: [1]HGDIOBJ,
};
pub const HANDLETABLE = struct_tagHANDLETABLE;
pub const PHANDLETABLE = [*c]struct_tagHANDLETABLE;
pub const LPHANDLETABLE = [*c]struct_tagHANDLETABLE;
pub const struct_tagMETARECORD = extern struct {
    rdSize: DWORD,
    rdFunction: WORD,
    rdParm: [1]WORD,
};
pub const METARECORD = struct_tagMETARECORD;
pub const PMETARECORD = [*c]struct_tagMETARECORD;
pub const LPMETARECORD = [*c]struct_tagMETARECORD;
pub const struct_tagMETAFILEPICT = extern struct {
    mm: LONG,
    xExt: LONG,
    yExt: LONG,
    hMF: HMETAFILE,
};
pub const METAFILEPICT = struct_tagMETAFILEPICT;
pub const LPMETAFILEPICT = [*c]struct_tagMETAFILEPICT;
pub const struct_tagMETAHEADER = extern struct {
    mtType: WORD,
    mtHeaderSize: WORD,
    mtVersion: WORD,
    mtSize: DWORD,
    mtNoObjects: WORD,
    mtMaxRecord: DWORD,
    mtNoParameters: WORD,
};
pub const METAHEADER = struct_tagMETAHEADER;
pub const PMETAHEADER = [*c]struct_tagMETAHEADER;
pub const LPMETAHEADER = [*c]struct_tagMETAHEADER;
pub const struct_tagENHMETARECORD = extern struct {
    iType: DWORD,
    nSize: DWORD,
    dParm: [1]DWORD,
};
pub const ENHMETARECORD = struct_tagENHMETARECORD;
pub const PENHMETARECORD = [*c]struct_tagENHMETARECORD;
pub const LPENHMETARECORD = [*c]struct_tagENHMETARECORD;
pub const struct_tagENHMETAHEADER = extern struct {
    iType: DWORD,
    nSize: DWORD,
    rclBounds: RECTL,
    rclFrame: RECTL,
    dSignature: DWORD,
    nVersion: DWORD,
    nBytes: DWORD,
    nRecords: DWORD,
    nHandles: WORD,
    sReserved: WORD,
    nDescription: DWORD,
    offDescription: DWORD,
    nPalEntries: DWORD,
    szlDevice: SIZEL,
    szlMillimeters: SIZEL,
    cbPixelFormat: DWORD,
    offPixelFormat: DWORD,
    bOpenGL: DWORD,
    szlMicrometers: SIZEL,
};
pub const ENHMETAHEADER = struct_tagENHMETAHEADER;
pub const PENHMETAHEADER = [*c]struct_tagENHMETAHEADER;
pub const LPENHMETAHEADER = [*c]struct_tagENHMETAHEADER;
pub const BCHAR = BYTE;
pub const struct_tagTEXTMETRICA = extern struct {
    tmHeight: LONG,
    tmAscent: LONG,
    tmDescent: LONG,
    tmInternalLeading: LONG,
    tmExternalLeading: LONG,
    tmAveCharWidth: LONG,
    tmMaxCharWidth: LONG,
    tmWeight: LONG,
    tmOverhang: LONG,
    tmDigitizedAspectX: LONG,
    tmDigitizedAspectY: LONG,
    tmFirstChar: BYTE,
    tmLastChar: BYTE,
    tmDefaultChar: BYTE,
    tmBreakChar: BYTE,
    tmItalic: BYTE,
    tmUnderlined: BYTE,
    tmStruckOut: BYTE,
    tmPitchAndFamily: BYTE,
    tmCharSet: BYTE,
};
pub const TEXTMETRICA = struct_tagTEXTMETRICA;
pub const PTEXTMETRICA = [*c]struct_tagTEXTMETRICA;
pub const NPTEXTMETRICA = [*c]struct_tagTEXTMETRICA;
pub const LPTEXTMETRICA = [*c]struct_tagTEXTMETRICA;
pub const struct_tagTEXTMETRICW = extern struct {
    tmHeight: LONG,
    tmAscent: LONG,
    tmDescent: LONG,
    tmInternalLeading: LONG,
    tmExternalLeading: LONG,
    tmAveCharWidth: LONG,
    tmMaxCharWidth: LONG,
    tmWeight: LONG,
    tmOverhang: LONG,
    tmDigitizedAspectX: LONG,
    tmDigitizedAspectY: LONG,
    tmFirstChar: WCHAR,
    tmLastChar: WCHAR,
    tmDefaultChar: WCHAR,
    tmBreakChar: WCHAR,
    tmItalic: BYTE,
    tmUnderlined: BYTE,
    tmStruckOut: BYTE,
    tmPitchAndFamily: BYTE,
    tmCharSet: BYTE,
};
pub const TEXTMETRICW = struct_tagTEXTMETRICW;
pub const PTEXTMETRICW = [*c]struct_tagTEXTMETRICW;
pub const NPTEXTMETRICW = [*c]struct_tagTEXTMETRICW;
pub const LPTEXTMETRICW = [*c]struct_tagTEXTMETRICW;
pub const TEXTMETRIC = TEXTMETRICA;
pub const PTEXTMETRIC = PTEXTMETRICA;
pub const NPTEXTMETRIC = NPTEXTMETRICA;
pub const LPTEXTMETRIC = LPTEXTMETRICA;
pub const struct_tagNEWTEXTMETRICA = extern struct {
    tmHeight: LONG,
    tmAscent: LONG,
    tmDescent: LONG,
    tmInternalLeading: LONG,
    tmExternalLeading: LONG,
    tmAveCharWidth: LONG,
    tmMaxCharWidth: LONG,
    tmWeight: LONG,
    tmOverhang: LONG,
    tmDigitizedAspectX: LONG,
    tmDigitizedAspectY: LONG,
    tmFirstChar: BYTE,
    tmLastChar: BYTE,
    tmDefaultChar: BYTE,
    tmBreakChar: BYTE,
    tmItalic: BYTE,
    tmUnderlined: BYTE,
    tmStruckOut: BYTE,
    tmPitchAndFamily: BYTE,
    tmCharSet: BYTE,
    ntmFlags: DWORD,
    ntmSizeEM: UINT,
    ntmCellHeight: UINT,
    ntmAvgWidth: UINT,
};
pub const NEWTEXTMETRICA = struct_tagNEWTEXTMETRICA;
pub const PNEWTEXTMETRICA = [*c]struct_tagNEWTEXTMETRICA;
pub const NPNEWTEXTMETRICA = [*c]struct_tagNEWTEXTMETRICA;
pub const LPNEWTEXTMETRICA = [*c]struct_tagNEWTEXTMETRICA;
pub const struct_tagNEWTEXTMETRICW = extern struct {
    tmHeight: LONG,
    tmAscent: LONG,
    tmDescent: LONG,
    tmInternalLeading: LONG,
    tmExternalLeading: LONG,
    tmAveCharWidth: LONG,
    tmMaxCharWidth: LONG,
    tmWeight: LONG,
    tmOverhang: LONG,
    tmDigitizedAspectX: LONG,
    tmDigitizedAspectY: LONG,
    tmFirstChar: WCHAR,
    tmLastChar: WCHAR,
    tmDefaultChar: WCHAR,
    tmBreakChar: WCHAR,
    tmItalic: BYTE,
    tmUnderlined: BYTE,
    tmStruckOut: BYTE,
    tmPitchAndFamily: BYTE,
    tmCharSet: BYTE,
    ntmFlags: DWORD,
    ntmSizeEM: UINT,
    ntmCellHeight: UINT,
    ntmAvgWidth: UINT,
};
pub const NEWTEXTMETRICW = struct_tagNEWTEXTMETRICW;
pub const PNEWTEXTMETRICW = [*c]struct_tagNEWTEXTMETRICW;
pub const NPNEWTEXTMETRICW = [*c]struct_tagNEWTEXTMETRICW;
pub const LPNEWTEXTMETRICW = [*c]struct_tagNEWTEXTMETRICW;
pub const NEWTEXTMETRIC = NEWTEXTMETRICA;
pub const PNEWTEXTMETRIC = PNEWTEXTMETRICA;
pub const NPNEWTEXTMETRIC = NPNEWTEXTMETRICA;
pub const LPNEWTEXTMETRIC = LPNEWTEXTMETRICA;
pub const struct_tagNEWTEXTMETRICEXA = extern struct {
    ntmTm: NEWTEXTMETRICA,
    ntmFontSig: FONTSIGNATURE,
};
pub const NEWTEXTMETRICEXA = struct_tagNEWTEXTMETRICEXA;
pub const struct_tagNEWTEXTMETRICEXW = extern struct {
    ntmTm: NEWTEXTMETRICW,
    ntmFontSig: FONTSIGNATURE,
};
pub const NEWTEXTMETRICEXW = struct_tagNEWTEXTMETRICEXW;
pub const NEWTEXTMETRICEX = NEWTEXTMETRICEXA;
pub const struct_tagPELARRAY = extern struct {
    paXCount: LONG,
    paYCount: LONG,
    paXExt: LONG,
    paYExt: LONG,
    paRGBs: BYTE,
};
pub const PELARRAY = struct_tagPELARRAY;
pub const PPELARRAY = [*c]struct_tagPELARRAY;
pub const NPPELARRAY = [*c]struct_tagPELARRAY;
pub const LPPELARRAY = [*c]struct_tagPELARRAY;
pub const struct_tagLOGBRUSH = extern struct {
    lbStyle: UINT,
    lbColor: COLORREF,
    lbHatch: ULONG_PTR,
};
pub const LOGBRUSH = struct_tagLOGBRUSH;
pub const PLOGBRUSH = [*c]struct_tagLOGBRUSH;
pub const NPLOGBRUSH = [*c]struct_tagLOGBRUSH;
pub const LPLOGBRUSH = [*c]struct_tagLOGBRUSH;
pub const struct_tagLOGBRUSH32 = extern struct {
    lbStyle: UINT,
    lbColor: COLORREF,
    lbHatch: ULONG,
};
pub const LOGBRUSH32 = struct_tagLOGBRUSH32;
pub const PLOGBRUSH32 = [*c]struct_tagLOGBRUSH32;
pub const NPLOGBRUSH32 = [*c]struct_tagLOGBRUSH32;
pub const LPLOGBRUSH32 = [*c]struct_tagLOGBRUSH32;
pub const PATTERN = LOGBRUSH;
pub const PPATTERN = [*c]PATTERN;
pub const NPPATTERN = [*c]PATTERN;
pub const LPPATTERN = [*c]PATTERN;
pub const struct_tagLOGPEN = extern struct {
    lopnStyle: UINT,
    lopnWidth: POINT,
    lopnColor: COLORREF,
};
pub const LOGPEN = struct_tagLOGPEN;
pub const PLOGPEN = [*c]struct_tagLOGPEN;
pub const NPLOGPEN = [*c]struct_tagLOGPEN;
pub const LPLOGPEN = [*c]struct_tagLOGPEN;
pub const struct_tagEXTLOGPEN = extern struct {
    elpPenStyle: DWORD,
    elpWidth: DWORD,
    elpBrushStyle: UINT,
    elpColor: COLORREF,
    elpHatch: ULONG_PTR,
    elpNumEntries: DWORD,
    elpStyleEntry: [1]DWORD,
};
pub const EXTLOGPEN = struct_tagEXTLOGPEN;
pub const PEXTLOGPEN = [*c]struct_tagEXTLOGPEN;
pub const NPEXTLOGPEN = [*c]struct_tagEXTLOGPEN;
pub const LPEXTLOGPEN = [*c]struct_tagEXTLOGPEN;
pub const struct_tagEXTLOGPEN32 = extern struct {
    elpPenStyle: DWORD,
    elpWidth: DWORD,
    elpBrushStyle: UINT,
    elpColor: COLORREF,
    elpHatch: ULONG,
    elpNumEntries: DWORD,
    elpStyleEntry: [1]DWORD,
};
pub const EXTLOGPEN32 = struct_tagEXTLOGPEN32;
pub const PEXTLOGPEN32 = [*c]struct_tagEXTLOGPEN32;
pub const NPEXTLOGPEN32 = [*c]struct_tagEXTLOGPEN32;
pub const LPEXTLOGPEN32 = [*c]struct_tagEXTLOGPEN32;
pub const struct_tagPALETTEENTRY = extern struct {
    peRed: BYTE,
    peGreen: BYTE,
    peBlue: BYTE,
    peFlags: BYTE,
};
pub const PALETTEENTRY = struct_tagPALETTEENTRY;
pub const PPALETTEENTRY = [*c]struct_tagPALETTEENTRY;
pub const LPPALETTEENTRY = [*c]struct_tagPALETTEENTRY;
pub const struct_tagLOGPALETTE = extern struct {
    palVersion: WORD,
    palNumEntries: WORD,
    palPalEntry: [1]PALETTEENTRY,
};
pub const LOGPALETTE = struct_tagLOGPALETTE;
pub const PLOGPALETTE = [*c]struct_tagLOGPALETTE;
pub const NPLOGPALETTE = [*c]struct_tagLOGPALETTE;
pub const LPLOGPALETTE = [*c]struct_tagLOGPALETTE;
pub const struct_tagLOGFONTA = extern struct {
    lfHeight: LONG,
    lfWidth: LONG,
    lfEscapement: LONG,
    lfOrientation: LONG,
    lfWeight: LONG,
    lfItalic: BYTE,
    lfUnderline: BYTE,
    lfStrikeOut: BYTE,
    lfCharSet: BYTE,
    lfOutPrecision: BYTE,
    lfClipPrecision: BYTE,
    lfQuality: BYTE,
    lfPitchAndFamily: BYTE,
    lfFaceName: [32]CHAR,
};
pub const LOGFONTA = struct_tagLOGFONTA;
pub const PLOGFONTA = [*c]struct_tagLOGFONTA;
pub const NPLOGFONTA = [*c]struct_tagLOGFONTA;
pub const LPLOGFONTA = [*c]struct_tagLOGFONTA;
pub const struct_tagLOGFONTW = extern struct {
    lfHeight: LONG,
    lfWidth: LONG,
    lfEscapement: LONG,
    lfOrientation: LONG,
    lfWeight: LONG,
    lfItalic: BYTE,
    lfUnderline: BYTE,
    lfStrikeOut: BYTE,
    lfCharSet: BYTE,
    lfOutPrecision: BYTE,
    lfClipPrecision: BYTE,
    lfQuality: BYTE,
    lfPitchAndFamily: BYTE,
    lfFaceName: [32]WCHAR,
};
pub const LOGFONTW = struct_tagLOGFONTW;
pub const PLOGFONTW = [*c]struct_tagLOGFONTW;
pub const NPLOGFONTW = [*c]struct_tagLOGFONTW;
pub const LPLOGFONTW = [*c]struct_tagLOGFONTW;
pub const LOGFONT = LOGFONTA;
pub const PLOGFONT = PLOGFONTA;
pub const NPLOGFONT = NPLOGFONTA;
pub const LPLOGFONT = LPLOGFONTA;
pub const struct_tagENUMLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]BYTE,
    elfStyle: [32]BYTE,
};
pub const ENUMLOGFONTA = struct_tagENUMLOGFONTA;
pub const LPENUMLOGFONTA = [*c]struct_tagENUMLOGFONTA;
pub const struct_tagENUMLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]WCHAR,
    elfStyle: [32]WCHAR,
};
pub const ENUMLOGFONTW = struct_tagENUMLOGFONTW;
pub const LPENUMLOGFONTW = [*c]struct_tagENUMLOGFONTW;
pub const ENUMLOGFONT = ENUMLOGFONTA;
pub const LPENUMLOGFONT = LPENUMLOGFONTA;
pub const struct_tagENUMLOGFONTEXA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]BYTE,
    elfStyle: [32]BYTE,
    elfScript: [32]BYTE,
};
pub const ENUMLOGFONTEXA = struct_tagENUMLOGFONTEXA;
pub const LPENUMLOGFONTEXA = [*c]struct_tagENUMLOGFONTEXA;
pub const struct_tagENUMLOGFONTEXW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]WCHAR,
    elfStyle: [32]WCHAR,
    elfScript: [32]WCHAR,
};
pub const ENUMLOGFONTEXW = struct_tagENUMLOGFONTEXW;
pub const LPENUMLOGFONTEXW = [*c]struct_tagENUMLOGFONTEXW;
pub const ENUMLOGFONTEX = ENUMLOGFONTEXA;
pub const LPENUMLOGFONTEX = LPENUMLOGFONTEXA;
pub const struct_tagPANOSE = extern struct {
    bFamilyType: BYTE,
    bSerifStyle: BYTE,
    bWeight: BYTE,
    bProportion: BYTE,
    bContrast: BYTE,
    bStrokeVariation: BYTE,
    bArmStyle: BYTE,
    bLetterform: BYTE,
    bMidline: BYTE,
    bXHeight: BYTE,
};
pub const PANOSE = struct_tagPANOSE;
pub const LPPANOSE = [*c]struct_tagPANOSE;
pub const struct_tagEXTLOGFONTA = extern struct {
    elfLogFont: LOGFONTA,
    elfFullName: [64]BYTE,
    elfStyle: [32]BYTE,
    elfVersion: DWORD,
    elfStyleSize: DWORD,
    elfMatch: DWORD,
    elfReserved: DWORD,
    elfVendorId: [4]BYTE,
    elfCulture: DWORD,
    elfPanose: PANOSE,
};
pub const EXTLOGFONTA = struct_tagEXTLOGFONTA;
pub const PEXTLOGFONTA = [*c]struct_tagEXTLOGFONTA;
pub const NPEXTLOGFONTA = [*c]struct_tagEXTLOGFONTA;
pub const LPEXTLOGFONTA = [*c]struct_tagEXTLOGFONTA;
pub const struct_tagEXTLOGFONTW = extern struct {
    elfLogFont: LOGFONTW,
    elfFullName: [64]WCHAR,
    elfStyle: [32]WCHAR,
    elfVersion: DWORD,
    elfStyleSize: DWORD,
    elfMatch: DWORD,
    elfReserved: DWORD,
    elfVendorId: [4]BYTE,
    elfCulture: DWORD,
    elfPanose: PANOSE,
};
pub const EXTLOGFONTW = struct_tagEXTLOGFONTW;
pub const PEXTLOGFONTW = [*c]struct_tagEXTLOGFONTW;
pub const NPEXTLOGFONTW = [*c]struct_tagEXTLOGFONTW;
pub const LPEXTLOGFONTW = [*c]struct_tagEXTLOGFONTW;
pub const EXTLOGFONT = EXTLOGFONTA;
pub const PEXTLOGFONT = PEXTLOGFONTA;
pub const NPEXTLOGFONT = NPEXTLOGFONTA;
pub const LPEXTLOGFONT = LPEXTLOGFONTA;
pub const struct__devicemodeA = extern struct {
    dmDeviceName: [32]BYTE,
    dmSpecVersion: WORD,
    dmDriverVersion: WORD,
    dmSize: WORD,
    dmDriverExtra: WORD,
    dmFields: DWORD,
    @"": extern union {
        @"": extern struct {
            dmOrientation: c_short,
            dmPaperSize: c_short,
            dmPaperLength: c_short,
            dmPaperWidth: c_short,
            dmScale: c_short,
            dmCopies: c_short,
            dmDefaultSource: c_short,
            dmPrintQuality: c_short,
        },
        @"": extern struct {
            dmPosition: POINTL,
            dmDisplayOrientation: DWORD,
            dmDisplayFixedOutput: DWORD,
        },
    },
    dmColor: c_short,
    dmDuplex: c_short,
    dmYResolution: c_short,
    dmTTOption: c_short,
    dmCollate: c_short,
    dmFormName: [32]BYTE,
    dmLogPixels: WORD,
    dmBitsPerPel: DWORD,
    dmPelsWidth: DWORD,
    dmPelsHeight: DWORD,
    @"": extern union {
        dmDisplayFlags: DWORD,
        dmNup: DWORD,
    },
    dmDisplayFrequency: DWORD,
    dmICMMethod: DWORD,
    dmICMIntent: DWORD,
    dmMediaType: DWORD,
    dmDitherType: DWORD,
    dmReserved1: DWORD,
    dmReserved2: DWORD,
    dmPanningWidth: DWORD,
    dmPanningHeight: DWORD,
};
pub const DEVMODEA = struct__devicemodeA;
pub const PDEVMODEA = [*c]struct__devicemodeA;
pub const NPDEVMODEA = [*c]struct__devicemodeA;
pub const LPDEVMODEA = [*c]struct__devicemodeA;
pub const struct__devicemodeW = extern struct {
    dmDeviceName: [32]WCHAR,
    dmSpecVersion: WORD,
    dmDriverVersion: WORD,
    dmSize: WORD,
    dmDriverExtra: WORD,
    dmFields: DWORD,
    @"": extern union {
        @"": extern struct {
            dmOrientation: c_short,
            dmPaperSize: c_short,
            dmPaperLength: c_short,
            dmPaperWidth: c_short,
            dmScale: c_short,
            dmCopies: c_short,
            dmDefaultSource: c_short,
            dmPrintQuality: c_short,
        },
        @"": extern struct {
            dmPosition: POINTL,
            dmDisplayOrientation: DWORD,
            dmDisplayFixedOutput: DWORD,
        },
    },
    dmColor: c_short,
    dmDuplex: c_short,
    dmYResolution: c_short,
    dmTTOption: c_short,
    dmCollate: c_short,
    dmFormName: [32]WCHAR,
    dmLogPixels: WORD,
    dmBitsPerPel: DWORD,
    dmPelsWidth: DWORD,
    dmPelsHeight: DWORD,
    @"": extern union {
        dmDisplayFlags: DWORD,
        dmNup: DWORD,
    },
    dmDisplayFrequency: DWORD,
    dmICMMethod: DWORD,
    dmICMIntent: DWORD,
    dmMediaType: DWORD,
    dmDitherType: DWORD,
    dmReserved1: DWORD,
    dmReserved2: DWORD,
    dmPanningWidth: DWORD,
    dmPanningHeight: DWORD,
};
pub const DEVMODEW = struct__devicemodeW;
pub const PDEVMODEW = [*c]struct__devicemodeW;
pub const NPDEVMODEW = [*c]struct__devicemodeW;
pub const LPDEVMODEW = [*c]struct__devicemodeW;
pub const DEVMODE = DEVMODEA;
pub const PDEVMODE = PDEVMODEA;
pub const NPDEVMODE = NPDEVMODEA;
pub const LPDEVMODE = LPDEVMODEA;
pub const struct__DISPLAY_DEVICEA = extern struct {
    cb: DWORD,
    DeviceName: [32]CHAR,
    DeviceString: [128]CHAR,
    StateFlags: DWORD,
    DeviceID: [128]CHAR,
    DeviceKey: [128]CHAR,
};
pub const DISPLAY_DEVICEA = struct__DISPLAY_DEVICEA;
pub const PDISPLAY_DEVICEA = [*c]struct__DISPLAY_DEVICEA;
pub const LPDISPLAY_DEVICEA = [*c]struct__DISPLAY_DEVICEA;
pub const struct__DISPLAY_DEVICEW = extern struct {
    cb: DWORD,
    DeviceName: [32]WCHAR,
    DeviceString: [128]WCHAR,
    StateFlags: DWORD,
    DeviceID: [128]WCHAR,
    DeviceKey: [128]WCHAR,
};
pub const DISPLAY_DEVICEW = struct__DISPLAY_DEVICEW;
pub const PDISPLAY_DEVICEW = [*c]struct__DISPLAY_DEVICEW;
pub const LPDISPLAY_DEVICEW = [*c]struct__DISPLAY_DEVICEW;
pub const DISPLAY_DEVICE = DISPLAY_DEVICEA;
pub const PDISPLAY_DEVICE = PDISPLAY_DEVICEA;
pub const LPDISPLAY_DEVICE = LPDISPLAY_DEVICEA;
pub const struct_DISPLAYCONFIG_RATIONAL = extern struct {
    Numerator: UINT32,
    Denominator: UINT32,
};
pub const DISPLAYCONFIG_RATIONAL = struct_DISPLAYCONFIG_RATIONAL;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648;
pub const DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY = extern enum {
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = -2147483648,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3;
pub const DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_SCANLINE_ORDERING = extern enum {
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = -1,
};
pub const struct_DISPLAYCONFIG_2DREGION = extern struct {
    cx: UINT32,
    cy: UINT32,
};
pub const DISPLAYCONFIG_2DREGION = struct_DISPLAYCONFIG_2DREGION;
pub const struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO = extern struct {
    pixelRate: UINT64,
    hSyncFreq: DISPLAYCONFIG_RATIONAL,
    vSyncFreq: DISPLAYCONFIG_RATIONAL,
    activeSize: DISPLAYCONFIG_2DREGION,
    totalSize: DISPLAYCONFIG_2DREGION,
    @"": extern union {
        AdditionalSignalInfo: opaque {},
        videoStandard: UINT32,
    },
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
};
pub const DISPLAYCONFIG_VIDEO_SIGNAL_INFO = struct_DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
pub const DISPLAYCONFIG_SCALING_IDENTITY = 1;
pub const DISPLAYCONFIG_SCALING_CENTERED = 2;
pub const DISPLAYCONFIG_SCALING_STRETCHED = 3;
pub const DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4;
pub const DISPLAYCONFIG_SCALING_CUSTOM = 5;
pub const DISPLAYCONFIG_SCALING_PREFERRED = 128;
pub const DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_SCALING = extern enum {
    DISPLAYCONFIG_SCALING_IDENTITY = 1,
    DISPLAYCONFIG_SCALING_CENTERED = 2,
    DISPLAYCONFIG_SCALING_STRETCHED = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
    DISPLAYCONFIG_SCALING_CUSTOM = 5,
    DISPLAYCONFIG_SCALING_PREFERRED = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_ROTATION_IDENTITY = 1;
pub const DISPLAYCONFIG_ROTATION_ROTATE90 = 2;
pub const DISPLAYCONFIG_ROTATION_ROTATE180 = 3;
pub const DISPLAYCONFIG_ROTATION_ROTATE270 = 4;
pub const DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_ROTATION = extern enum {
    DISPLAYCONFIG_ROTATION_IDENTITY = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3;
pub const DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_MODE_INFO_TYPE = extern enum {
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_PIXELFORMAT_8BPP = 1;
pub const DISPLAYCONFIG_PIXELFORMAT_16BPP = 2;
pub const DISPLAYCONFIG_PIXELFORMAT_24BPP = 3;
pub const DISPLAYCONFIG_PIXELFORMAT_32BPP = 4;
pub const DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5;
pub const DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_PIXELFORMAT = extern enum {
    DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = -1,
};
pub const struct_DISPLAYCONFIG_SOURCE_MODE = extern struct {
    width: UINT32,
    height: UINT32,
    pixelFormat: DISPLAYCONFIG_PIXELFORMAT,
    position: POINTL,
};
pub const DISPLAYCONFIG_SOURCE_MODE = struct_DISPLAYCONFIG_SOURCE_MODE;
pub const struct_DISPLAYCONFIG_TARGET_MODE = extern struct {
    targetVideoSignalInfo: DISPLAYCONFIG_VIDEO_SIGNAL_INFO,
};
pub const DISPLAYCONFIG_TARGET_MODE = struct_DISPLAYCONFIG_TARGET_MODE;
pub const struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO = extern struct {
    PathSourceSize: POINTL,
    DesktopImageRegion: RECTL,
    DesktopImageClip: RECTL,
};
pub const DISPLAYCONFIG_DESKTOP_IMAGE_INFO = struct_DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
pub const struct_DISPLAYCONFIG_MODE_INFO = extern struct {
    infoType: DISPLAYCONFIG_MODE_INFO_TYPE,
    id: UINT32,
    adapterId: LUID,
    @"": extern union {
        targetMode: DISPLAYCONFIG_TARGET_MODE,
        sourceMode: DISPLAYCONFIG_SOURCE_MODE,
        desktopImageInfo: DISPLAYCONFIG_DESKTOP_IMAGE_INFO,
    },
};
pub const DISPLAYCONFIG_MODE_INFO = struct_DISPLAYCONFIG_MODE_INFO;
pub const struct_DISPLAYCONFIG_PATH_SOURCE_INFO = extern struct {
    adapterId: LUID,
    id: UINT32,
    @"": extern union {
        modeInfoIdx: UINT32,
        @"": opaque {},
    },
    statusFlags: UINT32,
};
pub const DISPLAYCONFIG_PATH_SOURCE_INFO = struct_DISPLAYCONFIG_PATH_SOURCE_INFO;
pub const struct_DISPLAYCONFIG_PATH_TARGET_INFO = extern struct {
    adapterId: LUID,
    id: UINT32,
    @"": extern union {
        modeInfoIdx: UINT32,
        @"": opaque {},
    },
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    rotation: DISPLAYCONFIG_ROTATION,
    scaling: DISPLAYCONFIG_SCALING,
    refreshRate: DISPLAYCONFIG_RATIONAL,
    scanLineOrdering: DISPLAYCONFIG_SCANLINE_ORDERING,
    targetAvailable: BOOL,
    statusFlags: UINT32,
};
pub const DISPLAYCONFIG_PATH_TARGET_INFO = struct_DISPLAYCONFIG_PATH_TARGET_INFO;
pub const struct_DISPLAYCONFIG_PATH_INFO = extern struct {
    sourceInfo: DISPLAYCONFIG_PATH_SOURCE_INFO,
    targetInfo: DISPLAYCONFIG_PATH_TARGET_INFO,
    flags: UINT32,
};
pub const DISPLAYCONFIG_PATH_INFO = struct_DISPLAYCONFIG_PATH_INFO;
pub const DISPLAYCONFIG_TOPOLOGY_INTERNAL = enum_DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_INTERNAL;
pub const DISPLAYCONFIG_TOPOLOGY_CLONE = enum_DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_CLONE;
pub const DISPLAYCONFIG_TOPOLOGY_EXTEND = enum_DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTEND;
pub const DISPLAYCONFIG_TOPOLOGY_EXTERNAL = enum_DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_EXTERNAL;
pub const DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = enum_DISPLAYCONFIG_TOPOLOGY_ID.DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32;
pub const enum_DISPLAYCONFIG_TOPOLOGY_ID = extern enum {
    DISPLAYCONFIG_TOPOLOGY_INTERNAL = 1,
    DISPLAYCONFIG_TOPOLOGY_CLONE = 2,
    DISPLAYCONFIG_TOPOLOGY_EXTEND = 4,
    DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 8,
    DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_TOPOLOGY_ID = enum_DISPLAYCONFIG_TOPOLOGY_ID;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9;
pub const DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10;
pub const DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11;
pub const DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1;
pub const DISPLAYCONFIG_DEVICE_INFO_TYPE = extern enum {
    DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
    DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
    DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
    DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
    DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
    DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
    DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
    DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11,
    DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = -1,
};
pub const struct_DISPLAYCONFIG_DEVICE_INFO_HEADER = extern struct {
    type: DISPLAYCONFIG_DEVICE_INFO_TYPE,
    size: UINT32,
    adapterId: LUID,
    id: UINT32,
};
pub const DISPLAYCONFIG_DEVICE_INFO_HEADER = struct_DISPLAYCONFIG_DEVICE_INFO_HEADER;
pub const struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    viewGdiDeviceName: [32]WCHAR,
};
pub const DISPLAYCONFIG_SOURCE_DEVICE_NAME = struct_DISPLAYCONFIG_SOURCE_DEVICE_NAME;
pub const struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = extern struct {
    @"": extern union {
        @"": opaque {},
        value: UINT32,
    },
};
pub const DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS = struct_DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
pub const struct_DISPLAYCONFIG_TARGET_DEVICE_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    flags: DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS,
    outputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
    edidManufactureId: UINT16,
    edidProductCodeId: UINT16,
    connectorInstance: UINT32,
    monitorFriendlyDeviceName: [64]WCHAR,
    monitorDevicePath: [128]WCHAR,
};
pub const DISPLAYCONFIG_TARGET_DEVICE_NAME = struct_DISPLAYCONFIG_TARGET_DEVICE_NAME;
pub const struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    width: UINT32,
    height: UINT32,
    targetMode: DISPLAYCONFIG_TARGET_MODE,
};
pub const DISPLAYCONFIG_TARGET_PREFERRED_MODE = struct_DISPLAYCONFIG_TARGET_PREFERRED_MODE;
pub const struct_DISPLAYCONFIG_ADAPTER_NAME = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    adapterDevicePath: [128]WCHAR,
};
pub const DISPLAYCONFIG_ADAPTER_NAME = struct_DISPLAYCONFIG_ADAPTER_NAME;
pub const struct_DISPLAYCONFIG_TARGET_BASE_TYPE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    baseOutputTechnology: DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY,
};
pub const DISPLAYCONFIG_TARGET_BASE_TYPE = struct_DISPLAYCONFIG_TARGET_BASE_TYPE;
pub const struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    @"": extern union {
        @"": opaque {},
        value: UINT32,
    },
};
pub const DISPLAYCONFIG_SET_TARGET_PERSISTENCE = struct_DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
pub const struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    @"": extern union {
        @"": opaque {},
        value: UINT32,
    },
};
pub const DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION = struct_DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
pub const DISPLAYCONFIG_COLOR_ENCODING_RGB = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_RGB;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR444;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR422;
pub const DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_YCBCR420;
pub const DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_INTENSITY;
pub const DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = enum__DISPLAYCONFIG_COLOR_ENCODING.DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32;
pub const enum__DISPLAYCONFIG_COLOR_ENCODING = extern enum {
    DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
    DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
    DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
    DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = -1,
};
pub const DISPLAYCONFIG_COLOR_ENCODING = enum__DISPLAYCONFIG_COLOR_ENCODING;
pub const struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    @"": extern union {
        @"": opaque {},
        value: UINT32,
    },
    colorEncoding: DISPLAYCONFIG_COLOR_ENCODING,
    bitsPerColorChannel: UINT32,
};
pub const DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
pub const struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    @"": extern union {
        @"": opaque {},
        value: UINT32,
    },
};
pub const DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
pub const struct__DISPLAYCONFIG_SDR_WHITE_LEVEL = extern struct {
    header: DISPLAYCONFIG_DEVICE_INFO_HEADER,
    SDRWhiteLevel: ULONG,
};
pub const DISPLAYCONFIG_SDR_WHITE_LEVEL = struct__DISPLAYCONFIG_SDR_WHITE_LEVEL;
pub const struct__RGNDATAHEADER = extern struct {
    dwSize: DWORD,
    iType: DWORD,
    nCount: DWORD,
    nRgnSize: DWORD,
    rcBound: RECT,
};
pub const RGNDATAHEADER = struct__RGNDATAHEADER;
pub const PRGNDATAHEADER = [*c]struct__RGNDATAHEADER;
pub const struct__RGNDATA = extern struct {
    rdh: RGNDATAHEADER,
    Buffer: [1]u8,
};
pub const RGNDATA = struct__RGNDATA;
pub const PRGNDATA = [*c]struct__RGNDATA;
pub const NPRGNDATA = [*c]struct__RGNDATA;
pub const LPRGNDATA = [*c]struct__RGNDATA;
pub const struct__ABC = extern struct {
    abcA: c_int,
    abcB: UINT,
    abcC: c_int,
};
pub const ABC = struct__ABC;
pub const PABC = [*c]struct__ABC;
pub const NPABC = [*c]struct__ABC;
pub const LPABC = [*c]struct__ABC;
pub const struct__ABCFLOAT = extern struct {
    abcfA: FLOAT,
    abcfB: FLOAT,
    abcfC: FLOAT,
};
pub const ABCFLOAT = struct__ABCFLOAT;
pub const PABCFLOAT = [*c]struct__ABCFLOAT;
pub const NPABCFLOAT = [*c]struct__ABCFLOAT;
pub const LPABCFLOAT = [*c]struct__ABCFLOAT;
pub const struct__OUTLINETEXTMETRICA = extern struct {
    otmSize: UINT,
    otmTextMetrics: TEXTMETRICA,
    otmFiller: BYTE,
    otmPanoseNumber: PANOSE,
    otmfsSelection: UINT,
    otmfsType: UINT,
    otmsCharSlopeRise: c_int,
    otmsCharSlopeRun: c_int,
    otmItalicAngle: c_int,
    otmEMSquare: UINT,
    otmAscent: c_int,
    otmDescent: c_int,
    otmLineGap: UINT,
    otmsCapEmHeight: UINT,
    otmsXHeight: UINT,
    otmrcFontBox: RECT,
    otmMacAscent: c_int,
    otmMacDescent: c_int,
    otmMacLineGap: UINT,
    otmusMinimumPPEM: UINT,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: UINT,
    otmsStrikeoutPosition: c_int,
    otmsUnderscoreSize: c_int,
    otmsUnderscorePosition: c_int,
    otmpFamilyName: PSTR,
    otmpFaceName: PSTR,
    otmpStyleName: PSTR,
    otmpFullName: PSTR,
};
pub const OUTLINETEXTMETRICA = struct__OUTLINETEXTMETRICA;
pub const POUTLINETEXTMETRICA = [*c]struct__OUTLINETEXTMETRICA;
pub const NPOUTLINETEXTMETRICA = [*c]struct__OUTLINETEXTMETRICA;
pub const LPOUTLINETEXTMETRICA = [*c]struct__OUTLINETEXTMETRICA;
pub const struct__OUTLINETEXTMETRICW = extern struct {
    otmSize: UINT,
    otmTextMetrics: TEXTMETRICW,
    otmFiller: BYTE,
    otmPanoseNumber: PANOSE,
    otmfsSelection: UINT,
    otmfsType: UINT,
    otmsCharSlopeRise: c_int,
    otmsCharSlopeRun: c_int,
    otmItalicAngle: c_int,
    otmEMSquare: UINT,
    otmAscent: c_int,
    otmDescent: c_int,
    otmLineGap: UINT,
    otmsCapEmHeight: UINT,
    otmsXHeight: UINT,
    otmrcFontBox: RECT,
    otmMacAscent: c_int,
    otmMacDescent: c_int,
    otmMacLineGap: UINT,
    otmusMinimumPPEM: UINT,
    otmptSubscriptSize: POINT,
    otmptSubscriptOffset: POINT,
    otmptSuperscriptSize: POINT,
    otmptSuperscriptOffset: POINT,
    otmsStrikeoutSize: UINT,
    otmsStrikeoutPosition: c_int,
    otmsUnderscoreSize: c_int,
    otmsUnderscorePosition: c_int,
    otmpFamilyName: PSTR,
    otmpFaceName: PSTR,
    otmpStyleName: PSTR,
    otmpFullName: PSTR,
};
pub const OUTLINETEXTMETRICW = struct__OUTLINETEXTMETRICW;
pub const POUTLINETEXTMETRICW = [*c]struct__OUTLINETEXTMETRICW;
pub const NPOUTLINETEXTMETRICW = [*c]struct__OUTLINETEXTMETRICW;
pub const LPOUTLINETEXTMETRICW = [*c]struct__OUTLINETEXTMETRICW;
pub const OUTLINETEXTMETRIC = OUTLINETEXTMETRICA;
pub const POUTLINETEXTMETRIC = POUTLINETEXTMETRICA;
pub const NPOUTLINETEXTMETRIC = NPOUTLINETEXTMETRICA;
pub const LPOUTLINETEXTMETRIC = LPOUTLINETEXTMETRICA;
pub const struct_tagPOLYTEXTA = extern struct {
    x: c_int,
    y: c_int,
    n: UINT,
    lpstr: LPCSTR,
    uiFlags: UINT,
    rcl: RECT,
    pdx: [*c]c_int,
};
pub const POLYTEXTA = struct_tagPOLYTEXTA;
pub const PPOLYTEXTA = [*c]struct_tagPOLYTEXTA;
pub const NPPOLYTEXTA = [*c]struct_tagPOLYTEXTA;
pub const LPPOLYTEXTA = [*c]struct_tagPOLYTEXTA;
pub const struct_tagPOLYTEXTW = extern struct {
    x: c_int,
    y: c_int,
    n: UINT,
    lpstr: LPCWSTR,
    uiFlags: UINT,
    rcl: RECT,
    pdx: [*c]c_int,
};
pub const POLYTEXTW = struct_tagPOLYTEXTW;
pub const PPOLYTEXTW = [*c]struct_tagPOLYTEXTW;
pub const NPPOLYTEXTW = [*c]struct_tagPOLYTEXTW;
pub const LPPOLYTEXTW = [*c]struct_tagPOLYTEXTW;
pub const POLYTEXT = POLYTEXTA;
pub const PPOLYTEXT = PPOLYTEXTA;
pub const NPPOLYTEXT = NPPOLYTEXTA;
pub const LPPOLYTEXT = LPPOLYTEXTA;
pub const struct__FIXED = extern struct {
    fract: WORD,
    value: c_short,
};
pub const FIXED = struct__FIXED;
pub const struct__MAT2 = extern struct {
    eM11: FIXED,
    eM12: FIXED,
    eM21: FIXED,
    eM22: FIXED,
};
pub const MAT2 = struct__MAT2;
pub const LPMAT2 = [*c]struct__MAT2;
pub const struct__GLYPHMETRICS = extern struct {
    gmBlackBoxX: UINT,
    gmBlackBoxY: UINT,
    gmptGlyphOrigin: POINT,
    gmCellIncX: c_short,
    gmCellIncY: c_short,
};
pub const GLYPHMETRICS = struct__GLYPHMETRICS;
pub const LPGLYPHMETRICS = [*c]struct__GLYPHMETRICS;
pub const struct_tagPOINTFX = extern struct {
    x: FIXED,
    y: FIXED,
};
pub const POINTFX = struct_tagPOINTFX;
pub const LPPOINTFX = [*c]struct_tagPOINTFX;
pub const struct_tagTTPOLYCURVE = extern struct {
    wType: WORD,
    cpfx: WORD,
    apfx: [1]POINTFX,
};
pub const TTPOLYCURVE = struct_tagTTPOLYCURVE;
pub const LPTTPOLYCURVE = [*c]struct_tagTTPOLYCURVE;
pub const struct_tagTTPOLYGONHEADER = extern struct {
    cb: DWORD,
    dwType: DWORD,
    pfxStart: POINTFX,
};
pub const TTPOLYGONHEADER = struct_tagTTPOLYGONHEADER;
pub const LPTTPOLYGONHEADER = [*c]struct_tagTTPOLYGONHEADER;
pub const struct_tagGCP_RESULTSA = extern struct {
    lStructSize: DWORD,
    lpOutString: LPSTR,
    lpOrder: [*c]UINT,
    lpDx: [*c]c_int,
    lpCaretPos: [*c]c_int,
    lpClass: LPSTR,
    lpGlyphs: LPWSTR,
    nGlyphs: UINT,
    nMaxFit: c_int,
};
pub const GCP_RESULTSA = struct_tagGCP_RESULTSA;
pub const LPGCP_RESULTSA = [*c]struct_tagGCP_RESULTSA;
pub const struct_tagGCP_RESULTSW = extern struct {
    lStructSize: DWORD,
    lpOutString: LPWSTR,
    lpOrder: [*c]UINT,
    lpDx: [*c]c_int,
    lpCaretPos: [*c]c_int,
    lpClass: LPSTR,
    lpGlyphs: LPWSTR,
    nGlyphs: UINT,
    nMaxFit: c_int,
};
pub const GCP_RESULTSW = struct_tagGCP_RESULTSW;
pub const LPGCP_RESULTSW = [*c]struct_tagGCP_RESULTSW;
pub const GCP_RESULTS = GCP_RESULTSA;
pub const LPGCP_RESULTS = LPGCP_RESULTSA;
pub const struct__RASTERIZER_STATUS = extern struct {
    nSize: c_short,
    wFlags: c_short,
    nLanguageID: c_short,
};
pub const RASTERIZER_STATUS = struct__RASTERIZER_STATUS;
pub const LPRASTERIZER_STATUS = [*c]struct__RASTERIZER_STATUS;
pub const struct_tagPIXELFORMATDESCRIPTOR = extern struct {
    nSize: WORD,
    nVersion: WORD,
    dwFlags: DWORD,
    iPixelType: BYTE,
    cColorBits: BYTE,
    cRedBits: BYTE,
    cRedShift: BYTE,
    cGreenBits: BYTE,
    cGreenShift: BYTE,
    cBlueBits: BYTE,
    cBlueShift: BYTE,
    cAlphaBits: BYTE,
    cAlphaShift: BYTE,
    cAccumBits: BYTE,
    cAccumRedBits: BYTE,
    cAccumGreenBits: BYTE,
    cAccumBlueBits: BYTE,
    cAccumAlphaBits: BYTE,
    cDepthBits: BYTE,
    cStencilBits: BYTE,
    cAuxBuffers: BYTE,
    iLayerType: BYTE,
    bReserved: BYTE,
    dwLayerMask: DWORD,
    dwVisibleMask: DWORD,
    dwDamageMask: DWORD,
};
pub const PIXELFORMATDESCRIPTOR = struct_tagPIXELFORMATDESCRIPTOR;
pub const PPIXELFORMATDESCRIPTOR = [*c]struct_tagPIXELFORMATDESCRIPTOR;
pub const LPPIXELFORMATDESCRIPTOR = [*c]struct_tagPIXELFORMATDESCRIPTOR;
pub const OLDFONTENUMPROCA = ?fn ([*c]const LOGFONTA, [*c]const TEXTMETRICA, DWORD, LPARAM) callconv(std.os.windows.WINAPI) c_int;
pub const OLDFONTENUMPROCW = ?fn ([*c]const LOGFONTW, [*c]const TEXTMETRICW, DWORD, LPARAM) callconv(std.os.windows.WINAPI) c_int;
pub const FONTENUMPROCA = OLDFONTENUMPROCA;
pub const FONTENUMPROCW = OLDFONTENUMPROCW;
pub const FONTENUMPROC = FONTENUMPROCA;
pub const GOBJENUMPROC = ?fn (LPVOID, LPARAM) callconv(std.os.windows.WINAPI) c_int;
pub const LINEDDAPROC = ?fn (c_int, c_int, LPARAM) callconv(std.os.windows.WINAPI) void;
extern fn AddFontResourceA(arg0: LPCSTR) c_int;
extern fn AddFontResourceW(arg0: LPCWSTR) c_int;
extern fn AnimatePalette(hPal: HPALETTE, iStartIndex: UINT, cEntries: UINT, ppe: [*c]const PALETTEENTRY) BOOL;
extern fn Arc(hdc: HDC, x1: c_int, y1: c_int, x2: c_int, y2: c_int, x3: c_int, y3: c_int, x4: c_int, y4: c_int) BOOL;
extern fn BitBlt(hdc: HDC, x: c_int, y: c_int, cx: c_int, cy: c_int, hdcSrc: HDC, x1: c_int, y1: c_int, rop: DWORD) BOOL;
extern fn CancelDC(hdc: HDC) BOOL;
extern fn Chord(hdc: HDC, x1: c_int, y1: c_int, x2: c_int, y2: c_int, x3: c_int, y3: c_int, x4: c_int, y4: c_int) BOOL;
extern fn ChoosePixelFormat(hdc: HDC, ppfd: [*c]const PIXELFORMATDESCRIPTOR) c_int;
extern fn CloseMetaFile(hdc: HDC) HMETAFILE;
extern fn CombineRgn(hrgnDst: HRGN, hrgnSrc1: HRGN, hrgnSrc2: HRGN, iMode: c_int) c_int;
extern fn CopyMetaFileA(arg0: HMETAFILE, arg1: LPCSTR) HMETAFILE;
extern fn CopyMetaFileW(arg0: HMETAFILE, arg1: LPCWSTR) HMETAFILE;
extern fn CreateBitmap(nWidth: c_int, nHeight: c_int, nPlanes: UINT, nBitCount: UINT, lpBits: ?*const c_void) HBITMAP;
extern fn CreateBitmapIndirect(pbm: [*c]const BITMAP) HBITMAP;
extern fn CreateBrushIndirect(plbrush: [*c]const LOGBRUSH) HBRUSH;
extern fn CreateCompatibleBitmap(hdc: HDC, cx: c_int, cy: c_int) HBITMAP;
extern fn CreateDiscardableBitmap(hdc: HDC, cx: c_int, cy: c_int) HBITMAP;
extern fn CreateCompatibleDC(hdc: HDC) HDC;
extern fn CreateDCA(pwszDriver: LPCSTR, pwszDevice: LPCSTR, pszPort: LPCSTR, pdm: [*c]const DEVMODEA) HDC;
extern fn CreateDCW(pwszDriver: LPCWSTR, pwszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: [*c]const DEVMODEW) HDC;
extern fn CreateDIBitmap(hdc: HDC, pbmih: [*c]const BITMAPINFOHEADER, flInit: DWORD, pjBits: ?*const c_void, pbmi: [*c]const BITMAPINFO, iUsage: UINT) HBITMAP;
extern fn CreateDIBPatternBrush(h: HGLOBAL, iUsage: UINT) HBRUSH;
extern fn CreateDIBPatternBrushPt(lpPackedDIB: ?*const c_void, iUsage: UINT) HBRUSH;
extern fn CreateEllipticRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int) HRGN;
extern fn CreateEllipticRgnIndirect(lprect: [*c]const RECT) HRGN;
extern fn CreateFontIndirectA(lplf: [*c]const LOGFONTA) HFONT;
extern fn CreateFontIndirectW(lplf: [*c]const LOGFONTW) HFONT;
extern fn CreateFontA(cHeight: c_int, cWidth: c_int, cEscapement: c_int, cOrientation: c_int, cWeight: c_int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCSTR) HFONT;
extern fn CreateFontW(cHeight: c_int, cWidth: c_int, cEscapement: c_int, cOrientation: c_int, cWeight: c_int, bItalic: DWORD, bUnderline: DWORD, bStrikeOut: DWORD, iCharSet: DWORD, iOutPrecision: DWORD, iClipPrecision: DWORD, iQuality: DWORD, iPitchAndFamily: DWORD, pszFaceName: LPCWSTR) HFONT;
extern fn CreateHatchBrush(iHatch: c_int, color: COLORREF) HBRUSH;
extern fn CreateICA(pszDriver: LPCSTR, pszDevice: LPCSTR, pszPort: LPCSTR, pdm: [*c]const DEVMODEA) HDC;
extern fn CreateICW(pszDriver: LPCWSTR, pszDevice: LPCWSTR, pszPort: LPCWSTR, pdm: [*c]const DEVMODEW) HDC;
extern fn CreateMetaFileA(pszFile: LPCSTR) HDC;
extern fn CreateMetaFileW(pszFile: LPCWSTR) HDC;
extern fn CreatePalette(plpal: [*c]const LOGPALETTE) HPALETTE;
extern fn CreatePen(iStyle: c_int, cWidth: c_int, color: COLORREF) HPEN;
extern fn CreatePenIndirect(plpen: [*c]const LOGPEN) HPEN;
extern fn CreatePolyPolygonRgn(pptl: [*c]const POINT, pc: [*c]const INT, cPoly: c_int, iMode: c_int) HRGN;
extern fn CreatePatternBrush(hbm: HBITMAP) HBRUSH;
extern fn CreateRectRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int) HRGN;
extern fn CreateRectRgnIndirect(lprect: [*c]const RECT) HRGN;
extern fn CreateRoundRectRgn(x1: c_int, y1: c_int, x2: c_int, y2: c_int, w: c_int, h: c_int) HRGN;
extern fn CreateScalableFontResourceA(fdwHidden: DWORD, lpszFont: LPCSTR, lpszFile: LPCSTR, lpszPath: LPCSTR) BOOL;
extern fn CreateScalableFontResourceW(fdwHidden: DWORD, lpszFont: LPCWSTR, lpszFile: LPCWSTR, lpszPath: LPCWSTR) BOOL;
extern fn CreateSolidBrush(color: COLORREF) HBRUSH;
extern fn DeleteDC(hdc: HDC) BOOL;
extern fn DeleteMetaFile(hmf: HMETAFILE) BOOL;
extern fn DeleteObject(ho: HGDIOBJ) BOOL;
extern fn DescribePixelFormat(hdc: HDC, iPixelFormat: c_int, nBytes: UINT, ppfd: LPPIXELFORMATDESCRIPTOR) c_int;
pub const LPFNDEVMODE = ?fn (HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT) callconv(std.os.windows.WINAPI) UINT;
pub const LPFNDEVCAPS = ?fn (LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE) callconv(std.os.windows.WINAPI) DWORD;
extern fn DeviceCapabilitiesA(pDevice: LPCSTR, pPort: LPCSTR, fwCapability: WORD, pOutput: LPSTR, pDevMode: [*c]const DEVMODEA) c_int;
extern fn DeviceCapabilitiesW(pDevice: LPCWSTR, pPort: LPCWSTR, fwCapability: WORD, pOutput: LPWSTR, pDevMode: [*c]const DEVMODEW) c_int;
extern fn DrawEscape(hdc: HDC, iEscape: c_int, cjIn: c_int, lpIn: LPCSTR) c_int;
extern fn Ellipse(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
extern fn EnumFontFamiliesExA(hdc: HDC, lpLogfont: LPLOGFONTA, lpProc: FONTENUMPROCA, lParam: LPARAM, dwFlags: DWORD) c_int;
extern fn EnumFontFamiliesExW(hdc: HDC, lpLogfont: LPLOGFONTW, lpProc: FONTENUMPROCW, lParam: LPARAM, dwFlags: DWORD) c_int;
extern fn EnumFontFamiliesA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM) c_int;
extern fn EnumFontFamiliesW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM) c_int;
extern fn EnumFontsA(hdc: HDC, lpLogfont: LPCSTR, lpProc: FONTENUMPROCA, lParam: LPARAM) c_int;
extern fn EnumFontsW(hdc: HDC, lpLogfont: LPCWSTR, lpProc: FONTENUMPROCW, lParam: LPARAM) c_int;
extern fn EnumObjects(hdc: HDC, nType: c_int, lpFunc: GOBJENUMPROC, lParam: LPARAM) c_int;
extern fn EqualRgn(hrgn1: HRGN, hrgn2: HRGN) BOOL;
extern fn Escape(hdc: HDC, iEscape: c_int, cjIn: c_int, pvIn: LPCSTR, pvOut: LPVOID) c_int;
extern fn ExtEscape(hdc: HDC, iEscape: c_int, cjInput: c_int, lpInData: LPCSTR, cjOutput: c_int, lpOutData: LPSTR) c_int;
extern fn ExcludeClipRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) c_int;
extern fn ExtCreateRegion(lpx: [*c]const XFORM, nCount: DWORD, lpData: [*c]const RGNDATA) HRGN;
extern fn ExtFloodFill(hdc: HDC, x: c_int, y: c_int, color: COLORREF, type_0: UINT) BOOL;
extern fn FillRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH) BOOL;
extern fn FloodFill(hdc: HDC, x: c_int, y: c_int, color: COLORREF) BOOL;
extern fn FrameRgn(hdc: HDC, hrgn: HRGN, hbr: HBRUSH, w: c_int, h: c_int) BOOL;
extern fn GetROP2(hdc: HDC) c_int;
extern fn GetAspectRatioFilterEx(hdc: HDC, lpsize: LPSIZE) BOOL;
extern fn GetBkColor(hdc: HDC) COLORREF;
extern fn GetDCBrushColor(hdc: HDC) COLORREF;
extern fn GetDCPenColor(hdc: HDC) COLORREF;
extern fn GetBkMode(hdc: HDC) c_int;
extern fn GetBitmapBits(hbit: HBITMAP, cb: LONG, lpvBits: LPVOID) LONG;
extern fn GetBitmapDimensionEx(hbit: HBITMAP, lpsize: LPSIZE) BOOL;
extern fn GetBoundsRect(hdc: HDC, lprect: LPRECT, flags: UINT) UINT;
extern fn GetBrushOrgEx(hdc: HDC, lppt: LPPOINT) BOOL;
extern fn GetCharWidthA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
extern fn GetCharWidthW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
extern fn GetCharWidth32A(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
extern fn GetCharWidth32W(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: LPINT) BOOL;
extern fn GetCharWidthFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) BOOL;
extern fn GetCharWidthFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpBuffer: PFLOAT) BOOL;
extern fn GetCharABCWidthsA(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) BOOL;
extern fn GetCharABCWidthsW(hdc: HDC, wFirst: UINT, wLast: UINT, lpABC: LPABC) BOOL;
extern fn GetCharABCWidthsFloatA(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) BOOL;
extern fn GetCharABCWidthsFloatW(hdc: HDC, iFirst: UINT, iLast: UINT, lpABC: LPABCFLOAT) BOOL;
extern fn GetClipBox(hdc: HDC, lprect: LPRECT) c_int;
extern fn GetClipRgn(hdc: HDC, hrgn: HRGN) c_int;
extern fn GetMetaRgn(hdc: HDC, hrgn: HRGN) c_int;
extern fn GetCurrentObject(hdc: HDC, type_0: UINT) HGDIOBJ;
extern fn GetCurrentPositionEx(hdc: HDC, lppt: LPPOINT) BOOL;
extern fn GetDeviceCaps(hdc: HDC, index: c_int) c_int;
extern fn GetDIBits(hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpvBits: LPVOID, lpbmi: LPBITMAPINFO, usage: UINT) c_int;
extern fn GetFontData(hdc: HDC, dwTable: DWORD, dwOffset: DWORD, pvBuffer: PVOID, cjBuffer: DWORD) DWORD;
extern fn GetGlyphOutlineA(hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: [*c]const MAT2) DWORD;
extern fn GetGlyphOutlineW(hdc: HDC, uChar: UINT, fuFormat: UINT, lpgm: LPGLYPHMETRICS, cjBuffer: DWORD, pvBuffer: LPVOID, lpmat2: [*c]const MAT2) DWORD;
extern fn GetGraphicsMode(hdc: HDC) c_int;
extern fn GetMapMode(hdc: HDC) c_int;
extern fn GetMetaFileBitsEx(hMF: HMETAFILE, cbBuffer: UINT, lpData: LPVOID) UINT;
extern fn GetMetaFileA(lpName: LPCSTR) HMETAFILE;
extern fn GetMetaFileW(lpName: LPCWSTR) HMETAFILE;
extern fn GetNearestColor(hdc: HDC, color: COLORREF) COLORREF;
extern fn GetNearestPaletteIndex(h: HPALETTE, color: COLORREF) UINT;
extern fn GetObjectType(h: HGDIOBJ) DWORD;
extern fn GetOutlineTextMetricsA(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICA) UINT;
extern fn GetOutlineTextMetricsW(hdc: HDC, cjCopy: UINT, potm: LPOUTLINETEXTMETRICW) UINT;
extern fn GetPaletteEntries(hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY) UINT;
extern fn GetPixel(hdc: HDC, x: c_int, y: c_int) COLORREF;
extern fn GetPixelFormat(hdc: HDC) c_int;
extern fn GetPolyFillMode(hdc: HDC) c_int;
extern fn GetRasterizerCaps(lpraststat: LPRASTERIZER_STATUS, cjBytes: UINT) BOOL;
extern fn GetRandomRgn(hdc: HDC, hrgn: HRGN, i: INT) c_int;
extern fn GetRegionData(hrgn: HRGN, nCount: DWORD, lpRgnData: LPRGNDATA) DWORD;
extern fn GetRgnBox(hrgn: HRGN, lprc: LPRECT) c_int;
extern fn GetStockObject(i: c_int) HGDIOBJ;
extern fn GetStretchBltMode(hdc: HDC) c_int;
extern fn GetSystemPaletteEntries(hdc: HDC, iStart: UINT, cEntries: UINT, pPalEntries: LPPALETTEENTRY) UINT;
extern fn GetSystemPaletteUse(hdc: HDC) UINT;
extern fn GetTextCharacterExtra(hdc: HDC) c_int;
extern fn GetTextAlign(hdc: HDC) UINT;
extern fn GetTextColor(hdc: HDC) COLORREF;
extern fn GetTextExtentPointA(hdc: HDC, lpString: LPCSTR, c: c_int, lpsz: LPSIZE) BOOL;
extern fn GetTextExtentPointW(hdc: HDC, lpString: LPCWSTR, c: c_int, lpsz: LPSIZE) BOOL;
extern fn GetTextExtentPoint32A(hdc: HDC, lpString: LPCSTR, c: c_int, psizl: LPSIZE) BOOL;
extern fn GetTextExtentPoint32W(hdc: HDC, lpString: LPCWSTR, c: c_int, psizl: LPSIZE) BOOL;
extern fn GetTextExtentExPointA(hdc: HDC, lpszString: LPCSTR, cchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
extern fn GetTextExtentExPointW(hdc: HDC, lpszString: LPCWSTR, cchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
extern fn GetTextCharset(hdc: HDC) c_int;
extern fn GetTextCharsetInfo(hdc: HDC, lpSig: LPFONTSIGNATURE, dwFlags: DWORD) c_int;
extern fn TranslateCharsetInfo(lpSrc: [*c]DWORD, lpCs: LPCHARSETINFO, dwFlags: DWORD) BOOL;
extern fn GetFontLanguageInfo(hdc: HDC) DWORD;
extern fn GetCharacterPlacementA(hdc: HDC, lpString: LPCSTR, nCount: c_int, nMexExtent: c_int, lpResults: LPGCP_RESULTSA, dwFlags: DWORD) DWORD;
extern fn GetCharacterPlacementW(hdc: HDC, lpString: LPCWSTR, nCount: c_int, nMexExtent: c_int, lpResults: LPGCP_RESULTSW, dwFlags: DWORD) DWORD;
pub const struct_tagWCRANGE = extern struct {
    wcLow: WCHAR,
    cGlyphs: USHORT,
};
pub const WCRANGE = struct_tagWCRANGE;
pub const PWCRANGE = [*c]struct_tagWCRANGE;
pub const LPWCRANGE = [*c]struct_tagWCRANGE;
pub const struct_tagGLYPHSET = extern struct {
    cbThis: DWORD,
    flAccel: DWORD,
    cGlyphsSupported: DWORD,
    cRanges: DWORD,
    ranges: [1]WCRANGE,
};
pub const GLYPHSET = struct_tagGLYPHSET;
pub const PGLYPHSET = [*c]struct_tagGLYPHSET;
pub const LPGLYPHSET = [*c]struct_tagGLYPHSET;
extern fn GetFontUnicodeRanges(hdc: HDC, lpgs: LPGLYPHSET) DWORD;
extern fn GetGlyphIndicesA(hdc: HDC, lpstr: LPCSTR, c: c_int, pgi: LPWORD, fl: DWORD) DWORD;
extern fn GetGlyphIndicesW(hdc: HDC, lpstr: LPCWSTR, c: c_int, pgi: LPWORD, fl: DWORD) DWORD;
extern fn GetTextExtentPointI(hdc: HDC, pgiIn: LPWORD, cgi: c_int, psize: LPSIZE) BOOL;
extern fn GetTextExtentExPointI(hdc: HDC, lpwszString: LPWORD, cwchString: c_int, nMaxExtent: c_int, lpnFit: LPINT, lpnDx: LPINT, lpSize: LPSIZE) BOOL;
extern fn GetCharWidthI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, piWidths: LPINT) BOOL;
extern fn GetCharABCWidthsI(hdc: HDC, giFirst: UINT, cgi: UINT, pgi: LPWORD, pabc: LPABC) BOOL;
pub const struct_tagDESIGNVECTOR = extern struct {
    dvReserved: DWORD,
    dvNumAxes: DWORD,
    dvValues: [16]LONG,
};
pub const DESIGNVECTOR = struct_tagDESIGNVECTOR;
pub const PDESIGNVECTOR = [*c]struct_tagDESIGNVECTOR;
pub const LPDESIGNVECTOR = [*c]struct_tagDESIGNVECTOR;
extern fn AddFontResourceExA(name: LPCSTR, fl: DWORD, res: PVOID) c_int;
extern fn AddFontResourceExW(name: LPCWSTR, fl: DWORD, res: PVOID) c_int;
extern fn RemoveFontResourceExA(name: LPCSTR, fl: DWORD, pdv: PVOID) BOOL;
extern fn RemoveFontResourceExW(name: LPCWSTR, fl: DWORD, pdv: PVOID) BOOL;
extern fn AddFontMemResourceEx(pFileView: PVOID, cjSize: DWORD, pvResrved: PVOID, pNumFonts: [*c]DWORD) HANDLE;
extern fn RemoveFontMemResourceEx(h: HANDLE) BOOL;
pub const struct_tagAXISINFOA = extern struct {
    axMinValue: LONG,
    axMaxValue: LONG,
    axAxisName: [16]BYTE,
};
pub const AXISINFOA = struct_tagAXISINFOA;
pub const PAXISINFOA = [*c]struct_tagAXISINFOA;
pub const LPAXISINFOA = [*c]struct_tagAXISINFOA;
pub const struct_tagAXISINFOW = extern struct {
    axMinValue: LONG,
    axMaxValue: LONG,
    axAxisName: [16]WCHAR,
};
pub const AXISINFOW = struct_tagAXISINFOW;
pub const PAXISINFOW = [*c]struct_tagAXISINFOW;
pub const LPAXISINFOW = [*c]struct_tagAXISINFOW;
pub const AXISINFO = AXISINFOA;
pub const PAXISINFO = PAXISINFOA;
pub const LPAXISINFO = LPAXISINFOA;
pub const struct_tagAXESLISTA = extern struct {
    axlReserved: DWORD,
    axlNumAxes: DWORD,
    axlAxisInfo: [16]AXISINFOA,
};
pub const AXESLISTA = struct_tagAXESLISTA;
pub const PAXESLISTA = [*c]struct_tagAXESLISTA;
pub const LPAXESLISTA = [*c]struct_tagAXESLISTA;
pub const struct_tagAXESLISTW = extern struct {
    axlReserved: DWORD,
    axlNumAxes: DWORD,
    axlAxisInfo: [16]AXISINFOW,
};
pub const AXESLISTW = struct_tagAXESLISTW;
pub const PAXESLISTW = [*c]struct_tagAXESLISTW;
pub const LPAXESLISTW = [*c]struct_tagAXESLISTW;
pub const AXESLIST = AXESLISTA;
pub const PAXESLIST = PAXESLISTA;
pub const LPAXESLIST = LPAXESLISTA;
pub const struct_tagENUMLOGFONTEXDVA = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXA,
    elfDesignVector: DESIGNVECTOR,
};
pub const ENUMLOGFONTEXDVA = struct_tagENUMLOGFONTEXDVA;
pub const PENUMLOGFONTEXDVA = [*c]struct_tagENUMLOGFONTEXDVA;
pub const LPENUMLOGFONTEXDVA = [*c]struct_tagENUMLOGFONTEXDVA;
pub const struct_tagENUMLOGFONTEXDVW = extern struct {
    elfEnumLogfontEx: ENUMLOGFONTEXW,
    elfDesignVector: DESIGNVECTOR,
};
pub const ENUMLOGFONTEXDVW = struct_tagENUMLOGFONTEXDVW;
pub const PENUMLOGFONTEXDVW = [*c]struct_tagENUMLOGFONTEXDVW;
pub const LPENUMLOGFONTEXDVW = [*c]struct_tagENUMLOGFONTEXDVW;
pub const ENUMLOGFONTEXDV = ENUMLOGFONTEXDVA;
pub const PENUMLOGFONTEXDV = PENUMLOGFONTEXDVA;
pub const LPENUMLOGFONTEXDV = LPENUMLOGFONTEXDVA;
extern fn CreateFontIndirectExA(arg0: [*c]const ENUMLOGFONTEXDVA) HFONT;
extern fn CreateFontIndirectExW(arg0: [*c]const ENUMLOGFONTEXDVW) HFONT;
pub const struct_tagENUMTEXTMETRICA = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXA,
    etmAxesList: AXESLISTA,
};
pub const ENUMTEXTMETRICA = struct_tagENUMTEXTMETRICA;
pub const PENUMTEXTMETRICA = [*c]struct_tagENUMTEXTMETRICA;
pub const LPENUMTEXTMETRICA = [*c]struct_tagENUMTEXTMETRICA;
pub const struct_tagENUMTEXTMETRICW = extern struct {
    etmNewTextMetricEx: NEWTEXTMETRICEXW,
    etmAxesList: AXESLISTW,
};
pub const ENUMTEXTMETRICW = struct_tagENUMTEXTMETRICW;
pub const PENUMTEXTMETRICW = [*c]struct_tagENUMTEXTMETRICW;
pub const LPENUMTEXTMETRICW = [*c]struct_tagENUMTEXTMETRICW;
pub const ENUMTEXTMETRIC = ENUMTEXTMETRICA;
pub const PENUMTEXTMETRIC = PENUMTEXTMETRICA;
pub const LPENUMTEXTMETRIC = LPENUMTEXTMETRICA;
extern fn GetViewportExtEx(hdc: HDC, lpsize: LPSIZE) BOOL;
extern fn GetViewportOrgEx(hdc: HDC, lppoint: LPPOINT) BOOL;
extern fn GetWindowExtEx(hdc: HDC, lpsize: LPSIZE) BOOL;
extern fn GetWindowOrgEx(hdc: HDC, lppoint: LPPOINT) BOOL;
extern fn IntersectClipRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) c_int;
extern fn InvertRgn(hdc: HDC, hrgn: HRGN) BOOL;
extern fn LineDDA(xStart: c_int, yStart: c_int, xEnd: c_int, yEnd: c_int, lpProc: LINEDDAPROC, data: LPARAM) BOOL;
extern fn LineTo(hdc: HDC, x: c_int, y: c_int) BOOL;
extern fn MaskBlt(hdcDest: HDC, xDest: c_int, yDest: c_int, width: c_int, height: c_int, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, hbmMask: HBITMAP, xMask: c_int, yMask: c_int, rop: DWORD) BOOL;
extern fn PlgBlt(hdcDest: HDC, lpPoint: [*c]const POINT, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, width: c_int, height: c_int, hbmMask: HBITMAP, xMask: c_int, yMask: c_int) BOOL;
extern fn OffsetClipRgn(hdc: HDC, x: c_int, y: c_int) c_int;
extern fn OffsetRgn(hrgn: HRGN, x: c_int, y: c_int) c_int;
extern fn PatBlt(hdc: HDC, x: c_int, y: c_int, w: c_int, h: c_int, rop: DWORD) BOOL;
extern fn Pie(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, xr1: c_int, yr1: c_int, xr2: c_int, yr2: c_int) BOOL;
extern fn PlayMetaFile(hdc: HDC, hmf: HMETAFILE) BOOL;
extern fn PaintRgn(hdc: HDC, hrgn: HRGN) BOOL;
extern fn PolyPolygon(hdc: HDC, apt: [*c]const POINT, asz: [*c]const INT, csz: c_int) BOOL;
extern fn PtInRegion(hrgn: HRGN, x: c_int, y: c_int) BOOL;
extern fn PtVisible(hdc: HDC, x: c_int, y: c_int) BOOL;
extern fn RectInRegion(hrgn: HRGN, lprect: [*c]const RECT) BOOL;
extern fn RectVisible(hdc: HDC, lprect: [*c]const RECT) BOOL;
extern fn Rectangle(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
extern fn RestoreDC(hdc: HDC, nSavedDC: c_int) BOOL;
extern fn ResetDCA(hdc: HDC, lpdm: [*c]const DEVMODEA) HDC;
extern fn ResetDCW(hdc: HDC, lpdm: [*c]const DEVMODEW) HDC;
extern fn RealizePalette(hdc: HDC) UINT;
extern fn RemoveFontResourceA(lpFileName: LPCSTR) BOOL;
extern fn RemoveFontResourceW(lpFileName: LPCWSTR) BOOL;
extern fn RoundRect(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, width: c_int, height: c_int) BOOL;
extern fn ResizePalette(hpal: HPALETTE, n: UINT) BOOL;
extern fn SaveDC(hdc: HDC) c_int;
extern fn SelectClipRgn(hdc: HDC, hrgn: HRGN) c_int;
extern fn ExtSelectClipRgn(hdc: HDC, hrgn: HRGN, mode: c_int) c_int;
extern fn SetMetaRgn(hdc: HDC) c_int;
extern fn SelectObject(hdc: HDC, h: HGDIOBJ) HGDIOBJ;
extern fn SelectPalette(hdc: HDC, hPal: HPALETTE, bForceBkgd: BOOL) HPALETTE;
extern fn SetBkColor(hdc: HDC, color: COLORREF) COLORREF;
extern fn SetDCBrushColor(hdc: HDC, color: COLORREF) COLORREF;
extern fn SetDCPenColor(hdc: HDC, color: COLORREF) COLORREF;
extern fn SetBkMode(hdc: HDC, mode: c_int) c_int;
extern fn SetBitmapBits(hbm: HBITMAP, cb: DWORD, pvBits: ?*const c_void) LONG;
extern fn SetBoundsRect(hdc: HDC, lprect: [*c]const RECT, flags: UINT) UINT;
extern fn SetDIBits(hdc: HDC, hbm: HBITMAP, start: UINT, cLines: UINT, lpBits: ?*const c_void, lpbmi: [*c]const BITMAPINFO, ColorUse: UINT) c_int;
extern fn SetDIBitsToDevice(hdc: HDC, xDest: c_int, yDest: c_int, w: DWORD, h: DWORD, xSrc: c_int, ySrc: c_int, StartScan: UINT, cLines: UINT, lpvBits: ?*const c_void, lpbmi: [*c]const BITMAPINFO, ColorUse: UINT) c_int;
extern fn SetMapperFlags(hdc: HDC, flags: DWORD) DWORD;
extern fn SetGraphicsMode(hdc: HDC, iMode: c_int) c_int;
extern fn SetMapMode(hdc: HDC, iMode: c_int) c_int;
extern fn SetLayout(hdc: HDC, l: DWORD) DWORD;
extern fn GetLayout(hdc: HDC) DWORD;
extern fn SetMetaFileBitsEx(cbBuffer: UINT, lpData: [*c]const BYTE) HMETAFILE;
extern fn SetPaletteEntries(hpal: HPALETTE, iStart: UINT, cEntries: UINT, pPalEntries: [*c]const PALETTEENTRY) UINT;
extern fn SetPixel(hdc: HDC, x: c_int, y: c_int, color: COLORREF) COLORREF;
extern fn SetPixelV(hdc: HDC, x: c_int, y: c_int, color: COLORREF) BOOL;
extern fn SetPixelFormat(hdc: HDC, format: c_int, ppfd: [*c]const PIXELFORMATDESCRIPTOR) BOOL;
extern fn SetPolyFillMode(hdc: HDC, mode: c_int) c_int;
extern fn StretchBlt(hdcDest: HDC, xDest: c_int, yDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xSrc: c_int, ySrc: c_int, wSrc: c_int, hSrc: c_int, rop: DWORD) BOOL;
extern fn SetRectRgn(hrgn: HRGN, left: c_int, top: c_int, right: c_int, bottom: c_int) BOOL;
extern fn StretchDIBits(hdc: HDC, xDest: c_int, yDest: c_int, DestWidth: c_int, DestHeight: c_int, xSrc: c_int, ySrc: c_int, SrcWidth: c_int, SrcHeight: c_int, lpBits: ?*const c_void, lpbmi: [*c]const BITMAPINFO, iUsage: UINT, rop: DWORD) c_int;
extern fn SetROP2(hdc: HDC, rop2: c_int) c_int;
extern fn SetStretchBltMode(hdc: HDC, mode: c_int) c_int;
extern fn SetSystemPaletteUse(hdc: HDC, @"use": UINT) UINT;
extern fn SetTextCharacterExtra(hdc: HDC, extra: c_int) c_int;
extern fn SetTextColor(hdc: HDC, color: COLORREF) COLORREF;
extern fn SetTextAlign(hdc: HDC, @"align": UINT) UINT;
extern fn SetTextJustification(hdc: HDC, extra: c_int, count: c_int) BOOL;
extern fn UpdateColors(hdc: HDC) BOOL;
pub const COLOR16 = USHORT;
pub const struct__TRIVERTEX = extern struct {
    x: LONG,
    y: LONG,
    Red: COLOR16,
    Green: COLOR16,
    Blue: COLOR16,
    Alpha: COLOR16,
};
pub const TRIVERTEX = struct__TRIVERTEX;
pub const PTRIVERTEX = [*c]struct__TRIVERTEX;
pub const LPTRIVERTEX = [*c]struct__TRIVERTEX;
pub const struct__GRADIENT_TRIANGLE = extern struct {
    Vertex1: ULONG,
    Vertex2: ULONG,
    Vertex3: ULONG,
};
pub const GRADIENT_TRIANGLE = struct__GRADIENT_TRIANGLE;
pub const PGRADIENT_TRIANGLE = [*c]struct__GRADIENT_TRIANGLE;
pub const LPGRADIENT_TRIANGLE = [*c]struct__GRADIENT_TRIANGLE;
pub const struct__GRADIENT_RECT = extern struct {
    UpperLeft: ULONG,
    LowerRight: ULONG,
};
pub const GRADIENT_RECT = struct__GRADIENT_RECT;
pub const PGRADIENT_RECT = [*c]struct__GRADIENT_RECT;
pub const LPGRADIENT_RECT = [*c]struct__GRADIENT_RECT;
pub const struct__BLENDFUNCTION = extern struct {
    BlendOp: BYTE,
    BlendFlags: BYTE,
    SourceConstantAlpha: BYTE,
    AlphaFormat: BYTE,
};
pub const BLENDFUNCTION = struct__BLENDFUNCTION;
pub const PBLENDFUNCTION = [*c]struct__BLENDFUNCTION;
extern fn AlphaBlend(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, ftn: BLENDFUNCTION) BOOL;
extern fn TransparentBlt(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, crTransparent: UINT) BOOL;
extern fn GradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nMesh: ULONG, ulMode: ULONG) BOOL;
extern fn GdiAlphaBlend(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, ftn: BLENDFUNCTION) BOOL;
extern fn GdiTransparentBlt(hdcDest: HDC, xoriginDest: c_int, yoriginDest: c_int, wDest: c_int, hDest: c_int, hdcSrc: HDC, xoriginSrc: c_int, yoriginSrc: c_int, wSrc: c_int, hSrc: c_int, crTransparent: UINT) BOOL;
extern fn GdiGradientFill(hdc: HDC, pVertex: PTRIVERTEX, nVertex: ULONG, pMesh: PVOID, nCount: ULONG, ulMode: ULONG) BOOL;
extern fn PlayMetaFileRecord(hdc: HDC, lpHandleTable: LPHANDLETABLE, lpMR: LPMETARECORD, noObjs: UINT) BOOL;
pub const MFENUMPROC = ?fn (HDC, [*c]HANDLETABLE, [*c]METARECORD, c_int, LPARAM) callconv(std.os.windows.WINAPI) c_int;
extern fn EnumMetaFile(hdc: HDC, hmf: HMETAFILE, proc: MFENUMPROC, param: LPARAM) BOOL;
pub const ENHMFENUMPROC = ?fn (HDC, [*c]HANDLETABLE, [*c]const ENHMETARECORD, c_int, LPARAM) callconv(std.os.windows.WINAPI) c_int;
extern fn CloseEnhMetaFile(hdc: HDC) HENHMETAFILE;
extern fn CopyEnhMetaFileA(hEnh: HENHMETAFILE, lpFileName: LPCSTR) HENHMETAFILE;
extern fn CopyEnhMetaFileW(hEnh: HENHMETAFILE, lpFileName: LPCWSTR) HENHMETAFILE;
extern fn CreateEnhMetaFileA(hdc: HDC, lpFilename: LPCSTR, lprc: [*c]const RECT, lpDesc: LPCSTR) HDC;
extern fn CreateEnhMetaFileW(hdc: HDC, lpFilename: LPCWSTR, lprc: [*c]const RECT, lpDesc: LPCWSTR) HDC;
extern fn DeleteEnhMetaFile(hmf: HENHMETAFILE) BOOL;
extern fn EnumEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, proc: ENHMFENUMPROC, param: LPVOID, lpRect: [*c]const RECT) BOOL;
extern fn GetEnhMetaFileA(lpName: LPCSTR) HENHMETAFILE;
extern fn GetEnhMetaFileW(lpName: LPCWSTR) HENHMETAFILE;
extern fn GetEnhMetaFileBits(hEMF: HENHMETAFILE, nSize: UINT, lpData: LPBYTE) UINT;
extern fn GetEnhMetaFileDescriptionA(hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPSTR) UINT;
extern fn GetEnhMetaFileDescriptionW(hemf: HENHMETAFILE, cchBuffer: UINT, lpDescription: LPWSTR) UINT;
extern fn GetEnhMetaFileHeader(hemf: HENHMETAFILE, nSize: UINT, lpEnhMetaHeader: LPENHMETAHEADER) UINT;
extern fn GetEnhMetaFilePaletteEntries(hemf: HENHMETAFILE, nNumEntries: UINT, lpPaletteEntries: LPPALETTEENTRY) UINT;
extern fn GetEnhMetaFilePixelFormat(hemf: HENHMETAFILE, cbBuffer: UINT, ppfd: [*c]PIXELFORMATDESCRIPTOR) UINT;
extern fn GetWinMetaFileBits(hemf: HENHMETAFILE, cbData16: UINT, pData16: LPBYTE, iMapMode: INT, hdcRef: HDC) UINT;
extern fn PlayEnhMetaFile(hdc: HDC, hmf: HENHMETAFILE, lprect: [*c]const RECT) BOOL;
extern fn PlayEnhMetaFileRecord(hdc: HDC, pht: LPHANDLETABLE, pmr: [*c]const ENHMETARECORD, cht: UINT) BOOL;
extern fn SetEnhMetaFileBits(nSize: UINT, pb: [*c]const BYTE) HENHMETAFILE;
extern fn SetWinMetaFileBits(nSize: UINT, lpMeta16Data: [*c]const BYTE, hdcRef: HDC, lpMFP: [*c]const METAFILEPICT) HENHMETAFILE;
extern fn GdiComment(hdc: HDC, nSize: UINT, lpData: [*c]const BYTE) BOOL;
extern fn GetTextMetricsA(hdc: HDC, lptm: LPTEXTMETRICA) BOOL;
extern fn GetTextMetricsW(hdc: HDC, lptm: LPTEXTMETRICW) BOOL;
pub const struct_tagDIBSECTION = extern struct {
    dsBm: BITMAP,
    dsBmih: BITMAPINFOHEADER,
    dsBitfields: [3]DWORD,
    dshSection: HANDLE,
    dsOffset: DWORD,
};
pub const DIBSECTION = struct_tagDIBSECTION;
pub const LPDIBSECTION = [*c]struct_tagDIBSECTION;
pub const PDIBSECTION = [*c]struct_tagDIBSECTION;
extern fn AngleArc(hdc: HDC, x: c_int, y: c_int, r: DWORD, StartAngle: FLOAT, SweepAngle: FLOAT) BOOL;
extern fn PolyPolyline(hdc: HDC, apt: [*c]const POINT, asz: [*c]const DWORD, csz: DWORD) BOOL;
extern fn GetWorldTransform(hdc: HDC, lpxf: LPXFORM) BOOL;
extern fn SetWorldTransform(hdc: HDC, lpxf: [*c]const XFORM) BOOL;
extern fn ModifyWorldTransform(hdc: HDC, lpxf: [*c]const XFORM, mode: DWORD) BOOL;
extern fn CombineTransform(lpxfOut: LPXFORM, lpxf1: [*c]const XFORM, lpxf2: [*c]const XFORM) BOOL;
extern fn CreateDIBSection(hdc: HDC, pbmi: [*c]const BITMAPINFO, usage: UINT, ppvBits: [*c](?*c_void), hSection: HANDLE, offset: DWORD) HBITMAP;
extern fn GetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: [*c]RGBQUAD) UINT;
extern fn SetDIBColorTable(hdc: HDC, iStart: UINT, cEntries: UINT, prgbq: [*c]const RGBQUAD) UINT;
pub const struct_tagCOLORADJUSTMENT = extern struct {
    caSize: WORD,
    caFlags: WORD,
    caIlluminantIndex: WORD,
    caRedGamma: WORD,
    caGreenGamma: WORD,
    caBlueGamma: WORD,
    caReferenceBlack: WORD,
    caReferenceWhite: WORD,
    caContrast: SHORT,
    caBrightness: SHORT,
    caColorfulness: SHORT,
    caRedGreenTint: SHORT,
};
pub const COLORADJUSTMENT = struct_tagCOLORADJUSTMENT;
pub const PCOLORADJUSTMENT = [*c]struct_tagCOLORADJUSTMENT;
pub const LPCOLORADJUSTMENT = [*c]struct_tagCOLORADJUSTMENT;
extern fn SetColorAdjustment(hdc: HDC, lpca: [*c]const COLORADJUSTMENT) BOOL;
extern fn GetColorAdjustment(hdc: HDC, lpca: LPCOLORADJUSTMENT) BOOL;
extern fn CreateHalftonePalette(hdc: HDC) HPALETTE;
pub const ABORTPROC = ?fn (HDC, c_int) callconv(std.os.windows.WINAPI) BOOL;
pub const struct__DOCINFOA = extern struct {
    cbSize: c_int,
    lpszDocName: LPCSTR,
    lpszOutput: LPCSTR,
    lpszDatatype: LPCSTR,
    fwType: DWORD,
};
pub const DOCINFOA = struct__DOCINFOA;
pub const LPDOCINFOA = [*c]struct__DOCINFOA;
pub const struct__DOCINFOW = extern struct {
    cbSize: c_int,
    lpszDocName: LPCWSTR,
    lpszOutput: LPCWSTR,
    lpszDatatype: LPCWSTR,
    fwType: DWORD,
};
pub const DOCINFOW = struct__DOCINFOW;
pub const LPDOCINFOW = [*c]struct__DOCINFOW;
pub const DOCINFO = DOCINFOA;
pub const LPDOCINFO = LPDOCINFOA;
extern fn StartDocA(hdc: HDC, lpdi: [*c]const DOCINFOA) c_int;
extern fn StartDocW(hdc: HDC, lpdi: [*c]const DOCINFOW) c_int;
extern fn EndDoc(hdc: HDC) c_int;
extern fn StartPage(hdc: HDC) c_int;
extern fn EndPage(hdc: HDC) c_int;
extern fn AbortDoc(hdc: HDC) c_int;
extern fn SetAbortProc(hdc: HDC, proc: ABORTPROC) c_int;
extern fn AbortPath(hdc: HDC) BOOL;
extern fn ArcTo(hdc: HDC, left: c_int, top: c_int, right: c_int, bottom: c_int, xr1: c_int, yr1: c_int, xr2: c_int, yr2: c_int) BOOL;
extern fn BeginPath(hdc: HDC) BOOL;
extern fn CloseFigure(hdc: HDC) BOOL;
extern fn EndPath(hdc: HDC) BOOL;
extern fn FillPath(hdc: HDC) BOOL;
extern fn FlattenPath(hdc: HDC) BOOL;
extern fn GetPath(hdc: HDC, apt: LPPOINT, aj: LPBYTE, cpt: c_int) c_int;
extern fn PathToRegion(hdc: HDC) HRGN;
extern fn PolyDraw(hdc: HDC, apt: [*c]const POINT, aj: [*c]const BYTE, cpt: c_int) BOOL;
extern fn SelectClipPath(hdc: HDC, mode: c_int) BOOL;
extern fn SetArcDirection(hdc: HDC, dir: c_int) c_int;
extern fn SetMiterLimit(hdc: HDC, limit: FLOAT, old: PFLOAT) BOOL;
extern fn StrokeAndFillPath(hdc: HDC) BOOL;
extern fn StrokePath(hdc: HDC) BOOL;
extern fn WidenPath(hdc: HDC) BOOL;
extern fn ExtCreatePen(iPenStyle: DWORD, cWidth: DWORD, plbrush: [*c]const LOGBRUSH, cStyle: DWORD, pstyle: [*c]const DWORD) HPEN;
extern fn GetMiterLimit(hdc: HDC, plimit: PFLOAT) BOOL;
extern fn GetArcDirection(hdc: HDC) c_int;
extern fn GetObjectA(h: HANDLE, c: c_int, pv: LPVOID) c_int;
extern fn GetObjectW(h: HANDLE, c: c_int, pv: LPVOID) c_int;
extern fn MoveToEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn TextOutA(hdc: HDC, x: c_int, y: c_int, lpString: LPCSTR, c: c_int) BOOL;
extern fn TextOutW(hdc: HDC, x: c_int, y: c_int, lpString: LPCWSTR, c: c_int) BOOL;
extern fn ExtTextOutA(hdc: HDC, x: c_int, y: c_int, options: UINT, lprect: [*c]const RECT, lpString: LPCSTR, c: UINT, lpDx: [*c]const INT) BOOL;
extern fn ExtTextOutW(hdc: HDC, x: c_int, y: c_int, options: UINT, lprect: [*c]const RECT, lpString: LPCWSTR, c: UINT, lpDx: [*c]const INT) BOOL;
extern fn PolyTextOutA(hdc: HDC, ppt: [*c]const POLYTEXTA, nstrings: c_int) BOOL;
extern fn PolyTextOutW(hdc: HDC, ppt: [*c]const POLYTEXTW, nstrings: c_int) BOOL;
extern fn CreatePolygonRgn(pptl: [*c]const POINT, cPoint: c_int, iMode: c_int) HRGN;
extern fn DPtoLP(hdc: HDC, lppt: LPPOINT, c: c_int) BOOL;
extern fn LPtoDP(hdc: HDC, lppt: LPPOINT, c: c_int) BOOL;
extern fn Polygon(hdc: HDC, apt: [*c]const POINT, cpt: c_int) BOOL;
extern fn Polyline(hdc: HDC, apt: [*c]const POINT, cpt: c_int) BOOL;
extern fn PolyBezier(hdc: HDC, apt: [*c]const POINT, cpt: DWORD) BOOL;
extern fn PolyBezierTo(hdc: HDC, apt: [*c]const POINT, cpt: DWORD) BOOL;
extern fn PolylineTo(hdc: HDC, apt: [*c]const POINT, cpt: DWORD) BOOL;
extern fn SetViewportExtEx(hdc: HDC, x: c_int, y: c_int, lpsz: LPSIZE) BOOL;
extern fn SetViewportOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn SetWindowExtEx(hdc: HDC, x: c_int, y: c_int, lpsz: LPSIZE) BOOL;
extern fn SetWindowOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn OffsetViewportOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn OffsetWindowOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn ScaleViewportExtEx(hdc: HDC, xn: c_int, dx: c_int, yn: c_int, yd: c_int, lpsz: LPSIZE) BOOL;
extern fn ScaleWindowExtEx(hdc: HDC, xn: c_int, xd: c_int, yn: c_int, yd: c_int, lpsz: LPSIZE) BOOL;
extern fn SetBitmapDimensionEx(hbm: HBITMAP, w: c_int, h: c_int, lpsz: LPSIZE) BOOL;
extern fn SetBrushOrgEx(hdc: HDC, x: c_int, y: c_int, lppt: LPPOINT) BOOL;
extern fn GetTextFaceA(hdc: HDC, c: c_int, lpName: LPSTR) c_int;
extern fn GetTextFaceW(hdc: HDC, c: c_int, lpName: LPWSTR) c_int;
pub const struct_tagKERNINGPAIR = extern struct {
    wFirst: WORD,
    wSecond: WORD,
    iKernAmount: c_int,
};
pub const KERNINGPAIR = struct_tagKERNINGPAIR;
pub const LPKERNINGPAIR = [*c]struct_tagKERNINGPAIR;
extern fn GetKerningPairsA(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) DWORD;
extern fn GetKerningPairsW(hdc: HDC, nPairs: DWORD, lpKernPair: LPKERNINGPAIR) DWORD;
extern fn GetDCOrgEx(hdc: HDC, lppt: LPPOINT) BOOL;
extern fn FixBrushOrgEx(hdc: HDC, x: c_int, y: c_int, ptl: LPPOINT) BOOL;
extern fn UnrealizeObject(h: HGDIOBJ) BOOL;
extern fn GdiFlush() BOOL;
extern fn GdiSetBatchLimit(dw: DWORD) DWORD;
extern fn GdiGetBatchLimit() DWORD;
pub const ICMENUMPROCA = ?fn (LPSTR, LPARAM) callconv(std.os.windows.WINAPI) c_int;
pub const ICMENUMPROCW = ?fn (LPWSTR, LPARAM) callconv(std.os.windows.WINAPI) c_int;
extern fn SetICMMode(hdc: HDC, mode: c_int) c_int;
extern fn CheckColorsInGamut(hdc: HDC, lpRGBTriple: LPRGBTRIPLE, dlpBuffer: LPVOID, nCount: DWORD) BOOL;
extern fn GetColorSpace(hdc: HDC) HCOLORSPACE;
extern fn GetLogColorSpaceA(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEA, nSize: DWORD) BOOL;
extern fn GetLogColorSpaceW(hColorSpace: HCOLORSPACE, lpBuffer: LPLOGCOLORSPACEW, nSize: DWORD) BOOL;
extern fn CreateColorSpaceA(lplcs: LPLOGCOLORSPACEA) HCOLORSPACE;
extern fn CreateColorSpaceW(lplcs: LPLOGCOLORSPACEW) HCOLORSPACE;
extern fn SetColorSpace(hdc: HDC, hcs: HCOLORSPACE) HCOLORSPACE;
extern fn DeleteColorSpace(hcs: HCOLORSPACE) BOOL;
extern fn GetICMProfileA(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPSTR) BOOL;
extern fn GetICMProfileW(hdc: HDC, pBufSize: LPDWORD, pszFilename: LPWSTR) BOOL;
extern fn SetICMProfileA(hdc: HDC, lpFileName: LPSTR) BOOL;
extern fn SetICMProfileW(hdc: HDC, lpFileName: LPWSTR) BOOL;
extern fn GetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) BOOL;
extern fn SetDeviceGammaRamp(hdc: HDC, lpRamp: LPVOID) BOOL;
extern fn ColorMatchToTarget(hdc: HDC, hdcTarget: HDC, action: DWORD) BOOL;
extern fn EnumICMProfilesA(hdc: HDC, proc: ICMENUMPROCA, param: LPARAM) c_int;
extern fn EnumICMProfilesW(hdc: HDC, proc: ICMENUMPROCW, param: LPARAM) c_int;
extern fn UpdateICMRegKeyA(reserved: DWORD, lpszCMID: LPSTR, lpszFileName: LPSTR, command: UINT) BOOL;
extern fn UpdateICMRegKeyW(reserved: DWORD, lpszCMID: LPWSTR, lpszFileName: LPWSTR, command: UINT) BOOL;
extern fn ColorCorrectPalette(hdc: HDC, hPal: HPALETTE, deFirst: DWORD, num: DWORD) BOOL;
pub const struct_tagEMR = extern struct {
    iType: DWORD,
    nSize: DWORD,
};
pub const EMR = struct_tagEMR;
pub const PEMR = [*c]struct_tagEMR;
pub const struct_tagEMRTEXT = extern struct {
    ptlReference: POINTL,
    nChars: DWORD,
    offString: DWORD,
    fOptions: DWORD,
    rcl: RECTL,
    offDx: DWORD,
};
pub const EMRTEXT = struct_tagEMRTEXT;
pub const PEMRTEXT = [*c]struct_tagEMRTEXT;
pub const struct_tagABORTPATH = extern struct {
    emr: EMR,
};
pub const EMRABORTPATH = struct_tagABORTPATH;
pub const PEMRABORTPATH = [*c]struct_tagABORTPATH;
pub const EMRBEGINPATH = struct_tagABORTPATH;
pub const PEMRBEGINPATH = [*c]struct_tagABORTPATH;
pub const EMRENDPATH = struct_tagABORTPATH;
pub const PEMRENDPATH = [*c]struct_tagABORTPATH;
pub const EMRCLOSEFIGURE = struct_tagABORTPATH;
pub const PEMRCLOSEFIGURE = [*c]struct_tagABORTPATH;
pub const EMRFLATTENPATH = struct_tagABORTPATH;
pub const PEMRFLATTENPATH = [*c]struct_tagABORTPATH;
pub const EMRWIDENPATH = struct_tagABORTPATH;
pub const PEMRWIDENPATH = [*c]struct_tagABORTPATH;
pub const EMRSETMETARGN = struct_tagABORTPATH;
pub const PEMRSETMETARGN = [*c]struct_tagABORTPATH;
pub const EMRSAVEDC = struct_tagABORTPATH;
pub const PEMRSAVEDC = [*c]struct_tagABORTPATH;
pub const EMRREALIZEPALETTE = struct_tagABORTPATH;
pub const PEMRREALIZEPALETTE = [*c]struct_tagABORTPATH;
pub const struct_tagEMRSELECTCLIPPATH = extern struct {
    emr: EMR,
    iMode: DWORD,
};
pub const EMRSELECTCLIPPATH = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSELECTCLIPPATH = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETBKMODE = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETBKMODE = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETMAPMODE = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETMAPMODE = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETLAYOUT = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETLAYOUT = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETPOLYFILLMODE = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETPOLYFILLMODE = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETROP2 = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETROP2 = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETSTRETCHBLTMODE = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETSTRETCHBLTMODE = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETICMMODE = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETICMMODE = [*c]struct_tagEMRSELECTCLIPPATH;
pub const EMRSETTEXTALIGN = struct_tagEMRSELECTCLIPPATH;
pub const PEMRSETTEXTALIGN = [*c]struct_tagEMRSELECTCLIPPATH;
pub const struct_tagEMRSETMITERLIMIT = extern struct {
    emr: EMR,
    eMiterLimit: FLOAT,
};
pub const EMRSETMITERLIMIT = struct_tagEMRSETMITERLIMIT;
pub const PEMRSETMITERLIMIT = [*c]struct_tagEMRSETMITERLIMIT;
pub const struct_tagEMRRESTOREDC = extern struct {
    emr: EMR,
    iRelative: LONG,
};
pub const EMRRESTOREDC = struct_tagEMRRESTOREDC;
pub const PEMRRESTOREDC = [*c]struct_tagEMRRESTOREDC;
pub const struct_tagEMRSETARCDIRECTION = extern struct {
    emr: EMR,
    iArcDirection: DWORD,
};
pub const EMRSETARCDIRECTION = struct_tagEMRSETARCDIRECTION;
pub const PEMRSETARCDIRECTION = [*c]struct_tagEMRSETARCDIRECTION;
pub const struct_tagEMRSETMAPPERFLAGS = extern struct {
    emr: EMR,
    dwFlags: DWORD,
};
pub const EMRSETMAPPERFLAGS = struct_tagEMRSETMAPPERFLAGS;
pub const PEMRSETMAPPERFLAGS = [*c]struct_tagEMRSETMAPPERFLAGS;
pub const struct_tagEMRSETTEXTCOLOR = extern struct {
    emr: EMR,
    crColor: COLORREF,
};
pub const EMRSETBKCOLOR = struct_tagEMRSETTEXTCOLOR;
pub const PEMRSETBKCOLOR = [*c]struct_tagEMRSETTEXTCOLOR;
pub const EMRSETTEXTCOLOR = struct_tagEMRSETTEXTCOLOR;
pub const PEMRSETTEXTCOLOR = [*c]struct_tagEMRSETTEXTCOLOR;
pub const struct_tagEMRSELECTOBJECT = extern struct {
    emr: EMR,
    ihObject: DWORD,
};
pub const EMRSELECTOBJECT = struct_tagEMRSELECTOBJECT;
pub const PEMRSELECTOBJECT = [*c]struct_tagEMRSELECTOBJECT;
pub const EMRDELETEOBJECT = struct_tagEMRSELECTOBJECT;
pub const PEMRDELETEOBJECT = [*c]struct_tagEMRSELECTOBJECT;
pub const struct_tagEMRSELECTPALETTE = extern struct {
    emr: EMR,
    ihPal: DWORD,
};
pub const EMRSELECTPALETTE = struct_tagEMRSELECTPALETTE;
pub const PEMRSELECTPALETTE = [*c]struct_tagEMRSELECTPALETTE;
pub const struct_tagEMRRESIZEPALETTE = extern struct {
    emr: EMR,
    ihPal: DWORD,
    cEntries: DWORD,
};
pub const EMRRESIZEPALETTE = struct_tagEMRRESIZEPALETTE;
pub const PEMRRESIZEPALETTE = [*c]struct_tagEMRRESIZEPALETTE;
pub const struct_tagEMRSETPALETTEENTRIES = extern struct {
    emr: EMR,
    ihPal: DWORD,
    iStart: DWORD,
    cEntries: DWORD,
    aPalEntries: [1]PALETTEENTRY,
};
pub const EMRSETPALETTEENTRIES = struct_tagEMRSETPALETTEENTRIES;
pub const PEMRSETPALETTEENTRIES = [*c]struct_tagEMRSETPALETTEENTRIES;
pub const struct_tagEMRSETCOLORADJUSTMENT = extern struct {
    emr: EMR,
    ColorAdjustment: COLORADJUSTMENT,
};
pub const EMRSETCOLORADJUSTMENT = struct_tagEMRSETCOLORADJUSTMENT;
pub const PEMRSETCOLORADJUSTMENT = [*c]struct_tagEMRSETCOLORADJUSTMENT;
pub const struct_tagEMRGDICOMMENT = extern struct {
    emr: EMR,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRGDICOMMENT = struct_tagEMRGDICOMMENT;
pub const PEMRGDICOMMENT = [*c]struct_tagEMRGDICOMMENT;
pub const struct_tagEMREOF = extern struct {
    emr: EMR,
    nPalEntries: DWORD,
    offPalEntries: DWORD,
    nSizeLast: DWORD,
};
pub const EMREOF = struct_tagEMREOF;
pub const PEMREOF = [*c]struct_tagEMREOF;
pub const struct_tagEMRLINETO = extern struct {
    emr: EMR,
    ptl: POINTL,
};
pub const EMRLINETO = struct_tagEMRLINETO;
pub const PEMRLINETO = [*c]struct_tagEMRLINETO;
pub const EMRMOVETOEX = struct_tagEMRLINETO;
pub const PEMRMOVETOEX = [*c]struct_tagEMRLINETO;
pub const struct_tagEMROFFSETCLIPRGN = extern struct {
    emr: EMR,
    ptlOffset: POINTL,
};
pub const EMROFFSETCLIPRGN = struct_tagEMROFFSETCLIPRGN;
pub const PEMROFFSETCLIPRGN = [*c]struct_tagEMROFFSETCLIPRGN;
pub const struct_tagEMRFILLPATH = extern struct {
    emr: EMR,
    rclBounds: RECTL,
};
pub const EMRFILLPATH = struct_tagEMRFILLPATH;
pub const PEMRFILLPATH = [*c]struct_tagEMRFILLPATH;
pub const EMRSTROKEANDFILLPATH = struct_tagEMRFILLPATH;
pub const PEMRSTROKEANDFILLPATH = [*c]struct_tagEMRFILLPATH;
pub const EMRSTROKEPATH = struct_tagEMRFILLPATH;
pub const PEMRSTROKEPATH = [*c]struct_tagEMRFILLPATH;
pub const struct_tagEMREXCLUDECLIPRECT = extern struct {
    emr: EMR,
    rclClip: RECTL,
};
pub const EMREXCLUDECLIPRECT = struct_tagEMREXCLUDECLIPRECT;
pub const PEMREXCLUDECLIPRECT = [*c]struct_tagEMREXCLUDECLIPRECT;
pub const EMRINTERSECTCLIPRECT = struct_tagEMREXCLUDECLIPRECT;
pub const PEMRINTERSECTCLIPRECT = [*c]struct_tagEMREXCLUDECLIPRECT;
pub const struct_tagEMRSETVIEWPORTORGEX = extern struct {
    emr: EMR,
    ptlOrigin: POINTL,
};
pub const EMRSETVIEWPORTORGEX = struct_tagEMRSETVIEWPORTORGEX;
pub const PEMRSETVIEWPORTORGEX = [*c]struct_tagEMRSETVIEWPORTORGEX;
pub const EMRSETWINDOWORGEX = struct_tagEMRSETVIEWPORTORGEX;
pub const PEMRSETWINDOWORGEX = [*c]struct_tagEMRSETVIEWPORTORGEX;
pub const EMRSETBRUSHORGEX = struct_tagEMRSETVIEWPORTORGEX;
pub const PEMRSETBRUSHORGEX = [*c]struct_tagEMRSETVIEWPORTORGEX;
pub const struct_tagEMRSETVIEWPORTEXTEX = extern struct {
    emr: EMR,
    szlExtent: SIZEL,
};
pub const EMRSETVIEWPORTEXTEX = struct_tagEMRSETVIEWPORTEXTEX;
pub const PEMRSETVIEWPORTEXTEX = [*c]struct_tagEMRSETVIEWPORTEXTEX;
pub const EMRSETWINDOWEXTEX = struct_tagEMRSETVIEWPORTEXTEX;
pub const PEMRSETWINDOWEXTEX = [*c]struct_tagEMRSETVIEWPORTEXTEX;
pub const struct_tagEMRSCALEVIEWPORTEXTEX = extern struct {
    emr: EMR,
    xNum: LONG,
    xDenom: LONG,
    yNum: LONG,
    yDenom: LONG,
};
pub const EMRSCALEVIEWPORTEXTEX = struct_tagEMRSCALEVIEWPORTEXTEX;
pub const PEMRSCALEVIEWPORTEXTEX = [*c]struct_tagEMRSCALEVIEWPORTEXTEX;
pub const EMRSCALEWINDOWEXTEX = struct_tagEMRSCALEVIEWPORTEXTEX;
pub const PEMRSCALEWINDOWEXTEX = [*c]struct_tagEMRSCALEVIEWPORTEXTEX;
pub const struct_tagEMRSETWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
};
pub const EMRSETWORLDTRANSFORM = struct_tagEMRSETWORLDTRANSFORM;
pub const PEMRSETWORLDTRANSFORM = [*c]struct_tagEMRSETWORLDTRANSFORM;
pub const struct_tagEMRMODIFYWORLDTRANSFORM = extern struct {
    emr: EMR,
    xform: XFORM,
    iMode: DWORD,
};
pub const EMRMODIFYWORLDTRANSFORM = struct_tagEMRMODIFYWORLDTRANSFORM;
pub const PEMRMODIFYWORLDTRANSFORM = [*c]struct_tagEMRMODIFYWORLDTRANSFORM;
pub const struct_tagEMRSETPIXELV = extern struct {
    emr: EMR,
    ptlPixel: POINTL,
    crColor: COLORREF,
};
pub const EMRSETPIXELV = struct_tagEMRSETPIXELV;
pub const PEMRSETPIXELV = [*c]struct_tagEMRSETPIXELV;
pub const struct_tagEMREXTFLOODFILL = extern struct {
    emr: EMR,
    ptlStart: POINTL,
    crColor: COLORREF,
    iMode: DWORD,
};
pub const EMREXTFLOODFILL = struct_tagEMREXTFLOODFILL;
pub const PEMREXTFLOODFILL = [*c]struct_tagEMREXTFLOODFILL;
pub const struct_tagEMRELLIPSE = extern struct {
    emr: EMR,
    rclBox: RECTL,
};
pub const EMRELLIPSE = struct_tagEMRELLIPSE;
pub const PEMRELLIPSE = [*c]struct_tagEMRELLIPSE;
pub const EMRRECTANGLE = struct_tagEMRELLIPSE;
pub const PEMRRECTANGLE = [*c]struct_tagEMRELLIPSE;
pub const struct_tagEMRROUNDRECT = extern struct {
    emr: EMR,
    rclBox: RECTL,
    szlCorner: SIZEL,
};
pub const EMRROUNDRECT = struct_tagEMRROUNDRECT;
pub const PEMRROUNDRECT = [*c]struct_tagEMRROUNDRECT;
pub const struct_tagEMRARC = extern struct {
    emr: EMR,
    rclBox: RECTL,
    ptlStart: POINTL,
    ptlEnd: POINTL,
};
pub const EMRARC = struct_tagEMRARC;
pub const PEMRARC = [*c]struct_tagEMRARC;
pub const EMRARCTO = struct_tagEMRARC;
pub const PEMRARCTO = [*c]struct_tagEMRARC;
pub const EMRCHORD = struct_tagEMRARC;
pub const PEMRCHORD = [*c]struct_tagEMRARC;
pub const EMRPIE = struct_tagEMRARC;
pub const PEMRPIE = [*c]struct_tagEMRARC;
pub const struct_tagEMRANGLEARC = extern struct {
    emr: EMR,
    ptlCenter: POINTL,
    nRadius: DWORD,
    eStartAngle: FLOAT,
    eSweepAngle: FLOAT,
};
pub const EMRANGLEARC = struct_tagEMRANGLEARC;
pub const PEMRANGLEARC = [*c]struct_tagEMRANGLEARC;
pub const struct_tagEMRPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: DWORD,
    aptl: [1]POINTL,
};
pub const EMRPOLYLINE = struct_tagEMRPOLYLINE;
pub const PEMRPOLYLINE = [*c]struct_tagEMRPOLYLINE;
pub const EMRPOLYBEZIER = struct_tagEMRPOLYLINE;
pub const PEMRPOLYBEZIER = [*c]struct_tagEMRPOLYLINE;
pub const EMRPOLYGON = struct_tagEMRPOLYLINE;
pub const PEMRPOLYGON = [*c]struct_tagEMRPOLYLINE;
pub const EMRPOLYBEZIERTO = struct_tagEMRPOLYLINE;
pub const PEMRPOLYBEZIERTO = [*c]struct_tagEMRPOLYLINE;
pub const EMRPOLYLINETO = struct_tagEMRPOLYLINE;
pub const PEMRPOLYLINETO = [*c]struct_tagEMRPOLYLINE;
pub const struct_tagEMRPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: DWORD,
    apts: [1]POINTS,
};
pub const EMRPOLYLINE16 = struct_tagEMRPOLYLINE16;
pub const PEMRPOLYLINE16 = [*c]struct_tagEMRPOLYLINE16;
pub const EMRPOLYBEZIER16 = struct_tagEMRPOLYLINE16;
pub const PEMRPOLYBEZIER16 = [*c]struct_tagEMRPOLYLINE16;
pub const EMRPOLYGON16 = struct_tagEMRPOLYLINE16;
pub const PEMRPOLYGON16 = [*c]struct_tagEMRPOLYLINE16;
pub const EMRPOLYBEZIERTO16 = struct_tagEMRPOLYLINE16;
pub const PEMRPOLYBEZIERTO16 = [*c]struct_tagEMRPOLYLINE16;
pub const EMRPOLYLINETO16 = struct_tagEMRPOLYLINE16;
pub const PEMRPOLYLINETO16 = [*c]struct_tagEMRPOLYLINE16;
pub const struct_tagEMRPOLYDRAW = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cptl: DWORD,
    aptl: [1]POINTL,
    abTypes: [1]BYTE,
};
pub const EMRPOLYDRAW = struct_tagEMRPOLYDRAW;
pub const PEMRPOLYDRAW = [*c]struct_tagEMRPOLYDRAW;
pub const struct_tagEMRPOLYDRAW16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cpts: DWORD,
    apts: [1]POINTS,
    abTypes: [1]BYTE,
};
pub const EMRPOLYDRAW16 = struct_tagEMRPOLYDRAW16;
pub const PEMRPOLYDRAW16 = [*c]struct_tagEMRPOLYDRAW16;
pub const struct_tagEMRPOLYPOLYLINE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: DWORD,
    cptl: DWORD,
    aPolyCounts: [1]DWORD,
    aptl: [1]POINTL,
};
pub const EMRPOLYPOLYLINE = struct_tagEMRPOLYPOLYLINE;
pub const PEMRPOLYPOLYLINE = [*c]struct_tagEMRPOLYPOLYLINE;
pub const EMRPOLYPOLYGON = struct_tagEMRPOLYPOLYLINE;
pub const PEMRPOLYPOLYGON = [*c]struct_tagEMRPOLYPOLYLINE;
pub const struct_tagEMRPOLYPOLYLINE16 = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nPolys: DWORD,
    cpts: DWORD,
    aPolyCounts: [1]DWORD,
    apts: [1]POINTS,
};
pub const EMRPOLYPOLYLINE16 = struct_tagEMRPOLYPOLYLINE16;
pub const PEMRPOLYPOLYLINE16 = [*c]struct_tagEMRPOLYPOLYLINE16;
pub const EMRPOLYPOLYGON16 = struct_tagEMRPOLYPOLYLINE16;
pub const PEMRPOLYPOLYGON16 = [*c]struct_tagEMRPOLYPOLYLINE16;
pub const struct_tagEMRINVERTRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: DWORD,
    RgnData: [1]BYTE,
};
pub const EMRINVERTRGN = struct_tagEMRINVERTRGN;
pub const PEMRINVERTRGN = [*c]struct_tagEMRINVERTRGN;
pub const EMRPAINTRGN = struct_tagEMRINVERTRGN;
pub const PEMRPAINTRGN = [*c]struct_tagEMRINVERTRGN;
pub const struct_tagEMRFILLRGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: DWORD,
    ihBrush: DWORD,
    RgnData: [1]BYTE,
};
pub const EMRFILLRGN = struct_tagEMRFILLRGN;
pub const PEMRFILLRGN = [*c]struct_tagEMRFILLRGN;
pub const struct_tagEMRFRAMERGN = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbRgnData: DWORD,
    ihBrush: DWORD,
    szlStroke: SIZEL,
    RgnData: [1]BYTE,
};
pub const EMRFRAMERGN = struct_tagEMRFRAMERGN;
pub const PEMRFRAMERGN = [*c]struct_tagEMRFRAMERGN;
pub const struct_tagEMREXTSELECTCLIPRGN = extern struct {
    emr: EMR,
    cbRgnData: DWORD,
    iMode: DWORD,
    RgnData: [1]BYTE,
};
pub const EMREXTSELECTCLIPRGN = struct_tagEMREXTSELECTCLIPRGN;
pub const PEMREXTSELECTCLIPRGN = [*c]struct_tagEMREXTSELECTCLIPRGN;
pub const struct_tagEMREXTTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: DWORD,
    exScale: FLOAT,
    eyScale: FLOAT,
    emrtext: EMRTEXT,
};
pub const EMREXTTEXTOUTA = struct_tagEMREXTTEXTOUTA;
pub const PEMREXTTEXTOUTA = [*c]struct_tagEMREXTTEXTOUTA;
pub const EMREXTTEXTOUTW = struct_tagEMREXTTEXTOUTA;
pub const PEMREXTTEXTOUTW = [*c]struct_tagEMREXTTEXTOUTA;
pub const struct_tagEMRPOLYTEXTOUTA = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    iGraphicsMode: DWORD,
    exScale: FLOAT,
    eyScale: FLOAT,
    cStrings: LONG,
    aemrtext: [1]EMRTEXT,
};
pub const EMRPOLYTEXTOUTA = struct_tagEMRPOLYTEXTOUTA;
pub const PEMRPOLYTEXTOUTA = [*c]struct_tagEMRPOLYTEXTOUTA;
pub const EMRPOLYTEXTOUTW = struct_tagEMRPOLYTEXTOUTA;
pub const PEMRPOLYTEXTOUTW = [*c]struct_tagEMRPOLYTEXTOUTA;
pub const struct_tagEMRBITBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    cxDest: LONG,
    cyDest: LONG,
    dwRop: DWORD,
    xSrc: LONG,
    ySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
};
pub const EMRBITBLT = struct_tagEMRBITBLT;
pub const PEMRBITBLT = [*c]struct_tagEMRBITBLT;
pub const struct_tagEMRSTRETCHBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    cxDest: LONG,
    cyDest: LONG,
    dwRop: DWORD,
    xSrc: LONG,
    ySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    cxSrc: LONG,
    cySrc: LONG,
};
pub const EMRSTRETCHBLT = struct_tagEMRSTRETCHBLT;
pub const PEMRSTRETCHBLT = [*c]struct_tagEMRSTRETCHBLT;
pub const struct_tagEMRMASKBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    cxDest: LONG,
    cyDest: LONG,
    dwRop: DWORD,
    xSrc: LONG,
    ySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    xMask: LONG,
    yMask: LONG,
    iUsageMask: DWORD,
    offBmiMask: DWORD,
    cbBmiMask: DWORD,
    offBitsMask: DWORD,
    cbBitsMask: DWORD,
};
pub const EMRMASKBLT = struct_tagEMRMASKBLT;
pub const PEMRMASKBLT = [*c]struct_tagEMRMASKBLT;
pub const struct_tagEMRPLGBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    aptlDest: [3]POINTL,
    xSrc: LONG,
    ySrc: LONG,
    cxSrc: LONG,
    cySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    xMask: LONG,
    yMask: LONG,
    iUsageMask: DWORD,
    offBmiMask: DWORD,
    cbBmiMask: DWORD,
    offBitsMask: DWORD,
    cbBitsMask: DWORD,
};
pub const EMRPLGBLT = struct_tagEMRPLGBLT;
pub const PEMRPLGBLT = [*c]struct_tagEMRPLGBLT;
pub const struct_tagEMRSETDIBITSTODEVICE = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    xSrc: LONG,
    ySrc: LONG,
    cxSrc: LONG,
    cySrc: LONG,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    iUsageSrc: DWORD,
    iStartScan: DWORD,
    cScans: DWORD,
};
pub const EMRSETDIBITSTODEVICE = struct_tagEMRSETDIBITSTODEVICE;
pub const PEMRSETDIBITSTODEVICE = [*c]struct_tagEMRSETDIBITSTODEVICE;
pub const struct_tagEMRSTRETCHDIBITS = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    xSrc: LONG,
    ySrc: LONG,
    cxSrc: LONG,
    cySrc: LONG,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    iUsageSrc: DWORD,
    dwRop: DWORD,
    cxDest: LONG,
    cyDest: LONG,
};
pub const EMRSTRETCHDIBITS = struct_tagEMRSTRETCHDIBITS;
pub const PEMRSTRETCHDIBITS = [*c]struct_tagEMRSTRETCHDIBITS;
pub const struct_tagEMREXTCREATEFONTINDIRECTW = extern struct {
    emr: EMR,
    ihFont: DWORD,
    elfw: EXTLOGFONTW,
};
pub const EMREXTCREATEFONTINDIRECTW = struct_tagEMREXTCREATEFONTINDIRECTW;
pub const PEMREXTCREATEFONTINDIRECTW = [*c]struct_tagEMREXTCREATEFONTINDIRECTW;
pub const struct_tagEMRCREATEPALETTE = extern struct {
    emr: EMR,
    ihPal: DWORD,
    lgpl: LOGPALETTE,
};
pub const EMRCREATEPALETTE = struct_tagEMRCREATEPALETTE;
pub const PEMRCREATEPALETTE = [*c]struct_tagEMRCREATEPALETTE;
pub const struct_tagEMRCREATEPEN = extern struct {
    emr: EMR,
    ihPen: DWORD,
    lopn: LOGPEN,
};
pub const EMRCREATEPEN = struct_tagEMRCREATEPEN;
pub const PEMRCREATEPEN = [*c]struct_tagEMRCREATEPEN;
pub const struct_tagEMREXTCREATEPEN = extern struct {
    emr: EMR,
    ihPen: DWORD,
    offBmi: DWORD,
    cbBmi: DWORD,
    offBits: DWORD,
    cbBits: DWORD,
    elp: EXTLOGPEN32,
};
pub const EMREXTCREATEPEN = struct_tagEMREXTCREATEPEN;
pub const PEMREXTCREATEPEN = [*c]struct_tagEMREXTCREATEPEN;
pub const struct_tagEMRCREATEBRUSHINDIRECT = extern struct {
    emr: EMR,
    ihBrush: DWORD,
    lb: LOGBRUSH32,
};
pub const EMRCREATEBRUSHINDIRECT = struct_tagEMRCREATEBRUSHINDIRECT;
pub const PEMRCREATEBRUSHINDIRECT = [*c]struct_tagEMRCREATEBRUSHINDIRECT;
pub const struct_tagEMRCREATEMONOBRUSH = extern struct {
    emr: EMR,
    ihBrush: DWORD,
    iUsage: DWORD,
    offBmi: DWORD,
    cbBmi: DWORD,
    offBits: DWORD,
    cbBits: DWORD,
};
pub const EMRCREATEMONOBRUSH = struct_tagEMRCREATEMONOBRUSH;
pub const PEMRCREATEMONOBRUSH = [*c]struct_tagEMRCREATEMONOBRUSH;
pub const struct_tagEMRCREATEDIBPATTERNBRUSHPT = extern struct {
    emr: EMR,
    ihBrush: DWORD,
    iUsage: DWORD,
    offBmi: DWORD,
    cbBmi: DWORD,
    offBits: DWORD,
    cbBits: DWORD,
};
pub const EMRCREATEDIBPATTERNBRUSHPT = struct_tagEMRCREATEDIBPATTERNBRUSHPT;
pub const PEMRCREATEDIBPATTERNBRUSHPT = [*c]struct_tagEMRCREATEDIBPATTERNBRUSHPT;
pub const struct_tagEMRFORMAT = extern struct {
    dSignature: DWORD,
    nVersion: DWORD,
    cbData: DWORD,
    offData: DWORD,
};
pub const EMRFORMAT = struct_tagEMRFORMAT;
pub const PEMRFORMAT = [*c]struct_tagEMRFORMAT;
pub const struct_tagEMRGLSRECORD = extern struct {
    emr: EMR,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRGLSRECORD = struct_tagEMRGLSRECORD;
pub const PEMRGLSRECORD = [*c]struct_tagEMRGLSRECORD;
pub const struct_tagEMRGLSBOUNDEDRECORD = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRGLSBOUNDEDRECORD = struct_tagEMRGLSBOUNDEDRECORD;
pub const PEMRGLSBOUNDEDRECORD = [*c]struct_tagEMRGLSBOUNDEDRECORD;
pub const struct_tagEMRPIXELFORMAT = extern struct {
    emr: EMR,
    pfd: PIXELFORMATDESCRIPTOR,
};
pub const EMRPIXELFORMAT = struct_tagEMRPIXELFORMAT;
pub const PEMRPIXELFORMAT = [*c]struct_tagEMRPIXELFORMAT;
pub const struct_tagEMRCREATECOLORSPACE = extern struct {
    emr: EMR,
    ihCS: DWORD,
    lcs: LOGCOLORSPACEA,
};
pub const EMRCREATECOLORSPACE = struct_tagEMRCREATECOLORSPACE;
pub const PEMRCREATECOLORSPACE = [*c]struct_tagEMRCREATECOLORSPACE;
pub const struct_tagEMRSETCOLORSPACE = extern struct {
    emr: EMR,
    ihCS: DWORD,
};
pub const EMRSETCOLORSPACE = struct_tagEMRSETCOLORSPACE;
pub const PEMRSETCOLORSPACE = [*c]struct_tagEMRSETCOLORSPACE;
pub const EMRSELECTCOLORSPACE = struct_tagEMRSETCOLORSPACE;
pub const PEMRSELECTCOLORSPACE = [*c]struct_tagEMRSETCOLORSPACE;
pub const EMRDELETECOLORSPACE = struct_tagEMRSETCOLORSPACE;
pub const PEMRDELETECOLORSPACE = [*c]struct_tagEMRSETCOLORSPACE;
pub const struct_tagEMREXTESCAPE = extern struct {
    emr: EMR,
    iEscape: INT,
    cbEscData: INT,
    EscData: [1]BYTE,
};
pub const EMREXTESCAPE = struct_tagEMREXTESCAPE;
pub const PEMREXTESCAPE = [*c]struct_tagEMREXTESCAPE;
pub const EMRDRAWESCAPE = struct_tagEMREXTESCAPE;
pub const PEMRDRAWESCAPE = [*c]struct_tagEMREXTESCAPE;
pub const struct_tagEMRNAMEDESCAPE = extern struct {
    emr: EMR,
    iEscape: INT,
    cbDriver: INT,
    cbEscData: INT,
    EscData: [1]BYTE,
};
pub const EMRNAMEDESCAPE = struct_tagEMRNAMEDESCAPE;
pub const PEMRNAMEDESCAPE = [*c]struct_tagEMRNAMEDESCAPE;
pub const struct_tagEMRSETICMPROFILE = extern struct {
    emr: EMR,
    dwFlags: DWORD,
    cbName: DWORD,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRSETICMPROFILE = struct_tagEMRSETICMPROFILE;
pub const PEMRSETICMPROFILE = [*c]struct_tagEMRSETICMPROFILE;
pub const EMRSETICMPROFILEA = struct_tagEMRSETICMPROFILE;
pub const PEMRSETICMPROFILEA = [*c]struct_tagEMRSETICMPROFILE;
pub const EMRSETICMPROFILEW = struct_tagEMRSETICMPROFILE;
pub const PEMRSETICMPROFILEW = [*c]struct_tagEMRSETICMPROFILE;
pub const struct_tagEMRCREATECOLORSPACEW = extern struct {
    emr: EMR,
    ihCS: DWORD,
    lcs: LOGCOLORSPACEW,
    dwFlags: DWORD,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRCREATECOLORSPACEW = struct_tagEMRCREATECOLORSPACEW;
pub const PEMRCREATECOLORSPACEW = [*c]struct_tagEMRCREATECOLORSPACEW;
pub const struct_tagCOLORMATCHTOTARGET = extern struct {
    emr: EMR,
    dwAction: DWORD,
    dwFlags: DWORD,
    cbName: DWORD,
    cbData: DWORD,
    Data: [1]BYTE,
};
pub const EMRCOLORMATCHTOTARGET = struct_tagCOLORMATCHTOTARGET;
pub const PEMRCOLORMATCHTOTARGET = [*c]struct_tagCOLORMATCHTOTARGET;
pub const struct_tagCOLORCORRECTPALETTE = extern struct {
    emr: EMR,
    ihPalette: DWORD,
    nFirstEntry: DWORD,
    nPalEntries: DWORD,
    nReserved: DWORD,
};
pub const EMRCOLORCORRECTPALETTE = struct_tagCOLORCORRECTPALETTE;
pub const PEMRCOLORCORRECTPALETTE = [*c]struct_tagCOLORCORRECTPALETTE;
pub const struct_tagEMRALPHABLEND = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    cxDest: LONG,
    cyDest: LONG,
    dwRop: DWORD,
    xSrc: LONG,
    ySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    cxSrc: LONG,
    cySrc: LONG,
};
pub const EMRALPHABLEND = struct_tagEMRALPHABLEND;
pub const PEMRALPHABLEND = [*c]struct_tagEMRALPHABLEND;
pub const struct_tagEMRGRADIENTFILL = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    nVer: DWORD,
    nTri: DWORD,
    ulMode: ULONG,
    Ver: [1]TRIVERTEX,
};
pub const EMRGRADIENTFILL = struct_tagEMRGRADIENTFILL;
pub const PEMRGRADIENTFILL = [*c]struct_tagEMRGRADIENTFILL;
pub const struct_tagEMRTRANSPARENTBLT = extern struct {
    emr: EMR,
    rclBounds: RECTL,
    xDest: LONG,
    yDest: LONG,
    cxDest: LONG,
    cyDest: LONG,
    dwRop: DWORD,
    xSrc: LONG,
    ySrc: LONG,
    xformSrc: XFORM,
    crBkColorSrc: COLORREF,
    iUsageSrc: DWORD,
    offBmiSrc: DWORD,
    cbBmiSrc: DWORD,
    offBitsSrc: DWORD,
    cbBitsSrc: DWORD,
    cxSrc: LONG,
    cySrc: LONG,
};
pub const EMRTRANSPARENTBLT = struct_tagEMRTRANSPARENTBLT;
pub const PEMRTRANSPARENTBLT = [*c]struct_tagEMRTRANSPARENTBLT;
extern fn wglCopyContext(arg0: HGLRC, arg1: HGLRC, arg2: UINT) BOOL;
extern fn wglCreateContext(arg0: HDC) HGLRC;
extern fn wglCreateLayerContext(arg0: HDC, arg1: c_int) HGLRC;
extern fn wglDeleteContext(arg0: HGLRC) BOOL;
extern fn wglGetCurrentContext() HGLRC;
extern fn wglGetCurrentDC() HDC;
extern fn wglGetProcAddress(arg0: LPCSTR) PROC;
extern fn wglMakeCurrent(arg0: HDC, arg1: HGLRC) BOOL;
extern fn wglShareLists(arg0: HGLRC, arg1: HGLRC) BOOL;
extern fn wglUseFontBitmapsA(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD) BOOL;
extern fn wglUseFontBitmapsW(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD) BOOL;
extern fn SwapBuffers(arg0: HDC) BOOL;
pub const struct__POINTFLOAT = extern struct {
    x: FLOAT,
    y: FLOAT,
};
pub const POINTFLOAT = struct__POINTFLOAT;
pub const PPOINTFLOAT = [*c]struct__POINTFLOAT;
pub const struct__GLYPHMETRICSFLOAT = extern struct {
    gmfBlackBoxX: FLOAT,
    gmfBlackBoxY: FLOAT,
    gmfptGlyphOrigin: POINTFLOAT,
    gmfCellIncX: FLOAT,
    gmfCellIncY: FLOAT,
};
pub const GLYPHMETRICSFLOAT = struct__GLYPHMETRICSFLOAT;
pub const PGLYPHMETRICSFLOAT = [*c]struct__GLYPHMETRICSFLOAT;
pub const LPGLYPHMETRICSFLOAT = [*c]struct__GLYPHMETRICSFLOAT;
extern fn wglUseFontOutlinesA(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: c_int, arg7: LPGLYPHMETRICSFLOAT) BOOL;
extern fn wglUseFontOutlinesW(arg0: HDC, arg1: DWORD, arg2: DWORD, arg3: DWORD, arg4: FLOAT, arg5: FLOAT, arg6: c_int, arg7: LPGLYPHMETRICSFLOAT) BOOL;
pub const struct_tagLAYERPLANEDESCRIPTOR = extern struct {
    nSize: WORD,
    nVersion: WORD,
    dwFlags: DWORD,
    iPixelType: BYTE,
    cColorBits: BYTE,
    cRedBits: BYTE,
    cRedShift: BYTE,
    cGreenBits: BYTE,
    cGreenShift: BYTE,
    cBlueBits: BYTE,
    cBlueShift: BYTE,
    cAlphaBits: BYTE,
    cAlphaShift: BYTE,
    cAccumBits: BYTE,
    cAccumRedBits: BYTE,
    cAccumGreenBits: BYTE,
    cAccumBlueBits: BYTE,
    cAccumAlphaBits: BYTE,
    cDepthBits: BYTE,
    cStencilBits: BYTE,
    cAuxBuffers: BYTE,
    iLayerPlane: BYTE,
    bReserved: BYTE,
    crTransparent: COLORREF,
};
pub const LAYERPLANEDESCRIPTOR = struct_tagLAYERPLANEDESCRIPTOR;
pub const PLAYERPLANEDESCRIPTOR = [*c]struct_tagLAYERPLANEDESCRIPTOR;
pub const LPLAYERPLANEDESCRIPTOR = [*c]struct_tagLAYERPLANEDESCRIPTOR;
extern fn wglDescribeLayerPlane(arg0: HDC, arg1: c_int, arg2: c_int, arg3: UINT, arg4: LPLAYERPLANEDESCRIPTOR) BOOL;
extern fn wglSetLayerPaletteEntries(arg0: HDC, arg1: c_int, arg2: c_int, arg3: c_int, arg4: [*c]const COLORREF) c_int;
extern fn wglGetLayerPaletteEntries(arg0: HDC, arg1: c_int, arg2: c_int, arg3: c_int, arg4: [*c]COLORREF) c_int;
extern fn wglRealizeLayerPalette(arg0: HDC, arg1: c_int, arg2: BOOL) BOOL;
extern fn wglSwapLayerBuffers(arg0: HDC, arg1: UINT) BOOL;
pub const struct__WGLSWAP = extern struct {
    hdc: HDC,
    uiFlags: UINT,
};
pub const WGLSWAP = struct__WGLSWAP;
pub const PWGLSWAP = [*c]struct__WGLSWAP;
pub const LPWGLSWAP = [*c]struct__WGLSWAP;
extern fn wglSwapMultipleBuffers(arg0: UINT, arg1: [*c]const WGLSWAP) DWORD;
pub const HDWP = HANDLE;
pub const MENUTEMPLATEA = c_void;
pub const MENUTEMPLATEW = c_void;
pub const MENUTEMPLATE = MENUTEMPLATEA;
pub const LPMENUTEMPLATEA = PVOID;
pub const LPMENUTEMPLATEW = PVOID;
pub const LPMENUTEMPLATE = LPMENUTEMPLATEA;
pub const WNDPROC = ?fn (HWND, UINT, WPARAM, LPARAM) callconv(std.os.windows.WINAPI) LRESULT;
pub const DLGPROC = ?fn (HWND, UINT, WPARAM, LPARAM) callconv(std.os.windows.WINAPI) INT_PTR;
pub const TIMERPROC = ?fn (HWND, UINT, UINT_PTR, DWORD) callconv(std.os.windows.WINAPI) void;
pub const GRAYSTRINGPROC = ?fn (HDC, LPARAM, c_int) callconv(std.os.windows.WINAPI) BOOL;
pub const WNDENUMPROC = ?fn (HWND, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
pub const HOOKPROC = ?fn (c_int, WPARAM, LPARAM) callconv(std.os.windows.WINAPI) LRESULT;
pub const SENDASYNCPROC = ?fn (HWND, UINT, ULONG_PTR, LRESULT) callconv(std.os.windows.WINAPI) void;
pub const PROPENUMPROCA = ?fn (HWND, LPCSTR, HANDLE) callconv(std.os.windows.WINAPI) BOOL;
pub const PROPENUMPROCW = ?fn (HWND, LPCWSTR, HANDLE) callconv(std.os.windows.WINAPI) BOOL;
pub const PROPENUMPROCEXA = ?fn (HWND, LPSTR, HANDLE, ULONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const PROPENUMPROCEXW = ?fn (HWND, LPWSTR, HANDLE, ULONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const EDITWORDBREAKPROCA = ?fn (LPSTR, c_int, c_int, c_int) callconv(std.os.windows.WINAPI) c_int;
pub const EDITWORDBREAKPROCW = ?fn (LPWSTR, c_int, c_int, c_int) callconv(std.os.windows.WINAPI) c_int;
pub const DRAWSTATEPROC = ?fn (HDC, LPARAM, WPARAM, c_int, c_int) callconv(std.os.windows.WINAPI) BOOL;
pub const PROPENUMPROC = PROPENUMPROCA;
pub const PROPENUMPROCEX = PROPENUMPROCEXA;
pub const EDITWORDBREAKPROC = EDITWORDBREAKPROCA;
pub const NAMEENUMPROCA = ?fn (LPSTR, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
pub const NAMEENUMPROCW = ?fn (LPWSTR, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
pub const WINSTAENUMPROCA = NAMEENUMPROCA;
pub const DESKTOPENUMPROCA = NAMEENUMPROCA;
pub const WINSTAENUMPROCW = NAMEENUMPROCW;
pub const DESKTOPENUMPROCW = NAMEENUMPROCW;
pub const WINSTAENUMPROC = WINSTAENUMPROCA;
pub const DESKTOPENUMPROC = DESKTOPENUMPROCA;
extern fn wvsprintfA(arg0: LPSTR, arg1: LPCSTR, arglist: va_list) c_int;
extern fn wvsprintfW(arg0: LPWSTR, arg1: LPCWSTR, arglist: va_list) c_int;
extern fn wsprintfA(arg0: LPSTR, arg1: LPCSTR, ...) c_int;
extern fn wsprintfW(arg0: LPWSTR, arg1: LPCWSTR, ...) c_int;
pub const struct_tagCREATESTRUCTA = extern struct {
    lpCreateParams: LPVOID,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: c_int,
    cx: c_int,
    y: c_int,
    x: c_int,
    style: LONG,
    lpszName: LPCSTR,
    lpszClass: LPCSTR,
    dwExStyle: DWORD,
};
pub const struct_tagCBT_CREATEWNDA = extern struct {
    lpcs: [*c]struct_tagCREATESTRUCTA,
    hwndInsertAfter: HWND,
};
pub const CBT_CREATEWNDA = struct_tagCBT_CREATEWNDA;
pub const LPCBT_CREATEWNDA = [*c]struct_tagCBT_CREATEWNDA;
pub const struct_tagCREATESTRUCTW = extern struct {
    lpCreateParams: LPVOID,
    hInstance: HINSTANCE,
    hMenu: HMENU,
    hwndParent: HWND,
    cy: c_int,
    cx: c_int,
    y: c_int,
    x: c_int,
    style: LONG,
    lpszName: LPCWSTR,
    lpszClass: LPCWSTR,
    dwExStyle: DWORD,
};
pub const struct_tagCBT_CREATEWNDW = extern struct {
    lpcs: [*c]struct_tagCREATESTRUCTW,
    hwndInsertAfter: HWND,
};
pub const CBT_CREATEWNDW = struct_tagCBT_CREATEWNDW;
pub const LPCBT_CREATEWNDW = [*c]struct_tagCBT_CREATEWNDW;
pub const CBT_CREATEWND = CBT_CREATEWNDA;
pub const LPCBT_CREATEWND = LPCBT_CREATEWNDA;
pub const struct_tagCBTACTIVATESTRUCT = extern struct {
    fMouse: BOOL,
    hWndActive: HWND,
};
pub const CBTACTIVATESTRUCT = struct_tagCBTACTIVATESTRUCT;
pub const LPCBTACTIVATESTRUCT = [*c]struct_tagCBTACTIVATESTRUCT;
pub const struct_tagWTSSESSION_NOTIFICATION = extern struct {
    cbSize: DWORD,
    dwSessionId: DWORD,
};
pub const WTSSESSION_NOTIFICATION = struct_tagWTSSESSION_NOTIFICATION;
pub const PWTSSESSION_NOTIFICATION = [*c]struct_tagWTSSESSION_NOTIFICATION;
pub const SHELLHOOKINFO = extern struct {
    hwnd: HWND,
    rc: RECT,
};
pub const LPSHELLHOOKINFO = [*c]extern struct {
    hwnd: HWND,
    rc: RECT,
};
pub const struct_tagEVENTMSG = extern struct {
    message: UINT,
    paramL: UINT,
    paramH: UINT,
    time: DWORD,
    hwnd: HWND,
};
pub const EVENTMSG = struct_tagEVENTMSG;
pub const PEVENTMSGMSG = [*c]struct_tagEVENTMSG;
pub const NPEVENTMSGMSG = [*c]struct_tagEVENTMSG;
pub const LPEVENTMSGMSG = [*c]struct_tagEVENTMSG;
pub const PEVENTMSG = [*c]struct_tagEVENTMSG;
pub const NPEVENTMSG = [*c]struct_tagEVENTMSG;
pub const LPEVENTMSG = [*c]struct_tagEVENTMSG;
pub const struct_tagCWPSTRUCT = extern struct {
    lParam: LPARAM,
    wParam: WPARAM,
    message: UINT,
    hwnd: HWND,
};
pub const CWPSTRUCT = struct_tagCWPSTRUCT;
pub const PCWPSTRUCT = [*c]struct_tagCWPSTRUCT;
pub const NPCWPSTRUCT = [*c]struct_tagCWPSTRUCT;
pub const LPCWPSTRUCT = [*c]struct_tagCWPSTRUCT;
pub const struct_tagCWPRETSTRUCT = extern struct {
    lResult: LRESULT,
    lParam: LPARAM,
    wParam: WPARAM,
    message: UINT,
    hwnd: HWND,
};
pub const CWPRETSTRUCT = struct_tagCWPRETSTRUCT;
pub const PCWPRETSTRUCT = [*c]struct_tagCWPRETSTRUCT;
pub const NPCWPRETSTRUCT = [*c]struct_tagCWPRETSTRUCT;
pub const LPCWPRETSTRUCT = [*c]struct_tagCWPRETSTRUCT;
pub const struct_tagKBDLLHOOKSTRUCT = extern struct {
    vkCode: DWORD,
    scanCode: DWORD,
    flags: DWORD,
    time: DWORD,
    dwExtraInfo: ULONG_PTR,
};
pub const KBDLLHOOKSTRUCT = struct_tagKBDLLHOOKSTRUCT;
pub const LPKBDLLHOOKSTRUCT = [*c]struct_tagKBDLLHOOKSTRUCT;
pub const PKBDLLHOOKSTRUCT = [*c]struct_tagKBDLLHOOKSTRUCT;
pub const struct_tagMSLLHOOKSTRUCT = extern struct {
    pt: POINT,
    mouseData: DWORD,
    flags: DWORD,
    time: DWORD,
    dwExtraInfo: ULONG_PTR,
};
pub const MSLLHOOKSTRUCT = struct_tagMSLLHOOKSTRUCT;
pub const LPMSLLHOOKSTRUCT = [*c]struct_tagMSLLHOOKSTRUCT;
pub const PMSLLHOOKSTRUCT = [*c]struct_tagMSLLHOOKSTRUCT;
pub const struct_tagDEBUGHOOKINFO = extern struct {
    idThread: DWORD,
    idThreadInstaller: DWORD,
    lParam: LPARAM,
    wParam: WPARAM,
    code: c_int,
};
pub const DEBUGHOOKINFO = struct_tagDEBUGHOOKINFO;
pub const PDEBUGHOOKINFO = [*c]struct_tagDEBUGHOOKINFO;
pub const NPDEBUGHOOKINFO = [*c]struct_tagDEBUGHOOKINFO;
pub const LPDEBUGHOOKINFO = [*c]struct_tagDEBUGHOOKINFO;
pub const struct_tagMOUSEHOOKSTRUCT = extern struct {
    pt: POINT,
    hwnd: HWND,
    wHitTestCode: UINT,
    dwExtraInfo: ULONG_PTR,
};
pub const MOUSEHOOKSTRUCT = struct_tagMOUSEHOOKSTRUCT;
pub const LPMOUSEHOOKSTRUCT = [*c]struct_tagMOUSEHOOKSTRUCT;
pub const PMOUSEHOOKSTRUCT = [*c]struct_tagMOUSEHOOKSTRUCT;
pub const struct_tagMOUSEHOOKSTRUCTEX = extern struct {
    @"": struct_tagMOUSEHOOKSTRUCT,
    mouseData: DWORD,
};
pub const MOUSEHOOKSTRUCTEX = struct_tagMOUSEHOOKSTRUCTEX;
pub const LPMOUSEHOOKSTRUCTEX = [*c]struct_tagMOUSEHOOKSTRUCTEX;
pub const PMOUSEHOOKSTRUCTEX = [*c]struct_tagMOUSEHOOKSTRUCTEX;
pub const struct_tagHARDWAREHOOKSTRUCT = extern struct {
    hwnd: HWND,
    message: UINT,
    wParam: WPARAM,
    lParam: LPARAM,
};
pub const HARDWAREHOOKSTRUCT = struct_tagHARDWAREHOOKSTRUCT;
pub const LPHARDWAREHOOKSTRUCT = [*c]struct_tagHARDWAREHOOKSTRUCT;
pub const PHARDWAREHOOKSTRUCT = [*c]struct_tagHARDWAREHOOKSTRUCT;
extern fn LoadKeyboardLayoutA(pwszKLID: LPCSTR, Flags: UINT) HKL;
extern fn LoadKeyboardLayoutW(pwszKLID: LPCWSTR, Flags: UINT) HKL;
extern fn ActivateKeyboardLayout(hkl: HKL, Flags: UINT) HKL;
extern fn ToUnicodeEx(wVirtKey: UINT, wScanCode: UINT, lpKeyState: [*c]const BYTE, pwszBuff: LPWSTR, cchBuff: c_int, wFlags: UINT, dwhkl: HKL) c_int;
extern fn UnloadKeyboardLayout(hkl: HKL) BOOL;
extern fn GetKeyboardLayoutNameA(pwszKLID: LPSTR) BOOL;
extern fn GetKeyboardLayoutNameW(pwszKLID: LPWSTR) BOOL;
extern fn GetKeyboardLayoutList(nBuff: c_int, lpList: [*c]HKL) c_int;
extern fn GetKeyboardLayout(idThread: DWORD) HKL;
pub const struct_tagMOUSEMOVEPOINT = extern struct {
    x: c_int,
    y: c_int,
    time: DWORD,
    dwExtraInfo: ULONG_PTR,
};
pub const MOUSEMOVEPOINT = struct_tagMOUSEMOVEPOINT;
pub const PMOUSEMOVEPOINT = [*c]struct_tagMOUSEMOVEPOINT;
pub const LPMOUSEMOVEPOINT = [*c]struct_tagMOUSEMOVEPOINT;
extern fn GetMouseMovePointsEx(cbSize: UINT, lppt: LPMOUSEMOVEPOINT, lpptBuf: LPMOUSEMOVEPOINT, nBufPoints: c_int, resolution: DWORD) c_int;
extern fn CreateDesktopA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: [*c]DEVMODEA, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HDESK;
extern fn CreateDesktopW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: [*c]DEVMODEW, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HDESK;
extern fn CreateDesktopExA(lpszDesktop: LPCSTR, lpszDevice: LPCSTR, pDevmode: [*c]DEVMODEA, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID) HDESK;
extern fn CreateDesktopExW(lpszDesktop: LPCWSTR, lpszDevice: LPCWSTR, pDevmode: [*c]DEVMODEW, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES, ulHeapSize: ULONG, pvoid: PVOID) HDESK;
extern fn OpenDesktopA(lpszDesktop: LPCSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
extern fn OpenDesktopW(lpszDesktop: LPCWSTR, dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
extern fn OpenInputDesktop(dwFlags: DWORD, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HDESK;
extern fn EnumDesktopsA(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCA, lParam: LPARAM) BOOL;
extern fn EnumDesktopsW(hwinsta: HWINSTA, lpEnumFunc: DESKTOPENUMPROCW, lParam: LPARAM) BOOL;
extern fn EnumDesktopWindows(hDesktop: HDESK, lpfn: WNDENUMPROC, lParam: LPARAM) BOOL;
extern fn SwitchDesktop(hDesktop: HDESK) BOOL;
extern fn SetThreadDesktop(hDesktop: HDESK) BOOL;
extern fn CloseDesktop(hDesktop: HDESK) BOOL;
extern fn GetThreadDesktop(dwThreadId: DWORD) HDESK;
extern fn CreateWindowStationA(lpwinsta: LPCSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HWINSTA;
extern fn CreateWindowStationW(lpwinsta: LPCWSTR, dwFlags: DWORD, dwDesiredAccess: ACCESS_MASK, lpsa: LPSECURITY_ATTRIBUTES) HWINSTA;
extern fn OpenWindowStationA(lpszWinSta: LPCSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HWINSTA;
extern fn OpenWindowStationW(lpszWinSta: LPCWSTR, fInherit: BOOL, dwDesiredAccess: ACCESS_MASK) HWINSTA;
extern fn EnumWindowStationsA(lpEnumFunc: WINSTAENUMPROCA, lParam: LPARAM) BOOL;
extern fn EnumWindowStationsW(lpEnumFunc: WINSTAENUMPROCW, lParam: LPARAM) BOOL;
extern fn CloseWindowStation(hWinSta: HWINSTA) BOOL;
extern fn SetProcessWindowStation(hWinSta: HWINSTA) BOOL;
extern fn GetProcessWindowStation() HWINSTA;
extern fn SetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR) BOOL;
extern fn GetUserObjectSecurity(hObj: HANDLE, pSIRequested: PSECURITY_INFORMATION, pSID: PSECURITY_DESCRIPTOR, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
pub const struct_tagUSEROBJECTFLAGS = extern struct {
    fInherit: BOOL,
    fReserved: BOOL,
    dwFlags: DWORD,
};
pub const USEROBJECTFLAGS = struct_tagUSEROBJECTFLAGS;
pub const PUSEROBJECTFLAGS = [*c]struct_tagUSEROBJECTFLAGS;
extern fn GetUserObjectInformationA(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
extern fn GetUserObjectInformationW(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD, lpnLengthNeeded: LPDWORD) BOOL;
extern fn SetUserObjectInformationA(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD) BOOL;
extern fn SetUserObjectInformationW(hObj: HANDLE, nIndex: c_int, pvInfo: PVOID, nLength: DWORD) BOOL;
pub const struct_tagWNDCLASSEXA = extern struct {
    cbSize: UINT,
    style: UINT,
    lpfnWndProc: WNDPROC,
    cbClsExtra: c_int,
    cbWndExtra: c_int,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: LPCSTR,
    lpszClassName: LPCSTR,
    hIconSm: HICON,
};
pub const WNDCLASSEXA = struct_tagWNDCLASSEXA;
pub const PWNDCLASSEXA = [*c]struct_tagWNDCLASSEXA;
pub const NPWNDCLASSEXA = [*c]struct_tagWNDCLASSEXA;
pub const LPWNDCLASSEXA = [*c]struct_tagWNDCLASSEXA;
pub const struct_tagWNDCLASSEXW = extern struct {
    cbSize: UINT,
    style: UINT,
    lpfnWndProc: WNDPROC,
    cbClsExtra: c_int,
    cbWndExtra: c_int,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: LPCWSTR,
    lpszClassName: LPCWSTR,
    hIconSm: HICON,
};
pub const WNDCLASSEXW = struct_tagWNDCLASSEXW;
pub const PWNDCLASSEXW = [*c]struct_tagWNDCLASSEXW;
pub const NPWNDCLASSEXW = [*c]struct_tagWNDCLASSEXW;
pub const LPWNDCLASSEXW = [*c]struct_tagWNDCLASSEXW;
pub const WNDCLASSEX = WNDCLASSEXA;
pub const PWNDCLASSEX = PWNDCLASSEXA;
pub const NPWNDCLASSEX = NPWNDCLASSEXA;
pub const LPWNDCLASSEX = LPWNDCLASSEXA;
pub const struct_tagWNDCLASSA = extern struct {
    style: UINT,
    lpfnWndProc: WNDPROC,
    cbClsExtra: c_int,
    cbWndExtra: c_int,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: LPCSTR,
    lpszClassName: LPCSTR,
};
pub const WNDCLASSA = struct_tagWNDCLASSA;
pub const PWNDCLASSA = [*c]struct_tagWNDCLASSA;
pub const NPWNDCLASSA = [*c]struct_tagWNDCLASSA;
pub const LPWNDCLASSA = [*c]struct_tagWNDCLASSA;
pub const struct_tagWNDCLASSW = extern struct {
    style: UINT,
    lpfnWndProc: WNDPROC,
    cbClsExtra: c_int,
    cbWndExtra: c_int,
    hInstance: HINSTANCE,
    hIcon: HICON,
    hCursor: HCURSOR,
    hbrBackground: HBRUSH,
    lpszMenuName: LPCWSTR,
    lpszClassName: LPCWSTR,
};
pub const WNDCLASSW = struct_tagWNDCLASSW;
pub const PWNDCLASSW = [*c]struct_tagWNDCLASSW;
pub const NPWNDCLASSW = [*c]struct_tagWNDCLASSW;
pub const LPWNDCLASSW = [*c]struct_tagWNDCLASSW;
pub const WNDCLASS = WNDCLASSA;
pub const PWNDCLASS = PWNDCLASSA;
pub const NPWNDCLASS = NPWNDCLASSA;
pub const LPWNDCLASS = LPWNDCLASSA;
extern fn IsHungAppWindow(hwnd: HWND) BOOL;
extern fn DisableProcessWindowsGhosting() void;
pub const struct_tagMSG = extern struct {
    hwnd: HWND,
    message: UINT,
    wParam: WPARAM,
    lParam: LPARAM,
    time: DWORD,
    pt: POINT,
};
pub const MSG = struct_tagMSG;
pub const PMSG = [*c]struct_tagMSG;
pub const NPMSG = [*c]struct_tagMSG;
pub const LPMSG = [*c]struct_tagMSG;
pub const struct_tagMINMAXINFO = extern struct {
    ptReserved: POINT,
    ptMaxSize: POINT,
    ptMaxPosition: POINT,
    ptMinTrackSize: POINT,
    ptMaxTrackSize: POINT,
};
pub const MINMAXINFO = struct_tagMINMAXINFO;
pub const PMINMAXINFO = [*c]struct_tagMINMAXINFO;
pub const LPMINMAXINFO = [*c]struct_tagMINMAXINFO;
pub const struct_tagCOPYDATASTRUCT = extern struct {
    dwData: ULONG_PTR,
    cbData: DWORD,
    lpData: PVOID,
};
pub const COPYDATASTRUCT = struct_tagCOPYDATASTRUCT;
pub const PCOPYDATASTRUCT = [*c]struct_tagCOPYDATASTRUCT;
pub const struct_tagMDINEXTMENU = extern struct {
    hmenuIn: HMENU,
    hmenuNext: HMENU,
    hwndNext: HWND,
};
pub const MDINEXTMENU = struct_tagMDINEXTMENU;
pub const PMDINEXTMENU = [*c]struct_tagMDINEXTMENU;
pub const LPMDINEXTMENU = [*c]struct_tagMDINEXTMENU;
pub const POWERBROADCAST_SETTING = extern struct {
    PowerSetting: GUID,
    DataLength: DWORD,
    Data: [1]UCHAR,
};
pub const PPOWERBROADCAST_SETTING = [*c]extern struct {
    PowerSetting: GUID,
    DataLength: DWORD,
    Data: [1]UCHAR,
};
extern fn RegisterWindowMessageA(lpString: LPCSTR) UINT;
extern fn RegisterWindowMessageW(lpString: LPCWSTR) UINT;
pub const struct_tagWINDOWPOS = extern struct {
    hwnd: HWND,
    hwndInsertAfter: HWND,
    x: c_int,
    y: c_int,
    cx: c_int,
    cy: c_int,
    flags: UINT,
};
pub const WINDOWPOS = struct_tagWINDOWPOS;
pub const LPWINDOWPOS = [*c]struct_tagWINDOWPOS;
pub const PWINDOWPOS = [*c]struct_tagWINDOWPOS;
pub const struct_tagNCCALCSIZE_PARAMS = extern struct {
    rgrc: [3]RECT,
    lppos: PWINDOWPOS,
};
pub const NCCALCSIZE_PARAMS = struct_tagNCCALCSIZE_PARAMS;
pub const LPNCCALCSIZE_PARAMS = [*c]struct_tagNCCALCSIZE_PARAMS;
pub const struct_tagTRACKMOUSEEVENT = extern struct {
    cbSize: DWORD,
    dwFlags: DWORD,
    hwndTrack: HWND,
    dwHoverTime: DWORD,
};
pub const TRACKMOUSEEVENT = struct_tagTRACKMOUSEEVENT;
pub const LPTRACKMOUSEEVENT = [*c]struct_tagTRACKMOUSEEVENT;
extern fn TrackMouseEvent(lpEventTrack: LPTRACKMOUSEEVENT) BOOL;
extern fn DrawEdge(hdc: HDC, qrc: LPRECT, edge: UINT, grfFlags: UINT) BOOL;
extern fn DrawFrameControl(arg0: HDC, arg1: LPRECT, arg2: UINT, arg3: UINT) BOOL;
extern fn DrawCaption(hwnd: HWND, hdc: HDC, lprect: [*c]const RECT, flags: UINT) BOOL;
extern fn DrawAnimatedRects(hwnd: HWND, idAni: c_int, lprcFrom: [*c]const RECT, lprcTo: [*c]const RECT) BOOL;
pub const struct_tagACCEL = extern struct {
    fVirt: BYTE,
    key: WORD,
    cmd: WORD,
};
pub const ACCEL = struct_tagACCEL;
pub const LPACCEL = [*c]struct_tagACCEL;
pub const struct_tagPAINTSTRUCT = extern struct {
    hdc: HDC,
    fErase: BOOL,
    rcPaint: RECT,
    fRestore: BOOL,
    fIncUpdate: BOOL,
    rgbReserved: [32]BYTE,
};
pub const PAINTSTRUCT = struct_tagPAINTSTRUCT;
pub const PPAINTSTRUCT = [*c]struct_tagPAINTSTRUCT;
pub const NPPAINTSTRUCT = [*c]struct_tagPAINTSTRUCT;
pub const LPPAINTSTRUCT = [*c]struct_tagPAINTSTRUCT;
pub const CREATESTRUCTA = struct_tagCREATESTRUCTA;
pub const LPCREATESTRUCTA = [*c]struct_tagCREATESTRUCTA;
pub const CREATESTRUCTW = struct_tagCREATESTRUCTW;
pub const LPCREATESTRUCTW = [*c]struct_tagCREATESTRUCTW;
pub const CREATESTRUCT = CREATESTRUCTA;
pub const LPCREATESTRUCT = LPCREATESTRUCTA;
pub const struct_tagWINDOWPLACEMENT = extern struct {
    length: UINT,
    flags: UINT,
    showCmd: UINT,
    ptMinPosition: POINT,
    ptMaxPosition: POINT,
    rcNormalPosition: RECT,
};
pub const WINDOWPLACEMENT = struct_tagWINDOWPLACEMENT;
pub const PWINDOWPLACEMENT = [*c]WINDOWPLACEMENT;
pub const LPWINDOWPLACEMENT = [*c]WINDOWPLACEMENT;
pub const struct_tagNMHDR = extern struct {
    hwndFrom: HWND,
    idFrom: UINT_PTR,
    code: UINT,
};
pub const NMHDR = struct_tagNMHDR;
pub const LPNMHDR = [*c]NMHDR;
pub const struct_tagSTYLESTRUCT = extern struct {
    styleOld: DWORD,
    styleNew: DWORD,
};
pub const STYLESTRUCT = struct_tagSTYLESTRUCT;
pub const LPSTYLESTRUCT = [*c]struct_tagSTYLESTRUCT;
pub const struct_tagMEASUREITEMSTRUCT = extern struct {
    CtlType: UINT,
    CtlID: UINT,
    itemID: UINT,
    itemWidth: UINT,
    itemHeight: UINT,
    itemData: ULONG_PTR,
};
pub const MEASUREITEMSTRUCT = struct_tagMEASUREITEMSTRUCT;
pub const PMEASUREITEMSTRUCT = [*c]struct_tagMEASUREITEMSTRUCT;
pub const LPMEASUREITEMSTRUCT = [*c]struct_tagMEASUREITEMSTRUCT;
pub const struct_tagDRAWITEMSTRUCT = extern struct {
    CtlType: UINT,
    CtlID: UINT,
    itemID: UINT,
    itemAction: UINT,
    itemState: UINT,
    hwndItem: HWND,
    hDC: HDC,
    rcItem: RECT,
    itemData: ULONG_PTR,
};
pub const DRAWITEMSTRUCT = struct_tagDRAWITEMSTRUCT;
pub const PDRAWITEMSTRUCT = [*c]struct_tagDRAWITEMSTRUCT;
pub const LPDRAWITEMSTRUCT = [*c]struct_tagDRAWITEMSTRUCT;
pub const struct_tagDELETEITEMSTRUCT = extern struct {
    CtlType: UINT,
    CtlID: UINT,
    itemID: UINT,
    hwndItem: HWND,
    itemData: ULONG_PTR,
};
pub const DELETEITEMSTRUCT = struct_tagDELETEITEMSTRUCT;
pub const PDELETEITEMSTRUCT = [*c]struct_tagDELETEITEMSTRUCT;
pub const LPDELETEITEMSTRUCT = [*c]struct_tagDELETEITEMSTRUCT;
pub const struct_tagCOMPAREITEMSTRUCT = extern struct {
    CtlType: UINT,
    CtlID: UINT,
    hwndItem: HWND,
    itemID1: UINT,
    itemData1: ULONG_PTR,
    itemID2: UINT,
    itemData2: ULONG_PTR,
    dwLocaleId: DWORD,
};
pub const COMPAREITEMSTRUCT = struct_tagCOMPAREITEMSTRUCT;
pub const PCOMPAREITEMSTRUCT = [*c]struct_tagCOMPAREITEMSTRUCT;
pub const LPCOMPAREITEMSTRUCT = [*c]struct_tagCOMPAREITEMSTRUCT;
extern fn GetMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) BOOL;
extern fn GetMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT) BOOL;
extern fn TranslateMessage(lpMsg: [*c]const MSG) BOOL;
extern fn DispatchMessageA(lpMsg: [*c]const MSG) LRESULT;
extern fn DispatchMessageW(lpMsg: [*c]const MSG) LRESULT;
extern fn SetMessageQueue(cMessagesMax: c_int) BOOL;
extern fn PeekMessageA(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT) BOOL;
extern fn PeekMessageW(lpMsg: LPMSG, hWnd: HWND, wMsgFilterMin: UINT, wMsgFilterMax: UINT, wRemoveMsg: UINT) BOOL;
extern fn RegisterHotKey(hWnd: HWND, id: c_int, fsModifiers: UINT, vk: UINT) BOOL;
extern fn UnregisterHotKey(hWnd: HWND, id: c_int) BOOL;
extern fn ExitWindowsEx(uFlags: UINT, dwReason: DWORD) BOOL;
extern fn SwapMouseButton(fSwap: BOOL) BOOL;
extern fn GetMessagePos() DWORD;
extern fn GetMessageTime() LONG;
extern fn GetMessageExtraInfo() LPARAM;
extern fn GetUnpredictedMessagePos() DWORD;
extern fn IsWow64Message() BOOL;
extern fn SetMessageExtraInfo(lParam: LPARAM) LPARAM;
extern fn SendMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn SendMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn SendMessageTimeoutA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR) LRESULT;
extern fn SendMessageTimeoutW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, fuFlags: UINT, uTimeout: UINT, lpdwResult: PDWORD_PTR) LRESULT;
extern fn SendNotifyMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn SendNotifyMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn SendMessageCallbackA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR) BOOL;
extern fn SendMessageCallbackW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM, lpResultCallBack: SENDASYNCPROC, dwData: ULONG_PTR) BOOL;
pub const BSMINFO = extern struct {
    cbSize: UINT,
    hdesk: HDESK,
    hwnd: HWND,
    luid: LUID,
};
pub const PBSMINFO = [*c]extern struct {
    cbSize: UINT,
    hdesk: HDESK,
    hwnd: HWND,
    luid: LUID,
};
extern fn BroadcastSystemMessageExA(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO) c_long;
extern fn BroadcastSystemMessageExW(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM, pbsmInfo: PBSMINFO) c_long;
extern fn BroadcastSystemMessageA(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) c_long;
extern fn BroadcastSystemMessageW(flags: DWORD, lpInfo: LPDWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) c_long;
pub const HDEVNOTIFY = PVOID;
pub const PHDEVNOTIFY = [*c]HDEVNOTIFY;
extern fn RegisterDeviceNotificationA(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD) HDEVNOTIFY;
extern fn RegisterDeviceNotificationW(hRecipient: HANDLE, NotificationFilter: LPVOID, Flags: DWORD) HDEVNOTIFY;
extern fn UnregisterDeviceNotification(Handle: HDEVNOTIFY) BOOL;
pub const HPOWERNOTIFY = PVOID;
pub const PHPOWERNOTIFY = [*c]HPOWERNOTIFY;
extern fn RegisterPowerSettingNotification(hRecipient: HANDLE, PowerSettingGuid: LPCGUID, Flags: DWORD) HPOWERNOTIFY;
extern fn UnregisterPowerSettingNotification(Handle: HPOWERNOTIFY) BOOL;
extern fn RegisterSuspendResumeNotification(hRecipient: HANDLE, Flags: DWORD) HPOWERNOTIFY;
extern fn UnregisterSuspendResumeNotification(Handle: HPOWERNOTIFY) BOOL;
extern fn PostMessageA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn PostMessageW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn PostThreadMessageA(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn PostThreadMessageW(idThread: DWORD, Msg: UINT, wParam: WPARAM, lParam: LPARAM) BOOL;
extern fn AttachThreadInput(idAttach: DWORD, idAttachTo: DWORD, fAttach: BOOL) BOOL;
extern fn ReplyMessage(lResult: LRESULT) BOOL;
extern fn WaitMessage() BOOL;
extern fn WaitForInputIdle(hProcess: HANDLE, dwMilliseconds: DWORD) DWORD;
extern fn DefWindowProcA(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn DefWindowProcW(hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn PostQuitMessage(nExitCode: c_int) void;
extern fn CallWindowProcA(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn CallWindowProcW(lpPrevWndFunc: WNDPROC, hWnd: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn InSendMessage() BOOL;
extern fn InSendMessageEx(lpReserved: LPVOID) DWORD;
extern fn GetDoubleClickTime() UINT;
extern fn SetDoubleClickTime(arg0: UINT) BOOL;
extern fn RegisterClassA(lpWndClass: [*c]const WNDCLASSA) ATOM;
extern fn RegisterClassW(lpWndClass: [*c]const WNDCLASSW) ATOM;
extern fn UnregisterClassA(lpClassName: LPCSTR, hInstance: HINSTANCE) BOOL;
extern fn UnregisterClassW(lpClassName: LPCWSTR, hInstance: HINSTANCE) BOOL;
extern fn GetClassInfoA(hInstance: HINSTANCE, lpClassName: LPCSTR, lpWndClass: LPWNDCLASSA) BOOL;
extern fn GetClassInfoW(hInstance: HINSTANCE, lpClassName: LPCWSTR, lpWndClass: LPWNDCLASSW) BOOL;
extern fn RegisterClassExA(arg0: [*c]const WNDCLASSEXA) ATOM;
extern fn RegisterClassExW(arg0: [*c]const WNDCLASSEXW) ATOM;
extern fn GetClassInfoExA(hInstance: HINSTANCE, lpszClass: LPCSTR, lpwcx: LPWNDCLASSEXA) BOOL;
extern fn GetClassInfoExW(hInstance: HINSTANCE, lpszClass: LPCWSTR, lpwcx: LPWNDCLASSEXW) BOOL;
pub const PREGISTERCLASSNAMEW = ?fn (LPCWSTR) callconv(std.os.windows.WINAPI) BOOLEAN;
extern fn CreateWindowExA(dwExStyle: DWORD, lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID) HWND;
extern fn CreateWindowExW(dwExStyle: DWORD, lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hMenu: HMENU, hInstance: HINSTANCE, lpParam: LPVOID) HWND;
extern fn IsWindow(hWnd: HWND) BOOL;
extern fn IsMenu(hMenu: HMENU) BOOL;
extern fn IsChild(hWndParent: HWND, hWnd: HWND) BOOL;
extern fn DestroyWindow(hWnd: HWND) BOOL;
extern fn ShowWindow(hWnd: HWND, nCmdShow: c_int) BOOL;
extern fn AnimateWindow(hWnd: HWND, dwTime: DWORD, dwFlags: DWORD) BOOL;
extern fn UpdateLayeredWindow(hWnd: HWND, hdcDst: HDC, pptDst: [*c]POINT, psize: [*c]SIZE, hdcSrc: HDC, pptSrc: [*c]POINT, crKey: COLORREF, pblend: [*c]BLENDFUNCTION, dwFlags: DWORD) BOOL;
pub const struct_tagUPDATELAYEREDWINDOWINFO = extern struct {
    cbSize: DWORD,
    hdcDst: HDC,
    pptDst: [*c]const POINT,
    psize: [*c]const SIZE,
    hdcSrc: HDC,
    pptSrc: [*c]const POINT,
    crKey: COLORREF,
    pblend: [*c]const BLENDFUNCTION,
    dwFlags: DWORD,
    prcDirty: [*c]const RECT,
};
pub const UPDATELAYEREDWINDOWINFO = struct_tagUPDATELAYEREDWINDOWINFO;
pub const PUPDATELAYEREDWINDOWINFO = [*c]struct_tagUPDATELAYEREDWINDOWINFO;
extern fn UpdateLayeredWindowIndirect(hWnd: HWND, pULWInfo: [*c]const UPDATELAYEREDWINDOWINFO) BOOL;
extern fn GetLayeredWindowAttributes(hwnd: HWND, pcrKey: [*c]COLORREF, pbAlpha: [*c]BYTE, pdwFlags: [*c]DWORD) BOOL;
extern fn PrintWindow(hwnd: HWND, hdcBlt: HDC, nFlags: UINT) BOOL;
extern fn SetLayeredWindowAttributes(hwnd: HWND, crKey: COLORREF, bAlpha: BYTE, dwFlags: DWORD) BOOL;
extern fn ShowWindowAsync(hWnd: HWND, nCmdShow: c_int) BOOL;
extern fn FlashWindow(hWnd: HWND, bInvert: BOOL) BOOL;
pub const FLASHWINFO = extern struct {
    cbSize: UINT,
    hwnd: HWND,
    dwFlags: DWORD,
    uCount: UINT,
    dwTimeout: DWORD,
};
pub const PFLASHWINFO = [*c]extern struct {
    cbSize: UINT,
    hwnd: HWND,
    dwFlags: DWORD,
    uCount: UINT,
    dwTimeout: DWORD,
};
extern fn FlashWindowEx(pfwi: PFLASHWINFO) BOOL;
extern fn ShowOwnedPopups(hWnd: HWND, fShow: BOOL) BOOL;
extern fn OpenIcon(hWnd: HWND) BOOL;
extern fn CloseWindow(hWnd: HWND) BOOL;
extern fn MoveWindow(hWnd: HWND, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, bRepaint: BOOL) BOOL;
extern fn SetWindowPos(hWnd: HWND, hWndInsertAfter: HWND, X: c_int, Y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
extern fn GetWindowPlacement(hWnd: HWND, lpwndpl: [*c]WINDOWPLACEMENT) BOOL;
extern fn SetWindowPlacement(hWnd: HWND, lpwndpl: [*c]const WINDOWPLACEMENT) BOOL;
extern fn GetWindowDisplayAffinity(hWnd: HWND, pdwAffinity: [*c]DWORD) BOOL;
extern fn SetWindowDisplayAffinity(hWnd: HWND, dwAffinity: DWORD) BOOL;
extern fn BeginDeferWindowPos(nNumWindows: c_int) HDWP;
extern fn DeferWindowPos(hWinPosInfo: HDWP, hWnd: HWND, hWndInsertAfter: HWND, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) HDWP;
extern fn EndDeferWindowPos(hWinPosInfo: HDWP) BOOL;
extern fn IsWindowVisible(hWnd: HWND) BOOL;
extern fn IsIconic(hWnd: HWND) BOOL;
extern fn AnyPopup() BOOL;
extern fn BringWindowToTop(hWnd: HWND) BOOL;
extern fn IsZoomed(hWnd: HWND) BOOL;
pub const DLGTEMPLATE = extern struct {
    style: DWORD,
    dwExtendedStyle: DWORD,
    cdit: WORD,
    x: c_short,
    y: c_short,
    cx: c_short,
    cy: c_short,
};
pub const LPDLGTEMPLATEA = [*c]DLGTEMPLATE;
pub const LPDLGTEMPLATEW = [*c]DLGTEMPLATE;
pub const LPDLGTEMPLATE = LPDLGTEMPLATEA;
pub const LPCDLGTEMPLATEA = [*c]const DLGTEMPLATE;
pub const LPCDLGTEMPLATEW = [*c]const DLGTEMPLATE;
pub const LPCDLGTEMPLATE = LPCDLGTEMPLATEA;
pub const DLGITEMTEMPLATE = extern struct {
    style: DWORD,
    dwExtendedStyle: DWORD,
    x: c_short,
    y: c_short,
    cx: c_short,
    cy: c_short,
    id: WORD,
};
pub const PDLGITEMTEMPLATEA = [*c]DLGITEMTEMPLATE;
pub const PDLGITEMTEMPLATEW = [*c]DLGITEMTEMPLATE;
pub const PDLGITEMTEMPLATE = PDLGITEMTEMPLATEA;
pub const LPDLGITEMTEMPLATEA = [*c]DLGITEMTEMPLATE;
pub const LPDLGITEMTEMPLATEW = [*c]DLGITEMTEMPLATE;
pub const LPDLGITEMTEMPLATE = LPDLGITEMTEMPLATEA;
extern fn CreateDialogParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
extern fn CreateDialogParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
extern fn CreateDialogIndirectParamA(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
extern fn CreateDialogIndirectParamW(hInstance: HINSTANCE, lpTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) HWND;
extern fn DialogBoxParamA(hInstance: HINSTANCE, lpTemplateName: LPCSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
extern fn DialogBoxParamW(hInstance: HINSTANCE, lpTemplateName: LPCWSTR, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
extern fn DialogBoxIndirectParamA(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEA, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
extern fn DialogBoxIndirectParamW(hInstance: HINSTANCE, hDialogTemplate: LPCDLGTEMPLATEW, hWndParent: HWND, lpDialogFunc: DLGPROC, dwInitParam: LPARAM) INT_PTR;
extern fn EndDialog(hDlg: HWND, nResult: INT_PTR) BOOL;
extern fn GetDlgItem(hDlg: HWND, nIDDlgItem: c_int) HWND;
extern fn SetDlgItemInt(hDlg: HWND, nIDDlgItem: c_int, uValue: UINT, bSigned: BOOL) BOOL;
extern fn GetDlgItemInt(hDlg: HWND, nIDDlgItem: c_int, lpTranslated: [*c]BOOL, bSigned: BOOL) UINT;
extern fn SetDlgItemTextA(hDlg: HWND, nIDDlgItem: c_int, lpString: LPCSTR) BOOL;
extern fn SetDlgItemTextW(hDlg: HWND, nIDDlgItem: c_int, lpString: LPCWSTR) BOOL;
extern fn GetDlgItemTextA(hDlg: HWND, nIDDlgItem: c_int, lpString: LPSTR, cchMax: c_int) UINT;
extern fn GetDlgItemTextW(hDlg: HWND, nIDDlgItem: c_int, lpString: LPWSTR, cchMax: c_int) UINT;
extern fn CheckDlgButton(hDlg: HWND, nIDButton: c_int, uCheck: UINT) BOOL;
extern fn CheckRadioButton(hDlg: HWND, nIDFirstButton: c_int, nIDLastButton: c_int, nIDCheckButton: c_int) BOOL;
extern fn IsDlgButtonChecked(hDlg: HWND, nIDButton: c_int) UINT;
extern fn SendDlgItemMessageA(hDlg: HWND, nIDDlgItem: c_int, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn SendDlgItemMessageW(hDlg: HWND, nIDDlgItem: c_int, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn GetNextDlgGroupItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) HWND;
extern fn GetNextDlgTabItem(hDlg: HWND, hCtl: HWND, bPrevious: BOOL) HWND;
extern fn GetDlgCtrlID(hWnd: HWND) c_int;
extern fn GetDialogBaseUnits() c_long;
extern fn DefDlgProcA(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn DefDlgProcW(hDlg: HWND, Msg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
pub const DCDC_DEFAULT = enum_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DEFAULT;
pub const DCDC_DISABLE_FONT_UPDATE = enum_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DISABLE_FONT_UPDATE;
pub const DCDC_DISABLE_RELAYOUT = enum_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS.DCDC_DISABLE_RELAYOUT;
pub const enum_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = extern enum {
    DCDC_DEFAULT = 0,
    DCDC_DISABLE_FONT_UPDATE = 1,
    DCDC_DISABLE_RELAYOUT = 2,
};
pub const DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS = enum_DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
extern fn SetDialogControlDpiChangeBehavior(hWnd: HWND, mask: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS, values: DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS) BOOL;
extern fn GetDialogControlDpiChangeBehavior(hWnd: HWND) DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
pub const DDC_DEFAULT = enum_DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DEFAULT;
pub const DDC_DISABLE_ALL = enum_DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_ALL;
pub const DDC_DISABLE_RESIZE = enum_DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_RESIZE;
pub const DDC_DISABLE_CONTROL_RELAYOUT = enum_DIALOG_DPI_CHANGE_BEHAVIORS.DDC_DISABLE_CONTROL_RELAYOUT;
pub const enum_DIALOG_DPI_CHANGE_BEHAVIORS = extern enum {
    DDC_DEFAULT = 0,
    DDC_DISABLE_ALL = 1,
    DDC_DISABLE_RESIZE = 2,
    DDC_DISABLE_CONTROL_RELAYOUT = 4,
};
pub const DIALOG_DPI_CHANGE_BEHAVIORS = enum_DIALOG_DPI_CHANGE_BEHAVIORS;
extern fn SetDialogDpiChangeBehavior(hDlg: HWND, mask: DIALOG_DPI_CHANGE_BEHAVIORS, values: DIALOG_DPI_CHANGE_BEHAVIORS) BOOL;
extern fn GetDialogDpiChangeBehavior(hDlg: HWND) DIALOG_DPI_CHANGE_BEHAVIORS;
extern fn CallMsgFilterA(lpMsg: LPMSG, nCode: c_int) BOOL;
extern fn CallMsgFilterW(lpMsg: LPMSG, nCode: c_int) BOOL;
extern fn OpenClipboard(hWndNewOwner: HWND) BOOL;
extern fn CloseClipboard() BOOL;
extern fn GetClipboardSequenceNumber() DWORD;
extern fn GetClipboardOwner() HWND;
extern fn SetClipboardViewer(hWndNewViewer: HWND) HWND;
extern fn GetClipboardViewer() HWND;
extern fn ChangeClipboardChain(hWndRemove: HWND, hWndNewNext: HWND) BOOL;
extern fn SetClipboardData(uFormat: UINT, hMem: HANDLE) HANDLE;
extern fn GetClipboardData(uFormat: UINT) HANDLE;
extern fn RegisterClipboardFormatA(lpszFormat: LPCSTR) UINT;
extern fn RegisterClipboardFormatW(lpszFormat: LPCWSTR) UINT;
extern fn CountClipboardFormats() c_int;
extern fn EnumClipboardFormats(format: UINT) UINT;
extern fn GetClipboardFormatNameA(format: UINT, lpszFormatName: LPSTR, cchMaxCount: c_int) c_int;
extern fn GetClipboardFormatNameW(format: UINT, lpszFormatName: LPWSTR, cchMaxCount: c_int) c_int;
extern fn EmptyClipboard() BOOL;
extern fn IsClipboardFormatAvailable(format: UINT) BOOL;
extern fn GetPriorityClipboardFormat(paFormatPriorityList: [*c]UINT, cFormats: c_int) c_int;
extern fn GetOpenClipboardWindow() HWND;
extern fn AddClipboardFormatListener(hwnd: HWND) BOOL;
extern fn RemoveClipboardFormatListener(hwnd: HWND) BOOL;
extern fn GetUpdatedClipboardFormats(lpuiFormats: PUINT, cFormats: UINT, pcFormatsOut: PUINT) BOOL;
extern fn CharToOemA(pSrc: LPCSTR, pDst: LPSTR) BOOL;
extern fn CharToOemW(pSrc: LPCWSTR, pDst: LPSTR) BOOL;
extern fn OemToCharA(pSrc: LPCSTR, pDst: LPSTR) BOOL;
extern fn OemToCharW(pSrc: LPCSTR, pDst: LPWSTR) BOOL;
extern fn CharToOemBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
extern fn CharToOemBuffW(lpszSrc: LPCWSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
extern fn OemToCharBuffA(lpszSrc: LPCSTR, lpszDst: LPSTR, cchDstLength: DWORD) BOOL;
extern fn OemToCharBuffW(lpszSrc: LPCSTR, lpszDst: LPWSTR, cchDstLength: DWORD) BOOL;
extern fn CharUpperA(lpsz: LPSTR) LPSTR;
extern fn CharUpperW(lpsz: LPWSTR) LPWSTR;
extern fn CharUpperBuffA(lpsz: LPSTR, cchLength: DWORD) DWORD;
extern fn CharUpperBuffW(lpsz: LPWSTR, cchLength: DWORD) DWORD;
extern fn CharLowerA(lpsz: LPSTR) LPSTR;
extern fn CharLowerW(lpsz: LPWSTR) LPWSTR;
extern fn CharLowerBuffA(lpsz: LPSTR, cchLength: DWORD) DWORD;
extern fn CharLowerBuffW(lpsz: LPWSTR, cchLength: DWORD) DWORD;
extern fn CharNextA(lpsz: LPCSTR) LPSTR;
extern fn CharNextW(lpsz: LPCWSTR) LPWSTR;
extern fn CharPrevA(lpszStart: LPCSTR, lpszCurrent: LPCSTR) LPSTR;
extern fn CharPrevW(lpszStart: LPCWSTR, lpszCurrent: LPCWSTR) LPWSTR;
extern fn CharNextExA(CodePage: WORD, lpCurrentChar: LPCSTR, dwFlags: DWORD) LPSTR;
extern fn CharPrevExA(CodePage: WORD, lpStart: LPCSTR, lpCurrentChar: LPCSTR, dwFlags: DWORD) LPSTR;
extern fn IsCharAlphaA(ch: CHAR) BOOL;
extern fn IsCharAlphaW(ch: WCHAR) BOOL;
extern fn IsCharAlphaNumericA(ch: CHAR) BOOL;
extern fn IsCharAlphaNumericW(ch: WCHAR) BOOL;
extern fn IsCharUpperA(ch: CHAR) BOOL;
extern fn IsCharUpperW(ch: WCHAR) BOOL;
extern fn IsCharLowerA(ch: CHAR) BOOL;
extern fn IsCharLowerW(ch: WCHAR) BOOL;
extern fn SetFocus(hWnd: HWND) HWND;
extern fn GetActiveWindow() HWND;
extern fn GetFocus() HWND;
extern fn GetKBCodePage() UINT;
extern fn GetKeyState(nVirtKey: c_int) SHORT;
extern fn GetAsyncKeyState(vKey: c_int) SHORT;
extern fn GetKeyboardState(lpKeyState: PBYTE) BOOL;
extern fn SetKeyboardState(lpKeyState: LPBYTE) BOOL;
extern fn GetKeyNameTextA(lParam: LONG, lpString: LPSTR, cchSize: c_int) c_int;
extern fn GetKeyNameTextW(lParam: LONG, lpString: LPWSTR, cchSize: c_int) c_int;
extern fn GetKeyboardType(nTypeFlag: c_int) c_int;
extern fn ToAscii(uVirtKey: UINT, uScanCode: UINT, lpKeyState: [*c]const BYTE, lpChar: LPWORD, uFlags: UINT) c_int;
extern fn ToAsciiEx(uVirtKey: UINT, uScanCode: UINT, lpKeyState: [*c]const BYTE, lpChar: LPWORD, uFlags: UINT, dwhkl: HKL) c_int;
extern fn ToUnicode(wVirtKey: UINT, wScanCode: UINT, lpKeyState: [*c]const BYTE, pwszBuff: LPWSTR, cchBuff: c_int, wFlags: UINT) c_int;
extern fn OemKeyScan(wOemChar: WORD) DWORD;
extern fn VkKeyScanA(ch: CHAR) SHORT;
extern fn VkKeyScanW(ch: WCHAR) SHORT;
extern fn VkKeyScanExA(ch: CHAR, dwhkl: HKL) SHORT;
extern fn VkKeyScanExW(ch: WCHAR, dwhkl: HKL) SHORT;
extern fn keybd_event(bVk: BYTE, bScan: BYTE, dwFlags: DWORD, dwExtraInfo: ULONG_PTR) void;
extern fn mouse_event(dwFlags: DWORD, dx: DWORD, dy: DWORD, dwData: DWORD, dwExtraInfo: ULONG_PTR) void;
pub const struct_tagMOUSEINPUT = extern struct {
    dx: LONG,
    dy: LONG,
    mouseData: DWORD,
    dwFlags: DWORD,
    time: DWORD,
    dwExtraInfo: ULONG_PTR,
};
pub const MOUSEINPUT = struct_tagMOUSEINPUT;
pub const PMOUSEINPUT = [*c]struct_tagMOUSEINPUT;
pub const LPMOUSEINPUT = [*c]struct_tagMOUSEINPUT;
pub const struct_tagKEYBDINPUT = extern struct {
    wVk: WORD,
    wScan: WORD,
    dwFlags: DWORD,
    time: DWORD,
    dwExtraInfo: ULONG_PTR,
};
pub const KEYBDINPUT = struct_tagKEYBDINPUT;
pub const PKEYBDINPUT = [*c]struct_tagKEYBDINPUT;
pub const LPKEYBDINPUT = [*c]struct_tagKEYBDINPUT;
pub const struct_tagHARDWAREINPUT = extern struct {
    uMsg: DWORD,
    wParamL: WORD,
    wParamH: WORD,
};
pub const HARDWAREINPUT = struct_tagHARDWAREINPUT;
pub const PHARDWAREINPUT = [*c]struct_tagHARDWAREINPUT;
pub const LPHARDWAREINPUT = [*c]struct_tagHARDWAREINPUT;
pub const struct_tagINPUT = extern struct {
    type: DWORD,
    @"": extern union {
        mi: MOUSEINPUT,
        ki: KEYBDINPUT,
        hi: HARDWAREINPUT,
    },
};
pub const INPUT = struct_tagINPUT;
pub const PINPUT = [*c]struct_tagINPUT;
pub const LPINPUT = [*c]struct_tagINPUT;
extern fn SendInput(cInputs: UINT, pInputs: LPINPUT, cbSize: c_int) UINT;
pub const struct_HTOUCHINPUT__ = extern struct {
    unused: c_int,
};
pub const HTOUCHINPUT = [*c]struct_HTOUCHINPUT__;
pub const struct_tagTOUCHINPUT = extern struct {
    x: LONG,
    y: LONG,
    hSource: HANDLE,
    dwID: DWORD,
    dwFlags: DWORD,
    dwMask: DWORD,
    dwTime: DWORD,
    dwExtraInfo: ULONG_PTR,
    cxContact: DWORD,
    cyContact: DWORD,
};
pub const TOUCHINPUT = struct_tagTOUCHINPUT;
pub const PTOUCHINPUT = [*c]struct_tagTOUCHINPUT;
pub const PCTOUCHINPUT = [*c]const TOUCHINPUT;
extern fn GetTouchInputInfo(hTouchInput: HTOUCHINPUT, cInputs: UINT, pInputs: PTOUCHINPUT, cbSize: c_int) BOOL;
extern fn CloseTouchInputHandle(hTouchInput: HTOUCHINPUT) BOOL;
extern fn RegisterTouchWindow(hwnd: HWND, ulFlags: ULONG) BOOL;
extern fn UnregisterTouchWindow(hwnd: HWND) BOOL;
extern fn IsTouchWindow(hwnd: HWND, pulFlags: PULONG) BOOL;
pub const PT_POINTER = enum_tagPOINTER_INPUT_TYPE.PT_POINTER;
pub const PT_TOUCH = enum_tagPOINTER_INPUT_TYPE.PT_TOUCH;
pub const PT_PEN = enum_tagPOINTER_INPUT_TYPE.PT_PEN;
pub const PT_MOUSE = enum_tagPOINTER_INPUT_TYPE.PT_MOUSE;
pub const PT_TOUCHPAD = enum_tagPOINTER_INPUT_TYPE.PT_TOUCHPAD;
pub const enum_tagPOINTER_INPUT_TYPE = extern enum {
    PT_POINTER = 1,
    PT_TOUCH = 2,
    PT_PEN = 3,
    PT_MOUSE = 4,
    PT_TOUCHPAD = 5,
};
pub const POINTER_INPUT_TYPE = DWORD;
pub const POINTER_FLAGS = UINT32;
pub const POINTER_CHANGE_NONE = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_NONE;
pub const POINTER_CHANGE_FIRSTBUTTON_DOWN = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_DOWN;
pub const POINTER_CHANGE_FIRSTBUTTON_UP = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIRSTBUTTON_UP;
pub const POINTER_CHANGE_SECONDBUTTON_DOWN = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_DOWN;
pub const POINTER_CHANGE_SECONDBUTTON_UP = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_SECONDBUTTON_UP;
pub const POINTER_CHANGE_THIRDBUTTON_DOWN = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_DOWN;
pub const POINTER_CHANGE_THIRDBUTTON_UP = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_THIRDBUTTON_UP;
pub const POINTER_CHANGE_FOURTHBUTTON_DOWN = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_DOWN;
pub const POINTER_CHANGE_FOURTHBUTTON_UP = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FOURTHBUTTON_UP;
pub const POINTER_CHANGE_FIFTHBUTTON_DOWN = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_DOWN;
pub const POINTER_CHANGE_FIFTHBUTTON_UP = enum_tagPOINTER_BUTTON_CHANGE_TYPE.POINTER_CHANGE_FIFTHBUTTON_UP;
pub const enum_tagPOINTER_BUTTON_CHANGE_TYPE = extern enum {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
};
pub const POINTER_BUTTON_CHANGE_TYPE = enum_tagPOINTER_BUTTON_CHANGE_TYPE;
pub const struct_tagPOINTER_INFO = extern struct {
    pointerType: POINTER_INPUT_TYPE,
    pointerId: UINT32,
    frameId: UINT32,
    pointerFlags: POINTER_FLAGS,
    sourceDevice: HANDLE,
    hwndTarget: HWND,
    ptPixelLocation: POINT,
    ptHimetricLocation: POINT,
    ptPixelLocationRaw: POINT,
    ptHimetricLocationRaw: POINT,
    dwTime: DWORD,
    historyCount: UINT32,
    InputData: INT32,
    dwKeyStates: DWORD,
    PerformanceCount: UINT64,
    ButtonChangeType: POINTER_BUTTON_CHANGE_TYPE,
};
pub const POINTER_INFO = struct_tagPOINTER_INFO;
pub const TOUCH_FLAGS = UINT32;
pub const TOUCH_MASK = UINT32;
pub const struct_tagPOINTER_TOUCH_INFO = extern struct {
    pointerInfo: POINTER_INFO,
    touchFlags: TOUCH_FLAGS,
    touchMask: TOUCH_MASK,
    rcContact: RECT,
    rcContactRaw: RECT,
    orientation: UINT32,
    pressure: UINT32,
};
pub const POINTER_TOUCH_INFO = struct_tagPOINTER_TOUCH_INFO;
pub const PEN_FLAGS = UINT32;
pub const PEN_MASK = UINT32;
pub const struct_tagPOINTER_PEN_INFO = extern struct {
    pointerInfo: POINTER_INFO,
    penFlags: PEN_FLAGS,
    penMask: PEN_MASK,
    pressure: UINT32,
    rotation: UINT32,
    tiltX: INT32,
    tiltY: INT32,
};
pub const POINTER_PEN_INFO = struct_tagPOINTER_PEN_INFO;
pub const POINTER_FEEDBACK_DEFAULT = 1;
pub const POINTER_FEEDBACK_INDIRECT = 2;
pub const POINTER_FEEDBACK_NONE = 3;
pub const POINTER_FEEDBACK_MODE = extern enum {
    POINTER_FEEDBACK_DEFAULT = 1,
    POINTER_FEEDBACK_INDIRECT = 2,
    POINTER_FEEDBACK_NONE = 3,
};
extern fn InitializeTouchInjection(maxCount: UINT32, dwMode: DWORD) BOOL;
extern fn InjectTouchInput(count: UINT32, contacts: [*c]const POINTER_TOUCH_INFO) BOOL;
pub const struct_tagUSAGE_PROPERTIES = extern struct {
    level: USHORT,
    page: USHORT,
    usage: USHORT,
    logicalMinimum: INT32,
    logicalMaximum: INT32,
    unit: USHORT,
    exponent: USHORT,
    count: BYTE,
    physicalMinimum: INT32,
    physicalMaximum: INT32,
};
pub const USAGE_PROPERTIES = struct_tagUSAGE_PROPERTIES;
pub const PUSAGE_PROPERTIES = [*c]struct_tagUSAGE_PROPERTIES;
pub const struct_tagPOINTER_TYPE_INFO = extern struct {
    type: POINTER_INPUT_TYPE,
    @"": extern union {
        touchInfo: POINTER_TOUCH_INFO,
        penInfo: POINTER_PEN_INFO,
    },
};
pub const POINTER_TYPE_INFO = struct_tagPOINTER_TYPE_INFO;
pub const PPOINTER_TYPE_INFO = [*c]struct_tagPOINTER_TYPE_INFO;
pub const struct_tagINPUT_INJECTION_VALUE = extern struct {
    page: USHORT,
    usage: USHORT,
    value: INT32,
    index: USHORT,
};
pub const INPUT_INJECTION_VALUE = struct_tagINPUT_INJECTION_VALUE;
pub const PINPUT_INJECTION_VALUE = [*c]struct_tagINPUT_INJECTION_VALUE;
extern fn GetPointerType(pointerId: UINT32, pointerType: [*c]POINTER_INPUT_TYPE) BOOL;
extern fn GetPointerCursorId(pointerId: UINT32, cursorId: [*c]UINT32) BOOL;
extern fn GetPointerInfo(pointerId: UINT32, pointerInfo: [*c]POINTER_INFO) BOOL;
extern fn GetPointerInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, pointerInfo: [*c]POINTER_INFO) BOOL;
extern fn GetPointerFrameInfo(pointerId: UINT32, pointerCount: [*c]UINT32, pointerInfo: [*c]POINTER_INFO) BOOL;
extern fn GetPointerFrameInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, pointerCount: [*c]UINT32, pointerInfo: [*c]POINTER_INFO) BOOL;
extern fn GetPointerTouchInfo(pointerId: UINT32, touchInfo: [*c]POINTER_TOUCH_INFO) BOOL;
extern fn GetPointerTouchInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, touchInfo: [*c]POINTER_TOUCH_INFO) BOOL;
extern fn GetPointerFrameTouchInfo(pointerId: UINT32, pointerCount: [*c]UINT32, touchInfo: [*c]POINTER_TOUCH_INFO) BOOL;
extern fn GetPointerFrameTouchInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, pointerCount: [*c]UINT32, touchInfo: [*c]POINTER_TOUCH_INFO) BOOL;
extern fn GetPointerPenInfo(pointerId: UINT32, penInfo: [*c]POINTER_PEN_INFO) BOOL;
extern fn GetPointerPenInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, penInfo: [*c]POINTER_PEN_INFO) BOOL;
extern fn GetPointerFramePenInfo(pointerId: UINT32, pointerCount: [*c]UINT32, penInfo: [*c]POINTER_PEN_INFO) BOOL;
extern fn GetPointerFramePenInfoHistory(pointerId: UINT32, entriesCount: [*c]UINT32, pointerCount: [*c]UINT32, penInfo: [*c]POINTER_PEN_INFO) BOOL;
extern fn SkipPointerFrameMessages(pointerId: UINT32) BOOL;
extern fn RegisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
extern fn UnregisterPointerInputTarget(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
extern fn RegisterPointerInputTargetEx(hwnd: HWND, pointerType: POINTER_INPUT_TYPE, fObserve: BOOL) BOOL;
extern fn UnregisterPointerInputTargetEx(hwnd: HWND, pointerType: POINTER_INPUT_TYPE) BOOL;
pub const struct_HSYNTHETICPOINTERDEVICE__ = extern struct {
    unused: c_int,
};
pub const HSYNTHETICPOINTERDEVICE = [*c]struct_HSYNTHETICPOINTERDEVICE__;
extern fn CreateSyntheticPointerDevice(pointerType: POINTER_INPUT_TYPE, maxCount: ULONG, mode: POINTER_FEEDBACK_MODE) HSYNTHETICPOINTERDEVICE;
extern fn InjectSyntheticPointerInput(device: HSYNTHETICPOINTERDEVICE, pointerInfo: [*c]const POINTER_TYPE_INFO, count: UINT32) BOOL;
extern fn DestroySyntheticPointerDevice(device: HSYNTHETICPOINTERDEVICE) void;
extern fn EnableMouseInPointer(fEnable: BOOL) BOOL;
extern fn IsMouseInPointerEnabled() BOOL;
extern fn EnableMouseInPointerForThread() BOOL;
extern fn RegisterTouchHitTestingWindow(hwnd: HWND, value: ULONG) BOOL;
pub const struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = extern struct {
    score: UINT16,
    adjustedPoint: POINT,
};
pub const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION = struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
pub const PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = [*c]struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
pub const struct_tagTOUCH_HIT_TESTING_INPUT = extern struct {
    pointerId: UINT32,
    point: POINT,
    boundingBox: RECT,
    nonOccludedBoundingBox: RECT,
    orientation: UINT32,
};
pub const TOUCH_HIT_TESTING_INPUT = struct_tagTOUCH_HIT_TESTING_INPUT;
pub const PTOUCH_HIT_TESTING_INPUT = [*c]struct_tagTOUCH_HIT_TESTING_INPUT;
extern fn EvaluateProximityToRect(controlBoundingBox: [*c]const RECT, pHitTestingInput: [*c]const TOUCH_HIT_TESTING_INPUT, pProximityEval: [*c]TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) BOOL;
extern fn EvaluateProximityToPolygon(numVertices: UINT32, controlPolygon: [*c]const POINT, pHitTestingInput: [*c]const TOUCH_HIT_TESTING_INPUT, pProximityEval: [*c]TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) BOOL;
extern fn PackTouchHitTestingProximityEvaluation(pHitTestingInput: [*c]const TOUCH_HIT_TESTING_INPUT, pProximityEval: [*c]const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION) LRESULT;
pub const FEEDBACK_TOUCH_CONTACTVISUALIZATION = enum_tagFEEDBACK_TYPE.FEEDBACK_TOUCH_CONTACTVISUALIZATION;
pub const FEEDBACK_PEN_BARRELVISUALIZATION = enum_tagFEEDBACK_TYPE.FEEDBACK_PEN_BARRELVISUALIZATION;
pub const FEEDBACK_PEN_TAP = enum_tagFEEDBACK_TYPE.FEEDBACK_PEN_TAP;
pub const FEEDBACK_PEN_DOUBLETAP = enum_tagFEEDBACK_TYPE.FEEDBACK_PEN_DOUBLETAP;
pub const FEEDBACK_PEN_PRESSANDHOLD = enum_tagFEEDBACK_TYPE.FEEDBACK_PEN_PRESSANDHOLD;
pub const FEEDBACK_PEN_RIGHTTAP = enum_tagFEEDBACK_TYPE.FEEDBACK_PEN_RIGHTTAP;
pub const FEEDBACK_TOUCH_TAP = enum_tagFEEDBACK_TYPE.FEEDBACK_TOUCH_TAP;
pub const FEEDBACK_TOUCH_DOUBLETAP = enum_tagFEEDBACK_TYPE.FEEDBACK_TOUCH_DOUBLETAP;
pub const FEEDBACK_TOUCH_PRESSANDHOLD = enum_tagFEEDBACK_TYPE.FEEDBACK_TOUCH_PRESSANDHOLD;
pub const FEEDBACK_TOUCH_RIGHTTAP = enum_tagFEEDBACK_TYPE.FEEDBACK_TOUCH_RIGHTTAP;
pub const FEEDBACK_GESTURE_PRESSANDTAP = enum_tagFEEDBACK_TYPE.FEEDBACK_GESTURE_PRESSANDTAP;
pub const FEEDBACK_MAX = enum_tagFEEDBACK_TYPE.FEEDBACK_MAX;
pub const enum_tagFEEDBACK_TYPE = extern enum {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION = 2,
    FEEDBACK_PEN_TAP = 3,
    FEEDBACK_PEN_DOUBLETAP = 4,
    FEEDBACK_PEN_PRESSANDHOLD = 5,
    FEEDBACK_PEN_RIGHTTAP = 6,
    FEEDBACK_TOUCH_TAP = 7,
    FEEDBACK_TOUCH_DOUBLETAP = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD = 9,
    FEEDBACK_TOUCH_RIGHTTAP = 10,
    FEEDBACK_GESTURE_PRESSANDTAP = 11,
    FEEDBACK_MAX = -1,
};
pub const FEEDBACK_TYPE = enum_tagFEEDBACK_TYPE;
extern fn GetWindowFeedbackSetting(hwnd: HWND, feedback: FEEDBACK_TYPE, dwFlags: DWORD, pSize: [*c]UINT32, config: ?*c_void) BOOL;
extern fn SetWindowFeedbackSetting(hwnd: HWND, feedback: FEEDBACK_TYPE, dwFlags: DWORD, size: UINT32, configuration: ?*const c_void) BOOL;
pub const struct_tagINPUT_TRANSFORM = extern struct {
    @"": extern union {
        @"": extern struct {
            _11: f32,
            _12: f32,
            _13: f32,
            _14: f32,
            _21: f32,
            _22: f32,
            _23: f32,
            _24: f32,
            _31: f32,
            _32: f32,
            _33: f32,
            _34: f32,
            _41: f32,
            _42: f32,
            _43: f32,
            _44: f32,
        },
        m: [4][4]f32,
    },
};
pub const INPUT_TRANSFORM = struct_tagINPUT_TRANSFORM;
extern fn GetPointerInputTransform(pointerId: UINT32, historyCount: UINT32, inputTransform: [*c]INPUT_TRANSFORM) BOOL;
pub const struct_tagLASTINPUTINFO = extern struct {
    cbSize: UINT,
    dwTime: DWORD,
};
pub const LASTINPUTINFO = struct_tagLASTINPUTINFO;
pub const PLASTINPUTINFO = [*c]struct_tagLASTINPUTINFO;
extern fn GetLastInputInfo(plii: PLASTINPUTINFO) BOOL;
extern fn MapVirtualKeyA(uCode: UINT, uMapType: UINT) UINT;
extern fn MapVirtualKeyW(uCode: UINT, uMapType: UINT) UINT;
extern fn MapVirtualKeyExA(uCode: UINT, uMapType: UINT, dwhkl: HKL) UINT;
extern fn MapVirtualKeyExW(uCode: UINT, uMapType: UINT, dwhkl: HKL) UINT;
extern fn GetInputState() BOOL;
extern fn GetQueueStatus(flags: UINT) DWORD;
extern fn GetCapture() HWND;
extern fn SetCapture(hWnd: HWND) HWND;
extern fn ReleaseCapture() BOOL;
extern fn MsgWaitForMultipleObjects(nCount: DWORD, pHandles: [*c]const HANDLE, fWaitAll: BOOL, dwMilliseconds: DWORD, dwWakeMask: DWORD) DWORD;
extern fn MsgWaitForMultipleObjectsEx(nCount: DWORD, pHandles: [*c]const HANDLE, dwMilliseconds: DWORD, dwWakeMask: DWORD, dwFlags: DWORD) DWORD;
extern fn SetTimer(hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC) UINT_PTR;
extern fn SetCoalescableTimer(hWnd: HWND, nIDEvent: UINT_PTR, uElapse: UINT, lpTimerFunc: TIMERPROC, uToleranceDelay: ULONG) UINT_PTR;
extern fn KillTimer(hWnd: HWND, uIDEvent: UINT_PTR) BOOL;
extern fn IsWindowUnicode(hWnd: HWND) BOOL;
extern fn EnableWindow(hWnd: HWND, bEnable: BOOL) BOOL;
extern fn IsWindowEnabled(hWnd: HWND) BOOL;
extern fn LoadAcceleratorsA(hInstance: HINSTANCE, lpTableName: LPCSTR) HACCEL;
extern fn LoadAcceleratorsW(hInstance: HINSTANCE, lpTableName: LPCWSTR) HACCEL;
extern fn CreateAcceleratorTableA(paccel: LPACCEL, cAccel: c_int) HACCEL;
extern fn CreateAcceleratorTableW(paccel: LPACCEL, cAccel: c_int) HACCEL;
extern fn DestroyAcceleratorTable(hAccel: HACCEL) BOOL;
extern fn CopyAcceleratorTableA(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: c_int) c_int;
extern fn CopyAcceleratorTableW(hAccelSrc: HACCEL, lpAccelDst: LPACCEL, cAccelEntries: c_int) c_int;
extern fn TranslateAcceleratorA(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG) c_int;
extern fn TranslateAcceleratorW(hWnd: HWND, hAccTable: HACCEL, lpMsg: LPMSG) c_int;
extern fn GetSystemMetrics(nIndex: c_int) c_int;
extern fn GetSystemMetricsForDpi(nIndex: c_int, dpi: UINT) c_int;
extern fn LoadMenuA(hInstance: HINSTANCE, lpMenuName: LPCSTR) HMENU;
extern fn LoadMenuW(hInstance: HINSTANCE, lpMenuName: LPCWSTR) HMENU;
extern fn LoadMenuIndirectA(lpMenuTemplate: ?*const MENUTEMPLATEA) HMENU;
extern fn LoadMenuIndirectW(lpMenuTemplate: ?*const MENUTEMPLATEW) HMENU;
extern fn GetMenu(hWnd: HWND) HMENU;
extern fn SetMenu(hWnd: HWND, hMenu: HMENU) BOOL;
extern fn ChangeMenuA(hMenu: HMENU, cmd: UINT, lpszNewItem: LPCSTR, cmdInsert: UINT, flags: UINT) BOOL;
extern fn ChangeMenuW(hMenu: HMENU, cmd: UINT, lpszNewItem: LPCWSTR, cmdInsert: UINT, flags: UINT) BOOL;
extern fn HiliteMenuItem(hWnd: HWND, hMenu: HMENU, uIDHiliteItem: UINT, uHilite: UINT) BOOL;
extern fn GetMenuStringA(hMenu: HMENU, uIDItem: UINT, lpString: LPSTR, cchMax: c_int, flags: UINT) c_int;
extern fn GetMenuStringW(hMenu: HMENU, uIDItem: UINT, lpString: LPWSTR, cchMax: c_int, flags: UINT) c_int;
extern fn GetMenuState(hMenu: HMENU, uId: UINT, uFlags: UINT) UINT;
extern fn DrawMenuBar(hWnd: HWND) BOOL;
extern fn GetSystemMenu(hWnd: HWND, bRevert: BOOL) HMENU;
extern fn CreateMenu() HMENU;
extern fn CreatePopupMenu() HMENU;
extern fn DestroyMenu(hMenu: HMENU) BOOL;
extern fn CheckMenuItem(hMenu: HMENU, uIDCheckItem: UINT, uCheck: UINT) DWORD;
extern fn EnableMenuItem(hMenu: HMENU, uIDEnableItem: UINT, uEnable: UINT) BOOL;
extern fn GetSubMenu(hMenu: HMENU, nPos: c_int) HMENU;
extern fn GetMenuItemID(hMenu: HMENU, nPos: c_int) UINT;
extern fn GetMenuItemCount(hMenu: HMENU) c_int;
extern fn InsertMenuA(hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
extern fn InsertMenuW(hMenu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
extern fn AppendMenuA(hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
extern fn AppendMenuW(hMenu: HMENU, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
extern fn ModifyMenuA(hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCSTR) BOOL;
extern fn ModifyMenuW(hMnu: HMENU, uPosition: UINT, uFlags: UINT, uIDNewItem: UINT_PTR, lpNewItem: LPCWSTR) BOOL;
extern fn RemoveMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) BOOL;
extern fn DeleteMenu(hMenu: HMENU, uPosition: UINT, uFlags: UINT) BOOL;
extern fn SetMenuItemBitmaps(hMenu: HMENU, uPosition: UINT, uFlags: UINT, hBitmapUnchecked: HBITMAP, hBitmapChecked: HBITMAP) BOOL;
extern fn GetMenuCheckMarkDimensions() LONG;
extern fn TrackPopupMenu(hMenu: HMENU, uFlags: UINT, x: c_int, y: c_int, nReserved: c_int, hWnd: HWND, prcRect: [*c]const RECT) BOOL;
pub const struct_tagTPMPARAMS = extern struct {
    cbSize: UINT,
    rcExclude: RECT,
};
pub const TPMPARAMS = struct_tagTPMPARAMS;
pub const LPTPMPARAMS = [*c]TPMPARAMS;
extern fn TrackPopupMenuEx(hMenu: HMENU, uFlags: UINT, x: c_int, y: c_int, hwnd: HWND, lptpm: LPTPMPARAMS) BOOL;
extern fn CalculatePopupWindowPosition(anchorPoint: [*c]const POINT, windowSize: [*c]const SIZE, flags: UINT, excludeRect: [*c]RECT, popupWindowPosition: [*c]RECT) BOOL;
pub const struct_tagMENUINFO = extern struct {
    cbSize: DWORD,
    fMask: DWORD,
    dwStyle: DWORD,
    cyMax: UINT,
    hbrBack: HBRUSH,
    dwContextHelpID: DWORD,
    dwMenuData: ULONG_PTR,
};
pub const MENUINFO = struct_tagMENUINFO;
pub const LPMENUINFO = [*c]struct_tagMENUINFO;
pub const LPCMENUINFO = [*c]const MENUINFO;
extern fn GetMenuInfo(arg0: HMENU, arg1: LPMENUINFO) BOOL;
extern fn SetMenuInfo(arg0: HMENU, arg1: LPCMENUINFO) BOOL;
extern fn EndMenu() BOOL;
pub const struct_tagMENUGETOBJECTINFO = extern struct {
    dwFlags: DWORD,
    uPos: UINT,
    hmenu: HMENU,
    riid: PVOID,
    pvObj: PVOID,
};
pub const MENUGETOBJECTINFO = struct_tagMENUGETOBJECTINFO;
pub const PMENUGETOBJECTINFO = [*c]struct_tagMENUGETOBJECTINFO;
pub const struct_tagMENUITEMINFOA = extern struct {
    cbSize: UINT,
    fMask: UINT,
    fType: UINT,
    fState: UINT,
    wID: UINT,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ULONG_PTR,
    dwTypeData: LPSTR,
    cch: UINT,
    hbmpItem: HBITMAP,
};
pub const MENUITEMINFOA = struct_tagMENUITEMINFOA;
pub const LPMENUITEMINFOA = [*c]struct_tagMENUITEMINFOA;
pub const struct_tagMENUITEMINFOW = extern struct {
    cbSize: UINT,
    fMask: UINT,
    fType: UINT,
    fState: UINT,
    wID: UINT,
    hSubMenu: HMENU,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: ULONG_PTR,
    dwTypeData: LPWSTR,
    cch: UINT,
    hbmpItem: HBITMAP,
};
pub const MENUITEMINFOW = struct_tagMENUITEMINFOW;
pub const LPMENUITEMINFOW = [*c]struct_tagMENUITEMINFOW;
pub const MENUITEMINFO = MENUITEMINFOA;
pub const LPMENUITEMINFO = LPMENUITEMINFOA;
pub const LPCMENUITEMINFOA = [*c]const MENUITEMINFOA;
pub const LPCMENUITEMINFOW = [*c]const MENUITEMINFOW;
pub const LPCMENUITEMINFO = LPCMENUITEMINFOA;
extern fn InsertMenuItemA(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOA) BOOL;
extern fn InsertMenuItemW(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmi: LPCMENUITEMINFOW) BOOL;
extern fn GetMenuItemInfoA(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOA) BOOL;
extern fn GetMenuItemInfoW(hmenu: HMENU, item: UINT, fByPosition: BOOL, lpmii: LPMENUITEMINFOW) BOOL;
extern fn SetMenuItemInfoA(hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOA) BOOL;
extern fn SetMenuItemInfoW(hmenu: HMENU, item: UINT, fByPositon: BOOL, lpmii: LPCMENUITEMINFOW) BOOL;
extern fn GetMenuDefaultItem(hMenu: HMENU, fByPos: UINT, gmdiFlags: UINT) UINT;
extern fn SetMenuDefaultItem(hMenu: HMENU, uItem: UINT, fByPos: UINT) BOOL;
extern fn GetMenuItemRect(hWnd: HWND, hMenu: HMENU, uItem: UINT, lprcItem: LPRECT) BOOL;
extern fn MenuItemFromPoint(hWnd: HWND, hMenu: HMENU, ptScreen: POINT) c_int;
pub const struct_tagDROPSTRUCT = extern struct {
    hwndSource: HWND,
    hwndSink: HWND,
    wFmt: DWORD,
    dwData: ULONG_PTR,
    ptDrop: POINT,
    dwControlData: DWORD,
};
pub const DROPSTRUCT = struct_tagDROPSTRUCT;
pub const PDROPSTRUCT = [*c]struct_tagDROPSTRUCT;
pub const LPDROPSTRUCT = [*c]struct_tagDROPSTRUCT;
extern fn DragObject(hwndParent: HWND, hwndFrom: HWND, fmt: UINT, data: ULONG_PTR, hcur: HCURSOR) DWORD;
extern fn DragDetect(hwnd: HWND, pt: POINT) BOOL;
extern fn DrawIcon(hDC: HDC, X: c_int, Y: c_int, hIcon: HICON) BOOL;
pub const struct_tagDRAWTEXTPARAMS = extern struct {
    cbSize: UINT,
    iTabLength: c_int,
    iLeftMargin: c_int,
    iRightMargin: c_int,
    uiLengthDrawn: UINT,
};
pub const DRAWTEXTPARAMS = struct_tagDRAWTEXTPARAMS;
pub const LPDRAWTEXTPARAMS = [*c]struct_tagDRAWTEXTPARAMS;
extern fn DrawTextA(hdc: HDC, lpchText: LPCSTR, cchText: c_int, lprc: LPRECT, format: UINT) c_int;
extern fn DrawTextW(hdc: HDC, lpchText: LPCWSTR, cchText: c_int, lprc: LPRECT, format: UINT) c_int;
extern fn DrawTextExA(hdc: HDC, lpchText: LPSTR, cchText: c_int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS) c_int;
extern fn DrawTextExW(hdc: HDC, lpchText: LPWSTR, cchText: c_int, lprc: LPRECT, format: UINT, lpdtp: LPDRAWTEXTPARAMS) c_int;
extern fn GrayStringA(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: c_int, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int) BOOL;
extern fn GrayStringW(hDC: HDC, hBrush: HBRUSH, lpOutputFunc: GRAYSTRINGPROC, lpData: LPARAM, nCount: c_int, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int) BOOL;
extern fn DrawStateA(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
extern fn DrawStateW(hdc: HDC, hbrFore: HBRUSH, qfnCallBack: DRAWSTATEPROC, lData: LPARAM, wData: WPARAM, x: c_int, y: c_int, cx: c_int, cy: c_int, uFlags: UINT) BOOL;
extern fn TabbedTextOutA(hdc: HDC, x: c_int, y: c_int, lpString: LPCSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: [*c]const INT, nTabOrigin: c_int) LONG;
extern fn TabbedTextOutW(hdc: HDC, x: c_int, y: c_int, lpString: LPCWSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: [*c]const INT, nTabOrigin: c_int) LONG;
extern fn GetTabbedTextExtentA(hdc: HDC, lpString: LPCSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: [*c]const INT) DWORD;
extern fn GetTabbedTextExtentW(hdc: HDC, lpString: LPCWSTR, chCount: c_int, nTabPositions: c_int, lpnTabStopPositions: [*c]const INT) DWORD;
extern fn UpdateWindow(hWnd: HWND) BOOL;
extern fn SetActiveWindow(hWnd: HWND) HWND;
extern fn GetForegroundWindow() HWND;
extern fn PaintDesktop(hdc: HDC) BOOL;
extern fn SwitchToThisWindow(hwnd: HWND, fUnknown: BOOL) void;
extern fn SetForegroundWindow(hWnd: HWND) BOOL;
extern fn AllowSetForegroundWindow(dwProcessId: DWORD) BOOL;
extern fn LockSetForegroundWindow(uLockCode: UINT) BOOL;
extern fn WindowFromDC(hDC: HDC) HWND;
extern fn GetDC(hWnd: HWND) HDC;
extern fn GetDCEx(hWnd: HWND, hrgnClip: HRGN, flags: DWORD) HDC;
extern fn GetWindowDC(hWnd: HWND) HDC;
extern fn ReleaseDC(hWnd: HWND, hDC: HDC) c_int;
extern fn BeginPaint(hWnd: HWND, lpPaint: LPPAINTSTRUCT) HDC;
extern fn EndPaint(hWnd: HWND, lpPaint: [*c]const PAINTSTRUCT) BOOL;
extern fn GetUpdateRect(hWnd: HWND, lpRect: LPRECT, bErase: BOOL) BOOL;
extern fn GetUpdateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) c_int;
extern fn SetWindowRgn(hWnd: HWND, hRgn: HRGN, bRedraw: BOOL) c_int;
extern fn GetWindowRgn(hWnd: HWND, hRgn: HRGN) c_int;
extern fn GetWindowRgnBox(hWnd: HWND, lprc: LPRECT) c_int;
extern fn ExcludeUpdateRgn(hDC: HDC, hWnd: HWND) c_int;
extern fn InvalidateRect(hWnd: HWND, lpRect: [*c]const RECT, bErase: BOOL) BOOL;
extern fn ValidateRect(hWnd: HWND, lpRect: [*c]const RECT) BOOL;
extern fn InvalidateRgn(hWnd: HWND, hRgn: HRGN, bErase: BOOL) BOOL;
extern fn ValidateRgn(hWnd: HWND, hRgn: HRGN) BOOL;
extern fn RedrawWindow(hWnd: HWND, lprcUpdate: [*c]const RECT, hrgnUpdate: HRGN, flags: UINT) BOOL;
extern fn LockWindowUpdate(hWndLock: HWND) BOOL;
extern fn ScrollWindow(hWnd: HWND, XAmount: c_int, YAmount: c_int, lpRect: [*c]const RECT, lpClipRect: [*c]const RECT) BOOL;
extern fn ScrollDC(hDC: HDC, dx: c_int, dy: c_int, lprcScroll: [*c]const RECT, lprcClip: [*c]const RECT, hrgnUpdate: HRGN, lprcUpdate: LPRECT) BOOL;
extern fn ScrollWindowEx(hWnd: HWND, dx: c_int, dy: c_int, prcScroll: [*c]const RECT, prcClip: [*c]const RECT, hrgnUpdate: HRGN, prcUpdate: LPRECT, flags: UINT) c_int;
extern fn SetScrollPos(hWnd: HWND, nBar: c_int, nPos: c_int, bRedraw: BOOL) c_int;
extern fn GetScrollPos(hWnd: HWND, nBar: c_int) c_int;
extern fn SetScrollRange(hWnd: HWND, nBar: c_int, nMinPos: c_int, nMaxPos: c_int, bRedraw: BOOL) BOOL;
extern fn GetScrollRange(hWnd: HWND, nBar: c_int, lpMinPos: LPINT, lpMaxPos: LPINT) BOOL;
extern fn ShowScrollBar(hWnd: HWND, wBar: c_int, bShow: BOOL) BOOL;
extern fn EnableScrollBar(hWnd: HWND, wSBflags: UINT, wArrows: UINT) BOOL;
extern fn SetPropA(hWnd: HWND, lpString: LPCSTR, hData: HANDLE) BOOL;
extern fn SetPropW(hWnd: HWND, lpString: LPCWSTR, hData: HANDLE) BOOL;
extern fn GetPropA(hWnd: HWND, lpString: LPCSTR) HANDLE;
extern fn GetPropW(hWnd: HWND, lpString: LPCWSTR) HANDLE;
extern fn RemovePropA(hWnd: HWND, lpString: LPCSTR) HANDLE;
extern fn RemovePropW(hWnd: HWND, lpString: LPCWSTR) HANDLE;
extern fn EnumPropsExA(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXA, lParam: LPARAM) c_int;
extern fn EnumPropsExW(hWnd: HWND, lpEnumFunc: PROPENUMPROCEXW, lParam: LPARAM) c_int;
extern fn EnumPropsA(hWnd: HWND, lpEnumFunc: PROPENUMPROCA) c_int;
extern fn EnumPropsW(hWnd: HWND, lpEnumFunc: PROPENUMPROCW) c_int;
extern fn SetWindowTextA(hWnd: HWND, lpString: LPCSTR) BOOL;
extern fn SetWindowTextW(hWnd: HWND, lpString: LPCWSTR) BOOL;
extern fn GetWindowTextA(hWnd: HWND, lpString: LPSTR, nMaxCount: c_int) c_int;
extern fn GetWindowTextW(hWnd: HWND, lpString: LPWSTR, nMaxCount: c_int) c_int;
extern fn GetWindowTextLengthA(hWnd: HWND) c_int;
extern fn GetWindowTextLengthW(hWnd: HWND) c_int;
extern fn GetClientRect(hWnd: HWND, lpRect: LPRECT) BOOL;
extern fn GetWindowRect(hWnd: HWND, lpRect: LPRECT) BOOL;
extern fn AdjustWindowRect(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL) BOOL;
extern fn AdjustWindowRectEx(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD) BOOL;
extern fn AdjustWindowRectExForDpi(lpRect: LPRECT, dwStyle: DWORD, bMenu: BOOL, dwExStyle: DWORD, dpi: UINT) BOOL;
pub const struct_tagHELPINFO = extern struct {
    cbSize: UINT,
    iContextType: c_int,
    iCtrlId: c_int,
    hItemHandle: HANDLE,
    dwContextId: DWORD_PTR,
    MousePos: POINT,
};
pub const HELPINFO = struct_tagHELPINFO;
pub const LPHELPINFO = [*c]struct_tagHELPINFO;
extern fn SetWindowContextHelpId(arg0: HWND, arg1: DWORD) BOOL;
extern fn GetWindowContextHelpId(arg0: HWND) DWORD;
extern fn SetMenuContextHelpId(arg0: HMENU, arg1: DWORD) BOOL;
extern fn GetMenuContextHelpId(arg0: HMENU) DWORD;
extern fn MessageBoxA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT) c_int;
extern fn MessageBoxW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT) c_int;
extern fn MessageBoxExA(hWnd: HWND, lpText: LPCSTR, lpCaption: LPCSTR, uType: UINT, wLanguageId: WORD) c_int;
extern fn MessageBoxExW(hWnd: HWND, lpText: LPCWSTR, lpCaption: LPCWSTR, uType: UINT, wLanguageId: WORD) c_int;
pub const MSGBOXCALLBACK = ?fn (LPHELPINFO) callconv(std.os.windows.WINAPI) void;
pub const struct_tagMSGBOXPARAMSA = extern struct {
    cbSize: UINT,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: LPCSTR,
    lpszCaption: LPCSTR,
    dwStyle: DWORD,
    lpszIcon: LPCSTR,
    dwContextHelpId: DWORD_PTR,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: DWORD,
};
pub const MSGBOXPARAMSA = struct_tagMSGBOXPARAMSA;
pub const PMSGBOXPARAMSA = [*c]struct_tagMSGBOXPARAMSA;
pub const LPMSGBOXPARAMSA = [*c]struct_tagMSGBOXPARAMSA;
pub const struct_tagMSGBOXPARAMSW = extern struct {
    cbSize: UINT,
    hwndOwner: HWND,
    hInstance: HINSTANCE,
    lpszText: LPCWSTR,
    lpszCaption: LPCWSTR,
    dwStyle: DWORD,
    lpszIcon: LPCWSTR,
    dwContextHelpId: DWORD_PTR,
    lpfnMsgBoxCallback: MSGBOXCALLBACK,
    dwLanguageId: DWORD,
};
pub const MSGBOXPARAMSW = struct_tagMSGBOXPARAMSW;
pub const PMSGBOXPARAMSW = [*c]struct_tagMSGBOXPARAMSW;
pub const LPMSGBOXPARAMSW = [*c]struct_tagMSGBOXPARAMSW;
pub const MSGBOXPARAMS = MSGBOXPARAMSA;
pub const PMSGBOXPARAMS = PMSGBOXPARAMSA;
pub const LPMSGBOXPARAMS = LPMSGBOXPARAMSA;
extern fn MessageBoxIndirectA(lpmbp: [*c]const MSGBOXPARAMSA) c_int;
extern fn MessageBoxIndirectW(lpmbp: [*c]const MSGBOXPARAMSW) c_int;
extern fn MessageBeep(uType: UINT) BOOL;
extern fn ShowCursor(bShow: BOOL) c_int;
extern fn SetCursorPos(X: c_int, Y: c_int) BOOL;
extern fn SetPhysicalCursorPos(X: c_int, Y: c_int) BOOL;
extern fn SetCursor(hCursor: HCURSOR) HCURSOR;
extern fn GetCursorPos(lpPoint: LPPOINT) BOOL;
extern fn GetPhysicalCursorPos(lpPoint: LPPOINT) BOOL;
extern fn GetClipCursor(lpRect: LPRECT) BOOL;
extern fn GetCursor() HCURSOR;
extern fn CreateCaret(hWnd: HWND, hBitmap: HBITMAP, nWidth: c_int, nHeight: c_int) BOOL;
extern fn GetCaretBlinkTime() UINT;
extern fn SetCaretBlinkTime(uMSeconds: UINT) BOOL;
extern fn DestroyCaret() BOOL;
extern fn HideCaret(hWnd: HWND) BOOL;
extern fn ShowCaret(hWnd: HWND) BOOL;
extern fn SetCaretPos(X: c_int, Y: c_int) BOOL;
extern fn GetCaretPos(lpPoint: LPPOINT) BOOL;
extern fn ClientToScreen(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn ScreenToClient(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn LogicalToPhysicalPoint(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn PhysicalToLogicalPoint(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn LogicalToPhysicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn PhysicalToLogicalPointForPerMonitorDPI(hWnd: HWND, lpPoint: LPPOINT) BOOL;
extern fn MapWindowPoints(hWndFrom: HWND, hWndTo: HWND, lpPoints: LPPOINT, cPoints: UINT) c_int;
extern fn WindowFromPoint(Point: POINT) HWND;
extern fn WindowFromPhysicalPoint(Point: POINT) HWND;
extern fn ChildWindowFromPoint(hWndParent: HWND, Point: POINT) HWND;
extern fn ClipCursor(lpRect: [*c]const RECT) BOOL;
extern fn ChildWindowFromPointEx(hwnd: HWND, pt: POINT, flags: UINT) HWND;
extern fn GetSysColor(nIndex: c_int) DWORD;
extern fn GetSysColorBrush(nIndex: c_int) HBRUSH;
extern fn SetSysColors(cElements: c_int, lpaElements: [*c]const INT, lpaRgbValues: [*c]const COLORREF) BOOL;
extern fn DrawFocusRect(hDC: HDC, lprc: [*c]const RECT) BOOL;
extern fn FillRect(hDC: HDC, lprc: [*c]const RECT, hbr: HBRUSH) c_int;
extern fn FrameRect(hDC: HDC, lprc: [*c]const RECT, hbr: HBRUSH) c_int;
extern fn InvertRect(hDC: HDC, lprc: [*c]const RECT) BOOL;
extern fn SetRect(lprc: LPRECT, xLeft: c_int, yTop: c_int, xRight: c_int, yBottom: c_int) BOOL;
extern fn SetRectEmpty(lprc: LPRECT) BOOL;
extern fn CopyRect(lprcDst: LPRECT, lprcSrc: [*c]const RECT) BOOL;
extern fn InflateRect(lprc: LPRECT, dx: c_int, dy: c_int) BOOL;
extern fn IntersectRect(lprcDst: LPRECT, lprcSrc1: [*c]const RECT, lprcSrc2: [*c]const RECT) BOOL;
extern fn UnionRect(lprcDst: LPRECT, lprcSrc1: [*c]const RECT, lprcSrc2: [*c]const RECT) BOOL;
extern fn SubtractRect(lprcDst: LPRECT, lprcSrc1: [*c]const RECT, lprcSrc2: [*c]const RECT) BOOL;
extern fn OffsetRect(lprc: LPRECT, dx: c_int, dy: c_int) BOOL;
extern fn IsRectEmpty(lprc: [*c]const RECT) BOOL;
extern fn EqualRect(lprc1: [*c]const RECT, lprc2: [*c]const RECT) BOOL;
extern fn PtInRect(lprc: [*c]const RECT, pt: POINT) BOOL;
extern fn GetWindowWord(hWnd: HWND, nIndex: c_int) WORD;
extern fn SetWindowWord(hWnd: HWND, nIndex: c_int, wNewWord: WORD) WORD;
extern fn GetWindowLongA(hWnd: HWND, nIndex: c_int) LONG;
extern fn GetWindowLongW(hWnd: HWND, nIndex: c_int) LONG;
extern fn SetWindowLongA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) LONG;
extern fn SetWindowLongW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) LONG;
extern fn GetWindowLongPtrA(hWnd: HWND, nIndex: c_int) LONG_PTR;
extern fn GetWindowLongPtrW(hWnd: HWND, nIndex: c_int) LONG_PTR;
extern fn SetWindowLongPtrA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) LONG_PTR;
extern fn SetWindowLongPtrW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) LONG_PTR;
extern fn GetClassWord(hWnd: HWND, nIndex: c_int) WORD;
extern fn SetClassWord(hWnd: HWND, nIndex: c_int, wNewWord: WORD) WORD;
extern fn GetClassLongA(hWnd: HWND, nIndex: c_int) DWORD;
extern fn GetClassLongW(hWnd: HWND, nIndex: c_int) DWORD;
extern fn SetClassLongA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) DWORD;
extern fn SetClassLongW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG) DWORD;
extern fn GetClassLongPtrA(hWnd: HWND, nIndex: c_int) ULONG_PTR;
extern fn GetClassLongPtrW(hWnd: HWND, nIndex: c_int) ULONG_PTR;
extern fn SetClassLongPtrA(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) ULONG_PTR;
extern fn SetClassLongPtrW(hWnd: HWND, nIndex: c_int, dwNewLong: LONG_PTR) ULONG_PTR;
extern fn GetProcessDefaultLayout(pdwDefaultLayout: [*c]DWORD) BOOL;
extern fn SetProcessDefaultLayout(dwDefaultLayout: DWORD) BOOL;
extern fn GetDesktopWindow() HWND;
extern fn GetParent(hWnd: HWND) HWND;
extern fn SetParent(hWndChild: HWND, hWndNewParent: HWND) HWND;
extern fn EnumChildWindows(hWndParent: HWND, lpEnumFunc: WNDENUMPROC, lParam: LPARAM) BOOL;
extern fn FindWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR) HWND;
extern fn FindWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR) HWND;
extern fn FindWindowExA(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCSTR, lpszWindow: LPCSTR) HWND;
extern fn FindWindowExW(hWndParent: HWND, hWndChildAfter: HWND, lpszClass: LPCWSTR, lpszWindow: LPCWSTR) HWND;
extern fn GetShellWindow() HWND;
extern fn RegisterShellHookWindow(hwnd: HWND) BOOL;
extern fn DeregisterShellHookWindow(hwnd: HWND) BOOL;
extern fn EnumWindows(lpEnumFunc: WNDENUMPROC, lParam: LPARAM) BOOL;
extern fn EnumThreadWindows(dwThreadId: DWORD, lpfn: WNDENUMPROC, lParam: LPARAM) BOOL;
extern fn GetClassNameA(hWnd: HWND, lpClassName: LPSTR, nMaxCount: c_int) c_int;
extern fn GetClassNameW(hWnd: HWND, lpClassName: LPWSTR, nMaxCount: c_int) c_int;
extern fn GetTopWindow(hWnd: HWND) HWND;
extern fn GetWindowThreadProcessId(hWnd: HWND, lpdwProcessId: LPDWORD) DWORD;
extern fn IsGUIThread(bConvert: BOOL) BOOL;
extern fn GetLastActivePopup(hWnd: HWND) HWND;
extern fn GetWindow(hWnd: HWND, uCmd: UINT) HWND;
extern fn SetWindowsHookA(nFilterType: c_int, pfnFilterProc: HOOKPROC) HHOOK;
extern fn SetWindowsHookW(nFilterType: c_int, pfnFilterProc: HOOKPROC) HHOOK;
extern fn UnhookWindowsHook(nCode: c_int, pfnFilterProc: HOOKPROC) BOOL;
extern fn SetWindowsHookExA(idHook: c_int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD) HHOOK;
extern fn SetWindowsHookExW(idHook: c_int, lpfn: HOOKPROC, hmod: HINSTANCE, dwThreadId: DWORD) HHOOK;
extern fn UnhookWindowsHookEx(hhk: HHOOK) BOOL;
extern fn CallNextHookEx(hhk: HHOOK, nCode: c_int, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn CheckMenuRadioItem(hmenu: HMENU, first: UINT, last: UINT, check: UINT, flags: UINT) BOOL;
pub const MENUITEMTEMPLATEHEADER = extern struct {
    versionNumber: WORD,
    offset: WORD,
};
pub const PMENUITEMTEMPLATEHEADER = [*c]extern struct {
    versionNumber: WORD,
    offset: WORD,
};
pub const MENUITEMTEMPLATE = extern struct {
    mtOption: WORD,
    mtID: WORD,
    mtString: [1]WCHAR,
};
pub const PMENUITEMTEMPLATE = [*c]extern struct {
    mtOption: WORD,
    mtID: WORD,
    mtString: [1]WCHAR,
};
extern fn LoadBitmapA(hInstance: HINSTANCE, lpBitmapName: LPCSTR) HBITMAP;
extern fn LoadBitmapW(hInstance: HINSTANCE, lpBitmapName: LPCWSTR) HBITMAP;
extern fn LoadCursorA(hInstance: HINSTANCE, lpCursorName: LPCSTR) HCURSOR;
extern fn LoadCursorW(hInstance: HINSTANCE, lpCursorName: LPCWSTR) HCURSOR;
extern fn LoadCursorFromFileA(lpFileName: LPCSTR) HCURSOR;
extern fn LoadCursorFromFileW(lpFileName: LPCWSTR) HCURSOR;
extern fn CreateCursor(hInst: HINSTANCE, xHotSpot: c_int, yHotSpot: c_int, nWidth: c_int, nHeight: c_int, pvANDPlane: ?*const c_void, pvXORPlane: ?*const c_void) HCURSOR;
extern fn DestroyCursor(hCursor: HCURSOR) BOOL;
extern fn SetSystemCursor(hcur: HCURSOR, id: DWORD) BOOL;
pub const struct__ICONINFO = extern struct {
    fIcon: BOOL,
    xHotspot: DWORD,
    yHotspot: DWORD,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
};
pub const ICONINFO = struct__ICONINFO;
pub const PICONINFO = [*c]ICONINFO;
extern fn LoadIconA(hInstance: HINSTANCE, lpIconName: LPCSTR) HICON;
extern fn LoadIconW(hInstance: HINSTANCE, lpIconName: LPCWSTR) HICON;
extern fn PrivateExtractIconsA(szFileName: LPCSTR, nIconIndex: c_int, cxIcon: c_int, cyIcon: c_int, phicon: [*c]HICON, piconid: [*c]UINT, nIcons: UINT, flags: UINT) UINT;
extern fn PrivateExtractIconsW(szFileName: LPCWSTR, nIconIndex: c_int, cxIcon: c_int, cyIcon: c_int, phicon: [*c]HICON, piconid: [*c]UINT, nIcons: UINT, flags: UINT) UINT;
extern fn CreateIcon(hInstance: HINSTANCE, nWidth: c_int, nHeight: c_int, cPlanes: BYTE, cBitsPixel: BYTE, lpbANDbits: [*c]const BYTE, lpbXORbits: [*c]const BYTE) HICON;
extern fn DestroyIcon(hIcon: HICON) BOOL;
extern fn LookupIconIdFromDirectory(presbits: PBYTE, fIcon: BOOL) c_int;
extern fn LookupIconIdFromDirectoryEx(presbits: PBYTE, fIcon: BOOL, cxDesired: c_int, cyDesired: c_int, Flags: UINT) c_int;
extern fn CreateIconFromResource(presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD) HICON;
extern fn CreateIconFromResourceEx(presbits: PBYTE, dwResSize: DWORD, fIcon: BOOL, dwVer: DWORD, cxDesired: c_int, cyDesired: c_int, Flags: UINT) HICON;
pub const struct_tagCURSORSHAPE = extern struct {
    xHotSpot: c_int,
    yHotSpot: c_int,
    cx: c_int,
    cy: c_int,
    cbWidth: c_int,
    Planes: BYTE,
    BitsPixel: BYTE,
};
pub const CURSORSHAPE = struct_tagCURSORSHAPE;
pub const LPCURSORSHAPE = [*c]struct_tagCURSORSHAPE;
extern fn LoadImageA(hInst: HINSTANCE, name: LPCSTR, type_0: UINT, cx: c_int, cy: c_int, fuLoad: UINT) HANDLE;
extern fn LoadImageW(hInst: HINSTANCE, name: LPCWSTR, type_0: UINT, cx: c_int, cy: c_int, fuLoad: UINT) HANDLE;
extern fn CopyImage(h: HANDLE, type_0: UINT, cx: c_int, cy: c_int, flags: UINT) HANDLE;
extern fn DrawIconEx(hdc: HDC, xLeft: c_int, yTop: c_int, hIcon: HICON, cxWidth: c_int, cyWidth: c_int, istepIfAniCur: UINT, hbrFlickerFreeDraw: HBRUSH, diFlags: UINT) BOOL;
extern fn CreateIconIndirect(piconinfo: PICONINFO) HICON;
extern fn CopyIcon(hIcon: HICON) HICON;
extern fn GetIconInfo(hIcon: HICON, piconinfo: PICONINFO) BOOL;
pub const struct__ICONINFOEXA = extern struct {
    cbSize: DWORD,
    fIcon: BOOL,
    xHotspot: DWORD,
    yHotspot: DWORD,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: WORD,
    szModName: [260]CHAR,
    szResName: [260]CHAR,
};
pub const ICONINFOEXA = struct__ICONINFOEXA;
pub const PICONINFOEXA = [*c]struct__ICONINFOEXA;
pub const struct__ICONINFOEXW = extern struct {
    cbSize: DWORD,
    fIcon: BOOL,
    xHotspot: DWORD,
    yHotspot: DWORD,
    hbmMask: HBITMAP,
    hbmColor: HBITMAP,
    wResID: WORD,
    szModName: [260]WCHAR,
    szResName: [260]WCHAR,
};
pub const ICONINFOEXW = struct__ICONINFOEXW;
pub const PICONINFOEXW = [*c]struct__ICONINFOEXW;
pub const ICONINFOEX = ICONINFOEXA;
pub const PICONINFOEX = PICONINFOEXA;
extern fn GetIconInfoExA(hicon: HICON, piconinfo: PICONINFOEXA) BOOL;
extern fn GetIconInfoExW(hicon: HICON, piconinfo: PICONINFOEXW) BOOL;
pub const EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0;
pub const EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1;
pub const EDIT_CONTROL_FEATURE = extern enum {
    EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
    EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1,
};
extern fn IsDialogMessageA(hDlg: HWND, lpMsg: LPMSG) BOOL;
extern fn IsDialogMessageW(hDlg: HWND, lpMsg: LPMSG) BOOL;
extern fn MapDialogRect(hDlg: HWND, lpRect: LPRECT) BOOL;
extern fn DlgDirListA(hDlg: HWND, lpPathSpec: LPSTR, nIDListBox: c_int, nIDStaticPath: c_int, uFileType: UINT) c_int;
extern fn DlgDirListW(hDlg: HWND, lpPathSpec: LPWSTR, nIDListBox: c_int, nIDStaticPath: c_int, uFileType: UINT) c_int;
extern fn DlgDirSelectExA(hwndDlg: HWND, lpString: LPSTR, chCount: c_int, idListBox: c_int) BOOL;
extern fn DlgDirSelectExW(hwndDlg: HWND, lpString: LPWSTR, chCount: c_int, idListBox: c_int) BOOL;
extern fn DlgDirListComboBoxA(hDlg: HWND, lpPathSpec: LPSTR, nIDComboBox: c_int, nIDStaticPath: c_int, uFiletype: UINT) c_int;
extern fn DlgDirListComboBoxW(hDlg: HWND, lpPathSpec: LPWSTR, nIDComboBox: c_int, nIDStaticPath: c_int, uFiletype: UINT) c_int;
extern fn DlgDirSelectComboBoxExA(hwndDlg: HWND, lpString: LPSTR, cchOut: c_int, idComboBox: c_int) BOOL;
extern fn DlgDirSelectComboBoxExW(hwndDlg: HWND, lpString: LPWSTR, cchOut: c_int, idComboBox: c_int) BOOL;
pub const struct_tagSCROLLINFO = extern struct {
    cbSize: UINT,
    fMask: UINT,
    nMin: c_int,
    nMax: c_int,
    nPage: UINT,
    nPos: c_int,
    nTrackPos: c_int,
};
pub const SCROLLINFO = struct_tagSCROLLINFO;
pub const LPSCROLLINFO = [*c]struct_tagSCROLLINFO;
pub const LPCSCROLLINFO = [*c]const SCROLLINFO;
extern fn SetScrollInfo(hwnd: HWND, nBar: c_int, lpsi: LPCSCROLLINFO, redraw: BOOL) c_int;
extern fn GetScrollInfo(hwnd: HWND, nBar: c_int, lpsi: LPSCROLLINFO) BOOL;
pub const struct_tagMDICREATESTRUCTA = extern struct {
    szClass: LPCSTR,
    szTitle: LPCSTR,
    hOwner: HANDLE,
    x: c_int,
    y: c_int,
    cx: c_int,
    cy: c_int,
    style: DWORD,
    lParam: LPARAM,
};
pub const MDICREATESTRUCTA = struct_tagMDICREATESTRUCTA;
pub const LPMDICREATESTRUCTA = [*c]struct_tagMDICREATESTRUCTA;
pub const struct_tagMDICREATESTRUCTW = extern struct {
    szClass: LPCWSTR,
    szTitle: LPCWSTR,
    hOwner: HANDLE,
    x: c_int,
    y: c_int,
    cx: c_int,
    cy: c_int,
    style: DWORD,
    lParam: LPARAM,
};
pub const MDICREATESTRUCTW = struct_tagMDICREATESTRUCTW;
pub const LPMDICREATESTRUCTW = [*c]struct_tagMDICREATESTRUCTW;
pub const MDICREATESTRUCT = MDICREATESTRUCTA;
pub const LPMDICREATESTRUCT = LPMDICREATESTRUCTA;
pub const struct_tagCLIENTCREATESTRUCT = extern struct {
    hWindowMenu: HANDLE,
    idFirstChild: UINT,
};
pub const CLIENTCREATESTRUCT = struct_tagCLIENTCREATESTRUCT;
pub const LPCLIENTCREATESTRUCT = [*c]struct_tagCLIENTCREATESTRUCT;
extern fn DefFrameProcA(hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn DefFrameProcW(hWnd: HWND, hWndMDIClient: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn DefMDIChildProcA(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn DefMDIChildProcW(hWnd: HWND, uMsg: UINT, wParam: WPARAM, lParam: LPARAM) LRESULT;
extern fn TranslateMDISysAccel(hWndClient: HWND, lpMsg: LPMSG) BOOL;
extern fn ArrangeIconicWindows(hWnd: HWND) UINT;
extern fn CreateMDIWindowA(lpClassName: LPCSTR, lpWindowName: LPCSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM) HWND;
extern fn CreateMDIWindowW(lpClassName: LPCWSTR, lpWindowName: LPCWSTR, dwStyle: DWORD, X: c_int, Y: c_int, nWidth: c_int, nHeight: c_int, hWndParent: HWND, hInstance: HINSTANCE, lParam: LPARAM) HWND;
extern fn TileWindows(hwndParent: HWND, wHow: UINT, lpRect: [*c]const RECT, cKids: UINT, lpKids: [*c]const HWND) WORD;
extern fn CascadeWindows(hwndParent: HWND, wHow: UINT, lpRect: [*c]const RECT, cKids: UINT, lpKids: [*c]const HWND) WORD;
pub const HELPPOLY = DWORD;
pub const struct_tagMULTIKEYHELPA = extern struct {
    mkSize: DWORD,
    mkKeylist: CHAR,
    szKeyphrase: [1]CHAR,
};
pub const MULTIKEYHELPA = struct_tagMULTIKEYHELPA;
pub const PMULTIKEYHELPA = [*c]struct_tagMULTIKEYHELPA;
pub const LPMULTIKEYHELPA = [*c]struct_tagMULTIKEYHELPA;
pub const struct_tagMULTIKEYHELPW = extern struct {
    mkSize: DWORD,
    mkKeylist: WCHAR,
    szKeyphrase: [1]WCHAR,
};
pub const MULTIKEYHELPW = struct_tagMULTIKEYHELPW;
pub const PMULTIKEYHELPW = [*c]struct_tagMULTIKEYHELPW;
pub const LPMULTIKEYHELPW = [*c]struct_tagMULTIKEYHELPW;
pub const MULTIKEYHELP = MULTIKEYHELPA;
pub const PMULTIKEYHELP = PMULTIKEYHELPA;
pub const LPMULTIKEYHELP = LPMULTIKEYHELPA;
pub const struct_tagHELPWININFOA = extern struct {
    wStructSize: c_int,
    x: c_int,
    y: c_int,
    dx: c_int,
    dy: c_int,
    wMax: c_int,
    rgchMember: [2]CHAR,
};
pub const HELPWININFOA = struct_tagHELPWININFOA;
pub const PHELPWININFOA = [*c]struct_tagHELPWININFOA;
pub const LPHELPWININFOA = [*c]struct_tagHELPWININFOA;
pub const struct_tagHELPWININFOW = extern struct {
    wStructSize: c_int,
    x: c_int,
    y: c_int,
    dx: c_int,
    dy: c_int,
    wMax: c_int,
    rgchMember: [2]WCHAR,
};
pub const HELPWININFOW = struct_tagHELPWININFOW;
pub const PHELPWININFOW = [*c]struct_tagHELPWININFOW;
pub const LPHELPWININFOW = [*c]struct_tagHELPWININFOW;
pub const HELPWININFO = HELPWININFOA;
pub const PHELPWININFO = PHELPWININFOA;
pub const LPHELPWININFO = LPHELPWININFOA;
extern fn WinHelpA(hWndMain: HWND, lpszHelp: LPCSTR, uCommand: UINT, dwData: ULONG_PTR) BOOL;
extern fn WinHelpW(hWndMain: HWND, lpszHelp: LPCWSTR, uCommand: UINT, dwData: ULONG_PTR) BOOL;
extern fn GetGuiResources(hProcess: HANDLE, uiFlags: DWORD) DWORD;
pub const struct_tagTouchPredictionParameters = extern struct {
    cbSize: UINT,
    dwLatency: UINT,
    dwSampleTime: UINT,
    bUseHWTimeStamp: UINT,
};
pub const TOUCHPREDICTIONPARAMETERS = struct_tagTouchPredictionParameters;
pub const PTOUCHPREDICTIONPARAMETERS = [*c]struct_tagTouchPredictionParameters;
pub const HANDEDNESS_LEFT = enum_tagHANDEDNESS.HANDEDNESS_LEFT;
pub const HANDEDNESS_RIGHT = enum_tagHANDEDNESS.HANDEDNESS_RIGHT;
pub const enum_tagHANDEDNESS = extern enum {
    HANDEDNESS_LEFT = 0,
    HANDEDNESS_RIGHT = 1,
};
pub const HANDEDNESS = enum_tagHANDEDNESS;
pub const PHANDEDNESS = [*c]enum_tagHANDEDNESS;
pub const struct_tagNONCLIENTMETRICSA = extern struct {
    cbSize: UINT,
    iBorderWidth: c_int,
    iScrollWidth: c_int,
    iScrollHeight: c_int,
    iCaptionWidth: c_int,
    iCaptionHeight: c_int,
    lfCaptionFont: LOGFONTA,
    iSmCaptionWidth: c_int,
    iSmCaptionHeight: c_int,
    lfSmCaptionFont: LOGFONTA,
    iMenuWidth: c_int,
    iMenuHeight: c_int,
    lfMenuFont: LOGFONTA,
    lfStatusFont: LOGFONTA,
    lfMessageFont: LOGFONTA,
    iPaddedBorderWidth: c_int,
};
pub const NONCLIENTMETRICSA = struct_tagNONCLIENTMETRICSA;
pub const PNONCLIENTMETRICSA = [*c]struct_tagNONCLIENTMETRICSA;
pub const LPNONCLIENTMETRICSA = [*c]struct_tagNONCLIENTMETRICSA;
pub const struct_tagNONCLIENTMETRICSW = extern struct {
    cbSize: UINT,
    iBorderWidth: c_int,
    iScrollWidth: c_int,
    iScrollHeight: c_int,
    iCaptionWidth: c_int,
    iCaptionHeight: c_int,
    lfCaptionFont: LOGFONTW,
    iSmCaptionWidth: c_int,
    iSmCaptionHeight: c_int,
    lfSmCaptionFont: LOGFONTW,
    iMenuWidth: c_int,
    iMenuHeight: c_int,
    lfMenuFont: LOGFONTW,
    lfStatusFont: LOGFONTW,
    lfMessageFont: LOGFONTW,
    iPaddedBorderWidth: c_int,
};
pub const NONCLIENTMETRICSW = struct_tagNONCLIENTMETRICSW;
pub const PNONCLIENTMETRICSW = [*c]struct_tagNONCLIENTMETRICSW;
pub const LPNONCLIENTMETRICSW = [*c]struct_tagNONCLIENTMETRICSW;
pub const NONCLIENTMETRICS = NONCLIENTMETRICSA;
pub const PNONCLIENTMETRICS = PNONCLIENTMETRICSA;
pub const LPNONCLIENTMETRICS = LPNONCLIENTMETRICSA;
pub const struct_tagMINIMIZEDMETRICS = extern struct {
    cbSize: UINT,
    iWidth: c_int,
    iHorzGap: c_int,
    iVertGap: c_int,
    iArrange: c_int,
};
pub const MINIMIZEDMETRICS = struct_tagMINIMIZEDMETRICS;
pub const PMINIMIZEDMETRICS = [*c]struct_tagMINIMIZEDMETRICS;
pub const LPMINIMIZEDMETRICS = [*c]struct_tagMINIMIZEDMETRICS;
pub const struct_tagICONMETRICSA = extern struct {
    cbSize: UINT,
    iHorzSpacing: c_int,
    iVertSpacing: c_int,
    iTitleWrap: c_int,
    lfFont: LOGFONTA,
};
pub const ICONMETRICSA = struct_tagICONMETRICSA;
pub const PICONMETRICSA = [*c]struct_tagICONMETRICSA;
pub const LPICONMETRICSA = [*c]struct_tagICONMETRICSA;
pub const struct_tagICONMETRICSW = extern struct {
    cbSize: UINT,
    iHorzSpacing: c_int,
    iVertSpacing: c_int,
    iTitleWrap: c_int,
    lfFont: LOGFONTW,
};
pub const ICONMETRICSW = struct_tagICONMETRICSW;
pub const PICONMETRICSW = [*c]struct_tagICONMETRICSW;
pub const LPICONMETRICSW = [*c]struct_tagICONMETRICSW;
pub const ICONMETRICS = ICONMETRICSA;
pub const PICONMETRICS = PICONMETRICSA;
pub const LPICONMETRICS = LPICONMETRICSA;
pub const struct_tagANIMATIONINFO = extern struct {
    cbSize: UINT,
    iMinAnimate: c_int,
};
pub const ANIMATIONINFO = struct_tagANIMATIONINFO;
pub const LPANIMATIONINFO = [*c]struct_tagANIMATIONINFO;
pub const struct_tagSERIALKEYSA = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    lpszActivePort: LPSTR,
    lpszPort: LPSTR,
    iBaudRate: UINT,
    iPortState: UINT,
    iActive: UINT,
};
pub const SERIALKEYSA = struct_tagSERIALKEYSA;
pub const LPSERIALKEYSA = [*c]struct_tagSERIALKEYSA;
pub const struct_tagSERIALKEYSW = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    lpszActivePort: LPWSTR,
    lpszPort: LPWSTR,
    iBaudRate: UINT,
    iPortState: UINT,
    iActive: UINT,
};
pub const SERIALKEYSW = struct_tagSERIALKEYSW;
pub const LPSERIALKEYSW = [*c]struct_tagSERIALKEYSW;
pub const SERIALKEYS = SERIALKEYSA;
pub const LPSERIALKEYS = LPSERIALKEYSA;
pub const struct_tagHIGHCONTRASTA = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    lpszDefaultScheme: LPSTR,
};
pub const HIGHCONTRASTA = struct_tagHIGHCONTRASTA;
pub const LPHIGHCONTRASTA = [*c]struct_tagHIGHCONTRASTA;
pub const struct_tagHIGHCONTRASTW = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    lpszDefaultScheme: LPWSTR,
};
pub const HIGHCONTRASTW = struct_tagHIGHCONTRASTW;
pub const LPHIGHCONTRASTW = [*c]struct_tagHIGHCONTRASTW;
pub const HIGHCONTRAST = HIGHCONTRASTA;
pub const LPHIGHCONTRAST = LPHIGHCONTRASTA;
pub const struct__VIDEOPARAMETERS = extern struct {
    Guid: GUID,
    dwOffset: ULONG,
    dwCommand: ULONG,
    dwFlags: ULONG,
    dwMode: ULONG,
    dwTVStandard: ULONG,
    dwAvailableModes: ULONG,
    dwAvailableTVStandard: ULONG,
    dwFlickerFilter: ULONG,
    dwOverScanX: ULONG,
    dwOverScanY: ULONG,
    dwMaxUnscaledX: ULONG,
    dwMaxUnscaledY: ULONG,
    dwPositionX: ULONG,
    dwPositionY: ULONG,
    dwBrightness: ULONG,
    dwContrast: ULONG,
    dwCPType: ULONG,
    dwCPCommand: ULONG,
    dwCPStandard: ULONG,
    dwCPKey: ULONG,
    bCP_APSTriggerBits: ULONG,
    bOEMCopyProtection: [256]UCHAR,
};
pub const VIDEOPARAMETERS = struct__VIDEOPARAMETERS;
pub const PVIDEOPARAMETERS = [*c]struct__VIDEOPARAMETERS;
pub const LPVIDEOPARAMETERS = [*c]struct__VIDEOPARAMETERS;
extern fn ChangeDisplaySettingsA(lpDevMode: [*c]DEVMODEA, dwFlags: DWORD) LONG;
extern fn ChangeDisplaySettingsW(lpDevMode: [*c]DEVMODEW, dwFlags: DWORD) LONG;
extern fn ChangeDisplaySettingsExA(lpszDeviceName: LPCSTR, lpDevMode: [*c]DEVMODEA, hwnd: HWND, dwflags: DWORD, lParam: LPVOID) LONG;
extern fn ChangeDisplaySettingsExW(lpszDeviceName: LPCWSTR, lpDevMode: [*c]DEVMODEW, hwnd: HWND, dwflags: DWORD, lParam: LPVOID) LONG;
extern fn EnumDisplaySettingsA(lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: [*c]DEVMODEA) BOOL;
extern fn EnumDisplaySettingsW(lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: [*c]DEVMODEW) BOOL;
extern fn EnumDisplaySettingsExA(lpszDeviceName: LPCSTR, iModeNum: DWORD, lpDevMode: [*c]DEVMODEA, dwFlags: DWORD) BOOL;
extern fn EnumDisplaySettingsExW(lpszDeviceName: LPCWSTR, iModeNum: DWORD, lpDevMode: [*c]DEVMODEW, dwFlags: DWORD) BOOL;
extern fn EnumDisplayDevicesA(lpDevice: LPCSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEA, dwFlags: DWORD) BOOL;
extern fn EnumDisplayDevicesW(lpDevice: LPCWSTR, iDevNum: DWORD, lpDisplayDevice: PDISPLAY_DEVICEW, dwFlags: DWORD) BOOL;
extern fn GetDisplayConfigBufferSizes(flags: UINT32, numPathArrayElements: [*c]UINT32, numModeInfoArrayElements: [*c]UINT32) LONG;
extern fn SetDisplayConfig(numPathArrayElements: UINT32, pathArray: [*c]DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: UINT32, modeInfoArray: [*c]DISPLAYCONFIG_MODE_INFO, flags: UINT32) LONG;
extern fn QueryDisplayConfig(flags: UINT32, numPathArrayElements: [*c]UINT32, pathArray: [*c]DISPLAYCONFIG_PATH_INFO, numModeInfoArrayElements: [*c]UINT32, modeInfoArray: [*c]DISPLAYCONFIG_MODE_INFO, currentTopologyId: [*c]DISPLAYCONFIG_TOPOLOGY_ID) LONG;
extern fn DisplayConfigGetDeviceInfo(requestPacket: [*c]DISPLAYCONFIG_DEVICE_INFO_HEADER) LONG;
extern fn DisplayConfigSetDeviceInfo(setPacket: [*c]DISPLAYCONFIG_DEVICE_INFO_HEADER) LONG;
extern fn SystemParametersInfoA(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT) BOOL;
extern fn SystemParametersInfoW(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT) BOOL;
extern fn SystemParametersInfoForDpi(uiAction: UINT, uiParam: UINT, pvParam: PVOID, fWinIni: UINT, dpi: UINT) BOOL;
pub const struct_tagFILTERKEYS = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    iWaitMSec: DWORD,
    iDelayMSec: DWORD,
    iRepeatMSec: DWORD,
    iBounceMSec: DWORD,
};
pub const FILTERKEYS = struct_tagFILTERKEYS;
pub const LPFILTERKEYS = [*c]struct_tagFILTERKEYS;
pub const struct_tagSTICKYKEYS = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
};
pub const STICKYKEYS = struct_tagSTICKYKEYS;
pub const LPSTICKYKEYS = [*c]struct_tagSTICKYKEYS;
pub const struct_tagMOUSEKEYS = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    iMaxSpeed: DWORD,
    iTimeToMaxSpeed: DWORD,
    iCtrlSpeed: DWORD,
    dwReserved1: DWORD,
    dwReserved2: DWORD,
};
pub const MOUSEKEYS = struct_tagMOUSEKEYS;
pub const LPMOUSEKEYS = [*c]struct_tagMOUSEKEYS;
pub const struct_tagACCESSTIMEOUT = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    iTimeOutMSec: DWORD,
};
pub const ACCESSTIMEOUT = struct_tagACCESSTIMEOUT;
pub const LPACCESSTIMEOUT = [*c]struct_tagACCESSTIMEOUT;
pub const struct_tagSOUNDSENTRYA = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    iFSTextEffect: DWORD,
    iFSTextEffectMSec: DWORD,
    iFSTextEffectColorBits: DWORD,
    iFSGrafEffect: DWORD,
    iFSGrafEffectMSec: DWORD,
    iFSGrafEffectColor: DWORD,
    iWindowsEffect: DWORD,
    iWindowsEffectMSec: DWORD,
    lpszWindowsEffectDLL: LPSTR,
    iWindowsEffectOrdinal: DWORD,
};
pub const SOUNDSENTRYA = struct_tagSOUNDSENTRYA;
pub const LPSOUNDSENTRYA = [*c]struct_tagSOUNDSENTRYA;
pub const struct_tagSOUNDSENTRYW = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    iFSTextEffect: DWORD,
    iFSTextEffectMSec: DWORD,
    iFSTextEffectColorBits: DWORD,
    iFSGrafEffect: DWORD,
    iFSGrafEffectMSec: DWORD,
    iFSGrafEffectColor: DWORD,
    iWindowsEffect: DWORD,
    iWindowsEffectMSec: DWORD,
    lpszWindowsEffectDLL: LPWSTR,
    iWindowsEffectOrdinal: DWORD,
};
pub const SOUNDSENTRYW = struct_tagSOUNDSENTRYW;
pub const LPSOUNDSENTRYW = [*c]struct_tagSOUNDSENTRYW;
pub const SOUNDSENTRY = SOUNDSENTRYA;
pub const LPSOUNDSENTRY = LPSOUNDSENTRYA;
extern fn SoundSentry() BOOL;
pub const struct_tagTOGGLEKEYS = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
};
pub const TOGGLEKEYS = struct_tagTOGGLEKEYS;
pub const LPTOGGLEKEYS = [*c]struct_tagTOGGLEKEYS;
pub const struct_tagAUDIODESCRIPTION = extern struct {
    cbSize: UINT,
    Enabled: BOOL,
    Locale: LCID,
};
pub const AUDIODESCRIPTION = struct_tagAUDIODESCRIPTION;
pub const LPAUDIODESCRIPTION = [*c]struct_tagAUDIODESCRIPTION;
extern fn SetDebugErrorLevel(dwLevel: DWORD) void;
extern fn SetLastErrorEx(dwErrCode: DWORD, dwType: DWORD) void;
extern fn InternalGetWindowText(hWnd: HWND, pString: LPWSTR, cchMaxCount: c_int) c_int;
extern fn CancelShutdown() BOOL;
extern fn MonitorFromPoint(pt: POINT, dwFlags: DWORD) HMONITOR;
extern fn MonitorFromRect(lprc: LPCRECT, dwFlags: DWORD) HMONITOR;
extern fn MonitorFromWindow(hwnd: HWND, dwFlags: DWORD) HMONITOR;
pub const struct_tagMONITORINFO = extern struct {
    cbSize: DWORD,
    rcMonitor: RECT,
    rcWork: RECT,
    dwFlags: DWORD,
};
pub const MONITORINFO = struct_tagMONITORINFO;
pub const LPMONITORINFO = [*c]struct_tagMONITORINFO;
pub const struct_tagMONITORINFOEXA = extern struct {
    @"": struct_tagMONITORINFO,
    szDevice: [32]CHAR,
};
pub const MONITORINFOEXA = struct_tagMONITORINFOEXA;
pub const LPMONITORINFOEXA = [*c]struct_tagMONITORINFOEXA;
pub const struct_tagMONITORINFOEXW = extern struct {
    @"": struct_tagMONITORINFO,
    szDevice: [32]WCHAR,
};
pub const MONITORINFOEXW = struct_tagMONITORINFOEXW;
pub const LPMONITORINFOEXW = [*c]struct_tagMONITORINFOEXW;
pub const MONITORINFOEX = MONITORINFOEXA;
pub const LPMONITORINFOEX = LPMONITORINFOEXA;
extern fn GetMonitorInfoA(hMonitor: HMONITOR, lpmi: LPMONITORINFO) BOOL;
extern fn GetMonitorInfoW(hMonitor: HMONITOR, lpmi: LPMONITORINFO) BOOL;
pub const MONITORENUMPROC = ?fn (HMONITOR, HDC, LPRECT, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn EnumDisplayMonitors(hdc: HDC, lprcClip: LPCRECT, lpfnEnum: MONITORENUMPROC, dwData: LPARAM) BOOL;
extern fn NotifyWinEvent(event: DWORD, hwnd: HWND, idObject: LONG, idChild: LONG) void;
pub const WINEVENTPROC = ?fn (HWINEVENTHOOK, DWORD, HWND, LONG, LONG, DWORD, DWORD) callconv(std.os.windows.WINAPI) void;
extern fn SetWinEventHook(eventMin: DWORD, eventMax: DWORD, hmodWinEventProc: HMODULE, pfnWinEventProc: WINEVENTPROC, idProcess: DWORD, idThread: DWORD, dwFlags: DWORD) HWINEVENTHOOK;
extern fn IsWinEventHookInstalled(event: DWORD) BOOL;
extern fn UnhookWinEvent(hWinEventHook: HWINEVENTHOOK) BOOL;
pub const struct_tagGUITHREADINFO = extern struct {
    cbSize: DWORD,
    flags: DWORD,
    hwndActive: HWND,
    hwndFocus: HWND,
    hwndCapture: HWND,
    hwndMenuOwner: HWND,
    hwndMoveSize: HWND,
    hwndCaret: HWND,
    rcCaret: RECT,
};
pub const GUITHREADINFO = struct_tagGUITHREADINFO;
pub const PGUITHREADINFO = [*c]struct_tagGUITHREADINFO;
pub const LPGUITHREADINFO = [*c]struct_tagGUITHREADINFO;
extern fn GetGUIThreadInfo(idThread: DWORD, pgui: PGUITHREADINFO) BOOL;
extern fn BlockInput(fBlockIt: BOOL) BOOL;
extern fn SetProcessDPIAware() BOOL;
extern fn IsProcessDPIAware() BOOL;
extern fn SetThreadDpiAwarenessContext(dpiContext: DPI_AWARENESS_CONTEXT) DPI_AWARENESS_CONTEXT;
extern fn GetThreadDpiAwarenessContext() DPI_AWARENESS_CONTEXT;
extern fn GetWindowDpiAwarenessContext(hwnd: HWND) DPI_AWARENESS_CONTEXT;
extern fn GetAwarenessFromDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) DPI_AWARENESS;
extern fn GetDpiFromDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) UINT;
extern fn AreDpiAwarenessContextsEqual(dpiContextA: DPI_AWARENESS_CONTEXT, dpiContextB: DPI_AWARENESS_CONTEXT) BOOL;
extern fn IsValidDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) BOOL;
extern fn GetDpiForWindow(hwnd: HWND) UINT;
extern fn GetDpiForSystem() UINT;
extern fn GetSystemDpiForProcess(hProcess: HANDLE) UINT;
extern fn EnableNonClientDpiScaling(hwnd: HWND) BOOL;
extern fn InheritWindowMonitor(hwnd: HWND, hwndInherit: HWND) BOOL;
extern fn SetProcessDpiAwarenessContext(value: DPI_AWARENESS_CONTEXT) BOOL;
extern fn GetDpiAwarenessContextForProcess(hProcess: HANDLE) DPI_AWARENESS_CONTEXT;
extern fn SetThreadDpiHostingBehavior(value: DPI_HOSTING_BEHAVIOR) DPI_HOSTING_BEHAVIOR;
extern fn GetThreadDpiHostingBehavior() DPI_HOSTING_BEHAVIOR;
extern fn GetWindowDpiHostingBehavior(hwnd: HWND) DPI_HOSTING_BEHAVIOR;
extern fn GetWindowModuleFileNameA(hwnd: HWND, pszFileName: LPSTR, cchFileNameMax: UINT) UINT;
extern fn GetWindowModuleFileNameW(hwnd: HWND, pszFileName: LPWSTR, cchFileNameMax: UINT) UINT;
pub const struct_tagCURSORINFO = extern struct {
    cbSize: DWORD,
    flags: DWORD,
    hCursor: HCURSOR,
    ptScreenPos: POINT,
};
pub const CURSORINFO = struct_tagCURSORINFO;
pub const PCURSORINFO = [*c]struct_tagCURSORINFO;
pub const LPCURSORINFO = [*c]struct_tagCURSORINFO;
extern fn GetCursorInfo(pci: PCURSORINFO) BOOL;
pub const struct_tagWINDOWINFO = extern struct {
    cbSize: DWORD,
    rcWindow: RECT,
    rcClient: RECT,
    dwStyle: DWORD,
    dwExStyle: DWORD,
    dwWindowStatus: DWORD,
    cxWindowBorders: UINT,
    cyWindowBorders: UINT,
    atomWindowType: ATOM,
    wCreatorVersion: WORD,
};
pub const WINDOWINFO = struct_tagWINDOWINFO;
pub const PWINDOWINFO = [*c]struct_tagWINDOWINFO;
pub const LPWINDOWINFO = [*c]struct_tagWINDOWINFO;
extern fn GetWindowInfo(hwnd: HWND, pwi: PWINDOWINFO) BOOL;
pub const struct_tagTITLEBARINFO = extern struct {
    cbSize: DWORD,
    rcTitleBar: RECT,
    rgstate: [6]DWORD,
};
pub const TITLEBARINFO = struct_tagTITLEBARINFO;
pub const PTITLEBARINFO = [*c]struct_tagTITLEBARINFO;
pub const LPTITLEBARINFO = [*c]struct_tagTITLEBARINFO;
extern fn GetTitleBarInfo(hwnd: HWND, pti: PTITLEBARINFO) BOOL;
pub const struct_tagTITLEBARINFOEX = extern struct {
    cbSize: DWORD,
    rcTitleBar: RECT,
    rgstate: [6]DWORD,
    rgrect: [6]RECT,
};
pub const TITLEBARINFOEX = struct_tagTITLEBARINFOEX;
pub const PTITLEBARINFOEX = [*c]struct_tagTITLEBARINFOEX;
pub const LPTITLEBARINFOEX = [*c]struct_tagTITLEBARINFOEX;
pub const struct_tagMENUBARINFO = opaque {};
pub const MENUBARINFO = struct_tagMENUBARINFO;
pub const PMENUBARINFO = ?*struct_tagMENUBARINFO;
pub const LPMENUBARINFO = ?*struct_tagMENUBARINFO;
extern fn GetMenuBarInfo(hwnd: HWND, idObject: LONG, idItem: LONG, pmbi: PMENUBARINFO) BOOL;
pub const struct_tagSCROLLBARINFO = extern struct {
    cbSize: DWORD,
    rcScrollBar: RECT,
    dxyLineButton: c_int,
    xyThumbTop: c_int,
    xyThumbBottom: c_int,
    reserved: c_int,
    rgstate: [6]DWORD,
};
pub const SCROLLBARINFO = struct_tagSCROLLBARINFO;
pub const PSCROLLBARINFO = [*c]struct_tagSCROLLBARINFO;
pub const LPSCROLLBARINFO = [*c]struct_tagSCROLLBARINFO;
extern fn GetScrollBarInfo(hwnd: HWND, idObject: LONG, psbi: PSCROLLBARINFO) BOOL;
pub const struct_tagCOMBOBOXINFO = extern struct {
    cbSize: DWORD,
    rcItem: RECT,
    rcButton: RECT,
    stateButton: DWORD,
    hwndCombo: HWND,
    hwndItem: HWND,
    hwndList: HWND,
};
pub const COMBOBOXINFO = struct_tagCOMBOBOXINFO;
pub const PCOMBOBOXINFO = [*c]struct_tagCOMBOBOXINFO;
pub const LPCOMBOBOXINFO = [*c]struct_tagCOMBOBOXINFO;
extern fn GetComboBoxInfo(hwndCombo: HWND, pcbi: PCOMBOBOXINFO) BOOL;
extern fn GetAncestor(hwnd: HWND, gaFlags: UINT) HWND;
extern fn RealChildWindowFromPoint(hwndParent: HWND, ptParentClientCoords: POINT) HWND;
extern fn RealGetWindowClassA(hwnd: HWND, ptszClassName: LPSTR, cchClassNameMax: UINT) UINT;
extern fn RealGetWindowClassW(hwnd: HWND, ptszClassName: LPWSTR, cchClassNameMax: UINT) UINT;
pub const struct_tagALTTABINFO = extern struct {
    cbSize: DWORD,
    cItems: c_int,
    cColumns: c_int,
    cRows: c_int,
    iColFocus: c_int,
    iRowFocus: c_int,
    cxItem: c_int,
    cyItem: c_int,
    ptStart: POINT,
};
pub const ALTTABINFO = struct_tagALTTABINFO;
pub const PALTTABINFO = [*c]struct_tagALTTABINFO;
pub const LPALTTABINFO = [*c]struct_tagALTTABINFO;
extern fn GetAltTabInfoA(hwnd: HWND, iItem: c_int, pati: PALTTABINFO, pszItemText: LPSTR, cchItemText: UINT) BOOL;
extern fn GetAltTabInfoW(hwnd: HWND, iItem: c_int, pati: PALTTABINFO, pszItemText: LPWSTR, cchItemText: UINT) BOOL;
extern fn GetListBoxInfo(hwnd: HWND) DWORD;
extern fn LockWorkStation() BOOL;
extern fn UserHandleGrantAccess(hUserHandle: HANDLE, hJob: HANDLE, bGrant: BOOL) BOOL;
pub const struct_HRAWINPUT__ = extern struct {
    unused: c_int,
};
pub const HRAWINPUT = [*c]struct_HRAWINPUT__;
pub const struct_tagRAWINPUTHEADER = extern struct {
    dwType: DWORD,
    dwSize: DWORD,
    hDevice: HANDLE,
    wParam: WPARAM,
};
pub const RAWINPUTHEADER = struct_tagRAWINPUTHEADER;
pub const PRAWINPUTHEADER = [*c]struct_tagRAWINPUTHEADER;
pub const LPRAWINPUTHEADER = [*c]struct_tagRAWINPUTHEADER;
pub const struct_tagRAWMOUSE = extern struct {
    usFlags: USHORT,
    @"": extern union {
        ulButtons: ULONG,
        @"": extern struct {
            usButtonFlags: USHORT,
            usButtonData: USHORT,
        },
    },
    ulRawButtons: ULONG,
    lLastX: LONG,
    lLastY: LONG,
    ulExtraInformation: ULONG,
};
pub const RAWMOUSE = struct_tagRAWMOUSE;
pub const PRAWMOUSE = [*c]struct_tagRAWMOUSE;
pub const LPRAWMOUSE = [*c]struct_tagRAWMOUSE;
pub const struct_tagRAWKEYBOARD = extern struct {
    MakeCode: USHORT,
    Flags: USHORT,
    Reserved: USHORT,
    VKey: USHORT,
    Message: UINT,
    ExtraInformation: ULONG,
};
pub const RAWKEYBOARD = struct_tagRAWKEYBOARD;
pub const PRAWKEYBOARD = [*c]struct_tagRAWKEYBOARD;
pub const LPRAWKEYBOARD = [*c]struct_tagRAWKEYBOARD;
pub const struct_tagRAWHID = extern struct {
    dwSizeHid: DWORD,
    dwCount: DWORD,
    bRawData: [1]BYTE,
};
pub const RAWHID = struct_tagRAWHID;
pub const PRAWHID = [*c]struct_tagRAWHID;
pub const LPRAWHID = [*c]struct_tagRAWHID;
pub const struct_tagRAWINPUT = extern struct {
    header: RAWINPUTHEADER,
    data: extern union {
        mouse: RAWMOUSE,
        keyboard: RAWKEYBOARD,
        hid: RAWHID,
    },
};
pub const RAWINPUT = struct_tagRAWINPUT;
pub const PRAWINPUT = [*c]struct_tagRAWINPUT;
pub const LPRAWINPUT = [*c]struct_tagRAWINPUT;
extern fn GetRawInputData(hRawInput: HRAWINPUT, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT, cbSizeHeader: UINT) UINT;
pub const struct_tagRID_DEVICE_INFO_MOUSE = extern struct {
    dwId: DWORD,
    dwNumberOfButtons: DWORD,
    dwSampleRate: DWORD,
    fHasHorizontalWheel: BOOL,
};
pub const RID_DEVICE_INFO_MOUSE = struct_tagRID_DEVICE_INFO_MOUSE;
pub const PRID_DEVICE_INFO_MOUSE = [*c]struct_tagRID_DEVICE_INFO_MOUSE;
pub const struct_tagRID_DEVICE_INFO_KEYBOARD = extern struct {
    dwType: DWORD,
    dwSubType: DWORD,
    dwKeyboardMode: DWORD,
    dwNumberOfFunctionKeys: DWORD,
    dwNumberOfIndicators: DWORD,
    dwNumberOfKeysTotal: DWORD,
};
pub const RID_DEVICE_INFO_KEYBOARD = struct_tagRID_DEVICE_INFO_KEYBOARD;
pub const PRID_DEVICE_INFO_KEYBOARD = [*c]struct_tagRID_DEVICE_INFO_KEYBOARD;
pub const struct_tagRID_DEVICE_INFO_HID = extern struct {
    dwVendorId: DWORD,
    dwProductId: DWORD,
    dwVersionNumber: DWORD,
    usUsagePage: USHORT,
    usUsage: USHORT,
};
pub const RID_DEVICE_INFO_HID = struct_tagRID_DEVICE_INFO_HID;
pub const PRID_DEVICE_INFO_HID = [*c]struct_tagRID_DEVICE_INFO_HID;
pub const struct_tagRID_DEVICE_INFO = extern struct {
    cbSize: DWORD,
    dwType: DWORD,
    @"": extern union {
        mouse: RID_DEVICE_INFO_MOUSE,
        keyboard: RID_DEVICE_INFO_KEYBOARD,
        hid: RID_DEVICE_INFO_HID,
    },
};
pub const RID_DEVICE_INFO = struct_tagRID_DEVICE_INFO;
pub const PRID_DEVICE_INFO = [*c]struct_tagRID_DEVICE_INFO;
pub const LPRID_DEVICE_INFO = [*c]struct_tagRID_DEVICE_INFO;
extern fn GetRawInputDeviceInfoA(hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT) UINT;
extern fn GetRawInputDeviceInfoW(hDevice: HANDLE, uiCommand: UINT, pData: LPVOID, pcbSize: PUINT) UINT;
extern fn GetRawInputBuffer(pData: PRAWINPUT, pcbSize: PUINT, cbSizeHeader: UINT) UINT;
pub const struct_tagRAWINPUTDEVICE = extern struct {
    usUsagePage: USHORT,
    usUsage: USHORT,
    dwFlags: DWORD,
    hwndTarget: HWND,
};
pub const RAWINPUTDEVICE = struct_tagRAWINPUTDEVICE;
pub const PRAWINPUTDEVICE = [*c]struct_tagRAWINPUTDEVICE;
pub const LPRAWINPUTDEVICE = [*c]struct_tagRAWINPUTDEVICE;
pub const PCRAWINPUTDEVICE = [*c]const RAWINPUTDEVICE;
extern fn RegisterRawInputDevices(pRawInputDevices: PCRAWINPUTDEVICE, uiNumDevices: UINT, cbSize: UINT) BOOL;
extern fn GetRegisteredRawInputDevices(pRawInputDevices: PRAWINPUTDEVICE, puiNumDevices: PUINT, cbSize: UINT) UINT;
pub const struct_tagRAWINPUTDEVICELIST = extern struct {
    hDevice: HANDLE,
    dwType: DWORD,
};
pub const RAWINPUTDEVICELIST = struct_tagRAWINPUTDEVICELIST;
pub const PRAWINPUTDEVICELIST = [*c]struct_tagRAWINPUTDEVICELIST;
extern fn GetRawInputDeviceList(pRawInputDeviceList: PRAWINPUTDEVICELIST, puiNumDevices: PUINT, cbSize: UINT) UINT;
extern fn DefRawInputProc(paRawInput: [*c]PRAWINPUT, nInput: INT, cbSizeHeader: UINT) LRESULT;
pub const POINTER_DEVICE_TYPE_INTEGRATED_PEN = enum_tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_INTEGRATED_PEN;
pub const POINTER_DEVICE_TYPE_EXTERNAL_PEN = enum_tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_EXTERNAL_PEN;
pub const POINTER_DEVICE_TYPE_TOUCH = enum_tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_TOUCH;
pub const POINTER_DEVICE_TYPE_TOUCH_PAD = enum_tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_TOUCH_PAD;
pub const POINTER_DEVICE_TYPE_MAX = enum_tagPOINTER_DEVICE_TYPE.POINTER_DEVICE_TYPE_MAX;
pub const enum_tagPOINTER_DEVICE_TYPE = extern enum {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 1,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN = 2,
    POINTER_DEVICE_TYPE_TOUCH = 3,
    POINTER_DEVICE_TYPE_TOUCH_PAD = 4,
    POINTER_DEVICE_TYPE_MAX = -1,
};
pub const POINTER_DEVICE_TYPE = enum_tagPOINTER_DEVICE_TYPE;
pub const struct_tagPOINTER_DEVICE_INFO = extern struct {
    displayOrientation: DWORD,
    device: HANDLE,
    pointerDeviceType: POINTER_DEVICE_TYPE,
    monitor: HMONITOR,
    startingCursorId: ULONG,
    maxActiveContacts: USHORT,
    productString: [520]WCHAR,
};
pub const POINTER_DEVICE_INFO = struct_tagPOINTER_DEVICE_INFO;
pub const struct_tagPOINTER_DEVICE_PROPERTY = extern struct {
    logicalMin: INT32,
    logicalMax: INT32,
    physicalMin: INT32,
    physicalMax: INT32,
    unit: UINT32,
    unitExponent: UINT32,
    usagePageId: USHORT,
    usageId: USHORT,
};
pub const POINTER_DEVICE_PROPERTY = struct_tagPOINTER_DEVICE_PROPERTY;
pub const POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = enum_tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_UNKNOWN;
pub const POINTER_DEVICE_CURSOR_TYPE_TIP = enum_tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_TIP;
pub const POINTER_DEVICE_CURSOR_TYPE_ERASER = enum_tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_ERASER;
pub const POINTER_DEVICE_CURSOR_TYPE_MAX = enum_tagPOINTER_DEVICE_CURSOR_TYPE.POINTER_DEVICE_CURSOR_TYPE_MAX;
pub const enum_tagPOINTER_DEVICE_CURSOR_TYPE = extern enum {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0,
    POINTER_DEVICE_CURSOR_TYPE_TIP = 1,
    POINTER_DEVICE_CURSOR_TYPE_ERASER = 2,
    POINTER_DEVICE_CURSOR_TYPE_MAX = -1,
};
pub const POINTER_DEVICE_CURSOR_TYPE = enum_tagPOINTER_DEVICE_CURSOR_TYPE;
pub const struct_tagPOINTER_DEVICE_CURSOR_INFO = extern struct {
    cursorId: UINT32,
    cursor: POINTER_DEVICE_CURSOR_TYPE,
};
pub const POINTER_DEVICE_CURSOR_INFO = struct_tagPOINTER_DEVICE_CURSOR_INFO;
extern fn GetPointerDevices(deviceCount: [*c]UINT32, pointerDevices: [*c]POINTER_DEVICE_INFO) BOOL;
extern fn GetPointerDevice(device: HANDLE, pointerDevice: [*c]POINTER_DEVICE_INFO) BOOL;
extern fn GetPointerDeviceProperties(device: HANDLE, propertyCount: [*c]UINT32, pointerProperties: [*c]POINTER_DEVICE_PROPERTY) BOOL;
extern fn RegisterPointerDeviceNotifications(window: HWND, notifyRange: BOOL) BOOL;
extern fn GetPointerDeviceRects(device: HANDLE, pointerDeviceRect: [*c]RECT, displayRect: [*c]RECT) BOOL;
extern fn GetPointerDeviceCursors(device: HANDLE, cursorCount: [*c]UINT32, deviceCursors: [*c]POINTER_DEVICE_CURSOR_INFO) BOOL;
extern fn GetRawPointerDeviceData(pointerId: UINT32, historyCount: UINT32, propertiesCount: UINT32, pProperties: [*c]POINTER_DEVICE_PROPERTY, pValues: [*c]LONG) BOOL;
extern fn ChangeWindowMessageFilter(message: UINT, dwFlag: DWORD) BOOL;
pub const struct_tagCHANGEFILTERSTRUCT = extern struct {
    cbSize: DWORD,
    ExtStatus: DWORD,
};
pub const CHANGEFILTERSTRUCT = struct_tagCHANGEFILTERSTRUCT;
pub const PCHANGEFILTERSTRUCT = [*c]struct_tagCHANGEFILTERSTRUCT;
extern fn ChangeWindowMessageFilterEx(hwnd: HWND, message: UINT, action: DWORD, pChangeFilterStruct: PCHANGEFILTERSTRUCT) BOOL;
pub const struct_HGESTUREINFO__ = extern struct {
    unused: c_int,
};
pub const HGESTUREINFO = [*c]struct_HGESTUREINFO__;
pub const struct_tagGESTUREINFO = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    dwID: DWORD,
    hwndTarget: HWND,
    ptsLocation: POINTS,
    dwInstanceID: DWORD,
    dwSequenceID: DWORD,
    ullArguments: ULONGLONG,
    cbExtraArgs: UINT,
};
pub const GESTUREINFO = struct_tagGESTUREINFO;
pub const PGESTUREINFO = [*c]struct_tagGESTUREINFO;
pub const PCGESTUREINFO = [*c]const GESTUREINFO;
pub const struct_tagGESTURENOTIFYSTRUCT = extern struct {
    cbSize: UINT,
    dwFlags: DWORD,
    hwndTarget: HWND,
    ptsLocation: POINTS,
    dwInstanceID: DWORD,
};
pub const GESTURENOTIFYSTRUCT = struct_tagGESTURENOTIFYSTRUCT;
pub const PGESTURENOTIFYSTRUCT = [*c]struct_tagGESTURENOTIFYSTRUCT;
extern fn GetGestureInfo(hGestureInfo: HGESTUREINFO, pGestureInfo: PGESTUREINFO) BOOL;
extern fn GetGestureExtraArgs(hGestureInfo: HGESTUREINFO, cbExtraArgs: UINT, pExtraArgs: PBYTE) BOOL;
extern fn CloseGestureInfoHandle(hGestureInfo: HGESTUREINFO) BOOL;
pub const struct_tagGESTURECONFIG = extern struct {
    dwID: DWORD,
    dwWant: DWORD,
    dwBlock: DWORD,
};
pub const GESTURECONFIG = struct_tagGESTURECONFIG;
pub const PGESTURECONFIG = [*c]struct_tagGESTURECONFIG;
extern fn SetGestureConfig(hwnd: HWND, dwReserved: DWORD, cIDs: UINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT) BOOL;
extern fn GetGestureConfig(hwnd: HWND, dwReserved: DWORD, dwFlags: DWORD, pcIDs: PUINT, pGestureConfig: PGESTURECONFIG, cbSize: UINT) BOOL;
extern fn ShutdownBlockReasonCreate(hWnd: HWND, pwszReason: LPCWSTR) BOOL;
extern fn ShutdownBlockReasonQuery(hWnd: HWND, pwszBuff: LPWSTR, pcchBuff: [*c]DWORD) BOOL;
extern fn ShutdownBlockReasonDestroy(hWnd: HWND) BOOL;
pub const IMDT_UNAVAILABLE = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_UNAVAILABLE;
pub const IMDT_KEYBOARD = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_KEYBOARD;
pub const IMDT_MOUSE = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_MOUSE;
pub const IMDT_TOUCH = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_TOUCH;
pub const IMDT_PEN = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_PEN;
pub const IMDT_TOUCHPAD = enum_tagINPUT_MESSAGE_DEVICE_TYPE.IMDT_TOUCHPAD;
pub const enum_tagINPUT_MESSAGE_DEVICE_TYPE = extern enum {
    IMDT_UNAVAILABLE = 0,
    IMDT_KEYBOARD = 1,
    IMDT_MOUSE = 2,
    IMDT_TOUCH = 4,
    IMDT_PEN = 8,
    IMDT_TOUCHPAD = 16,
};
pub const INPUT_MESSAGE_DEVICE_TYPE = enum_tagINPUT_MESSAGE_DEVICE_TYPE;
pub const IMO_UNAVAILABLE = enum_tagINPUT_MESSAGE_ORIGIN_ID.IMO_UNAVAILABLE;
pub const IMO_HARDWARE = enum_tagINPUT_MESSAGE_ORIGIN_ID.IMO_HARDWARE;
pub const IMO_INJECTED = enum_tagINPUT_MESSAGE_ORIGIN_ID.IMO_INJECTED;
pub const IMO_SYSTEM = enum_tagINPUT_MESSAGE_ORIGIN_ID.IMO_SYSTEM;
pub const enum_tagINPUT_MESSAGE_ORIGIN_ID = extern enum {
    IMO_UNAVAILABLE = 0,
    IMO_HARDWARE = 1,
    IMO_INJECTED = 2,
    IMO_SYSTEM = 4,
};
pub const INPUT_MESSAGE_ORIGIN_ID = enum_tagINPUT_MESSAGE_ORIGIN_ID;
pub const struct_tagINPUT_MESSAGE_SOURCE = extern struct {
    deviceType: INPUT_MESSAGE_DEVICE_TYPE,
    originId: INPUT_MESSAGE_ORIGIN_ID,
};
pub const INPUT_MESSAGE_SOURCE = struct_tagINPUT_MESSAGE_SOURCE;
extern fn GetCurrentInputMessageSource(inputMessageSource: [*c]INPUT_MESSAGE_SOURCE) BOOL;
extern fn GetCIMSSM(inputMessageSource: [*c]INPUT_MESSAGE_SOURCE) BOOL;
pub const AR_ENABLED = enum_tagAR_STATE.AR_ENABLED;
pub const AR_DISABLED = enum_tagAR_STATE.AR_DISABLED;
pub const AR_SUPPRESSED = enum_tagAR_STATE.AR_SUPPRESSED;
pub const AR_REMOTESESSION = enum_tagAR_STATE.AR_REMOTESESSION;
pub const AR_MULTIMON = enum_tagAR_STATE.AR_MULTIMON;
pub const AR_NOSENSOR = enum_tagAR_STATE.AR_NOSENSOR;
pub const AR_NOT_SUPPORTED = enum_tagAR_STATE.AR_NOT_SUPPORTED;
pub const AR_DOCKED = enum_tagAR_STATE.AR_DOCKED;
pub const AR_LAPTOP = enum_tagAR_STATE.AR_LAPTOP;
pub const enum_tagAR_STATE = extern enum {
    AR_ENABLED = 0,
    AR_DISABLED = 1,
    AR_SUPPRESSED = 2,
    AR_REMOTESESSION = 4,
    AR_MULTIMON = 8,
    AR_NOSENSOR = 16,
    AR_NOT_SUPPORTED = 32,
    AR_DOCKED = 64,
    AR_LAPTOP = 128,
};
pub const AR_STATE = enum_tagAR_STATE;
pub const PAR_STATE = [*c]enum_tagAR_STATE;
pub const ORIENTATION_PREFERENCE_NONE = enum_ORIENTATION_PREFERENCE._NONE;
pub const ORIENTATION_PREFERENCE_LANDSCAPE = enum_ORIENTATION_PREFERENCE._LANDSCAPE;
pub const ORIENTATION_PREFERENCE_PORTRAIT = enum_ORIENTATION_PREFERENCE._PORTRAIT;
pub const ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = enum_ORIENTATION_PREFERENCE._LANDSCAPE_FLIPPED;
pub const ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = enum_ORIENTATION_PREFERENCE._PORTRAIT_FLIPPED;
pub const enum_ORIENTATION_PREFERENCE = extern enum {
    _NONE = 0,
    _LANDSCAPE = 1,
    _PORTRAIT = 2,
    _LANDSCAPE_FLIPPED = 4,
    _PORTRAIT_FLIPPED = 8,
};
pub const ORIENTATION_PREFERENCE = enum_ORIENTATION_PREFERENCE;
extern fn GetAutoRotationState(pState: PAR_STATE) BOOL;
extern fn GetDisplayAutoRotationPreferences(pOrientation: [*c]ORIENTATION_PREFERENCE) BOOL;
extern fn GetDisplayAutoRotationPreferencesByProcessId(dwProcessId: DWORD, pOrientation: [*c]ORIENTATION_PREFERENCE, fRotateScreen: [*c]BOOL) BOOL;
extern fn SetDisplayAutoRotationPreferences(orientation: ORIENTATION_PREFERENCE) BOOL;
extern fn IsImmersiveProcess(hProcess: HANDLE) BOOL;
extern fn SetProcessRestrictionExemption(fEnableExemption: BOOL) BOOL;
extern fn GetDateFormatA(Locale: LCID, dwFlags: DWORD, lpDate: [*c]const SYSTEMTIME, lpFormat: LPCSTR, lpDateStr: LPSTR, cchDate: c_int) c_int;
extern fn GetDateFormatW(Locale: LCID, dwFlags: DWORD, lpDate: [*c]const SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: c_int) c_int;
extern fn GetTimeFormatA(Locale: LCID, dwFlags: DWORD, lpTime: [*c]const SYSTEMTIME, lpFormat: LPCSTR, lpTimeStr: LPSTR, cchTime: c_int) c_int;
extern fn GetTimeFormatW(Locale: LCID, dwFlags: DWORD, lpTime: [*c]const SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: c_int) c_int;
extern fn GetTimeFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpTime: [*c]const SYSTEMTIME, lpFormat: LPCWSTR, lpTimeStr: LPWSTR, cchTime: c_int) c_int;
extern fn GetDateFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDate: [*c]const SYSTEMTIME, lpFormat: LPCWSTR, lpDateStr: LPWSTR, cchDate: c_int, lpCalendar: LPCWSTR) c_int;
extern fn GetDurationFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpDuration: [*c]const SYSTEMTIME, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: c_int) c_int;
pub const LGRPID = DWORD;
pub const LCTYPE = DWORD;
pub const CALTYPE = DWORD;
pub const CALID = DWORD;
pub const struct__cpinfo = extern struct {
    MaxCharSize: UINT,
    DefaultChar: [2]BYTE,
    LeadByte: [12]BYTE,
};
pub const CPINFO = struct__cpinfo;
pub const LPCPINFO = [*c]struct__cpinfo;
pub const GEOTYPE = DWORD;
pub const GEOCLASS = DWORD;
pub const GEOID = LONG;
pub const struct__cpinfoexA = extern struct {
    MaxCharSize: UINT,
    DefaultChar: [2]BYTE,
    LeadByte: [12]BYTE,
    UnicodeDefaultChar: WCHAR,
    CodePage: UINT,
    CodePageName: [260]CHAR,
};
pub const CPINFOEXA = struct__cpinfoexA;
pub const LPCPINFOEXA = [*c]struct__cpinfoexA;
pub const struct__cpinfoexW = extern struct {
    MaxCharSize: UINT,
    DefaultChar: [2]BYTE,
    LeadByte: [12]BYTE,
    UnicodeDefaultChar: WCHAR,
    CodePage: UINT,
    CodePageName: [260]WCHAR,
};
pub const CPINFOEXW = struct__cpinfoexW;
pub const LPCPINFOEXW = [*c]struct__cpinfoexW;
pub const CPINFOEX = CPINFOEXA;
pub const LPCPINFOEX = LPCPINFOEXA;
pub const struct__numberfmtA = extern struct {
    NumDigits: UINT,
    LeadingZero: UINT,
    Grouping: UINT,
    lpDecimalSep: LPSTR,
    lpThousandSep: LPSTR,
    NegativeOrder: UINT,
};
pub const NUMBERFMTA = struct__numberfmtA;
pub const LPNUMBERFMTA = [*c]struct__numberfmtA;
pub const struct__numberfmtW = extern struct {
    NumDigits: UINT,
    LeadingZero: UINT,
    Grouping: UINT,
    lpDecimalSep: LPWSTR,
    lpThousandSep: LPWSTR,
    NegativeOrder: UINT,
};
pub const NUMBERFMTW = struct__numberfmtW;
pub const LPNUMBERFMTW = [*c]struct__numberfmtW;
pub const NUMBERFMT = NUMBERFMTA;
pub const LPNUMBERFMT = LPNUMBERFMTA;
pub const struct__currencyfmtA = extern struct {
    NumDigits: UINT,
    LeadingZero: UINT,
    Grouping: UINT,
    lpDecimalSep: LPSTR,
    lpThousandSep: LPSTR,
    NegativeOrder: UINT,
    PositiveOrder: UINT,
    lpCurrencySymbol: LPSTR,
};
pub const CURRENCYFMTA = struct__currencyfmtA;
pub const LPCURRENCYFMTA = [*c]struct__currencyfmtA;
pub const struct__currencyfmtW = extern struct {
    NumDigits: UINT,
    LeadingZero: UINT,
    Grouping: UINT,
    lpDecimalSep: LPWSTR,
    lpThousandSep: LPWSTR,
    NegativeOrder: UINT,
    PositiveOrder: UINT,
    lpCurrencySymbol: LPWSTR,
};
pub const CURRENCYFMTW = struct__currencyfmtW;
pub const LPCURRENCYFMTW = [*c]struct__currencyfmtW;
pub const CURRENCYFMT = CURRENCYFMTA;
pub const LPCURRENCYFMT = LPCURRENCYFMTA;
pub const COMPARE_STRING = enum_SYSNLS_FUNCTION.COMPARE_STRING;
pub const enum_SYSNLS_FUNCTION = extern enum {
    COMPARE_STRING = 1,
};
pub const NLS_FUNCTION = DWORD;
pub const struct__nlsversioninfo = extern struct {
    dwNLSVersionInfoSize: DWORD,
    dwNLSVersion: DWORD,
    dwDefinedVersion: DWORD,
    dwEffectiveId: DWORD,
    guidCustomVersion: GUID,
};
pub const NLSVERSIONINFO = struct__nlsversioninfo;
pub const LPNLSVERSIONINFO = [*c]struct__nlsversioninfo;
pub const struct__nlsversioninfoex = extern struct {
    dwNLSVersionInfoSize: DWORD,
    dwNLSVersion: DWORD,
    dwDefinedVersion: DWORD,
    dwEffectiveId: DWORD,
    guidCustomVersion: GUID,
};
pub const NLSVERSIONINFOEX = struct__nlsversioninfoex;
pub const LPNLSVERSIONINFOEX = [*c]struct__nlsversioninfoex;
pub const GEO_NATION = enum_SYSGEOTYPE.GEO_NATION;
pub const GEO_LATITUDE = enum_SYSGEOTYPE.GEO_LATITUDE;
pub const GEO_LONGITUDE = enum_SYSGEOTYPE.GEO_LONGITUDE;
pub const GEO_ISO2 = enum_SYSGEOTYPE.GEO_ISO2;
pub const GEO_ISO3 = enum_SYSGEOTYPE.GEO_ISO3;
pub const GEO_RFC1766 = enum_SYSGEOTYPE.GEO_RFC1766;
pub const GEO_LCID = enum_SYSGEOTYPE.GEO_LCID;
pub const GEO_FRIENDLYNAME = enum_SYSGEOTYPE.GEO_FRIENDLYNAME;
pub const GEO_OFFICIALNAME = enum_SYSGEOTYPE.GEO_OFFICIALNAME;
pub const GEO_TIMEZONES = enum_SYSGEOTYPE.GEO_TIMEZONES;
pub const GEO_OFFICIALLANGUAGES = enum_SYSGEOTYPE.GEO_OFFICIALLANGUAGES;
pub const GEO_ISO_UN_NUMBER = enum_SYSGEOTYPE.GEO_ISO_UN_NUMBER;
pub const GEO_PARENT = enum_SYSGEOTYPE.GEO_PARENT;
pub const GEO_DIALINGCODE = enum_SYSGEOTYPE.GEO_DIALINGCODE;
pub const GEO_CURRENCYCODE = enum_SYSGEOTYPE.GEO_CURRENCYCODE;
pub const GEO_CURRENCYSYMBOL = enum_SYSGEOTYPE.GEO_CURRENCYSYMBOL;
pub const GEO_NAME = enum_SYSGEOTYPE.GEO_NAME;
pub const GEO_ID = enum_SYSGEOTYPE.GEO_ID;
pub const enum_SYSGEOTYPE = extern enum {
    GEO_NATION = 1,
    GEO_LATITUDE = 2,
    GEO_LONGITUDE = 3,
    GEO_ISO2 = 4,
    GEO_ISO3 = 5,
    GEO_RFC1766 = 6,
    GEO_LCID = 7,
    GEO_FRIENDLYNAME = 8,
    GEO_OFFICIALNAME = 9,
    GEO_TIMEZONES = 10,
    GEO_OFFICIALLANGUAGES = 11,
    GEO_ISO_UN_NUMBER = 12,
    GEO_PARENT = 13,
    GEO_DIALINGCODE = 14,
    GEO_CURRENCYCODE = 15,
    GEO_CURRENCYSYMBOL = 16,
    GEO_NAME = 17,
    GEO_ID = 18,
};
pub const GEOCLASS_NATION = enum_SYSGEOCLASS.GEOCLASS_NATION;
pub const GEOCLASS_REGION = enum_SYSGEOCLASS.GEOCLASS_REGION;
pub const GEOCLASS_ALL = enum_SYSGEOCLASS.GEOCLASS_ALL;
pub const enum_SYSGEOCLASS = extern enum {
    GEOCLASS_NATION = 16,
    GEOCLASS_REGION = 14,
    GEOCLASS_ALL = 0,
};
pub const NormalizationOther = enum__NORM_FORM.NormalizationOther;
pub const NormalizationC = enum__NORM_FORM.NormalizationC;
pub const NormalizationD = enum__NORM_FORM.NormalizationD;
pub const NormalizationKC = enum__NORM_FORM.NormalizationKC;
pub const NormalizationKD = enum__NORM_FORM.NormalizationKD;
pub const enum__NORM_FORM = extern enum {
    NormalizationOther = 0,
    NormalizationC = 1,
    NormalizationD = 2,
    NormalizationKC = 5,
    NormalizationKD = 6,
};
pub const NORM_FORM = enum__NORM_FORM;
pub const LANGUAGEGROUP_ENUMPROCA = ?fn (LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const LANGGROUPLOCALE_ENUMPROCA = ?fn (LGRPID, LCID, LPSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const UILANGUAGE_ENUMPROCA = ?fn (LPSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CODEPAGE_ENUMPROCA = ?fn (LPSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const DATEFMT_ENUMPROCA = ?fn (LPSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const DATEFMT_ENUMPROCEXA = ?fn (LPSTR, CALID) callconv(std.os.windows.WINAPI) BOOL;
pub const TIMEFMT_ENUMPROCA = ?fn (LPSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CALINFO_ENUMPROCA = ?fn (LPSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CALINFO_ENUMPROCEXA = ?fn (LPSTR, CALID) callconv(std.os.windows.WINAPI) BOOL;
pub const LOCALE_ENUMPROCA = ?fn (LPSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const LOCALE_ENUMPROCW = ?fn (LPWSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const LANGUAGEGROUP_ENUMPROCW = ?fn (LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const LANGGROUPLOCALE_ENUMPROCW = ?fn (LGRPID, LCID, LPWSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const UILANGUAGE_ENUMPROCW = ?fn (LPWSTR, LONG_PTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CODEPAGE_ENUMPROCW = ?fn (LPWSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const DATEFMT_ENUMPROCW = ?fn (LPWSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const DATEFMT_ENUMPROCEXW = ?fn (LPWSTR, CALID) callconv(std.os.windows.WINAPI) BOOL;
pub const TIMEFMT_ENUMPROCW = ?fn (LPWSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CALINFO_ENUMPROCW = ?fn (LPWSTR) callconv(std.os.windows.WINAPI) BOOL;
pub const CALINFO_ENUMPROCEXW = ?fn (LPWSTR, CALID) callconv(std.os.windows.WINAPI) BOOL;
pub const GEO_ENUMPROC = ?fn (GEOID) callconv(std.os.windows.WINAPI) BOOL;
pub const GEO_ENUMNAMEPROC = ?fn (PWSTR, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
pub const struct__FILEMUIINFO = extern struct {
    dwSize: DWORD,
    dwVersion: DWORD,
    dwFileType: DWORD,
    pChecksum: [16]BYTE,
    pServiceChecksum: [16]BYTE,
    dwLanguageNameOffset: DWORD,
    dwTypeIDMainSize: DWORD,
    dwTypeIDMainOffset: DWORD,
    dwTypeNameMainOffset: DWORD,
    dwTypeIDMUISize: DWORD,
    dwTypeIDMUIOffset: DWORD,
    dwTypeNameMUIOffset: DWORD,
    abBuffer: [8]BYTE,
};
pub const FILEMUIINFO = struct__FILEMUIINFO;
pub const PFILEMUIINFO = [*c]struct__FILEMUIINFO;
extern fn CompareStringEx(lpLocaleName: LPCWSTR, dwCmpFlags: DWORD, lpString1: LPCWCH, cchCount1: c_int, lpString2: LPCWCH, cchCount2: c_int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, lParam: LPARAM) c_int;
extern fn CompareStringOrdinal(lpString1: LPCWCH, cchCount1: c_int, lpString2: LPCWCH, cchCount2: c_int, bIgnoreCase: BOOL) c_int;
extern fn CompareStringW(Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZWCH, cchCount1: c_int, lpString2: PCNZWCH, cchCount2: c_int) c_int;
extern fn FoldStringW(dwMapFlags: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int) c_int;
extern fn GetStringTypeExW(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpCharType: LPWORD) BOOL;
extern fn GetStringTypeW(dwInfoType: DWORD, lpSrcStr: LPCWCH, cchSrc: c_int, lpCharType: LPWORD) BOOL;
extern fn MultiByteToWideChar(CodePage: UINT, dwFlags: DWORD, lpMultiByteStr: LPCCH, cbMultiByte: c_int, lpWideCharStr: LPWSTR, cchWideChar: c_int) c_int;
extern fn WideCharToMultiByte(CodePage: UINT, dwFlags: DWORD, lpWideCharStr: LPCWCH, cchWideChar: c_int, lpMultiByteStr: LPSTR, cbMultiByte: c_int, lpDefaultChar: LPCCH, lpUsedDefaultChar: LPBOOL) c_int;
extern fn IsValidCodePage(CodePage: UINT) BOOL;
extern fn GetACP() UINT;
extern fn GetOEMCP() UINT;
extern fn GetCPInfo(CodePage: UINT, lpCPInfo: LPCPINFO) BOOL;
extern fn GetCPInfoExA(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXA) BOOL;
extern fn GetCPInfoExW(CodePage: UINT, dwFlags: DWORD, lpCPInfoEx: LPCPINFOEXW) BOOL;
extern fn CompareStringA(Locale: LCID, dwCmpFlags: DWORD, lpString1: PCNZCH, cchCount1: c_int, lpString2: PCNZCH, cchCount2: c_int) c_int;
extern fn FindNLSString(Locale: LCID, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, pcchFound: LPINT) c_int;
extern fn LCMapStringW(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int) c_int;
extern fn LCMapStringA(Locale: LCID, dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpDestStr: LPSTR, cchDest: c_int) c_int;
extern fn GetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPWSTR, cchData: c_int) c_int;
extern fn GetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPSTR, cchData: c_int) c_int;
extern fn SetLocaleInfoA(Locale: LCID, LCType: LCTYPE, lpLCData: LPCSTR) BOOL;
extern fn SetLocaleInfoW(Locale: LCID, LCType: LCTYPE, lpLCData: LPCWSTR) BOOL;
extern fn GetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPSTR, cchData: c_int, lpValue: LPDWORD) c_int;
extern fn GetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPWSTR, cchData: c_int, lpValue: LPDWORD) c_int;
extern fn SetCalendarInfoA(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCSTR) BOOL;
extern fn SetCalendarInfoW(Locale: LCID, Calendar: CALID, CalType: CALTYPE, lpCalData: LPCWSTR) BOOL;
extern fn LoadStringByReference(Flags: DWORD, Language: PCWSTR, SourceString: PCWSTR, Buffer: PWSTR, cchBuffer: ULONG, Directory: PCWSTR, pcchBufferOut: PULONG) BOOL;
extern fn IsDBCSLeadByte(TestChar: BYTE) BOOL;
extern fn IsDBCSLeadByteEx(CodePage: UINT, TestChar: BYTE) BOOL;
extern fn LocaleNameToLCID(lpName: LPCWSTR, dwFlags: DWORD) LCID;
extern fn LCIDToLocaleName(Locale: LCID, lpName: LPWSTR, cchName: c_int, dwFlags: DWORD) c_int;
extern fn GetDurationFormat(Locale: LCID, dwFlags: DWORD, lpDuration: [*c]const SYSTEMTIME, ullDuration: ULONGLONG, lpFormat: LPCWSTR, lpDurationStr: LPWSTR, cchDuration: c_int) c_int;
extern fn GetNumberFormatA(Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: [*c]const NUMBERFMTA, lpNumberStr: LPSTR, cchNumber: c_int) c_int;
extern fn GetNumberFormatW(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: [*c]const NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: c_int) c_int;
extern fn GetCurrencyFormatA(Locale: LCID, dwFlags: DWORD, lpValue: LPCSTR, lpFormat: [*c]const CURRENCYFMTA, lpCurrencyStr: LPSTR, cchCurrency: c_int) c_int;
extern fn GetCurrencyFormatW(Locale: LCID, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: [*c]const CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: c_int) c_int;
extern fn EnumCalendarInfoA(lpCalInfoEnumProc: CALINFO_ENUMPROCA, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
extern fn EnumCalendarInfoW(lpCalInfoEnumProc: CALINFO_ENUMPROCW, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
extern fn EnumCalendarInfoExA(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXA, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
extern fn EnumCalendarInfoExW(lpCalInfoEnumProcEx: CALINFO_ENUMPROCEXW, Locale: LCID, Calendar: CALID, CalType: CALTYPE) BOOL;
extern fn EnumTimeFormatsA(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn EnumTimeFormatsW(lpTimeFmtEnumProc: TIMEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn EnumDateFormatsA(lpDateFmtEnumProc: DATEFMT_ENUMPROCA, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn EnumDateFormatsW(lpDateFmtEnumProc: DATEFMT_ENUMPROCW, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn EnumDateFormatsExA(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXA, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn EnumDateFormatsExW(lpDateFmtEnumProcEx: DATEFMT_ENUMPROCEXW, Locale: LCID, dwFlags: DWORD) BOOL;
extern fn IsValidLanguageGroup(LanguageGroup: LGRPID, dwFlags: DWORD) BOOL;
extern fn GetNLSVersion(Function: NLS_FUNCTION, Locale: LCID, lpVersionInformation: LPNLSVERSIONINFO) BOOL;
extern fn IsValidLocale(Locale: LCID, dwFlags: DWORD) BOOL;
extern fn GetGeoInfoA(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPSTR, cchData: c_int, LangId: LANGID) c_int;
extern fn GetGeoInfoW(Location: GEOID, GeoType: GEOTYPE, lpGeoData: LPWSTR, cchData: c_int, LangId: LANGID) c_int;
extern fn GetGeoInfoEx(location: PWSTR, geoType: GEOTYPE, geoData: PWSTR, geoDataCount: c_int) c_int;
extern fn EnumSystemGeoID(GeoClass: GEOCLASS, ParentGeoId: GEOID, lpGeoEnumProc: GEO_ENUMPROC) BOOL;
extern fn EnumSystemGeoNames(geoClass: GEOCLASS, geoEnumProc: GEO_ENUMNAMEPROC, data: LPARAM) BOOL;
extern fn GetUserGeoID(GeoClass: GEOCLASS) GEOID;
extern fn GetUserDefaultGeoName(geoName: LPWSTR, geoNameCount: c_int) c_int;
extern fn SetUserGeoID(GeoId: GEOID) BOOL;
extern fn SetUserGeoName(geoName: PWSTR) BOOL;
extern fn ConvertDefaultLocale(Locale: LCID) LCID;
extern fn GetSystemDefaultUILanguage() LANGID;
extern fn GetThreadLocale() LCID;
extern fn SetThreadLocale(Locale: LCID) BOOL;
extern fn GetUserDefaultUILanguage() LANGID;
extern fn GetUserDefaultLangID() LANGID;
extern fn GetSystemDefaultLangID() LANGID;
extern fn GetSystemDefaultLCID() LCID;
extern fn GetUserDefaultLCID() LCID;
extern fn SetThreadUILanguage(LangId: LANGID) LANGID;
extern fn GetThreadUILanguage() LANGID;
extern fn GetProcessPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
extern fn SetProcessPreferredUILanguages(dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG) BOOL;
extern fn GetUserPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
extern fn GetSystemPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
extern fn GetThreadPreferredUILanguages(dwFlags: DWORD, pulNumLanguages: PULONG, pwszLanguagesBuffer: PZZWSTR, pcchLanguagesBuffer: PULONG) BOOL;
extern fn SetThreadPreferredUILanguages(dwFlags: DWORD, pwszLanguagesBuffer: PCZZWSTR, pulNumLanguages: PULONG) BOOL;
extern fn GetFileMUIInfo(dwFlags: DWORD, pcwszFilePath: PCWSTR, pFileMUIInfo: PFILEMUIINFO, pcbFileMUIInfo: [*c]DWORD) BOOL;
extern fn GetFileMUIPath(dwFlags: DWORD, pcwszFilePath: PCWSTR, pwszLanguage: PWSTR, pcchLanguage: PULONG, pwszFileMUIPath: PWSTR, pcchFileMUIPath: PULONG, pululEnumerator: PULONGLONG) BOOL;
extern fn GetUILanguageInfo(dwFlags: DWORD, pwmszLanguage: PCZZWSTR, pwszFallbackLanguages: PZZWSTR, pcchFallbackLanguages: PDWORD, pAttributes: PDWORD) BOOL;
extern fn NotifyUILanguageChange(dwFlags: DWORD, pcwstrNewLanguage: PCWSTR, pcwstrPreviousLanguage: PCWSTR, dwReserved: DWORD, pdwStatusRtrn: PDWORD) BOOL;
extern fn GetStringTypeExA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpCharType: LPWORD) BOOL;
extern fn GetStringTypeA(Locale: LCID, dwInfoType: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpCharType: LPWORD) BOOL;
extern fn FoldStringA(dwMapFlags: DWORD, lpSrcStr: LPCSTR, cchSrc: c_int, lpDestStr: LPSTR, cchDest: c_int) c_int;
extern fn EnumSystemLocalesA(lpLocaleEnumProc: LOCALE_ENUMPROCA, dwFlags: DWORD) BOOL;
extern fn EnumSystemLocalesW(lpLocaleEnumProc: LOCALE_ENUMPROCW, dwFlags: DWORD) BOOL;
extern fn EnumSystemLanguageGroupsA(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumSystemLanguageGroupsW(lpLanguageGroupEnumProc: LANGUAGEGROUP_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumLanguageGroupLocalesA(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCA, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumLanguageGroupLocalesW(lpLangGroupLocaleEnumProc: LANGGROUPLOCALE_ENUMPROCW, LanguageGroup: LGRPID, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumUILanguagesA(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCA, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumUILanguagesW(lpUILanguageEnumProc: UILANGUAGE_ENUMPROCW, dwFlags: DWORD, lParam: LONG_PTR) BOOL;
extern fn EnumSystemCodePagesA(lpCodePageEnumProc: CODEPAGE_ENUMPROCA, dwFlags: DWORD) BOOL;
extern fn EnumSystemCodePagesW(lpCodePageEnumProc: CODEPAGE_ENUMPROCW, dwFlags: DWORD) BOOL;
extern fn IdnToAscii(dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: c_int, lpASCIICharStr: LPWSTR, cchASCIIChar: c_int) c_int;
extern fn IdnToUnicode(dwFlags: DWORD, lpASCIICharStr: LPCWSTR, cchASCIIChar: c_int, lpUnicodeCharStr: LPWSTR, cchUnicodeChar: c_int) c_int;
extern fn IdnToNameprepUnicode(dwFlags: DWORD, lpUnicodeCharStr: LPCWSTR, cchUnicodeChar: c_int, lpNameprepCharStr: LPWSTR, cchNameprepChar: c_int) c_int;
extern fn NormalizeString(NormForm: NORM_FORM, lpSrcString: LPCWSTR, cwSrcLength: c_int, lpDstString: LPWSTR, cwDstLength: c_int) c_int;
extern fn IsNormalizedString(NormForm: NORM_FORM, lpString: LPCWSTR, cwLength: c_int) BOOL;
extern fn VerifyScripts(dwFlags: DWORD, lpLocaleScripts: LPCWSTR, cchLocaleScripts: c_int, lpTestScripts: LPCWSTR, cchTestScripts: c_int) BOOL;
extern fn GetStringScripts(dwFlags: DWORD, lpString: LPCWSTR, cchString: c_int, lpScripts: LPWSTR, cchScripts: c_int) c_int;
extern fn GetLocaleInfoEx(lpLocaleName: LPCWSTR, LCType: LCTYPE, lpLCData: LPWSTR, cchData: c_int) c_int;
extern fn GetCalendarInfoEx(lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lpCalData: LPWSTR, cchData: c_int, lpValue: LPDWORD) c_int;
extern fn GetNumberFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: [*c]const NUMBERFMTW, lpNumberStr: LPWSTR, cchNumber: c_int) c_int;
extern fn GetCurrencyFormatEx(lpLocaleName: LPCWSTR, dwFlags: DWORD, lpValue: LPCWSTR, lpFormat: [*c]const CURRENCYFMTW, lpCurrencyStr: LPWSTR, cchCurrency: c_int) c_int;
extern fn GetUserDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
extern fn GetSystemDefaultLocaleName(lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
extern fn IsNLSDefinedString(Function: NLS_FUNCTION, dwFlags: DWORD, lpVersionInformation: LPNLSVERSIONINFO, lpString: LPCWSTR, cchStr: INT) BOOL;
extern fn GetNLSVersionEx(function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX) BOOL;
extern fn IsValidNLSVersion(function: NLS_FUNCTION, lpLocaleName: LPCWSTR, lpVersionInformation: LPNLSVERSIONINFOEX) DWORD;
extern fn FindNLSStringEx(lpLocaleName: LPCWSTR, dwFindNLSStringFlags: DWORD, lpStringSource: LPCWSTR, cchSource: c_int, lpStringValue: LPCWSTR, cchValue: c_int, pcchFound: LPINT, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: LPARAM) c_int;
extern fn LCMapStringEx(lpLocaleName: LPCWSTR, dwMapFlags: DWORD, lpSrcStr: LPCWSTR, cchSrc: c_int, lpDestStr: LPWSTR, cchDest: c_int, lpVersionInformation: LPNLSVERSIONINFO, lpReserved: LPVOID, sortHandle: LPARAM) c_int;
extern fn IsValidLocaleName(lpLocaleName: LPCWSTR) BOOL;
pub const CALINFO_ENUMPROCEXEX = ?fn (LPWSTR, CALID, LPWSTR, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn EnumCalendarInfoExEx(pCalInfoEnumProcExEx: CALINFO_ENUMPROCEXEX, lpLocaleName: LPCWSTR, Calendar: CALID, lpReserved: LPCWSTR, CalType: CALTYPE, lParam: LPARAM) BOOL;
pub const DATEFMT_ENUMPROCEXEX = ?fn (LPWSTR, CALID, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn EnumDateFormatsExEx(lpDateFmtEnumProcExEx: DATEFMT_ENUMPROCEXEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM) BOOL;
pub const TIMEFMT_ENUMPROCEX = ?fn (LPWSTR, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn EnumTimeFormatsEx(lpTimeFmtEnumProcEx: TIMEFMT_ENUMPROCEX, lpLocaleName: LPCWSTR, dwFlags: DWORD, lParam: LPARAM) BOOL;
pub const LOCALE_ENUMPROCEX = ?fn (LPWSTR, DWORD, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn EnumSystemLocalesEx(lpLocaleEnumProcEx: LOCALE_ENUMPROCEX, dwFlags: DWORD, lParam: LPARAM, lpReserved: LPVOID) BOOL;
extern fn ResolveLocaleName(lpNameToResolve: LPCWSTR, lpLocaleName: LPWSTR, cchLocaleName: c_int) c_int;
pub const struct__COORD = extern struct {
    X: SHORT,
    Y: SHORT,
};
pub const COORD = struct__COORD;
pub const PCOORD = [*c]struct__COORD;
pub const struct__SMALL_RECT = extern struct {
    Left: SHORT,
    Top: SHORT,
    Right: SHORT,
    Bottom: SHORT,
};
pub const SMALL_RECT = struct__SMALL_RECT;
pub const PSMALL_RECT = [*c]struct__SMALL_RECT;
pub const struct__KEY_EVENT_RECORD = extern struct {
    bKeyDown: BOOL,
    wRepeatCount: WORD,
    wVirtualKeyCode: WORD,
    wVirtualScanCode: WORD,
    uChar: extern union {
        UnicodeChar: WCHAR,
        AsciiChar: CHAR,
    },
    dwControlKeyState: DWORD,
};
pub const KEY_EVENT_RECORD = struct__KEY_EVENT_RECORD;
pub const PKEY_EVENT_RECORD = [*c]struct__KEY_EVENT_RECORD;
pub const struct__MOUSE_EVENT_RECORD = extern struct {
    dwMousePosition: COORD,
    dwButtonState: DWORD,
    dwControlKeyState: DWORD,
    dwEventFlags: DWORD,
};
pub const MOUSE_EVENT_RECORD = struct__MOUSE_EVENT_RECORD;
pub const PMOUSE_EVENT_RECORD = [*c]struct__MOUSE_EVENT_RECORD;
pub const struct__WINDOW_BUFFER_SIZE_RECORD = extern struct {
    dwSize: COORD,
};
pub const WINDOW_BUFFER_SIZE_RECORD = struct__WINDOW_BUFFER_SIZE_RECORD;
pub const PWINDOW_BUFFER_SIZE_RECORD = [*c]struct__WINDOW_BUFFER_SIZE_RECORD;
pub const struct__MENU_EVENT_RECORD = extern struct {
    dwCommandId: UINT,
};
pub const MENU_EVENT_RECORD = struct__MENU_EVENT_RECORD;
pub const PMENU_EVENT_RECORD = [*c]struct__MENU_EVENT_RECORD;
pub const struct__FOCUS_EVENT_RECORD = extern struct {
    bSetFocus: BOOL,
};
pub const FOCUS_EVENT_RECORD = struct__FOCUS_EVENT_RECORD;
pub const PFOCUS_EVENT_RECORD = [*c]struct__FOCUS_EVENT_RECORD;
pub const struct__INPUT_RECORD = extern struct {
    EventType: WORD,
    Event: extern union {
        KeyEvent: KEY_EVENT_RECORD,
        MouseEvent: MOUSE_EVENT_RECORD,
        WindowBufferSizeEvent: WINDOW_BUFFER_SIZE_RECORD,
        MenuEvent: MENU_EVENT_RECORD,
        FocusEvent: FOCUS_EVENT_RECORD,
    },
};
pub const INPUT_RECORD = struct__INPUT_RECORD;
pub const PINPUT_RECORD = [*c]struct__INPUT_RECORD;
pub const struct__CHAR_INFO = extern struct {
    Char: extern union {
        UnicodeChar: WCHAR,
        AsciiChar: CHAR,
    },
    Attributes: WORD,
};
pub const CHAR_INFO = struct__CHAR_INFO;
pub const PCHAR_INFO = [*c]struct__CHAR_INFO;
pub const struct__CONSOLE_FONT_INFO = extern struct {
    nFont: DWORD,
    dwFontSize: COORD,
};
pub const CONSOLE_FONT_INFO = struct__CONSOLE_FONT_INFO;
pub const PCONSOLE_FONT_INFO = [*c]struct__CONSOLE_FONT_INFO;
pub const HPCON = ?*c_void;
extern fn AllocConsole() BOOL;
extern fn FreeConsole() BOOL;
extern fn AttachConsole(dwProcessId: DWORD) BOOL;
extern fn GetConsoleCP() UINT;
extern fn GetConsoleOutputCP() UINT;
extern fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) BOOL;
extern fn SetConsoleMode(hConsoleHandle: HANDLE, dwMode: DWORD) BOOL;
extern fn GetNumberOfConsoleInputEvents(hConsoleInput: HANDLE, lpNumberOfEvents: LPDWORD) BOOL;
extern fn ReadConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
extern fn ReadConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
extern fn PeekConsoleInputA(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
extern fn PeekConsoleInputW(hConsoleInput: HANDLE, lpBuffer: PINPUT_RECORD, nLength: DWORD, lpNumberOfEventsRead: LPDWORD) BOOL;
pub const struct__CONSOLE_READCONSOLE_CONTROL = extern struct {
    nLength: ULONG,
    nInitialChars: ULONG,
    dwCtrlWakeupMask: ULONG,
    dwControlKeyState: ULONG,
};
pub const CONSOLE_READCONSOLE_CONTROL = struct__CONSOLE_READCONSOLE_CONTROL;
pub const PCONSOLE_READCONSOLE_CONTROL = [*c]struct__CONSOLE_READCONSOLE_CONTROL;
extern fn ReadConsoleA(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL) BOOL;
extern fn ReadConsoleW(hConsoleInput: HANDLE, lpBuffer: LPVOID, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: LPDWORD, pInputControl: PCONSOLE_READCONSOLE_CONTROL) BOOL;
extern fn WriteConsoleA(hConsoleOutput: HANDLE, lpBuffer: ?*const c_void, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID) BOOL;
extern fn WriteConsoleW(hConsoleOutput: HANDLE, lpBuffer: ?*const c_void, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: LPDWORD, lpReserved: LPVOID) BOOL;
pub const PHANDLER_ROUTINE = ?fn (DWORD) callconv(std.os.windows.WINAPI) BOOL;
extern fn SetConsoleCtrlHandler(HandlerRoutine: PHANDLER_ROUTINE, Add: BOOL) BOOL;
extern fn CreatePseudoConsole(size: COORD, hInput: HANDLE, hOutput: HANDLE, dwFlags: DWORD, phPC: [*c]HPCON) HRESULT;
extern fn ResizePseudoConsole(hPC: HPCON, size: COORD) HRESULT;
extern fn ClosePseudoConsole(hPC: HPCON) void;
extern fn FillConsoleOutputCharacterA(hConsoleOutput: HANDLE, cCharacter: CHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
extern fn FillConsoleOutputCharacterW(hConsoleOutput: HANDLE, cCharacter: WCHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
extern fn FillConsoleOutputAttribute(hConsoleOutput: HANDLE, wAttribute: WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD) BOOL;
extern fn GenerateConsoleCtrlEvent(dwCtrlEvent: DWORD, dwProcessGroupId: DWORD) BOOL;
extern fn CreateConsoleScreenBuffer(dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: [*c]const SECURITY_ATTRIBUTES, dwFlags: DWORD, lpScreenBufferData: LPVOID) HANDLE;
extern fn SetConsoleActiveScreenBuffer(hConsoleOutput: HANDLE) BOOL;
extern fn FlushConsoleInputBuffer(hConsoleInput: HANDLE) BOOL;
extern fn SetConsoleCP(wCodePageID: UINT) BOOL;
extern fn SetConsoleOutputCP(wCodePageID: UINT) BOOL;
pub const struct__CONSOLE_CURSOR_INFO = extern struct {
    dwSize: DWORD,
    bVisible: BOOL,
};
pub const CONSOLE_CURSOR_INFO = struct__CONSOLE_CURSOR_INFO;
pub const PCONSOLE_CURSOR_INFO = [*c]struct__CONSOLE_CURSOR_INFO;
extern fn GetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: PCONSOLE_CURSOR_INFO) BOOL;
extern fn SetConsoleCursorInfo(hConsoleOutput: HANDLE, lpConsoleCursorInfo: [*c]const CONSOLE_CURSOR_INFO) BOOL;
pub const struct__CONSOLE_SCREEN_BUFFER_INFO = extern struct {
    dwSize: COORD,
    dwCursorPosition: COORD,
    wAttributes: WORD,
    srWindow: SMALL_RECT,
    dwMaximumWindowSize: COORD,
};
pub const CONSOLE_SCREEN_BUFFER_INFO = struct__CONSOLE_SCREEN_BUFFER_INFO;
pub const PCONSOLE_SCREEN_BUFFER_INFO = [*c]struct__CONSOLE_SCREEN_BUFFER_INFO;
extern fn GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: PCONSOLE_SCREEN_BUFFER_INFO) BOOL;
pub const struct__CONSOLE_SCREEN_BUFFER_INFOEX = extern struct {
    cbSize: ULONG,
    dwSize: COORD,
    dwCursorPosition: COORD,
    wAttributes: WORD,
    srWindow: SMALL_RECT,
    dwMaximumWindowSize: COORD,
    wPopupAttributes: WORD,
    bFullscreenSupported: BOOL,
    ColorTable: [16]COLORREF,
};
pub const CONSOLE_SCREEN_BUFFER_INFOEX = struct__CONSOLE_SCREEN_BUFFER_INFOEX;
pub const PCONSOLE_SCREEN_BUFFER_INFOEX = [*c]struct__CONSOLE_SCREEN_BUFFER_INFOEX;
extern fn GetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX) BOOL;
extern fn SetConsoleScreenBufferInfoEx(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfoEx: PCONSOLE_SCREEN_BUFFER_INFOEX) BOOL;
extern fn SetConsoleScreenBufferSize(hConsoleOutput: HANDLE, dwSize: COORD) BOOL;
extern fn SetConsoleCursorPosition(hConsoleOutput: HANDLE, dwCursorPosition: COORD) BOOL;
extern fn GetLargestConsoleWindowSize(hConsoleOutput: HANDLE) COORD;
extern fn SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: WORD) BOOL;
extern fn SetConsoleWindowInfo(hConsoleOutput: HANDLE, bAbsolute: BOOL, lpConsoleWindow: [*c]const SMALL_RECT) BOOL;
extern fn WriteConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPCSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
extern fn WriteConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPCWSTR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) BOOL;
extern fn WriteConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: [*c]const WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD) BOOL;
extern fn ReadConsoleOutputCharacterA(hConsoleOutput: HANDLE, lpCharacter: LPSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD) BOOL;
extern fn ReadConsoleOutputCharacterW(hConsoleOutput: HANDLE, lpCharacter: LPWSTR, nLength: DWORD, dwReadCoord: COORD, lpNumberOfCharsRead: LPDWORD) BOOL;
extern fn ReadConsoleOutputAttribute(hConsoleOutput: HANDLE, lpAttribute: LPWORD, nLength: DWORD, dwReadCoord: COORD, lpNumberOfAttrsRead: LPDWORD) BOOL;
extern fn WriteConsoleInputA(hConsoleInput: HANDLE, lpBuffer: [*c]const INPUT_RECORD, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD) BOOL;
extern fn WriteConsoleInputW(hConsoleInput: HANDLE, lpBuffer: [*c]const INPUT_RECORD, nLength: DWORD, lpNumberOfEventsWritten: LPDWORD) BOOL;
extern fn ScrollConsoleScreenBufferA(hConsoleOutput: HANDLE, lpScrollRectangle: [*c]const SMALL_RECT, lpClipRectangle: [*c]const SMALL_RECT, dwDestinationOrigin: COORD, lpFill: [*c]const CHAR_INFO) BOOL;
extern fn ScrollConsoleScreenBufferW(hConsoleOutput: HANDLE, lpScrollRectangle: [*c]const SMALL_RECT, lpClipRectangle: [*c]const SMALL_RECT, dwDestinationOrigin: COORD, lpFill: [*c]const CHAR_INFO) BOOL;
extern fn WriteConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: [*c]const CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT) BOOL;
extern fn WriteConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: [*c]const CHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpWriteRegion: PSMALL_RECT) BOOL;
extern fn ReadConsoleOutputA(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT) BOOL;
extern fn ReadConsoleOutputW(hConsoleOutput: HANDLE, lpBuffer: PCHAR_INFO, dwBufferSize: COORD, dwBufferCoord: COORD, lpReadRegion: PSMALL_RECT) BOOL;
extern fn GetConsoleTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) DWORD;
extern fn GetConsoleTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) DWORD;
extern fn GetConsoleOriginalTitleA(lpConsoleTitle: LPSTR, nSize: DWORD) DWORD;
extern fn GetConsoleOriginalTitleW(lpConsoleTitle: LPWSTR, nSize: DWORD) DWORD;
extern fn SetConsoleTitleA(lpConsoleTitle: LPCSTR) BOOL;
extern fn SetConsoleTitleW(lpConsoleTitle: LPCWSTR) BOOL;
extern fn GetNumberOfConsoleMouseButtons(lpNumberOfMouseButtons: LPDWORD) BOOL;
extern fn GetConsoleFontSize(hConsoleOutput: HANDLE, nFont: DWORD) COORD;
extern fn GetCurrentConsoleFont(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFont: PCONSOLE_FONT_INFO) BOOL;
pub const struct__CONSOLE_FONT_INFOEX = extern struct {
    cbSize: ULONG,
    nFont: DWORD,
    dwFontSize: COORD,
    FontFamily: UINT,
    FontWeight: UINT,
    FaceName: [32]WCHAR,
};
pub const CONSOLE_FONT_INFOEX = struct__CONSOLE_FONT_INFOEX;
pub const PCONSOLE_FONT_INFOEX = [*c]struct__CONSOLE_FONT_INFOEX;
extern fn GetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX) BOOL;
extern fn SetCurrentConsoleFontEx(hConsoleOutput: HANDLE, bMaximumWindow: BOOL, lpConsoleCurrentFontEx: PCONSOLE_FONT_INFOEX) BOOL;
pub const struct__CONSOLE_SELECTION_INFO = extern struct {
    dwFlags: DWORD,
    dwSelectionAnchor: COORD,
    srSelection: SMALL_RECT,
};
pub const CONSOLE_SELECTION_INFO = struct__CONSOLE_SELECTION_INFO;
pub const PCONSOLE_SELECTION_INFO = [*c]struct__CONSOLE_SELECTION_INFO;
extern fn GetConsoleSelectionInfo(lpConsoleSelectionInfo: PCONSOLE_SELECTION_INFO) BOOL;
pub const struct__CONSOLE_HISTORY_INFO = extern struct {
    cbSize: UINT,
    HistoryBufferSize: UINT,
    NumberOfHistoryBuffers: UINT,
    dwFlags: DWORD,
};
pub const CONSOLE_HISTORY_INFO = struct__CONSOLE_HISTORY_INFO;
pub const PCONSOLE_HISTORY_INFO = [*c]struct__CONSOLE_HISTORY_INFO;
extern fn GetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) BOOL;
extern fn SetConsoleHistoryInfo(lpConsoleHistoryInfo: PCONSOLE_HISTORY_INFO) BOOL;
extern fn GetConsoleDisplayMode(lpModeFlags: LPDWORD) BOOL;
extern fn SetConsoleDisplayMode(hConsoleOutput: HANDLE, dwFlags: DWORD, lpNewScreenBufferDimensions: PCOORD) BOOL;
extern fn GetConsoleWindow() HWND;
extern fn AddConsoleAliasA(Source: LPSTR, Target: LPSTR, ExeName: LPSTR) BOOL;
extern fn AddConsoleAliasW(Source: LPWSTR, Target: LPWSTR, ExeName: LPWSTR) BOOL;
extern fn GetConsoleAliasA(Source: LPSTR, TargetBuffer: LPSTR, TargetBufferLength: DWORD, ExeName: LPSTR) DWORD;
extern fn GetConsoleAliasW(Source: LPWSTR, TargetBuffer: LPWSTR, TargetBufferLength: DWORD, ExeName: LPWSTR) DWORD;
extern fn GetConsoleAliasesLengthA(ExeName: LPSTR) DWORD;
extern fn GetConsoleAliasesLengthW(ExeName: LPWSTR) DWORD;
extern fn GetConsoleAliasExesLengthA() DWORD;
extern fn GetConsoleAliasExesLengthW() DWORD;
extern fn GetConsoleAliasesA(AliasBuffer: LPSTR, AliasBufferLength: DWORD, ExeName: LPSTR) DWORD;
extern fn GetConsoleAliasesW(AliasBuffer: LPWSTR, AliasBufferLength: DWORD, ExeName: LPWSTR) DWORD;
extern fn GetConsoleAliasExesA(ExeNameBuffer: LPSTR, ExeNameBufferLength: DWORD) DWORD;
extern fn GetConsoleAliasExesW(ExeNameBuffer: LPWSTR, ExeNameBufferLength: DWORD) DWORD;
extern fn ExpungeConsoleCommandHistoryA(ExeName: LPSTR) void;
extern fn ExpungeConsoleCommandHistoryW(ExeName: LPWSTR) void;
extern fn SetConsoleNumberOfCommandsA(Number: DWORD, ExeName: LPSTR) BOOL;
extern fn SetConsoleNumberOfCommandsW(Number: DWORD, ExeName: LPWSTR) BOOL;
extern fn GetConsoleCommandHistoryLengthA(ExeName: LPSTR) DWORD;
extern fn GetConsoleCommandHistoryLengthW(ExeName: LPWSTR) DWORD;
extern fn GetConsoleCommandHistoryA(Commands: LPSTR, CommandBufferLength: DWORD, ExeName: LPSTR) DWORD;
extern fn GetConsoleCommandHistoryW(Commands: LPWSTR, CommandBufferLength: DWORD, ExeName: LPWSTR) DWORD;
extern fn GetConsoleProcessList(lpdwProcessList: LPDWORD, dwProcessCount: DWORD) DWORD;
pub const struct_tagVS_FIXEDFILEINFO = extern struct {
    dwSignature: DWORD,
    dwStrucVersion: DWORD,
    dwFileVersionMS: DWORD,
    dwFileVersionLS: DWORD,
    dwProductVersionMS: DWORD,
    dwProductVersionLS: DWORD,
    dwFileFlagsMask: DWORD,
    dwFileFlags: DWORD,
    dwFileOS: DWORD,
    dwFileType: DWORD,
    dwFileSubtype: DWORD,
    dwFileDateMS: DWORD,
    dwFileDateLS: DWORD,
};
pub const VS_FIXEDFILEINFO = struct_tagVS_FIXEDFILEINFO;
extern fn VerFindFileA(uFlags: DWORD, szFileName: LPCSTR, szWinDir: LPCSTR, szAppDir: LPCSTR, szCurDir: LPSTR, puCurDirLen: PUINT, szDestDir: LPSTR, puDestDirLen: PUINT) DWORD;
extern fn VerFindFileW(uFlags: DWORD, szFileName: LPCWSTR, szWinDir: LPCWSTR, szAppDir: LPCWSTR, szCurDir: LPWSTR, puCurDirLen: PUINT, szDestDir: LPWSTR, puDestDirLen: PUINT) DWORD;
extern fn VerInstallFileA(uFlags: DWORD, szSrcFileName: LPCSTR, szDestFileName: LPCSTR, szSrcDir: LPCSTR, szDestDir: LPCSTR, szCurDir: LPCSTR, szTmpFile: LPSTR, puTmpFileLen: PUINT) DWORD;
extern fn VerInstallFileW(uFlags: DWORD, szSrcFileName: LPCWSTR, szDestFileName: LPCWSTR, szSrcDir: LPCWSTR, szDestDir: LPCWSTR, szCurDir: LPCWSTR, szTmpFile: LPWSTR, puTmpFileLen: PUINT) DWORD;
extern fn GetFileVersionInfoSizeA(lptstrFilename: LPCSTR, lpdwHandle: LPDWORD) DWORD;
extern fn GetFileVersionInfoSizeW(lptstrFilename: LPCWSTR, lpdwHandle: LPDWORD) DWORD;
extern fn GetFileVersionInfoA(lptstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
extern fn GetFileVersionInfoW(lptstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
extern fn GetFileVersionInfoSizeExA(dwFlags: DWORD, lpwstrFilename: LPCSTR, lpdwHandle: LPDWORD) DWORD;
extern fn GetFileVersionInfoSizeExW(dwFlags: DWORD, lpwstrFilename: LPCWSTR, lpdwHandle: LPDWORD) DWORD;
extern fn GetFileVersionInfoExA(dwFlags: DWORD, lpwstrFilename: LPCSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
extern fn GetFileVersionInfoExW(dwFlags: DWORD, lpwstrFilename: LPCWSTR, dwHandle: DWORD, dwLen: DWORD, lpData: LPVOID) BOOL;
extern fn VerLanguageNameA(wLang: DWORD, szLang: LPSTR, cchLang: DWORD) DWORD;
extern fn VerLanguageNameW(wLang: DWORD, szLang: LPWSTR, cchLang: DWORD) DWORD;
extern fn VerQueryValueA(pBlock: LPCVOID, lpSubBlock: LPCSTR, lplpBuffer: [*c]LPVOID, puLen: PUINT) BOOL;
extern fn VerQueryValueW(pBlock: LPCVOID, lpSubBlock: LPCWSTR, lplpBuffer: [*c]LPVOID, puLen: PUINT) BOOL;
pub const LSTATUS = LONG;
pub const REGSAM = ACCESS_MASK;
pub const struct_val_context = extern struct {
    valuelen: c_int,
    value_context: LPVOID,
    val_buff_ptr: LPVOID,
};
pub const PVALCONTEXT = [*c]struct_val_context;
pub const struct_pvalueA = extern struct {
    pv_valuename: LPSTR,
    pv_valuelen: c_int,
    pv_value_context: LPVOID,
    pv_type: DWORD,
};
pub const PVALUEA = struct_pvalueA;
pub const PPVALUEA = [*c]struct_pvalueA;
pub const struct_pvalueW = extern struct {
    pv_valuename: LPWSTR,
    pv_valuelen: c_int,
    pv_value_context: LPVOID,
    pv_type: DWORD,
};
pub const PVALUEW = struct_pvalueW;
pub const PPVALUEW = [*c]struct_pvalueW;
pub const PVALUE = PVALUEA;
pub const PPVALUE = PPVALUEA;
pub const QUERYHANDLER = fn (LPVOID, PVALCONTEXT, DWORD, LPVOID, [*c]DWORD, DWORD) callconv(std.os.windows.WINAPI) DWORD;
pub const PQUERYHANDLER = [*c]QUERYHANDLER;
pub const struct_provider_info = extern struct {
    pi_R0_1val: PQUERYHANDLER,
    pi_R0_allvals: PQUERYHANDLER,
    pi_R3_1val: PQUERYHANDLER,
    pi_R3_allvals: PQUERYHANDLER,
    pi_flags: DWORD,
    pi_key_context: LPVOID,
};
pub const REG_PROVIDER = struct_provider_info;
pub const PPROVIDER = [*c]struct_provider_info;
pub const struct_value_entA = extern struct {
    ve_valuename: LPSTR,
    ve_valuelen: DWORD,
    ve_valueptr: DWORD_PTR,
    ve_type: DWORD,
};
pub const VALENTA = struct_value_entA;
pub const PVALENTA = [*c]struct_value_entA;
pub const struct_value_entW = extern struct {
    ve_valuename: LPWSTR,
    ve_valuelen: DWORD,
    ve_valueptr: DWORD_PTR,
    ve_type: DWORD,
};
pub const VALENTW = struct_value_entW;
pub const PVALENTW = [*c]struct_value_entW;
pub const VALENT = VALENTA;
pub const PVALENT = PVALENTA;
extern fn RegCloseKey(hKey: HKEY) LSTATUS;
extern fn RegOverridePredefKey(hKey: HKEY, hNewHKey: HKEY) LSTATUS;
extern fn RegOpenUserClassesRoot(hToken: HANDLE, dwOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
extern fn RegOpenCurrentUser(samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
extern fn RegDisablePredefinedCache() LSTATUS;
extern fn RegDisablePredefinedCacheEx() LSTATUS;
extern fn RegConnectRegistryA(lpMachineName: LPCSTR, hKey: HKEY, phkResult: PHKEY) LSTATUS;
extern fn RegConnectRegistryW(lpMachineName: LPCWSTR, hKey: HKEY, phkResult: PHKEY) LSTATUS;
extern fn RegConnectRegistryExA(lpMachineName: LPCSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY) LSTATUS;
extern fn RegConnectRegistryExW(lpMachineName: LPCWSTR, hKey: HKEY, Flags: ULONG, phkResult: PHKEY) LSTATUS;
extern fn RegCreateKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) LSTATUS;
extern fn RegCreateKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) LSTATUS;
extern fn RegCreateKeyExA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD) LSTATUS;
extern fn RegCreateKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD) LSTATUS;
extern fn RegCreateKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, Reserved: DWORD, lpClass: LPSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
extern fn RegCreateKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, Reserved: DWORD, lpClass: LPWSTR, dwOptions: DWORD, samDesired: REGSAM, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, phkResult: PHKEY, lpdwDisposition: LPDWORD, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
extern fn RegDeleteKeyA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
extern fn RegDeleteKeyW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
extern fn RegDeleteKeyExA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD) LSTATUS;
extern fn RegDeleteKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD) LSTATUS;
extern fn RegDeleteKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID) LSTATUS;
extern fn RegDeleteKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, samDesired: REGSAM, Reserved: DWORD, hTransaction: HANDLE, pExtendedParameter: PVOID) LSTATUS;
extern fn RegDisableReflectionKey(hBase: HKEY) LONG;
extern fn RegEnableReflectionKey(hBase: HKEY) LONG;
extern fn RegQueryReflectionKey(hBase: HKEY, bIsReflectionDisabled: [*c]BOOL) LONG;
extern fn RegDeleteValueA(hKey: HKEY, lpValueName: LPCSTR) LSTATUS;
extern fn RegDeleteValueW(hKey: HKEY, lpValueName: LPCWSTR) LSTATUS;
extern fn RegEnumKeyA(hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, cchName: DWORD) LSTATUS;
extern fn RegEnumKeyW(hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, cchName: DWORD) LSTATUS;
extern fn RegEnumKeyExA(hKey: HKEY, dwIndex: DWORD, lpName: LPSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
extern fn RegEnumKeyExW(hKey: HKEY, dwIndex: DWORD, lpName: LPWSTR, lpcchName: LPDWORD, lpReserved: LPDWORD, lpClass: LPWSTR, lpcchClass: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
extern fn RegEnumValueA(hKey: HKEY, dwIndex: DWORD, lpValueName: LPSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
extern fn RegEnumValueW(hKey: HKEY, dwIndex: DWORD, lpValueName: LPWSTR, lpcchValueName: LPDWORD, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
extern fn RegFlushKey(hKey: HKEY) LSTATUS;
extern fn RegGetKeySecurity(hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR, lpcbSecurityDescriptor: LPDWORD) LSTATUS;
extern fn RegLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpFile: LPCSTR) LSTATUS;
extern fn RegLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpFile: LPCWSTR) LSTATUS;
extern fn RegNotifyChangeKeyValue(hKey: HKEY, bWatchSubtree: BOOL, dwNotifyFilter: DWORD, hEvent: HANDLE, fAsynchronous: BOOL) LSTATUS;
extern fn RegOpenKeyA(hKey: HKEY, lpSubKey: LPCSTR, phkResult: PHKEY) LSTATUS;
extern fn RegOpenKeyW(hKey: HKEY, lpSubKey: LPCWSTR, phkResult: PHKEY) LSTATUS;
extern fn RegOpenKeyExA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
extern fn RegOpenKeyExW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY) LSTATUS;
extern fn RegOpenKeyTransactedA(hKey: HKEY, lpSubKey: LPCSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
extern fn RegOpenKeyTransactedW(hKey: HKEY, lpSubKey: LPCWSTR, ulOptions: DWORD, samDesired: REGSAM, phkResult: PHKEY, hTransaction: HANDLE, pExtendedParemeter: PVOID) LSTATUS;
extern fn RegQueryInfoKeyA(hKey: HKEY, lpClass: LPSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
extern fn RegQueryInfoKeyW(hKey: HKEY, lpClass: LPWSTR, lpcchClass: LPDWORD, lpReserved: LPDWORD, lpcSubKeys: LPDWORD, lpcbMaxSubKeyLen: LPDWORD, lpcbMaxClassLen: LPDWORD, lpcValues: LPDWORD, lpcbMaxValueNameLen: LPDWORD, lpcbMaxValueLen: LPDWORD, lpcbSecurityDescriptor: LPDWORD, lpftLastWriteTime: PFILETIME) LSTATUS;
extern fn RegQueryValueA(hKey: HKEY, lpSubKey: LPCSTR, lpData: LPSTR, lpcbData: PLONG) LSTATUS;
extern fn RegQueryValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpData: LPWSTR, lpcbData: PLONG) LSTATUS;
extern fn RegQueryMultipleValuesA(hKey: HKEY, val_list: PVALENTA, num_vals: DWORD, lpValueBuf: LPSTR, ldwTotsize: LPDWORD) LSTATUS;
extern fn RegQueryMultipleValuesW(hKey: HKEY, val_list: PVALENTW, num_vals: DWORD, lpValueBuf: LPWSTR, ldwTotsize: LPDWORD) LSTATUS;
extern fn RegQueryValueExA(hKey: HKEY, lpValueName: LPCSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
extern fn RegQueryValueExW(hKey: HKEY, lpValueName: LPCWSTR, lpReserved: LPDWORD, lpType: LPDWORD, lpData: LPBYTE, lpcbData: LPDWORD) LSTATUS;
extern fn RegReplaceKeyA(hKey: HKEY, lpSubKey: LPCSTR, lpNewFile: LPCSTR, lpOldFile: LPCSTR) LSTATUS;
extern fn RegReplaceKeyW(hKey: HKEY, lpSubKey: LPCWSTR, lpNewFile: LPCWSTR, lpOldFile: LPCWSTR) LSTATUS;
extern fn RegRestoreKeyA(hKey: HKEY, lpFile: LPCSTR, dwFlags: DWORD) LSTATUS;
extern fn RegRestoreKeyW(hKey: HKEY, lpFile: LPCWSTR, dwFlags: DWORD) LSTATUS;
extern fn RegRenameKey(hKey: HKEY, lpSubKeyName: LPCWSTR, lpNewKeyName: LPCWSTR) LSTATUS;
extern fn RegSaveKeyA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) LSTATUS;
extern fn RegSaveKeyW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES) LSTATUS;
extern fn RegSetKeySecurity(hKey: HKEY, SecurityInformation: SECURITY_INFORMATION, pSecurityDescriptor: PSECURITY_DESCRIPTOR) LSTATUS;
extern fn RegSetValueA(hKey: HKEY, lpSubKey: LPCSTR, dwType: DWORD, lpData: LPCSTR, cbData: DWORD) LSTATUS;
extern fn RegSetValueW(hKey: HKEY, lpSubKey: LPCWSTR, dwType: DWORD, lpData: LPCWSTR, cbData: DWORD) LSTATUS;
extern fn RegSetValueExA(hKey: HKEY, lpValueName: LPCSTR, Reserved: DWORD, dwType: DWORD, lpData: [*c]const BYTE, cbData: DWORD) LSTATUS;
extern fn RegSetValueExW(hKey: HKEY, lpValueName: LPCWSTR, Reserved: DWORD, dwType: DWORD, lpData: [*c]const BYTE, cbData: DWORD) LSTATUS;
extern fn RegUnLoadKeyA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
extern fn RegUnLoadKeyW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
extern fn RegDeleteKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR) LSTATUS;
extern fn RegDeleteKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR) LSTATUS;
extern fn RegSetKeyValueA(hKey: HKEY, lpSubKey: LPCSTR, lpValueName: LPCSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD) LSTATUS;
extern fn RegSetKeyValueW(hKey: HKEY, lpSubKey: LPCWSTR, lpValueName: LPCWSTR, dwType: DWORD, lpData: LPCVOID, cbData: DWORD) LSTATUS;
extern fn RegDeleteTreeA(hKey: HKEY, lpSubKey: LPCSTR) LSTATUS;
extern fn RegDeleteTreeW(hKey: HKEY, lpSubKey: LPCWSTR) LSTATUS;
extern fn RegCopyTreeA(hKeySrc: HKEY, lpSubKey: LPCSTR, hKeyDest: HKEY) LSTATUS;
extern fn RegGetValueA(hkey: HKEY, lpSubKey: LPCSTR, lpValue: LPCSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD) LSTATUS;
extern fn RegGetValueW(hkey: HKEY, lpSubKey: LPCWSTR, lpValue: LPCWSTR, dwFlags: DWORD, pdwType: LPDWORD, pvData: PVOID, pcbData: LPDWORD) LSTATUS;
extern fn RegCopyTreeW(hKeySrc: HKEY, lpSubKey: LPCWSTR, hKeyDest: HKEY) LSTATUS;
extern fn RegLoadMUIStringA(hKey: HKEY, pszValue: LPCSTR, pszOutBuf: LPSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCSTR) LSTATUS;
extern fn RegLoadMUIStringW(hKey: HKEY, pszValue: LPCWSTR, pszOutBuf: LPWSTR, cbOutBuf: DWORD, pcbData: LPDWORD, Flags: DWORD, pszDirectory: LPCWSTR) LSTATUS;
extern fn RegLoadAppKeyA(lpFile: LPCSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD) LSTATUS;
extern fn RegLoadAppKeyW(lpFile: LPCWSTR, phkResult: PHKEY, samDesired: REGSAM, dwOptions: DWORD, Reserved: DWORD) LSTATUS;
extern fn InitiateSystemShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL) BOOL;
extern fn InitiateSystemShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL) BOOL;
extern fn AbortSystemShutdownA(lpMachineName: LPSTR) BOOL;
extern fn AbortSystemShutdownW(lpMachineName: LPWSTR) BOOL;
extern fn InitiateSystemShutdownExA(lpMachineName: LPSTR, lpMessage: LPSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD) BOOL;
extern fn InitiateSystemShutdownExW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwTimeout: DWORD, bForceAppsClosed: BOOL, bRebootAfterShutdown: BOOL, dwReason: DWORD) BOOL;
extern fn InitiateShutdownA(lpMachineName: LPSTR, lpMessage: LPSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD) DWORD;
extern fn InitiateShutdownW(lpMachineName: LPWSTR, lpMessage: LPWSTR, dwGracePeriod: DWORD, dwShutdownFlags: DWORD, dwReason: DWORD) DWORD;
extern fn CheckForHiberboot(pHiberboot: PBOOLEAN, bClearFlag: BOOLEAN) DWORD;
extern fn RegSaveKeyExA(hKey: HKEY, lpFile: LPCSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD) LSTATUS;
extern fn RegSaveKeyExW(hKey: HKEY, lpFile: LPCWSTR, lpSecurityAttributes: LPSECURITY_ATTRIBUTES, Flags: DWORD) LSTATUS;
pub const struct__NETRESOURCEA = extern struct {
    dwScope: DWORD,
    dwType: DWORD,
    dwDisplayType: DWORD,
    dwUsage: DWORD,
    lpLocalName: LPSTR,
    lpRemoteName: LPSTR,
    lpComment: LPSTR,
    lpProvider: LPSTR,
};
pub const NETRESOURCEA = struct__NETRESOURCEA;
pub const LPNETRESOURCEA = [*c]struct__NETRESOURCEA;
pub const struct__NETRESOURCEW = extern struct {
    dwScope: DWORD,
    dwType: DWORD,
    dwDisplayType: DWORD,
    dwUsage: DWORD,
    lpLocalName: LPWSTR,
    lpRemoteName: LPWSTR,
    lpComment: LPWSTR,
    lpProvider: LPWSTR,
};
pub const NETRESOURCEW = struct__NETRESOURCEW;
pub const LPNETRESOURCEW = [*c]struct__NETRESOURCEW;
pub const NETRESOURCE = NETRESOURCEA;
pub const LPNETRESOURCE = LPNETRESOURCEA;
extern fn WNetAddConnectionA(lpRemoteName: LPCSTR, lpPassword: LPCSTR, lpLocalName: LPCSTR) DWORD;
extern fn WNetAddConnectionW(lpRemoteName: LPCWSTR, lpPassword: LPCWSTR, lpLocalName: LPCWSTR) DWORD;
extern fn WNetAddConnection2A(lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD) DWORD;
extern fn WNetAddConnection2W(lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD) DWORD;
extern fn WNetAddConnection3A(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserName: LPCSTR, dwFlags: DWORD) DWORD;
extern fn WNetAddConnection3W(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserName: LPCWSTR, dwFlags: DWORD) DWORD;
extern fn WNetCancelConnectionA(lpName: LPCSTR, fForce: BOOL) DWORD;
extern fn WNetCancelConnectionW(lpName: LPCWSTR, fForce: BOOL) DWORD;
extern fn WNetCancelConnection2A(lpName: LPCSTR, dwFlags: DWORD, fForce: BOOL) DWORD;
extern fn WNetCancelConnection2W(lpName: LPCWSTR, dwFlags: DWORD, fForce: BOOL) DWORD;
extern fn WNetGetConnectionA(lpLocalName: LPCSTR, lpRemoteName: LPSTR, lpnLength: LPDWORD) DWORD;
extern fn WNetGetConnectionW(lpLocalName: LPCWSTR, lpRemoteName: LPWSTR, lpnLength: LPDWORD) DWORD;
extern fn WNetRestoreSingleConnectionW(hwndParent: HWND, lpDevice: LPCWSTR, fUseUI: BOOL) DWORD;
extern fn WNetUseConnectionA(hwndOwner: HWND, lpNetResource: LPNETRESOURCEA, lpPassword: LPCSTR, lpUserId: LPCSTR, dwFlags: DWORD, lpAccessName: LPSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD) DWORD;
extern fn WNetUseConnectionW(hwndOwner: HWND, lpNetResource: LPNETRESOURCEW, lpPassword: LPCWSTR, lpUserId: LPCWSTR, dwFlags: DWORD, lpAccessName: LPWSTR, lpBufferSize: LPDWORD, lpResult: LPDWORD) DWORD;
extern fn WNetConnectionDialog(hwnd: HWND, dwType: DWORD) DWORD;
extern fn WNetDisconnectDialog(hwnd: HWND, dwType: DWORD) DWORD;
pub const struct__CONNECTDLGSTRUCTA = extern struct {
    cbStructure: DWORD,
    hwndOwner: HWND,
    lpConnRes: LPNETRESOURCEA,
    dwFlags: DWORD,
    dwDevNum: DWORD,
};
pub const CONNECTDLGSTRUCTA = struct__CONNECTDLGSTRUCTA;
pub const LPCONNECTDLGSTRUCTA = [*c]struct__CONNECTDLGSTRUCTA;
pub const struct__CONNECTDLGSTRUCTW = extern struct {
    cbStructure: DWORD,
    hwndOwner: HWND,
    lpConnRes: LPNETRESOURCEW,
    dwFlags: DWORD,
    dwDevNum: DWORD,
};
pub const CONNECTDLGSTRUCTW = struct__CONNECTDLGSTRUCTW;
pub const LPCONNECTDLGSTRUCTW = [*c]struct__CONNECTDLGSTRUCTW;
pub const CONNECTDLGSTRUCT = CONNECTDLGSTRUCTA;
pub const LPCONNECTDLGSTRUCT = LPCONNECTDLGSTRUCTA;
extern fn WNetConnectionDialog1A(lpConnDlgStruct: LPCONNECTDLGSTRUCTA) DWORD;
extern fn WNetConnectionDialog1W(lpConnDlgStruct: LPCONNECTDLGSTRUCTW) DWORD;
pub const struct__DISCDLGSTRUCTA = extern struct {
    cbStructure: DWORD,
    hwndOwner: HWND,
    lpLocalName: LPSTR,
    lpRemoteName: LPSTR,
    dwFlags: DWORD,
};
pub const DISCDLGSTRUCTA = struct__DISCDLGSTRUCTA;
pub const LPDISCDLGSTRUCTA = [*c]struct__DISCDLGSTRUCTA;
pub const struct__DISCDLGSTRUCTW = extern struct {
    cbStructure: DWORD,
    hwndOwner: HWND,
    lpLocalName: LPWSTR,
    lpRemoteName: LPWSTR,
    dwFlags: DWORD,
};
pub const DISCDLGSTRUCTW = struct__DISCDLGSTRUCTW;
pub const LPDISCDLGSTRUCTW = [*c]struct__DISCDLGSTRUCTW;
pub const DISCDLGSTRUCT = DISCDLGSTRUCTA;
pub const LPDISCDLGSTRUCT = LPDISCDLGSTRUCTA;
extern fn WNetDisconnectDialog1A(lpConnDlgStruct: LPDISCDLGSTRUCTA) DWORD;
extern fn WNetDisconnectDialog1W(lpConnDlgStruct: LPDISCDLGSTRUCTW) DWORD;
extern fn WNetOpenEnumA(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEA, lphEnum: LPHANDLE) DWORD;
extern fn WNetOpenEnumW(dwScope: DWORD, dwType: DWORD, dwUsage: DWORD, lpNetResource: LPNETRESOURCEW, lphEnum: LPHANDLE) DWORD;
extern fn WNetEnumResourceA(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
extern fn WNetEnumResourceW(hEnum: HANDLE, lpcCount: LPDWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
extern fn WNetCloseEnum(hEnum: HANDLE) DWORD;
extern fn WNetGetResourceParentA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD) DWORD;
extern fn WNetGetResourceParentW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD) DWORD;
extern fn WNetGetResourceInformationA(lpNetResource: LPNETRESOURCEA, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: [*c]LPSTR) DWORD;
extern fn WNetGetResourceInformationW(lpNetResource: LPNETRESOURCEW, lpBuffer: LPVOID, lpcbBuffer: LPDWORD, lplpSystem: [*c]LPWSTR) DWORD;
pub const struct__UNIVERSAL_NAME_INFOA = extern struct {
    lpUniversalName: LPSTR,
};
pub const UNIVERSAL_NAME_INFOA = struct__UNIVERSAL_NAME_INFOA;
pub const LPUNIVERSAL_NAME_INFOA = [*c]struct__UNIVERSAL_NAME_INFOA;
pub const struct__UNIVERSAL_NAME_INFOW = extern struct {
    lpUniversalName: LPWSTR,
};
pub const UNIVERSAL_NAME_INFOW = struct__UNIVERSAL_NAME_INFOW;
pub const LPUNIVERSAL_NAME_INFOW = [*c]struct__UNIVERSAL_NAME_INFOW;
pub const UNIVERSAL_NAME_INFO = UNIVERSAL_NAME_INFOA;
pub const LPUNIVERSAL_NAME_INFO = LPUNIVERSAL_NAME_INFOA;
pub const struct__REMOTE_NAME_INFOA = extern struct {
    lpUniversalName: LPSTR,
    lpConnectionName: LPSTR,
    lpRemainingPath: LPSTR,
};
pub const REMOTE_NAME_INFOA = struct__REMOTE_NAME_INFOA;
pub const LPREMOTE_NAME_INFOA = [*c]struct__REMOTE_NAME_INFOA;
pub const struct__REMOTE_NAME_INFOW = extern struct {
    lpUniversalName: LPWSTR,
    lpConnectionName: LPWSTR,
    lpRemainingPath: LPWSTR,
};
pub const REMOTE_NAME_INFOW = struct__REMOTE_NAME_INFOW;
pub const LPREMOTE_NAME_INFOW = [*c]struct__REMOTE_NAME_INFOW;
pub const REMOTE_NAME_INFO = REMOTE_NAME_INFOA;
pub const LPREMOTE_NAME_INFO = LPREMOTE_NAME_INFOA;
extern fn WNetGetUniversalNameA(lpLocalPath: LPCSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
extern fn WNetGetUniversalNameW(lpLocalPath: LPCWSTR, dwInfoLevel: DWORD, lpBuffer: LPVOID, lpBufferSize: LPDWORD) DWORD;
extern fn WNetGetUserA(lpName: LPCSTR, lpUserName: LPSTR, lpnLength: LPDWORD) DWORD;
extern fn WNetGetUserW(lpName: LPCWSTR, lpUserName: LPWSTR, lpnLength: LPDWORD) DWORD;
extern fn WNetGetProviderNameA(dwNetType: DWORD, lpProviderName: LPSTR, lpBufferSize: LPDWORD) DWORD;
extern fn WNetGetProviderNameW(dwNetType: DWORD, lpProviderName: LPWSTR, lpBufferSize: LPDWORD) DWORD;
pub const struct__NETINFOSTRUCT = extern struct {
    cbStructure: DWORD,
    dwProviderVersion: DWORD,
    dwStatus: DWORD,
    dwCharacteristics: DWORD,
    dwHandle: ULONG_PTR,
    wNetType: WORD,
    dwPrinters: DWORD,
    dwDrives: DWORD,
};
pub const NETINFOSTRUCT = struct__NETINFOSTRUCT;
pub const LPNETINFOSTRUCT = [*c]struct__NETINFOSTRUCT;
extern fn WNetGetNetworkInformationA(lpProvider: LPCSTR, lpNetInfoStruct: LPNETINFOSTRUCT) DWORD;
extern fn WNetGetNetworkInformationW(lpProvider: LPCWSTR, lpNetInfoStruct: LPNETINFOSTRUCT) DWORD;
extern fn WNetGetLastErrorA(lpError: LPDWORD, lpErrorBuf: LPSTR, nErrorBufSize: DWORD, lpNameBuf: LPSTR, nNameBufSize: DWORD) DWORD;
extern fn WNetGetLastErrorW(lpError: LPDWORD, lpErrorBuf: LPWSTR, nErrorBufSize: DWORD, lpNameBuf: LPWSTR, nNameBufSize: DWORD) DWORD;
pub const struct__NETCONNECTINFOSTRUCT = extern struct {
    cbStructure: DWORD,
    dwFlags: DWORD,
    dwSpeed: DWORD,
    dwDelay: DWORD,
    dwOptDataSize: DWORD,
};
pub const NETCONNECTINFOSTRUCT = struct__NETCONNECTINFOSTRUCT;
pub const LPNETCONNECTINFOSTRUCT = [*c]struct__NETCONNECTINFOSTRUCT;
extern fn MultinetGetConnectionPerformanceA(lpNetResource: LPNETRESOURCEA, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT) DWORD;
extern fn MultinetGetConnectionPerformanceW(lpNetResource: LPNETRESOURCEW, lpNetConnectInfoStruct: LPNETCONNECTINFOSTRUCT) DWORD;
extern fn uaw_CharUpperW(String: LPUWSTR) LPUWSTR;
extern fn uaw_lstrcmpW(String1: PCUWSTR, String2: PCUWSTR) c_int;
extern fn uaw_lstrcmpiW(String1: PCUWSTR, String2: PCUWSTR) c_int;
extern fn uaw_lstrlenW(String: LPCUWSTR) c_int;
extern fn uaw_wcschr(String: PCUWSTR, Character: WCHAR) PUWSTR;
extern fn uaw_wcscpy(Destination: PUWSTR, Source: PCUWSTR) PUWSTR;
extern fn uaw_wcsicmp(String1: PCUWSTR, String2: PCUWSTR) c_int;
extern fn uaw_wcslen(String: PCUWSTR) usize;
extern fn uaw_wcsrchr(String: PCUWSTR, Character: WCHAR) PUWSTR;
pub fn ua_CharUpperW(String: LPUWSTR) LPUWSTR {
    if (1 != 0) {
        return @ptrCast(LPUWSTR, @alignCast(@alignOf(WCHAR), CharUpperW(@ptrCast(PWSTR, @alignCast(@alignOf(WCHAR), String)))));
    } else {
        return uaw_CharUpperW(String);
    }
}
pub fn ua_lstrcmpW(String1: LPCUWSTR, String2: LPCUWSTR) c_int {
    if ((1 != 0) and (1 != 0)) {
        return lstrcmpW(@ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String1)), @ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String2)));
    } else {
        return uaw_lstrcmpW(String1, String2);
    }
}
pub fn ua_lstrcmpiW(String1: LPCUWSTR, String2: LPCUWSTR) c_int {
    if ((1 != 0) and (1 != 0)) {
        return lstrcmpiW(@ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String1)), @ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String2)));
    } else {
        return uaw_lstrcmpiW(String1, String2);
    }
}
pub fn ua_lstrlenW(String: LPCUWSTR) c_int {
    if (1 != 0) {
        return lstrlenW(@ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), String)));
    } else {
        return uaw_lstrlenW(String);
    }
}
pub const PUWSTR_C = [*c]WCHAR;
pub fn ua_wcschr(String: PCUWSTR, Character: WCHAR) PUWSTR_C {
    if (1 != 0) {
        return @ptrCast(PUWSTR_C, @alignCast(@alignOf(WCHAR), wcschr(@ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), String)), Character)));
    } else {
        return @ptrCast(PUWSTR_C, @alignCast(@alignOf(WCHAR), uaw_wcschr(String, Character)));
    }
}
pub fn ua_wcsrchr(String: PCUWSTR, Character: WCHAR) PUWSTR_C {
    if (1 != 0) {
        return @ptrCast(PUWSTR_C, @alignCast(@alignOf(WCHAR), wcsrchr(@ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), String)), Character)));
    } else {
        return @ptrCast(PUWSTR_C, @alignCast(@alignOf(WCHAR), uaw_wcsrchr(String, Character)));
    }
}
pub fn ua_wcscpy(Destination: PUWSTR, Source: PCUWSTR) PUWSTR {
    if ((1 != 0) and (1 != 0)) {
        return @ptrCast(PUWSTR, @alignCast(@alignOf(WCHAR), wcscpy(@ptrCast(PWSTR, @alignCast(@alignOf(WCHAR), Destination)), @ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), Source)))));
    } else {
        return uaw_wcscpy(Destination, Source);
    }
}
pub fn ua_wcscpy_s(Destination: PUWSTR, DestinationSize: usize, Source: PCUWSTR) PUWSTR {
    if ((1 != 0) and (1 != 0)) {
        return if (wcscpy_s(@ptrCast(PWSTR, @alignCast(@alignOf(WCHAR), Destination)), DestinationSize, @ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), Source))) == 0) Destination else null;
    } else {
        return uaw_wcscpy(Destination, Source);
    }
}
pub fn ua_wcslen(String: PCUWSTR) usize {
    if (1 != 0) {
        return wcslen(@ptrCast(PCWSTR, @alignCast(@alignOf(WCHAR), String)));
    } else {
        return uaw_wcslen(String);
    }
}
pub fn ua_wcsicmp(String1: PCUWSTR, String2: PCUWSTR) c_int {
    if ((1 != 0) and (1 != 0)) {
        return _wcsicmp(@ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String1)), @ptrCast(LPCWSTR, @alignCast(@alignOf(WCHAR), String2)));
    } else {
        return uaw_wcsicmp(String1, String2);
    }
}
extern const NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID: GUID;
extern const NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID: GUID;
extern const DOMAIN_JOIN_GUID: GUID;
extern const DOMAIN_LEAVE_GUID: GUID;
extern const FIREWALL_PORT_OPEN_GUID: GUID;
extern const FIREWALL_PORT_CLOSE_GUID: GUID;
extern const MACHINE_POLICY_PRESENT_GUID: GUID;
extern const USER_POLICY_PRESENT_GUID: GUID;
extern const RPC_INTERFACE_EVENT_GUID: GUID;
extern const NAMED_PIPE_EVENT_GUID: GUID;
extern const CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID: GUID;
pub const SERVICE_TRIGGER_CUSTOM_STATE_ID = extern struct {
    Data: [2]DWORD,
};
pub const struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = extern struct {
    u: extern union {
        CustomStateId: SERVICE_TRIGGER_CUSTOM_STATE_ID,
        s: extern struct {
            DataOffset: DWORD,
            Data: [1]BYTE,
        },
    },
};
pub const SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
pub const LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = [*c]struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
pub const struct__SERVICE_DESCRIPTIONA = extern struct {
    lpDescription: LPSTR,
};
pub const SERVICE_DESCRIPTIONA = struct__SERVICE_DESCRIPTIONA;
pub const LPSERVICE_DESCRIPTIONA = [*c]struct__SERVICE_DESCRIPTIONA;
pub const struct__SERVICE_DESCRIPTIONW = extern struct {
    lpDescription: LPWSTR,
};
pub const SERVICE_DESCRIPTIONW = struct__SERVICE_DESCRIPTIONW;
pub const LPSERVICE_DESCRIPTIONW = [*c]struct__SERVICE_DESCRIPTIONW;
pub const SERVICE_DESCRIPTION = SERVICE_DESCRIPTIONA;
pub const LPSERVICE_DESCRIPTION = LPSERVICE_DESCRIPTIONA;
pub const SC_ACTION_NONE = enum__SC_ACTION_TYPE.SC_ACTION_NONE;
pub const SC_ACTION_RESTART = enum__SC_ACTION_TYPE.SC_ACTION_RESTART;
pub const SC_ACTION_REBOOT = enum__SC_ACTION_TYPE.SC_ACTION_REBOOT;
pub const SC_ACTION_RUN_COMMAND = enum__SC_ACTION_TYPE.SC_ACTION_RUN_COMMAND;
pub const SC_ACTION_OWN_RESTART = enum__SC_ACTION_TYPE.SC_ACTION_OWN_RESTART;
pub const enum__SC_ACTION_TYPE = extern enum {
    SC_ACTION_NONE = 0,
    SC_ACTION_RESTART = 1,
    SC_ACTION_REBOOT = 2,
    SC_ACTION_RUN_COMMAND = 3,
    SC_ACTION_OWN_RESTART = 4,
};
pub const SC_ACTION_TYPE = enum__SC_ACTION_TYPE;
pub const struct__SC_ACTION = extern struct {
    Type: SC_ACTION_TYPE,
    Delay: DWORD,
};
pub const SC_ACTION = struct__SC_ACTION;
pub const LPSC_ACTION = [*c]struct__SC_ACTION;
pub const struct__SERVICE_FAILURE_ACTIONSA = extern struct {
    dwResetPeriod: DWORD,
    lpRebootMsg: LPSTR,
    lpCommand: LPSTR,
    cActions: DWORD,
    lpsaActions: [*c]SC_ACTION,
};
pub const SERVICE_FAILURE_ACTIONSA = struct__SERVICE_FAILURE_ACTIONSA;
pub const LPSERVICE_FAILURE_ACTIONSA = [*c]struct__SERVICE_FAILURE_ACTIONSA;
pub const struct__SERVICE_FAILURE_ACTIONSW = extern struct {
    dwResetPeriod: DWORD,
    lpRebootMsg: LPWSTR,
    lpCommand: LPWSTR,
    cActions: DWORD,
    lpsaActions: [*c]SC_ACTION,
};
pub const SERVICE_FAILURE_ACTIONSW = struct__SERVICE_FAILURE_ACTIONSW;
pub const LPSERVICE_FAILURE_ACTIONSW = [*c]struct__SERVICE_FAILURE_ACTIONSW;
pub const SERVICE_FAILURE_ACTIONS = SERVICE_FAILURE_ACTIONSA;
pub const LPSERVICE_FAILURE_ACTIONS = LPSERVICE_FAILURE_ACTIONSA;
pub const struct__SERVICE_DELAYED_AUTO_START_INFO = extern struct {
    fDelayedAutostart: BOOL,
};
pub const SERVICE_DELAYED_AUTO_START_INFO = struct__SERVICE_DELAYED_AUTO_START_INFO;
pub const LPSERVICE_DELAYED_AUTO_START_INFO = [*c]struct__SERVICE_DELAYED_AUTO_START_INFO;
pub const struct__SERVICE_FAILURE_ACTIONS_FLAG = extern struct {
    fFailureActionsOnNonCrashFailures: BOOL,
};
pub const SERVICE_FAILURE_ACTIONS_FLAG = struct__SERVICE_FAILURE_ACTIONS_FLAG;
pub const LPSERVICE_FAILURE_ACTIONS_FLAG = [*c]struct__SERVICE_FAILURE_ACTIONS_FLAG;
pub const struct__SERVICE_SID_INFO = extern struct {
    dwServiceSidType: DWORD,
};
pub const SERVICE_SID_INFO = struct__SERVICE_SID_INFO;
pub const LPSERVICE_SID_INFO = [*c]struct__SERVICE_SID_INFO;
pub const struct__SERVICE_REQUIRED_PRIVILEGES_INFOA = extern struct {
    pmszRequiredPrivileges: LPSTR,
};
pub const SERVICE_REQUIRED_PRIVILEGES_INFOA = struct__SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub const LPSERVICE_REQUIRED_PRIVILEGES_INFOA = [*c]struct__SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub const struct__SERVICE_REQUIRED_PRIVILEGES_INFOW = extern struct {
    pmszRequiredPrivileges: LPWSTR,
};
pub const SERVICE_REQUIRED_PRIVILEGES_INFOW = struct__SERVICE_REQUIRED_PRIVILEGES_INFOW;
pub const LPSERVICE_REQUIRED_PRIVILEGES_INFOW = [*c]struct__SERVICE_REQUIRED_PRIVILEGES_INFOW;
pub const SERVICE_REQUIRED_PRIVILEGES_INFO = SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub const LPSERVICE_REQUIRED_PRIVILEGES_INFO = LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
pub const struct__SERVICE_PRESHUTDOWN_INFO = extern struct {
    dwPreshutdownTimeout: DWORD,
};
pub const SERVICE_PRESHUTDOWN_INFO = struct__SERVICE_PRESHUTDOWN_INFO;
pub const LPSERVICE_PRESHUTDOWN_INFO = [*c]struct__SERVICE_PRESHUTDOWN_INFO;
pub const struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = extern struct {
    dwDataType: DWORD,
    cbData: DWORD,
    pData: PBYTE,
};
pub const SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
pub const PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM = [*c]struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
pub const struct__SERVICE_TRIGGER = extern struct {
    dwTriggerType: DWORD,
    dwAction: DWORD,
    pTriggerSubtype: [*c]GUID,
    cDataItems: DWORD,
    pDataItems: PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM,
};
pub const SERVICE_TRIGGER = struct__SERVICE_TRIGGER;
pub const PSERVICE_TRIGGER = [*c]struct__SERVICE_TRIGGER;
pub const struct__SERVICE_TRIGGER_INFO = extern struct {
    cTriggers: DWORD,
    pTriggers: PSERVICE_TRIGGER,
    pReserved: PBYTE,
};
pub const SERVICE_TRIGGER_INFO = struct__SERVICE_TRIGGER_INFO;
pub const PSERVICE_TRIGGER_INFO = [*c]struct__SERVICE_TRIGGER_INFO;
pub const struct__SERVICE_PREFERRED_NODE_INFO = extern struct {
    usPreferredNode: USHORT,
    fDelete: BOOLEAN,
};
pub const SERVICE_PREFERRED_NODE_INFO = struct__SERVICE_PREFERRED_NODE_INFO;
pub const LPSERVICE_PREFERRED_NODE_INFO = [*c]struct__SERVICE_PREFERRED_NODE_INFO;
pub const struct__SERVICE_TIMECHANGE_INFO = extern struct {
    liNewTime: LARGE_INTEGER,
    liOldTime: LARGE_INTEGER,
};
pub const SERVICE_TIMECHANGE_INFO = struct__SERVICE_TIMECHANGE_INFO;
pub const PSERVICE_TIMECHANGE_INFO = [*c]struct__SERVICE_TIMECHANGE_INFO;
pub const struct__SERVICE_LAUNCH_PROTECTED_INFO = extern struct {
    dwLaunchProtected: DWORD,
};
pub const SERVICE_LAUNCH_PROTECTED_INFO = struct__SERVICE_LAUNCH_PROTECTED_INFO;
pub const PSERVICE_LAUNCH_PROTECTED_INFO = [*c]struct__SERVICE_LAUNCH_PROTECTED_INFO;
pub const struct_SC_HANDLE__ = extern struct {
    unused: c_int,
};
pub const SC_HANDLE = [*c]struct_SC_HANDLE__;
pub const LPSC_HANDLE = [*c]SC_HANDLE;
pub const struct_SERVICE_STATUS_HANDLE__ = extern struct {
    unused: c_int,
};
pub const SERVICE_STATUS_HANDLE = [*c]struct_SERVICE_STATUS_HANDLE__;
pub const SC_STATUS_PROCESS_INFO = enum__SC_STATUS_TYPE.SC_STATUS_PROCESS_INFO;
pub const enum__SC_STATUS_TYPE = extern enum {
    SC_STATUS_PROCESS_INFO = 0,
};
pub const SC_STATUS_TYPE = enum__SC_STATUS_TYPE;
pub const SC_ENUM_PROCESS_INFO = enum__SC_ENUM_TYPE.SC_ENUM_PROCESS_INFO;
pub const enum__SC_ENUM_TYPE = extern enum {
    SC_ENUM_PROCESS_INFO = 0,
};
pub const SC_ENUM_TYPE = enum__SC_ENUM_TYPE;
pub const struct__SERVICE_STATUS = extern struct {
    dwServiceType: DWORD,
    dwCurrentState: DWORD,
    dwControlsAccepted: DWORD,
    dwWin32ExitCode: DWORD,
    dwServiceSpecificExitCode: DWORD,
    dwCheckPoint: DWORD,
    dwWaitHint: DWORD,
};
pub const SERVICE_STATUS = struct__SERVICE_STATUS;
pub const LPSERVICE_STATUS = [*c]struct__SERVICE_STATUS;
pub const struct__SERVICE_STATUS_PROCESS = extern struct {
    dwServiceType: DWORD,
    dwCurrentState: DWORD,
    dwControlsAccepted: DWORD,
    dwWin32ExitCode: DWORD,
    dwServiceSpecificExitCode: DWORD,
    dwCheckPoint: DWORD,
    dwWaitHint: DWORD,
    dwProcessId: DWORD,
    dwServiceFlags: DWORD,
};
pub const SERVICE_STATUS_PROCESS = struct__SERVICE_STATUS_PROCESS;
pub const LPSERVICE_STATUS_PROCESS = [*c]struct__SERVICE_STATUS_PROCESS;
pub const struct__ENUM_SERVICE_STATUSA = extern struct {
    lpServiceName: LPSTR,
    lpDisplayName: LPSTR,
    ServiceStatus: SERVICE_STATUS,
};
pub const ENUM_SERVICE_STATUSA = struct__ENUM_SERVICE_STATUSA;
pub const LPENUM_SERVICE_STATUSA = [*c]struct__ENUM_SERVICE_STATUSA;
pub const struct__ENUM_SERVICE_STATUSW = extern struct {
    lpServiceName: LPWSTR,
    lpDisplayName: LPWSTR,
    ServiceStatus: SERVICE_STATUS,
};
pub const ENUM_SERVICE_STATUSW = struct__ENUM_SERVICE_STATUSW;
pub const LPENUM_SERVICE_STATUSW = [*c]struct__ENUM_SERVICE_STATUSW;
pub const ENUM_SERVICE_STATUS = ENUM_SERVICE_STATUSA;
pub const LPENUM_SERVICE_STATUS = LPENUM_SERVICE_STATUSA;
pub const struct__ENUM_SERVICE_STATUS_PROCESSA = extern struct {
    lpServiceName: LPSTR,
    lpDisplayName: LPSTR,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};
pub const ENUM_SERVICE_STATUS_PROCESSA = struct__ENUM_SERVICE_STATUS_PROCESSA;
pub const LPENUM_SERVICE_STATUS_PROCESSA = [*c]struct__ENUM_SERVICE_STATUS_PROCESSA;
pub const struct__ENUM_SERVICE_STATUS_PROCESSW = extern struct {
    lpServiceName: LPWSTR,
    lpDisplayName: LPWSTR,
    ServiceStatusProcess: SERVICE_STATUS_PROCESS,
};
pub const ENUM_SERVICE_STATUS_PROCESSW = struct__ENUM_SERVICE_STATUS_PROCESSW;
pub const LPENUM_SERVICE_STATUS_PROCESSW = [*c]struct__ENUM_SERVICE_STATUS_PROCESSW;
pub const ENUM_SERVICE_STATUS_PROCESS = ENUM_SERVICE_STATUS_PROCESSA;
pub const LPENUM_SERVICE_STATUS_PROCESS = LPENUM_SERVICE_STATUS_PROCESSA;
pub const SC_LOCK = LPVOID;
pub const struct__QUERY_SERVICE_LOCK_STATUSA = extern struct {
    fIsLocked: DWORD,
    lpLockOwner: LPSTR,
    dwLockDuration: DWORD,
};
pub const QUERY_SERVICE_LOCK_STATUSA = struct__QUERY_SERVICE_LOCK_STATUSA;
pub const LPQUERY_SERVICE_LOCK_STATUSA = [*c]struct__QUERY_SERVICE_LOCK_STATUSA;
pub const struct__QUERY_SERVICE_LOCK_STATUSW = extern struct {
    fIsLocked: DWORD,
    lpLockOwner: LPWSTR,
    dwLockDuration: DWORD,
};
pub const QUERY_SERVICE_LOCK_STATUSW = struct__QUERY_SERVICE_LOCK_STATUSW;
pub const LPQUERY_SERVICE_LOCK_STATUSW = [*c]struct__QUERY_SERVICE_LOCK_STATUSW;
pub const QUERY_SERVICE_LOCK_STATUS = QUERY_SERVICE_LOCK_STATUSA;
pub const LPQUERY_SERVICE_LOCK_STATUS = LPQUERY_SERVICE_LOCK_STATUSA;
pub const struct__QUERY_SERVICE_CONFIGA = extern struct {
    dwServiceType: DWORD,
    dwStartType: DWORD,
    dwErrorControl: DWORD,
    lpBinaryPathName: LPSTR,
    lpLoadOrderGroup: LPSTR,
    dwTagId: DWORD,
    lpDependencies: LPSTR,
    lpServiceStartName: LPSTR,
    lpDisplayName: LPSTR,
};
pub const QUERY_SERVICE_CONFIGA = struct__QUERY_SERVICE_CONFIGA;
pub const LPQUERY_SERVICE_CONFIGA = [*c]struct__QUERY_SERVICE_CONFIGA;
pub const struct__QUERY_SERVICE_CONFIGW = extern struct {
    dwServiceType: DWORD,
    dwStartType: DWORD,
    dwErrorControl: DWORD,
    lpBinaryPathName: LPWSTR,
    lpLoadOrderGroup: LPWSTR,
    dwTagId: DWORD,
    lpDependencies: LPWSTR,
    lpServiceStartName: LPWSTR,
    lpDisplayName: LPWSTR,
};
pub const QUERY_SERVICE_CONFIGW = struct__QUERY_SERVICE_CONFIGW;
pub const LPQUERY_SERVICE_CONFIGW = [*c]struct__QUERY_SERVICE_CONFIGW;
pub const QUERY_SERVICE_CONFIG = QUERY_SERVICE_CONFIGA;
pub const LPQUERY_SERVICE_CONFIG = LPQUERY_SERVICE_CONFIGA;
pub const SERVICE_MAIN_FUNCTIONW = fn (DWORD, [*c]LPWSTR) callconv(std.os.windows.WINAPI) void;
pub const SERVICE_MAIN_FUNCTIONA = fn (DWORD, [*c]LPTSTR) callconv(std.os.windows.WINAPI) void;
pub const LPSERVICE_MAIN_FUNCTIONW = ?fn (DWORD, [*c]LPWSTR) callconv(std.os.windows.WINAPI) void;
pub const LPSERVICE_MAIN_FUNCTIONA = ?fn (DWORD, [*c]LPSTR) callconv(std.os.windows.WINAPI) void;
pub const struct__SERVICE_TABLE_ENTRYA = extern struct {
    lpServiceName: LPSTR,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONA,
};
pub const SERVICE_TABLE_ENTRYA = struct__SERVICE_TABLE_ENTRYA;
pub const LPSERVICE_TABLE_ENTRYA = [*c]struct__SERVICE_TABLE_ENTRYA;
pub const struct__SERVICE_TABLE_ENTRYW = extern struct {
    lpServiceName: LPWSTR,
    lpServiceProc: LPSERVICE_MAIN_FUNCTIONW,
};
pub const SERVICE_TABLE_ENTRYW = struct__SERVICE_TABLE_ENTRYW;
pub const LPSERVICE_TABLE_ENTRYW = [*c]struct__SERVICE_TABLE_ENTRYW;
pub const SERVICE_TABLE_ENTRY = SERVICE_TABLE_ENTRYA;
pub const LPSERVICE_TABLE_ENTRY = LPSERVICE_TABLE_ENTRYA;
pub const HANDLER_FUNCTION = fn (DWORD) callconv(std.os.windows.WINAPI) void;
pub const HANDLER_FUNCTION_EX = fn (DWORD, DWORD, LPVOID, LPVOID) callconv(std.os.windows.WINAPI) DWORD;
pub const LPHANDLER_FUNCTION = ?fn (DWORD) callconv(std.os.windows.WINAPI) void;
pub const LPHANDLER_FUNCTION_EX = ?fn (DWORD, DWORD, LPVOID, LPVOID) callconv(std.os.windows.WINAPI) DWORD;
pub const PFN_SC_NOTIFY_CALLBACK = ?fn (PVOID) callconv(std.os.windows.WINAPI) void;
pub const struct__SERVICE_NOTIFY_1 = extern struct {
    dwVersion: DWORD,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: PVOID,
    dwNotificationStatus: DWORD,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
pub const SERVICE_NOTIFY_1 = struct__SERVICE_NOTIFY_1;
pub const PSERVICE_NOTIFY_1 = [*c]struct__SERVICE_NOTIFY_1;
pub const struct__SERVICE_NOTIFY_2A = extern struct {
    dwVersion: DWORD,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: PVOID,
    dwNotificationStatus: DWORD,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: DWORD,
    pszServiceNames: LPSTR,
};
pub const SERVICE_NOTIFY_2A = struct__SERVICE_NOTIFY_2A;
pub const PSERVICE_NOTIFY_2A = [*c]struct__SERVICE_NOTIFY_2A;
pub const struct__SERVICE_NOTIFY_2W = extern struct {
    dwVersion: DWORD,
    pfnNotifyCallback: PFN_SC_NOTIFY_CALLBACK,
    pContext: PVOID,
    dwNotificationStatus: DWORD,
    ServiceStatus: SERVICE_STATUS_PROCESS,
    dwNotificationTriggered: DWORD,
    pszServiceNames: LPWSTR,
};
pub const SERVICE_NOTIFY_2W = struct__SERVICE_NOTIFY_2W;
pub const PSERVICE_NOTIFY_2W = [*c]struct__SERVICE_NOTIFY_2W;
pub const SERVICE_NOTIFY_2 = SERVICE_NOTIFY_2A;
pub const PSERVICE_NOTIFY_2 = PSERVICE_NOTIFY_2A;
pub const SERVICE_NOTIFYA = SERVICE_NOTIFY_2A;
pub const PSERVICE_NOTIFYA = [*c]SERVICE_NOTIFY_2A;
pub const SERVICE_NOTIFYW = SERVICE_NOTIFY_2W;
pub const PSERVICE_NOTIFYW = [*c]SERVICE_NOTIFY_2W;
pub const SERVICE_NOTIFY = SERVICE_NOTIFYA;
pub const PSERVICE_NOTIFY = PSERVICE_NOTIFYA;
pub const struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA = extern struct {
    dwReason: DWORD,
    pszComment: LPSTR,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSA = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub const PSERVICE_CONTROL_STATUS_REASON_PARAMSA = [*c]struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub const struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW = extern struct {
    dwReason: DWORD,
    pszComment: LPWSTR,
    ServiceStatus: SERVICE_STATUS_PROCESS,
};
pub const SERVICE_CONTROL_STATUS_REASON_PARAMSW = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW;
pub const PSERVICE_CONTROL_STATUS_REASON_PARAMSW = [*c]struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW;
pub const SERVICE_CONTROL_STATUS_REASON_PARAMS = SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub const PSERVICE_CONTROL_STATUS_REASON_PARAMS = PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub const struct__SERVICE_START_REASON = extern struct {
    dwReason: DWORD,
};
pub const SERVICE_START_REASON = struct__SERVICE_START_REASON;
pub const PSERVICE_START_REASON = [*c]struct__SERVICE_START_REASON;
extern fn ChangeServiceConfigA(hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR, lpDisplayName: LPCSTR) BOOL;
extern fn ChangeServiceConfigW(hService: SC_HANDLE, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR, lpDisplayName: LPCWSTR) BOOL;
extern fn ChangeServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) BOOL;
extern fn ChangeServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: DWORD, lpInfo: LPVOID) BOOL;
extern fn CloseServiceHandle(hSCObject: SC_HANDLE) BOOL;
extern fn ControlService(hService: SC_HANDLE, dwControl: DWORD, lpServiceStatus: LPSERVICE_STATUS) BOOL;
extern fn CreateServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPCSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCSTR, lpLoadOrderGroup: LPCSTR, lpdwTagId: LPDWORD, lpDependencies: LPCSTR, lpServiceStartName: LPCSTR, lpPassword: LPCSTR) SC_HANDLE;
extern fn CreateServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPCWSTR, dwDesiredAccess: DWORD, dwServiceType: DWORD, dwStartType: DWORD, dwErrorControl: DWORD, lpBinaryPathName: LPCWSTR, lpLoadOrderGroup: LPCWSTR, lpdwTagId: LPDWORD, lpDependencies: LPCWSTR, lpServiceStartName: LPCWSTR, lpPassword: LPCWSTR) SC_HANDLE;
extern fn DeleteService(hService: SC_HANDLE) BOOL;
extern fn EnumDependentServicesA(hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD) BOOL;
extern fn EnumDependentServicesW(hService: SC_HANDLE, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD) BOOL;
extern fn EnumServicesStatusA(hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD) BOOL;
extern fn EnumServicesStatusW(hSCManager: SC_HANDLE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPENUM_SERVICE_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD) BOOL;
extern fn EnumServicesStatusExA(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCSTR) BOOL;
extern fn EnumServicesStatusExW(hSCManager: SC_HANDLE, InfoLevel: SC_ENUM_TYPE, dwServiceType: DWORD, dwServiceState: DWORD, lpServices: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD, lpServicesReturned: LPDWORD, lpResumeHandle: LPDWORD, pszGroupName: LPCWSTR) BOOL;
extern fn GetServiceKeyNameA(hSCManager: SC_HANDLE, lpDisplayName: LPCSTR, lpServiceName: LPSTR, lpcchBuffer: LPDWORD) BOOL;
extern fn GetServiceKeyNameW(hSCManager: SC_HANDLE, lpDisplayName: LPCWSTR, lpServiceName: LPWSTR, lpcchBuffer: LPDWORD) BOOL;
extern fn GetServiceDisplayNameA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, lpDisplayName: LPSTR, lpcchBuffer: LPDWORD) BOOL;
extern fn GetServiceDisplayNameW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, lpDisplayName: LPWSTR, lpcchBuffer: LPDWORD) BOOL;
extern fn LockServiceDatabase(hSCManager: SC_HANDLE) SC_LOCK;
extern fn NotifyBootConfigStatus(BootAcceptable: BOOL) BOOL;
extern fn OpenSCManagerA(lpMachineName: LPCSTR, lpDatabaseName: LPCSTR, dwDesiredAccess: DWORD) SC_HANDLE;
extern fn OpenSCManagerW(lpMachineName: LPCWSTR, lpDatabaseName: LPCWSTR, dwDesiredAccess: DWORD) SC_HANDLE;
extern fn OpenServiceA(hSCManager: SC_HANDLE, lpServiceName: LPCSTR, dwDesiredAccess: DWORD) SC_HANDLE;
extern fn OpenServiceW(hSCManager: SC_HANDLE, lpServiceName: LPCWSTR, dwDesiredAccess: DWORD) SC_HANDLE;
extern fn QueryServiceConfigA(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceConfigW(hService: SC_HANDLE, lpServiceConfig: LPQUERY_SERVICE_CONFIGW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceConfig2A(hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceConfig2W(hService: SC_HANDLE, dwInfoLevel: DWORD, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceLockStatusA(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSA, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceLockStatusW(hSCManager: SC_HANDLE, lpLockStatus: LPQUERY_SERVICE_LOCK_STATUSW, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn QueryServiceStatus(hService: SC_HANDLE, lpServiceStatus: LPSERVICE_STATUS) BOOL;
extern fn QueryServiceStatusEx(hService: SC_HANDLE, InfoLevel: SC_STATUS_TYPE, lpBuffer: LPBYTE, cbBufSize: DWORD, pcbBytesNeeded: LPDWORD) BOOL;
extern fn RegisterServiceCtrlHandlerA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;
extern fn RegisterServiceCtrlHandlerW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION) SERVICE_STATUS_HANDLE;
extern fn RegisterServiceCtrlHandlerExA(lpServiceName: LPCSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID) SERVICE_STATUS_HANDLE;
extern fn RegisterServiceCtrlHandlerExW(lpServiceName: LPCWSTR, lpHandlerProc: LPHANDLER_FUNCTION_EX, lpContext: LPVOID) SERVICE_STATUS_HANDLE;
extern fn SetServiceObjectSecurity(hService: SC_HANDLE, dwSecurityInformation: SECURITY_INFORMATION, lpSecurityDescriptor: PSECURITY_DESCRIPTOR) BOOL;
extern fn SetServiceStatus(hServiceStatus: SERVICE_STATUS_HANDLE, lpServiceStatus: LPSERVICE_STATUS) BOOL;
extern fn StartServiceCtrlDispatcherA(lpServiceStartTable: [*c]const SERVICE_TABLE_ENTRYA) BOOL;
extern fn StartServiceCtrlDispatcherW(lpServiceStartTable: [*c]const SERVICE_TABLE_ENTRYW) BOOL;
extern fn StartServiceA(hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: [*c]LPCSTR) BOOL;
extern fn StartServiceW(hService: SC_HANDLE, dwNumServiceArgs: DWORD, lpServiceArgVectors: [*c]LPCWSTR) BOOL;
extern fn UnlockServiceDatabase(ScLock: SC_LOCK) BOOL;
extern fn NotifyServiceStatusChangeA(hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYA) DWORD;
extern fn NotifyServiceStatusChangeW(hService: SC_HANDLE, dwNotifyMask: DWORD, pNotifyBuffer: PSERVICE_NOTIFYW) DWORD;
extern fn ControlServiceExA(hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID) BOOL;
extern fn ControlServiceExW(hService: SC_HANDLE, dwControl: DWORD, dwInfoLevel: DWORD, pControlParams: PVOID) BOOL;
extern fn QueryServiceDynamicInformation(hServiceStatus: SERVICE_STATUS_HANDLE, dwInfoLevel: DWORD, ppDynamicInfo: [*c]PVOID) BOOL;
pub const SC_EVENT_DATABASE_CHANGE = enum__SC_EVENT_TYPE.SC_EVENT_DATABASE_CHANGE;
pub const SC_EVENT_PROPERTY_CHANGE = enum__SC_EVENT_TYPE.SC_EVENT_PROPERTY_CHANGE;
pub const SC_EVENT_STATUS_CHANGE = enum__SC_EVENT_TYPE.SC_EVENT_STATUS_CHANGE;
pub const enum__SC_EVENT_TYPE = extern enum {
    SC_EVENT_DATABASE_CHANGE,
    SC_EVENT_PROPERTY_CHANGE,
    SC_EVENT_STATUS_CHANGE,
};
pub const SC_EVENT_TYPE = enum__SC_EVENT_TYPE;
pub const PSC_EVENT_TYPE = [*c]enum__SC_EVENT_TYPE;
pub const SC_NOTIFICATION_CALLBACK = fn (DWORD, PVOID) callconv(std.os.windows.WINAPI) void;
pub const PSC_NOTIFICATION_CALLBACK = [*c]SC_NOTIFICATION_CALLBACK;
pub const struct__SC_NOTIFICATION_REGISTRATION = opaque {};
pub const PSC_NOTIFICATION_REGISTRATION = ?*struct__SC_NOTIFICATION_REGISTRATION;
extern fn SubscribeServiceChangeNotifications(hService: SC_HANDLE, eEventType: SC_EVENT_TYPE, pCallback: PSC_NOTIFICATION_CALLBACK, pCallbackContext: PVOID, pSubscription: [*c]PSC_NOTIFICATION_REGISTRATION) DWORD;
extern fn UnsubscribeServiceChangeNotifications(pSubscription: PSC_NOTIFICATION_REGISTRATION) void;
extern fn WaitServiceState(hService: SC_HANDLE, dwNotify: DWORD, dwTimeout: DWORD, hCancelEvent: HANDLE) DWORD;
pub const ServiceRegistryStateParameters = enum_SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStateParameters;
pub const ServiceRegistryStatePersistent = enum_SERVICE_REGISTRY_STATE_TYPE.ServiceRegistryStatePersistent;
pub const MaxServiceRegistryStateType = enum_SERVICE_REGISTRY_STATE_TYPE.MaxServiceRegistryStateType;
pub const enum_SERVICE_REGISTRY_STATE_TYPE = extern enum {
    ServiceRegistryStateParameters = 0,
    ServiceRegistryStatePersistent = 1,
    MaxServiceRegistryStateType = 2,
};
pub const SERVICE_REGISTRY_STATE_TYPE = enum_SERVICE_REGISTRY_STATE_TYPE;
extern fn GetServiceRegistryStateKey(ServiceStatusHandle: SERVICE_STATUS_HANDLE, StateType: SERVICE_REGISTRY_STATE_TYPE, AccessMask: DWORD, ServiceStateKey: [*c]HKEY) DWORD;
pub const ServiceDirectoryPersistentState = enum_SERVICE_DIRECTORY_TYPE.ServiceDirectoryPersistentState;
pub const ServiceDirectoryTypeMax = enum_SERVICE_DIRECTORY_TYPE.ServiceDirectoryTypeMax;
pub const enum_SERVICE_DIRECTORY_TYPE = extern enum {
    ServiceDirectoryPersistentState = 0,
    ServiceDirectoryTypeMax = 1,
};
pub const SERVICE_DIRECTORY_TYPE = enum_SERVICE_DIRECTORY_TYPE;
extern fn GetServiceDirectory(hServiceStatus: SERVICE_STATUS_HANDLE, eDirectoryType: SERVICE_DIRECTORY_TYPE, lpPathBuffer: PWCHAR, cchPathBufferLength: DWORD, lpcchRequiredBufferLength: [*c]DWORD) DWORD;
pub const struct__MODEMDEVCAPS = extern struct {
    dwActualSize: DWORD,
    dwRequiredSize: DWORD,
    dwDevSpecificOffset: DWORD,
    dwDevSpecificSize: DWORD,
    dwModemProviderVersion: DWORD,
    dwModemManufacturerOffset: DWORD,
    dwModemManufacturerSize: DWORD,
    dwModemModelOffset: DWORD,
    dwModemModelSize: DWORD,
    dwModemVersionOffset: DWORD,
    dwModemVersionSize: DWORD,
    dwDialOptions: DWORD,
    dwCallSetupFailTimer: DWORD,
    dwInactivityTimeout: DWORD,
    dwSpeakerVolume: DWORD,
    dwSpeakerMode: DWORD,
    dwModemOptions: DWORD,
    dwMaxDTERate: DWORD,
    dwMaxDCERate: DWORD,
    abVariablePortion: [1]BYTE,
};
pub const MODEMDEVCAPS = struct__MODEMDEVCAPS;
pub const PMODEMDEVCAPS = [*c]struct__MODEMDEVCAPS;
pub const LPMODEMDEVCAPS = [*c]struct__MODEMDEVCAPS;
pub const struct__MODEMSETTINGS = extern struct {
    dwActualSize: DWORD,
    dwRequiredSize: DWORD,
    dwDevSpecificOffset: DWORD,
    dwDevSpecificSize: DWORD,
    dwCallSetupFailTimer: DWORD,
    dwInactivityTimeout: DWORD,
    dwSpeakerVolume: DWORD,
    dwSpeakerMode: DWORD,
    dwPreferredModemOptions: DWORD,
    dwNegotiatedModemOptions: DWORD,
    dwNegotiatedDCERate: DWORD,
    abVariablePortion: [1]BYTE,
};
pub const MODEMSETTINGS = struct__MODEMSETTINGS;
pub const PMODEMSETTINGS = [*c]struct__MODEMSETTINGS;
pub const LPMODEMSETTINGS = [*c]struct__MODEMSETTINGS;
pub const struct_HIMC__ = extern struct {
    unused: c_int,
};
pub const HIMC = [*c]struct_HIMC__;
pub const struct_HIMCC__ = extern struct {
    unused: c_int,
};
pub const HIMCC = [*c]struct_HIMCC__;
pub const LPHKL = [*c]HKL;
pub const LPUINT = [*c]UINT;
pub const struct_tagCOMPOSITIONFORM = extern struct {
    dwStyle: DWORD,
    ptCurrentPos: POINT,
    rcArea: RECT,
};
pub const COMPOSITIONFORM = struct_tagCOMPOSITIONFORM;
pub const PCOMPOSITIONFORM = [*c]struct_tagCOMPOSITIONFORM;
pub const NPCOMPOSITIONFORM = [*c]struct_tagCOMPOSITIONFORM;
pub const LPCOMPOSITIONFORM = [*c]struct_tagCOMPOSITIONFORM;
pub const struct_tagCANDIDATEFORM = extern struct {
    dwIndex: DWORD,
    dwStyle: DWORD,
    ptCurrentPos: POINT,
    rcArea: RECT,
};
pub const CANDIDATEFORM = struct_tagCANDIDATEFORM;
pub const PCANDIDATEFORM = [*c]struct_tagCANDIDATEFORM;
pub const NPCANDIDATEFORM = [*c]struct_tagCANDIDATEFORM;
pub const LPCANDIDATEFORM = [*c]struct_tagCANDIDATEFORM;
pub const struct_tagCANDIDATELIST = extern struct {
    dwSize: DWORD,
    dwStyle: DWORD,
    dwCount: DWORD,
    dwSelection: DWORD,
    dwPageStart: DWORD,
    dwPageSize: DWORD,
    dwOffset: [1]DWORD,
};
pub const CANDIDATELIST = struct_tagCANDIDATELIST;
pub const PCANDIDATELIST = [*c]struct_tagCANDIDATELIST;
pub const NPCANDIDATELIST = [*c]struct_tagCANDIDATELIST;
pub const LPCANDIDATELIST = [*c]struct_tagCANDIDATELIST;
pub const struct_tagREGISTERWORDA = extern struct {
    lpReading: LPSTR,
    lpWord: LPSTR,
};
pub const REGISTERWORDA = struct_tagREGISTERWORDA;
pub const PREGISTERWORDA = [*c]struct_tagREGISTERWORDA;
pub const NPREGISTERWORDA = [*c]struct_tagREGISTERWORDA;
pub const LPREGISTERWORDA = [*c]struct_tagREGISTERWORDA;
pub const struct_tagREGISTERWORDW = extern struct {
    lpReading: LPWSTR,
    lpWord: LPWSTR,
};
pub const REGISTERWORDW = struct_tagREGISTERWORDW;
pub const PREGISTERWORDW = [*c]struct_tagREGISTERWORDW;
pub const NPREGISTERWORDW = [*c]struct_tagREGISTERWORDW;
pub const LPREGISTERWORDW = [*c]struct_tagREGISTERWORDW;
pub const REGISTERWORD = REGISTERWORDA;
pub const PREGISTERWORD = PREGISTERWORDA;
pub const NPREGISTERWORD = NPREGISTERWORDA;
pub const LPREGISTERWORD = LPREGISTERWORDA;
pub const struct_tagRECONVERTSTRING = extern struct {
    dwSize: DWORD,
    dwVersion: DWORD,
    dwStrLen: DWORD,
    dwStrOffset: DWORD,
    dwCompStrLen: DWORD,
    dwCompStrOffset: DWORD,
    dwTargetStrLen: DWORD,
    dwTargetStrOffset: DWORD,
};
pub const RECONVERTSTRING = struct_tagRECONVERTSTRING;
pub const PRECONVERTSTRING = [*c]struct_tagRECONVERTSTRING;
pub const NPRECONVERTSTRING = [*c]struct_tagRECONVERTSTRING;
pub const LPRECONVERTSTRING = [*c]struct_tagRECONVERTSTRING;
pub const struct_tagSTYLEBUFA = extern struct {
    dwStyle: DWORD,
    szDescription: [32]CHAR,
};
pub const STYLEBUFA = struct_tagSTYLEBUFA;
pub const PSTYLEBUFA = [*c]struct_tagSTYLEBUFA;
pub const NPSTYLEBUFA = [*c]struct_tagSTYLEBUFA;
pub const LPSTYLEBUFA = [*c]struct_tagSTYLEBUFA;
pub const struct_tagSTYLEBUFW = extern struct {
    dwStyle: DWORD,
    szDescription: [32]WCHAR,
};
pub const STYLEBUFW = struct_tagSTYLEBUFW;
pub const PSTYLEBUFW = [*c]struct_tagSTYLEBUFW;
pub const NPSTYLEBUFW = [*c]struct_tagSTYLEBUFW;
pub const LPSTYLEBUFW = [*c]struct_tagSTYLEBUFW;
pub const STYLEBUF = STYLEBUFA;
pub const PSTYLEBUF = PSTYLEBUFA;
pub const NPSTYLEBUF = NPSTYLEBUFA;
pub const LPSTYLEBUF = LPSTYLEBUFA;
pub const struct_tagIMEMENUITEMINFOA = extern struct {
    cbSize: UINT,
    fType: UINT,
    fState: UINT,
    wID: UINT,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: DWORD,
    szString: [80]CHAR,
    hbmpItem: HBITMAP,
};
pub const IMEMENUITEMINFOA = struct_tagIMEMENUITEMINFOA;
pub const PIMEMENUITEMINFOA = [*c]struct_tagIMEMENUITEMINFOA;
pub const NPIMEMENUITEMINFOA = [*c]struct_tagIMEMENUITEMINFOA;
pub const LPIMEMENUITEMINFOA = [*c]struct_tagIMEMENUITEMINFOA;
pub const struct_tagIMEMENUITEMINFOW = extern struct {
    cbSize: UINT,
    fType: UINT,
    fState: UINT,
    wID: UINT,
    hbmpChecked: HBITMAP,
    hbmpUnchecked: HBITMAP,
    dwItemData: DWORD,
    szString: [80]WCHAR,
    hbmpItem: HBITMAP,
};
pub const IMEMENUITEMINFOW = struct_tagIMEMENUITEMINFOW;
pub const PIMEMENUITEMINFOW = [*c]struct_tagIMEMENUITEMINFOW;
pub const NPIMEMENUITEMINFOW = [*c]struct_tagIMEMENUITEMINFOW;
pub const LPIMEMENUITEMINFOW = [*c]struct_tagIMEMENUITEMINFOW;
pub const IMEMENUITEMINFO = IMEMENUITEMINFOA;
pub const PIMEMENUITEMINFO = PIMEMENUITEMINFOA;
pub const NPIMEMENUITEMINFO = NPIMEMENUITEMINFOA;
pub const LPIMEMENUITEMINFO = LPIMEMENUITEMINFOA;
pub const struct_tagIMECHARPOSITION = extern struct {
    dwSize: DWORD,
    dwCharPos: DWORD,
    pt: POINT,
    cLineHeight: UINT,
    rcDocument: RECT,
};
pub const IMECHARPOSITION = struct_tagIMECHARPOSITION;
pub const PIMECHARPOSITION = [*c]struct_tagIMECHARPOSITION;
pub const NPIMECHARPOSITION = [*c]struct_tagIMECHARPOSITION;
pub const LPIMECHARPOSITION = [*c]struct_tagIMECHARPOSITION;
pub const IMCENUMPROC = ?fn (HIMC, LPARAM) callconv(std.os.windows.WINAPI) BOOL;
extern fn ImmInstallIMEA(lpszIMEFileName: LPCSTR, lpszLayoutText: LPCSTR) HKL;
extern fn ImmInstallIMEW(lpszIMEFileName: LPCWSTR, lpszLayoutText: LPCWSTR) HKL;
extern fn ImmGetDefaultIMEWnd(arg0: HWND) HWND;
extern fn ImmGetDescriptionA(arg0: HKL, lpszDescription: LPSTR, uBufLen: UINT) UINT;
extern fn ImmGetDescriptionW(arg0: HKL, lpszDescription: LPWSTR, uBufLen: UINT) UINT;
extern fn ImmGetIMEFileNameA(arg0: HKL, lpszFileName: LPSTR, uBufLen: UINT) UINT;
extern fn ImmGetIMEFileNameW(arg0: HKL, lpszFileName: LPWSTR, uBufLen: UINT) UINT;
extern fn ImmGetProperty(arg0: HKL, arg1: DWORD) DWORD;
extern fn ImmIsIME(arg0: HKL) BOOL;
extern fn ImmSimulateHotKey(arg0: HWND, arg1: DWORD) BOOL;
extern fn ImmCreateContext() HIMC;
extern fn ImmDestroyContext(arg0: HIMC) BOOL;
extern fn ImmGetContext(arg0: HWND) HIMC;
extern fn ImmReleaseContext(arg0: HWND, arg1: HIMC) BOOL;
extern fn ImmAssociateContext(arg0: HWND, arg1: HIMC) HIMC;
extern fn ImmAssociateContextEx(arg0: HWND, arg1: HIMC, arg2: DWORD) BOOL;
extern fn ImmGetCompositionStringA(arg0: HIMC, arg1: DWORD, lpBuf: LPVOID, dwBufLen: DWORD) LONG;
extern fn ImmGetCompositionStringW(arg0: HIMC, arg1: DWORD, lpBuf: LPVOID, dwBufLen: DWORD) LONG;
extern fn ImmSetCompositionStringA(arg0: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD) BOOL;
extern fn ImmSetCompositionStringW(arg0: HIMC, dwIndex: DWORD, lpComp: LPVOID, dwCompLen: DWORD, lpRead: LPVOID, dwReadLen: DWORD) BOOL;
extern fn ImmGetCandidateListCountA(arg0: HIMC, lpdwListCount: LPDWORD) DWORD;
extern fn ImmGetCandidateListCountW(arg0: HIMC, lpdwListCount: LPDWORD) DWORD;
extern fn ImmGetCandidateListA(arg0: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD) DWORD;
extern fn ImmGetCandidateListW(arg0: HIMC, deIndex: DWORD, lpCandList: LPCANDIDATELIST, dwBufLen: DWORD) DWORD;
extern fn ImmGetGuideLineA(arg0: HIMC, dwIndex: DWORD, lpBuf: LPSTR, dwBufLen: DWORD) DWORD;
extern fn ImmGetGuideLineW(arg0: HIMC, dwIndex: DWORD, lpBuf: LPWSTR, dwBufLen: DWORD) DWORD;
extern fn ImmGetConversionStatus(arg0: HIMC, lpfdwConversion: LPDWORD, lpfdwSentence: LPDWORD) BOOL;
extern fn ImmSetConversionStatus(arg0: HIMC, arg1: DWORD, arg2: DWORD) BOOL;
extern fn ImmGetOpenStatus(arg0: HIMC) BOOL;
extern fn ImmSetOpenStatus(arg0: HIMC, arg1: BOOL) BOOL;
extern fn ImmGetCompositionFontA(arg0: HIMC, lplf: LPLOGFONTA) BOOL;
extern fn ImmGetCompositionFontW(arg0: HIMC, lplf: LPLOGFONTW) BOOL;
extern fn ImmSetCompositionFontA(arg0: HIMC, lplf: LPLOGFONTA) BOOL;
extern fn ImmSetCompositionFontW(arg0: HIMC, lplf: LPLOGFONTW) BOOL;
extern fn ImmConfigureIMEA(arg0: HKL, arg1: HWND, arg2: DWORD, arg3: LPVOID) BOOL;
extern fn ImmConfigureIMEW(arg0: HKL, arg1: HWND, arg2: DWORD, arg3: LPVOID) BOOL;
extern fn ImmEscapeA(arg0: HKL, arg1: HIMC, arg2: UINT, arg3: LPVOID) LRESULT;
extern fn ImmEscapeW(arg0: HKL, arg1: HIMC, arg2: UINT, arg3: LPVOID) LRESULT;
extern fn ImmGetConversionListA(arg0: HKL, arg1: HIMC, lpSrc: LPCSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT) DWORD;
extern fn ImmGetConversionListW(arg0: HKL, arg1: HIMC, lpSrc: LPCWSTR, lpDst: LPCANDIDATELIST, dwBufLen: DWORD, uFlag: UINT) DWORD;
extern fn ImmNotifyIME(arg0: HIMC, dwAction: DWORD, dwIndex: DWORD, dwValue: DWORD) BOOL;
extern fn ImmGetStatusWindowPos(arg0: HIMC, lpptPos: LPPOINT) BOOL;
extern fn ImmSetStatusWindowPos(arg0: HIMC, lpptPos: LPPOINT) BOOL;
extern fn ImmGetCompositionWindow(arg0: HIMC, lpCompForm: LPCOMPOSITIONFORM) BOOL;
extern fn ImmSetCompositionWindow(arg0: HIMC, lpCompForm: LPCOMPOSITIONFORM) BOOL;
extern fn ImmGetCandidateWindow(arg0: HIMC, arg1: DWORD, lpCandidate: LPCANDIDATEFORM) BOOL;
extern fn ImmSetCandidateWindow(arg0: HIMC, lpCandidate: LPCANDIDATEFORM) BOOL;
extern fn ImmIsUIMessageA(arg0: HWND, arg1: UINT, arg2: WPARAM, arg3: LPARAM) BOOL;
extern fn ImmIsUIMessageW(arg0: HWND, arg1: UINT, arg2: WPARAM, arg3: LPARAM) BOOL;
extern fn ImmGetVirtualKey(arg0: HWND) UINT;
pub const REGISTERWORDENUMPROCA = ?fn (LPCSTR, DWORD, LPCSTR, LPVOID) callconv(std.os.windows.WINAPI) c_int;
pub const REGISTERWORDENUMPROCW = ?fn (LPCWSTR, DWORD, LPCWSTR, LPVOID) callconv(std.os.windows.WINAPI) c_int;
extern fn ImmRegisterWordA(arg0: HKL, lpszReading: LPCSTR, arg2: DWORD, lpszRegister: LPCSTR) BOOL;
extern fn ImmRegisterWordW(arg0: HKL, lpszReading: LPCWSTR, arg2: DWORD, lpszRegister: LPCWSTR) BOOL;
extern fn ImmUnregisterWordA(arg0: HKL, lpszReading: LPCSTR, arg2: DWORD, lpszUnregister: LPCSTR) BOOL;
extern fn ImmUnregisterWordW(arg0: HKL, lpszReading: LPCWSTR, arg2: DWORD, lpszUnregister: LPCWSTR) BOOL;
extern fn ImmGetRegisterWordStyleA(arg0: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFA) UINT;
extern fn ImmGetRegisterWordStyleW(arg0: HKL, nItem: UINT, lpStyleBuf: LPSTYLEBUFW) UINT;
extern fn ImmEnumRegisterWordA(arg0: HKL, arg1: REGISTERWORDENUMPROCA, lpszReading: LPCSTR, arg3: DWORD, lpszRegister: LPCSTR, arg5: LPVOID) UINT;
extern fn ImmEnumRegisterWordW(arg0: HKL, arg1: REGISTERWORDENUMPROCW, lpszReading: LPCWSTR, arg3: DWORD, lpszRegister: LPCWSTR, arg5: LPVOID) UINT;
extern fn ImmDisableIME(arg0: DWORD) BOOL;
extern fn ImmEnumInputContext(idThread: DWORD, lpfn: IMCENUMPROC, lParam: LPARAM) BOOL;
extern fn ImmGetImeMenuItemsA(arg0: HIMC, arg1: DWORD, arg2: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOA, lpImeMenu: LPIMEMENUITEMINFOA, dwSize: DWORD) DWORD;
extern fn ImmGetImeMenuItemsW(arg0: HIMC, arg1: DWORD, arg2: DWORD, lpImeParentMenu: LPIMEMENUITEMINFOW, lpImeMenu: LPIMEMENUITEMINFOW, dwSize: DWORD) DWORD;
extern fn ImmDisableTextFrameService(idThread: DWORD) BOOL;
extern fn ImmDisableLegacyIME() BOOL;
pub const ENCAPSULATED_POSTSCRIPT = 4116;
pub const EMR_BITBLT = 76;
pub const EMR_STRETCHBLT = 77;
pub const NEXTBAND = 3;
pub const ERROR_SECURITY_STREAM_IS_INCONSISTENT = c_long(306);
pub const PSPROTOCOL_TBCP = 2;
pub const DMPAPER_FOLIO = 14;
pub const SUBLANG_BELARUSIAN_BELARUS = 1;
pub const SERVICE_ACTIVE = 1;
pub const SUBLANG_GERMAN_SWISS = 2;
pub const STARTF_RUNFULLSCREEN = 32;
pub const DNS_ERROR_NBSTAT_INIT_FAILED = c_long(9617);
pub const SS_EDITCONTROL = c_long(8192);
pub const CTRY_RUSSIA = 7;
pub const _WIN32_IE_IE302 = 770;
pub const LWA_COLORKEY = 1;
pub const RIDEV_DEVNOTIFY = 8192;
pub const ERROR_RECEIVE_EXPEDITED = c_long(708);
pub const OpenEvent = OpenEventA;
pub const ERROR_CLUSTER_UPGRADE_IN_PROGRESS = c_long(5976);
pub const WINAPI_FAMILY_SYSTEM = 4;
pub const ERROR_UNEXPECTED_MM_MAP_ERROR = c_long(557);
pub const WM_UNDO = 772;
pub const PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_RESERVED = if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 24) else if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 24) else c_uint(3)(i64 << 24);
pub const GetServiceKeyName = GetServiceKeyNameA;
pub const PEERDIST_ERROR_ALREADY_EXISTS = c_long(4058);
pub const CallNamedPipe = CallNamedPipeA;
pub const ERROR_ENCRYPTION_POLICY_DENIES_OPERATION = c_long(6022);
pub const IMAGE_FILE_MACHINE_SH4 = 422;
pub const GCS_RESULTSTR = 2048;
pub const BAUD_150 = if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 8) else if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 8) else @as(DWORD, 8);
pub const WNNC_NET_FOXBAT = 2818048;
pub const ERROR_PIPE_LOCAL = c_long(229);
pub const VK_BROWSER_HOME = 172;
pub const __WCHAR_WIDTH__ = 16;
pub const DC_BINS = 6;
pub const FileEncryptionStatus = FileEncryptionStatusA;
pub const LOCALE_SMONTHNAME3 = 58;
pub const HTSIZEFIRST = HTLEFT;
pub const SORT_DEFAULT = 0;
pub const FS_CASE_SENSITIVE = FILE_CASE_SENSITIVE_SEARCH;
pub const DECLSPEC_UUID = x;
pub const CM_SERVICE_NETWORK_BOOT_LOAD = 1;
pub const SUBLANG_JAPANESE_JAPAN = 1;
pub const TREE_CONNECT_ATTRIBUTE_INTEGRITY = 32768;
pub const ERROR_FLOPPY_BAD_REGISTERS = c_long(1125);
pub const CTRY_BELARUS = 375;
pub const ERROR_REPARSE_OBJECT = c_long(755);
pub const ERROR_DEV_SIDELOAD_LIMIT_EXCEEDED = c_long(15633);
pub const WB_LEFT = 0;
pub const FR_NOT_ENUM = 32;
pub const SHTDN_REASON_MAJOR_SOFTWARE = 196608;
pub const SUBLANG_SAMI_LULE_NORWAY = 4;
pub const ERROR_MESSAGE_SYNC_ONLY = c_long(1159);
pub const ImmGetRegisterWordStyle = ImmGetRegisterWordStyleA;
pub const ERROR_DS_CANT_RETRIEVE_CHILD = c_long(8422);
pub const DEVICEFAMILYINFOENUM_HOLOGRAPHIC = 10;
pub const KLF_SUBSTITUTE_OK = 2;
pub const DI_ROPS_READ_DESTINATION = 2;
pub const ERROR_INSUFFICIENT_POWER = c_long(639);
pub const DMPAPER_PENV_9 = 104;
pub const ERROR_FT_WRITE_RECOVERY = c_long(705);
pub const LCMAP_LINGUISTIC_CASING = 16777216;
pub const DNS_ERROR_DP_NOT_ENLISTED = c_long(9903);
pub const DMPAPER_A4SMALL = 10;
pub const _WIN32_WINNT_WS08 = 1536;
pub const ENOTDIR = 20;
pub const DMDITHER_USER = 256;
pub const ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = c_long(8303);
pub const IMAGE_REL_ALPHA_REFLONGNB = 16;
pub const SP_STOPBITS = if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 8) else if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 8) else @as(DWORD, 8);
pub const ERROR_NOT_ALLOWED_ON_SYSTEM_FILE = c_long(313);
pub const IME_SMODE_PLAURALCLAUSE = 1;
pub const S_SERDFQ = -13;
pub const ERROR_SXS_XML_E_MISSINGROOT = c_long(14057);
pub const WINAPI = __stdcall;
pub const FAST_FAIL_INVALID_THREAD = 40;
pub const WM_DWMCOMPOSITIONCHANGED = 798;
pub const WSA_QOS_GENERIC_ERROR = c_long(11015);
pub const MOUSEEVENTF_WHEEL = 2048;
pub const WSA_QOS_POLICY_FAILURE = c_long(11011);
pub const ERROR_INVALID_EXCEPTION_HANDLER = c_long(310);
pub const CAL_SSHORTESTDAYNAME7 = 55;
pub const SECURITY_CREATOR_GROUP_SERVER_RID = c_long(3);
pub const CB_SETHORIZONTALEXTENT = 350;
pub const RPC_S_INVALID_VERS_OPTION = c_long(1756);
pub const MDM_V110_SPEED_9DOT6K = 4;
pub const SECURITY_CAPABILITY_APPOINTMENTS = c_long(11);
pub const FILE_NOTIFY_CHANGE_CREATION = 64;
pub const ERROR_FILE_TOO_LARGE = c_long(223);
pub const BS_MULTILINE = c_long(8192);
pub const LB_FINDSTRING = 399;
pub const WS_VSCROLL = c_long(2097152);
pub const SEC_LARGE_PAGES = 2147483648;
pub const ERROR_CTX_MODEM_RESPONSE_ERROR = c_long(7011);
pub const ERROR_AMBIGUOUS_SYSTEM_DEVICE = c_long(15250);
pub const FACILITY_WSBAPP = 122;
pub const WINSTA_ENUMERATE = c_long(256);
pub const WN_OPEN_FILES = ERROR_OPEN_FILES;
pub const WT_EXECUTEINPERSISTENTIOTHREAD = 64;
pub const ERROR_MRM_INVALID_PRI_FILE = c_long(15126);
pub const ERROR_CONTINUE = c_long(1246);
pub const JOB_OBJECT_CPU_RATE_CONTROL_MIN_MAX_RATE = 16;
pub const ERROR_TRANSACTION_NOT_ENLISTED = c_long(6855);
pub const ERROR_OPLOCK_BREAK_IN_PROGRESS = c_long(742);
pub const ImmEnumRegisterWord = ImmEnumRegisterWordA;
pub const SERVICE_ACCEPT_PARAMCHANGE = 8;
pub const DMPAPER_FANFOLD_LGL_GERMAN = 41;
pub const SUBLANG_BASQUE_BASQUE = 1;
pub const ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 4;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_OWNER_ACE = 1;
pub const ERROR_SECUREBOOT_POLICY_VIOLATION = c_long(4421);
pub const ERROR_CLEANER_CARTRIDGE_SPENT = c_long(4333);
pub const MUI_VERIFY_FILE_EXISTS = 4;
pub const FILE_ATTRIBUTE_PINNED = 524288;
pub const BAUD_1800 = if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 128) else if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 128) else @as(DWORD, 128);
pub const __data_entrypoint = category;
pub const QS_ALLPOSTMESSAGE = 256;
pub const EnumUILanguages = EnumUILanguagesA;
pub const ReadConsole = ReadConsoleA;
pub const IMAGE_SYM_CLASS_BLOCK = 100;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_DEFER = if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 56) else if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 56) else c_uint(0)(i64 << 56);
pub const EVENT_SYSTEM_MENUPOPUPSTART = 6;
pub const SM_CXICONSPACING = 38;
pub const EOTHER = 131;
pub const ERROR_MAGAZINE_NOT_PRESENT = c_long(1163);
pub const WM_POINTERDOWN = 582;
pub const WNNC_NET_FRONTIER = 1507328;
pub const RPC_S_ZERO_DIVIDE = c_long(1767);
pub const DNS_ERROR_POLICY_INVALID_CRITERIA = c_long(9973);
pub const CAL_SMONTHNAME8 = 28;
pub const GetAtomName = GetAtomNameA;
pub const CreateIC = CreateICA;
pub const ERROR_SERVICE_DATABASE_LOCKED = c_long(1055);
pub const ERROR_DS_NOT_AN_OBJECT = c_long(8352);
pub const SKF_RALTLOCKED = 2097152;
pub const CSTR_LESS_THAN = 1;
pub const CAL_SABBREVMONTHNAME10 = 43;
pub const LB_ERR = -1;
pub const IMAGE_SCN_MEM_NOT_CACHED = 67108864;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_BOOLEAN = 6;
pub const ERROR_RM_CANNOT_BE_FROZEN_FOR_SNAPSHOT = c_long(6728);
pub const GETPRINTINGOFFSET = 13;
pub const SPI_GETLOGICALDPIOVERRIDE = 158;
pub const EVENTLOG_END_ALL_PAIRED_EVENTS = 4;
pub const WSAEUSERS = c_long(10068);
pub const ERROR_LOCKED = c_long(212);
pub const PRODUCT_STANDARD_NANO_SERVER = 144;
pub const ERROR_IPSEC_DOSP_INVALID_PACKET = c_long(13927);
pub const SPI_GETSNAPSIZING = 142;
pub const WSA_QOS_ESHAPERATEOBJ = c_long(11030);
pub const SETWALLPAPER_DEFAULT = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(LPWSTR, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(LPWSTR, -1) else @as(LPWSTR, -1);
pub const EMARCH_ENC_I17_SIGN_VAL_POS_X = 63;
pub const REG_OPTION_DONT_VIRTUALIZE = c_long(16);
pub const MDM_AUTO_ML_DEFAULT = 0;
pub const HTERROR = -2;
pub const LANG_MONGOLIAN = 80;
pub const VP_TV_STANDARD_NTSC_433 = 65536;
pub const ERROR_DS_ATT_NOT_DEF_FOR_CLASS = c_long(8317);
pub const __analysis_hint = hint;
pub const CreateFontIndirectEx = CreateFontIndirectExA;
pub const ImmConfigureIME = ImmConfigureIMEA;
pub const PRODUCT_DATACENTER_SERVER_CORE = 12;
pub const SCRUB_DATA_OUTPUT_FLAG_RESUME_CONTEXT_LENGTH_SPECIFIED = 262144;
pub const SUBLANG_UI_CUSTOM_DEFAULT = 5;
pub const GCS_RESULTREADCLAUSE = 1024;
pub const IMAGE_FILE_MACHINE_AMD64 = 34404;
pub const ERROR_CLOUD_FILE_READ_ONLY_VOLUME = c_long(381);
pub const FILE_DISPOSITION_FLAG_FORCE_IMAGE_SECTION_CHECK = 4;
pub const ERROR_NOINTERFACE = c_long(632);
pub const EMR_SETVIEWPORTEXTEX = 11;
pub const WS_EX_TOOLWINDOW = c_long(128);
pub const ENHMETA_SIGNATURE = 1179469088;
pub const GetUserObjectInformation = GetUserObjectInformationA;
pub const SECURITY_NT_NON_UNIQUE = c_long(21);
pub const CAL_SMONTHNAME11 = 31;
pub const PDC_MODE_CENTERED = 128;
pub const JOB_OBJECT_NET_RATE_CONTROL_MAX_DSCP_TAG = 64;
pub const CONNECT_INTERACTIVE = 8;
pub const SM_CYFRAME = 33;
pub const FRS_ERR_STOPPING_SERVICE = c_long(8003);
pub const SERVICE_STOP_REASON_MINOR_MEMOTYLIMIT = 24;
pub const IMAGE_FILE_MACHINE_SH3 = 418;
pub const SP_BAUD = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2) else @as(DWORD, 2);
pub const SM_CXSCREEN = 0;
pub const TRANSACTION_MANAGER_MAXIMUM_OPTION = 63;
pub const ERROR_DUPLICATE_SERVICE_NAME = c_long(1078);
pub const SOUND_SYSTEM_BEEP = 3;
pub const META_SETTEXTCHAREXTRA = 264;
pub const APPCOMMAND_VOLUME_MUTE = 8;
pub const ERROR_NOT_SUPPORTED = c_long(50);
pub const __DBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const ERROR_NO_VOLUME_ID = c_long(1173);
pub const SPI_SETMOUSESONAR = 4125;
pub const ERROR_CLUSTER_FAULT_DOMAIN_PARENT_NOT_FOUND = c_long(5994);
pub const BAUD_USER = if (@typeInfo(@TypeOf(268435456)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 268435456) else if (@typeInfo(@TypeOf(268435456)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 268435456) else @as(DWORD, 268435456);
pub const ERROR_SXS_CORRUPT_ACTIVATION_STACK = c_long(14082);
pub const ERROR_DS_DUP_MSDS_INTID = c_long(8597);
pub const _Always_impl_ = annos;
pub const GMEM_SHARE = 8192;
pub const WM_SHOWWINDOW = 24;
pub const ECONNRESET = 108;
pub const SW_FORCEMINIMIZE = 11;
pub const WNNC_NET_DAV = 3014656;
pub const _USE_ATTRIBUTES_FOR_SAL = 0;
pub const WSAEMFILE = c_long(10024);
pub const ERROR_IPSEC_IKE_NO_PEER_CERT = c_long(13847);
pub const CopyFileEx = CopyFileExA;
pub const ERROR_DS_DUP_RDN = c_long(8378);
pub const CreateDirectory = CreateDirectoryA;
pub const UNALIGNED64 = __unaligned;
pub const GCL_REVERSE_LENGTH = 3;
pub const GlobalAddAtomEx = GlobalAddAtomExA;
pub const WN_NO_NETWORK = ERROR_NO_NETWORK;
pub const ERROR_STATE_GET_VERSION_FAILED = c_long(15801);
pub const PAGE_EXECUTE_WRITECOPY = 128;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NONCE = c_long(13839);
pub const GetComputerName = GetComputerNameA;
pub const KEYEVENTF_EXTENDEDKEY = 1;
pub const IDH_HELP = 28445;
pub const PCF_PARITY_CHECK = if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 8) else if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 8) else @as(DWORD, 8);
pub const MDM_V110_SPEED_57DOT6K = 10;
pub const ERROR_DS_ADD_REPLICA_INHIBITED = c_long(8302);
pub const DMPAPER_PENV_8 = 103;
pub const NTDDI_WS03 = 84017152;
pub const SCS_DOS_BINARY = 1;
pub const ERROR_LOCK_FAILED = c_long(167);
pub const NTSYSCALLAPI = DECLSPEC_IMPORT;
pub const TAPE_REWIND = c_long(0);
pub const APPCOMMAND_TREBLE_DOWN = 22;
pub const ERROR_UNKNOWN_PORT = c_long(1796);
pub const ERROR_CANNOT_BREAK_OPLOCK = c_long(802);
pub const GCL_HCURSOR = -12;
pub const POINTER_FLAG_PRIMARY = 8192;
pub const FACILITY_MSMQ = 14;
pub const IMFS_UNCHECKED = MFS_UNCHECKED;
pub const IsCharAlpha = IsCharAlphaA;
pub const TAPE_DRIVE_WRITE_FILEMARKS = 2181038080;
pub const IMAGE_SYM_TYPE_SHORT = 3;
pub const IMAGE_DEBUG_TYPE_EXCEPTION = 5;
pub const DM_LOGPIXELS = c_long(131072);
pub const ERROR_CLOUD_FILE_NOT_IN_SYNC = c_long(377);
pub const __UINT_FAST16_FMTx__ = "hx";
pub const XSTATE_MASK_LEGACY_FLOATING_POINT = if (@typeInfo(@TypeOf(i64 << XSTATE_LEGACY_FLOATING_POINT)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_LEGACY_FLOATING_POINT) else if (@typeInfo(@TypeOf(i64 << XSTATE_LEGACY_FLOATING_POINT)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_LEGACY_FLOATING_POINT) else c_uint(1)(i64 << XSTATE_LEGACY_FLOATING_POINT);
pub const ERROR_DISK_TOO_FRAGMENTED = c_long(302);
pub const SS_WORDELLIPSIS = c_long(49152);
pub const _On_failure_impl_ = annos;
pub const PAGE_GRAPHICS_EXECUTE_READ = 32768;
pub const STARTF_TITLEISAPPID = 4096;
pub const FILE_SUPPORTS_SPARSE_VDL = 268435456;
pub const CTRY_KENYA = 254;
pub const PF_COMPARE64_EXCHANGE128 = 15;
pub const ERROR_DEPLOYMENT_OPTION_NOT_SUPPORTED = c_long(15645);
pub const ERROR_DS_CANT_DELETE_DSA_OBJ = c_long(8340);
pub const CLAIM_SECURITY_ATTRIBUTES_INFORMATION_VERSION_V1 = 1;
pub const LOAD_WITH_ALTERED_SEARCH_PATH = 8;
pub const IO_REPARSE_TAG_STORAGE_SYNC = c_long(2147483678);
pub const EXCEPTION_POSSIBLE_DEADLOCK = STATUS_POSSIBLE_DEADLOCK;
pub const SSWF_DISPLAY = 3;
pub const WN_OUT_OF_MEMORY = ERROR_NOT_ENOUGH_MEMORY;
pub const TREE_CONNECT_ATTRIBUTE_PINNED = 2;
pub const CWP_SKIPDISABLED = 2;
pub const PERFSTATE_POLICY_CHANGE_ROCKET = 2;
pub const ERROR_INVALID_CRUNTIME_PARAMETER = c_long(1288);
pub const EnumDesktops = EnumDesktopsA;
pub const WSAENOTSOCK = c_long(10038);
pub const ERROR_EC_CRED_NOT_FOUND = c_long(15084);
pub const DOMAIN_USER_RID_MAX = c_long(999);
pub const IMR_CONFIRMRECONVERTSTRING = 5;
pub const ERROR_GPIO_OPERATION_DENIED = c_long(15325);
pub const WM_MEASUREITEM = 44;
pub const ELF_CULTURE_LATIN = 0;
pub const IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;
pub const LANG_FRISIAN = 98;
pub const EMR_EXCLUDECLIPRECT = 29;
pub const DEVICEDATA = 19;
pub const OemToCharBuff = OemToCharBuffA;
pub const STN_DISABLE = 3;
pub const __UINT_LEAST16_MAX__ = 65535;
pub const ENUMRESTYPEPROC = ENUMRESTYPEPROCA;
pub const WSA_QOS_BAD_STYLE = c_long(11012);
pub const ANYSIZE_ARRAY = 1;
pub const PROFILE_KERNEL = 536870912;
pub const LOCALE_SNAME = 92;
pub const DMCOLLATE_FALSE = 0;
pub const POSTSCRIPT_DATA = 37;
pub const SendMessage = SendMessageA;
pub const IME_CMODE_FULLSHAPE = 8;
pub const __SAL_H_VERSION = 180000000;
pub const ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = c_long(8464);
pub const SECURITY_IUSER_RID = c_long(17);
pub const __UINT8_FMTu__ = "hhu";
pub const PROCESSOR_PERF_MINIMUM_ACTIVITY_WINDOW = 0;
pub const CAL_SMONTHNAME9 = 29;
pub const ERROR_DS_INVALID_SEARCH_FLAG_SUBTREE = c_long(8626);
pub const DNS_ERROR_ADDRESS_REQUIRED = c_long(9573);
pub const FACILITY_MEDIASERVER = 13;
pub const GMDI_GOINTOPOPUPS = c_long(2);
pub const COLOR_HIGHLIGHTTEXT = 14;
pub const EnumResourceNamesEx = EnumResourceNamesExA;
pub const SECURITY_PARENT_PACKAGE_RID_COUNT = SECURITY_APP_PACKAGE_RID_COUNT;
pub const CAL_SABBREVMONTHNAME13 = 46;
pub const SETLINECAP = 21;
pub const COMMON_LVB_REVERSE_VIDEO = 16384;
pub const ULW_COLORKEY = 1;
pub const VP_FLAGS_MAX_UNSCALED = 16;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = 218;
pub const LPD_SHARE_DEPTH = 64;
pub const CreateHardLink = CreateHardLinkA;
pub const LOAD_IGNORE_CODE_AUTHZ_LEVEL = 16;
pub const CONNECT_UPDATE_RECENT = 2;
pub const NotifyServiceStatusChange = NotifyServiceStatusChangeA;
pub const COLOR_GRADIENTINACTIVECAPTION = 28;
pub const STATUS_FLOAT_MULTIPLE_TRAPS = if (@typeInfo(@TypeOf(c_long(3221226165))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226165)) else if (@typeInfo(@TypeOf(c_long(3221226165))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226165)) else @as(DWORD, c_long(3221226165));
pub const LB_SETSEL = 389;
pub const CA_NEGATIVE = 1;
pub const TRANSACTIONMANAGER_GENERIC_EXECUTE = STANDARD_RIGHTS_EXECUTE;
pub const FACILITY_FVE = 49;
pub const ACCESS_MAX_MS_V3_ACE_TYPE = 4;
pub const APPMODEL_ERROR_NO_MUTABLE_DIRECTORY = c_long(15707);
pub const SetWindowsHook = SetWindowsHookA;
pub const PCF_XONXOFF = if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 16) else if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 16) else @as(DWORD, 16);
pub const WM_POINTERUPDATE = 581;
pub const ERROR_DEV_NOT_EXIST = c_long(55);
pub const ERROR_EVT_VERSION_TOO_OLD = c_long(15034);
pub const PAN_SERIF_TRIANGLE = 10;
pub const FILE_VER_GET_LOCALISED = 1;
pub const TPM_LEFTBUTTON = c_long(0);
pub const ERROR_CTX_NOT_CONSOLE = c_long(7038);
pub const WNetCancelConnection2 = WNetCancelConnection2A;
pub const PSINJECT_TRAILER = 18;
pub const DNS_ERROR_SETUP_BASE = 9850;
pub const ERROR_RESOURCE_FAILED = c_long(5038);
pub const NTDDI_WINXPSP4 = 83952640;
pub const ERROR_CONTAINER_ASSIGNED = c_long(1504);
pub const DM_PAPERSIZE = c_long(2);
pub const WM_RENDERALLFORMATS = 774;
pub const SUBLANG_ROMANIAN_ROMANIA = 1;
pub const ERROR_DEVICE_IN_MAINTENANCE = c_long(359);
pub const SPI_GETMENUSHOWDELAY = 106;
pub const __inner_data_source = src_raw;
pub const ERROR_ALREADY_WAITING = c_long(1904);
pub const CAL_SMONTHNAME10 = 30;
pub const ERROR_SXS_XML_E_UNCLOSEDENDTAG = c_long(14061);
pub const WMSZ_RIGHT = 2;
pub const VP_TV_STANDARD_SECAM_H = 2048;
pub const TAPE_DRIVE_HIGH_FEATURES = 2147483648;
pub const RESTART_NO_CRASH = 1;
pub const MDITILE_VERTICAL = 0;
pub const PF_MONITORX_INSTRUCTION_AVAILABLE = 35;
pub const SE_SACL_PROTECTED = 8192;
pub const SEC_64K_PAGES = 524288;
pub const ERROR_INVALID_OWNER = c_long(1307);
pub const AC_LINE_UNKNOWN = 255;
pub const TPM_HORPOSANIMATION = c_long(1024);
pub const ERROR_NOACCESS = c_long(998);
pub const VK_OEM_FJ_MASSHOU = 147;
pub const _Success_impl_ = expr;
pub const SECURITY_COM_ID_BASE_RID = c_long(89);
pub const IMAGE_SCN_ALIGN_1BYTES = 1048576;
pub const PFD_DEPTH_DONTCARE = 536870912;
pub const NUMRESERVED = 106;
pub const STORAGE_INFO_OFFSET_UNKNOWN = 4294967295;
pub const IMAGE_SYM_TYPE_NULL = 0;
pub const LOCALE_SMONTHNAME1 = 56;
pub const ABSOLUTE = 1;
pub const WN_NO_ERROR = NO_ERROR;
pub const ERROR_DS_NAME_TYPE_UNKNOWN = c_long(8351);
pub const MDM_V110_SPEED_DEFAULT = 0;
pub const PRODUCT_PRO_CHINA = 139;
pub const TAPE_LOCK = c_long(3);
pub const ERROR_PRINTER_DRIVER_IN_USE = c_long(3001);
pub const NTM_MULTIPLEMASTER = 524288;
pub const ERROR_DEVICE_FEATURE_NOT_SUPPORTED = c_long(316);
pub const S_WHITE1024 = 5;
pub const COMPRESSION_FORMAT_LZNT1 = 2;
pub const DMPAPER_PENV_2_ROTATED = 110;
pub const TAPE_DRIVE_FIXED_BLOCK = 1024;
pub const SWP_NOZORDER = 4;
pub const KEYEVENTF_KEYUP = 2;
pub const FIND_FROMEND = 8388608;
pub const SUBLANG_UPPER_SORBIAN_GERMANY = 1;
pub const __ANNOTATION = fun;
pub const HEAP_CREATE_ENABLE_EXECUTE = 262144;
pub const ERROR_LOGON_NOT_GRANTED = c_long(1380);
pub const POINTER_MESSAGE_FLAG_PRIMARY = 8192;
pub const WSAENETDOWN = c_long(10050);
pub const DISPLAYCONFIG_PATH_VALID_FLAGS = 13;
pub const FILE_SUPPORTS_BLOCK_REFCOUNTING = 134217728;
pub const PPM_FIRMWARE_CST = 8;
pub const ERROR_EFS_SERVER_NOT_TRUSTED = c_long(6011);
pub const SHTDN_REASON_MAJOR_OTHER = 0;
pub const VK_NUMLOCK = 144;
pub const ARW_TOPRIGHT = c_long(3);
pub const ImmRegisterWord = ImmRegisterWordA;
pub const APPCOMMAND_UNDO = 34;
pub const SERVICE_DISABLED = 4;
pub const ERROR_SXS_CORRUPTION = c_long(14083);
pub const WS_DLGFRAME = c_long(4194304);
pub const ORD_LANGDRIVER = 1;
pub const HC_NOREMOVE = 3;
pub const ARW_TOPLEFT = c_long(2);
pub const ERROR_IPSEC_IKE_PEER_DOESNT_SUPPORT_MOBIKE = c_long(13904);
pub const MAXIMUM_WAIT_OBJECTS = 64;
pub const MINSSIZE_T = if (@typeInfo(@TypeOf(~MAXSSIZE_T)) == @import("builtin").TypeId.Pointer) @ptrCast(SSIZE_T, ~MAXSSIZE_T) else if (@typeInfo(@TypeOf(~MAXSSIZE_T)) == @import("builtin").TypeId.Int) @intToPtr(SSIZE_T, ~MAXSSIZE_T) else @as(SSIZE_T, ~MAXSSIZE_T);
pub const InterlockedExchangeNoFence64 = InterlockedExchange64;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_POS_X = 24;
pub const MINHALF_PTR = ~MAXHALF_PTR;
pub const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;
pub const LANG_AZERI = 44;
pub const STATE_SYSTEM_INVISIBLE = 32768;
pub const LANG_ODIA = 72;
pub const CS_CLASSDC = 64;
pub const FRS_ERR_INTERNAL = c_long(8005);
pub const SPI_GETSNAPTODEFBUTTON = 95;
pub const PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 44) else if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 44) else c_uint(1)(i64 << 44);
pub const WSATYPE_NOT_FOUND = c_long(10109);
pub const ERROR_BAD_LOGON_SESSION_STATE = c_long(1365);
pub const PM_QS_INPUT = QS_INPUT << 16;
pub const PRODUCT_PROFESSIONAL_N = 49;
pub const ERROR_NO_GUID_TRANSLATION = c_long(560);
pub const CAL_SSHORTESTDAYNAME1 = 49;
pub const PRODUCT_ENTERPRISE_SERVER = 10;
pub const DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED = c_long(9957);
pub const SERVICE_LAUNCH_PROTECTED_ANTIMALWARE_LIGHT = 3;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION = 140;
pub const THREAD_SET_CONTEXT = 16;
pub const HTMAXBUTTON = 9;
pub const ERROR_CLUSTER_GROUP_QUEUED = c_long(5959);
pub const DMPAPER_PENV_9_ROTATED = 117;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_INVALID_OPERATION = c_long(385);
pub const IGNORE = 0;
pub const SUBLANG_GERMAN_LIECHTENSTEIN = 5;
pub const __FLT16_MAX_EXP__ = 15;
pub const InterlockedAndNoFence = _InterlockedAnd;
pub const SECURITY_DELEGATION = SecurityDelegation << 16;
pub const JOB_OBJECT_MSG_MINIMUM = 1;
pub const ERROR_ADDRESS_ALREADY_ASSOCIATED = c_long(1227);
pub const SHUTDOWN_SOFT_REBOOT = 2048;
pub const SBS_RIGHTALIGN = c_long(4);
pub const ERROR_OPERATION_ABORTED = c_long(995);
pub const InterlockedXor16 = _InterlockedXor16;
pub const ERROR_GDI_HANDLE_LEAK = c_long(373);
pub const EMR_INVERTRGN = 73;
pub const CTRY_MOROCCO = 212;
pub const ERROR_INSTALL_TRANSFORM_FAILURE = c_long(1624);
pub const MS_RING_ON = if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 64) else if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 64) else @as(DWORD, 64);
pub const ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = c_long(8474);
pub const MIIM_STRING = 64;
pub const IMAGE_REL_AM_ABSOLUTE = 0;
pub const ReadMxCsr = _mm_getcsr;
pub const CE_RXOVER = 1;
pub const SPI_GETCARETWIDTH = 8198;
pub const WNetGetConnection = WNetGetConnectionA;
pub const IS_TEXT_UNICODE_NULL_BYTES = 4096;
pub const ERROR_NODE_CANT_HOST_RESOURCE = c_long(5071);
pub const LGRPID_GEORGIAN = 16;
pub const ERROR_IPSEC_IKE_INVALID_MAJOR_VERSION = c_long(13880);
pub const SSGF_NONE = 0;
pub const SM_CXFIXEDFRAME = SM_CXDLGFRAME;
pub const DOMAIN_ALIAS_RID_RDS_REMOTE_ACCESS_SERVERS = c_long(575);
pub const SECURITY_VIRTUALSERVER_ID_RID_COUNT = c_long(6);
pub const RegQueryValueEx = RegQueryValueExA;
pub const ERROR_PARAMETER_QUOTA_EXCEEDED = c_long(1283);
pub const VK_HOME = 36;
pub const LBN_KILLFOCUS = 5;
pub const IMFS_DEFAULT = MFS_DEFAULT;
pub const IMAGE_REL_PPC_REL24 = 6;
pub const OUT_TT_PRECIS = 4;
pub const ERROR_WMI_ALREADY_ENABLED = c_long(4206);
pub const BDR_SUNKENINNER = 8;
pub const IMAGE_REL_ALPHA_GPDISP = 6;
pub const ERROR_QUORUM_NOT_ALLOWED_IN_THIS_GROUP = c_long(5928);
pub const DNS_ERROR_OPERATION_BASE = 9750;
pub const EMR_EXTCREATEPEN = 95;
pub const IMAGE_FILE_MACHINE_MIPS16 = 614;
pub const ERROR_FAILED_DRIVER_ENTRY = c_long(647);
pub const __UINT16_FMTX__ = "hX";
pub const SPIF_SENDWININICHANGE = 2;
pub const CAL_SABBREVMONTHNAME12 = 45;
pub const ESB_DISABLE_BOTH = 3;
pub const WM_IME_KEYUP = 657;
pub const FILE_SUPPORTS_SPARSE_FILES = 64;
pub const PAGE_GRAPHICS_COHERENT = 131072;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS = 51;
pub const DBG_TERMINATE_PROCESS = if (@typeInfo(@TypeOf(c_long(1073807364))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807364)) else if (@typeInfo(@TypeOf(c_long(1073807364))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807364)) else @as(DWORD, c_long(1073807364));
pub const ERROR_NOT_TINY_STREAM = c_long(598);
pub const ERROR_DS_HIGH_ADLDS_FFL = c_long(8641);
pub const IME_CMODE_JAPANESE = IME_CMODE_NATIVE;
pub const ERROR_DATA_NOT_ACCEPTED = c_long(592);
pub const PRODUCT_WEB_SERVER_CORE = 29;
pub const ERROR_SXS_PROCESS_TERMINATION_REQUESTED = c_long(14087);
pub const ERROR_AUDIT_FAILED = c_long(606);
pub const SPI_SETPOWEROFFTIMEOUT = 82;
pub const IMAGE_REL_ALPHA_REFLONG = 1;
pub const __PRFCHW__ = 1;
pub const ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = c_long(8552);
pub const OF_CREATE = 4096;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;
pub const STATUS_ALREADY_REGISTERED = if (@typeInfo(@TypeOf(c_long(3221227288))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221227288)) else if (@typeInfo(@TypeOf(c_long(3221227288))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221227288)) else @as(DWORD, c_long(3221227288));
pub const ERROR_DS_OBJECT_BEING_REMOVED = c_long(8339);
pub const PAGE_READONLY = 2;
pub const LGRPID_JAPANESE = 7;
pub const ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = c_long(8520);
pub const SetWindowLong = SetWindowLongA;
pub const VK_GAMEPAD_VIEW = 208;
pub const CHILDID_SELF = 0;
pub const ERROR_TRANSACTION_OBJECT_EXPIRED = c_long(6722);
pub const __DBL_MANT_DIG__ = 53;
pub const MF_RIGHTJUSTIFY = c_long(16384);
pub const R2_NOTMASKPEN = 8;
pub const IMAGE_REL_MIPS_JMPADDR = 3;
pub const FACILITY_LEAP = 2184;
pub const REG_OPTION_VOLATILE = c_long(1);
pub const EMR_SETMETARGN = 28;
pub const DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS = c_long(9104);
pub const RDW_NOCHILDREN = 64;
pub const DMDITHER_RESERVED7 = 7;
pub const TCI_SRCLOCALE = 4096;
pub const IMAGE_REL_EBC_SECTION = 3;
pub const ERROR_SXS_XML_E_UNCLOSEDDECL = c_long(14064);
pub const DATABITS_16X = if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 32) else if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 32) else @as(WORD, 32);
pub const FILE_APPEND_DATA = 4;
pub const SYSTEM_MANDATORY_LABEL_ACE_TYPE = 17;
pub const CAL_SMONTHNAME13 = 33;
pub const IMAGE_REL_AMD64_ADDR64 = 1;
pub const WN_BAD_NETNAME = ERROR_BAD_NET_NAME;
pub const __SIZEOF_SIZE_T__ = 8;
pub const COMMON_LVB_GRID_RVERTICAL = 4096;
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const LANG_ALBANIAN = 28;
pub const OLEOBJ_S_FIRST = c_long(262528);
pub const SM_CYMINSPACING = 48;
pub const SERVICE_INTERACTIVE_PROCESS = 256;
pub const ERROR_DS_NC_MUST_HAVE_NC_PARENT = c_long(8494);
pub const GMEM_MOVEABLE = 2;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_IN_PROGRESS = c_long(5918);
pub const _Pre_satisfies_impl_ = expr;
pub const SORT_GERMAN_PHONE_BOOK = 1;
pub const LOCALE_SMONTHNAME6 = 61;
pub const LANG_GREENLANDIC = 111;
pub const GRADIENT_FILL_TRIANGLE = 2;
pub const IDN_ALLOW_UNASSIGNED = 1;
pub const IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;
pub const SERVICE_STOP_REASON_MINOR_MAX = 25;
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH = c_long(706);
pub const EMR_POLYLINETO = 6;
pub const ImmInstallIME = ImmInstallIMEA;
pub const TAPE_SPACE_SETMARKS = c_long(8);
pub const WN_ALREADY_CONNECTED = ERROR_ALREADY_ASSIGNED;
pub const GID_TWOFINGERTAP = 6;
pub const LOCALE_IDIGITSUBSTITUTION = 4116;
pub const SE_DACL_AUTO_INHERIT_REQ = 256;
pub const DISPLAY_DEVICE_ACTIVE = 1;
pub const __INT16_MAX__ = 32767;
pub const IMAGE_FILE_MACHINE_ALPHA = 388;
pub const __WINT_WIDTH__ = 16;
pub const CTRY_MACEDONIA = 389;
pub const ERROR_CLOUD_FILE_TOO_MANY_PROPERTY_BLOBS = c_long(374);
pub const ERROR_IPSEC_TRANSPORT_FILTER_PENDING_DELETION = c_long(13019);
pub const CB_SETEXTENDEDUI = 341;
pub const ODS_HOTLIGHT = 64;
pub const __SHRT_MAX__ = 32767;
pub const TRANSACTION_SET_INFORMATION = 2;
pub const WNNC_NET_RSFX = 4194304;
pub const DISPLAY_DEVICE_REMOTE = 67108864;
pub const VK_GAMEPAD_DPAD_DOWN = 204;
pub const _DIGIT = 4;
pub const WC_SEPCHARS = 32;
pub const __drv_typeExpr = 3;
pub const C2_NOTAPPLICABLE = 0;
pub const ERROR_NO_SUCH_DOMAIN = c_long(1355);
pub const FAIL_FAST_GENERATE_EXCEPTION_ADDRESS = 1;
pub const LANG_SERBIAN = 26;
pub const LANGUAGEGROUP_ENUMPROC = LANGUAGEGROUP_ENUMPROCA;
pub const _Deref_pre1_impl_ = p1;
pub const VIF_TEMPFILE = c_long(1);
pub const LOAD_LIBRARY_SEARCH_DEFAULT_DIRS = 4096;
pub const SEF_AVOID_OWNER_RESTRICTION = 4096;
pub const ERROR_OBJECT_NOT_FOUND = c_long(4312);
pub const VK_RCONTROL = 163;
pub const ERROR_CLOUD_FILE_REQUEST_CANCELED = c_long(398);
pub const ENUM_S_LAST = c_long(262591);
pub const ERROR_WX86_WARNING = c_long(539);
pub const ERROR_ALREADY_THREAD = c_long(1281);
pub const ERROR_PACKAGES_REPUTATION_CHECK_FAILED = c_long(15643);
pub const ERROR_PASSWORD_MUST_CHANGE = c_long(1907);
pub const BN_DBLCLK = BN_DOUBLECLICKED;
pub const MKF_MODIFIERS = 64;
pub const SPI_GETGESTUREVISUALIZATION = 8218;
pub const ERROR_DS_RESERVED_MAPI_ID = c_long(8631);
pub const LGRPID_INDIC = 15;
pub const CFG_CALL_TARGET_VALID = 1;
pub const TOUCHEVENTF_NOCOALESCE = 32;
pub const ENLISTMENT_SUPERIOR = 1;
pub const SERVICE_CONTROL_NETBINDDISABLE = 10;
pub const WINADVAPI = DECLSPEC_IMPORT;
pub const CAL_SSHORTESTDAYNAME2 = 50;
pub const CBN_SELCHANGE = 1;
pub const WH_SYSMSGFILTER = 6;
pub const STATUS_FLOAT_INVALID_OPERATION = if (@typeInfo(@TypeOf(c_long(3221225616))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225616)) else if (@typeInfo(@TypeOf(c_long(3221225616))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225616)) else @as(DWORD, c_long(3221225616));
pub const ETO_OPAQUE = 2;
pub const RESOURCEUSAGE_CONNECTABLE = 1;
pub const MEM_COALESCE_PLACEHOLDERS = 1;
pub const ERROR_IPSEC_TUNNEL_FILTER_NOT_FOUND = c_long(13017);
pub const CTRY_NICARAGUA = 505;
pub const SUBLANG_ENGLISH_BELIZE = 10;
pub const GETFACENAME = 513;
pub const SUBLANG_MALAY_MALAYSIA = 1;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINDOWS_RID = c_long(4096);
pub const ERROR_CLOUD_FILE_NETWORK_UNAVAILABLE = c_long(388);
pub const PRF_NONCLIENT = c_long(2);
pub const OBJID_SIZEGRIP = if (@typeInfo(@TypeOf(4294967289)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967289) else if (@typeInfo(@TypeOf(4294967289)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967289) else @as(LONG, 4294967289);
pub const __INT8_FMTd__ = "hhd";
pub const SPI_GETCARETTIMEOUT = 8226;
pub const S_PERIOD2048 = 2;
pub const SUBLANG_BANGLA_BANGLADESH = 2;
pub const WriteSizeTRaw = WriteULongPtrRaw;
pub const METRICS_USEDEFAULT = -1;
pub const ANSI_NULL = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(CHAR, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(CHAR, 0) else @as(CHAR, 0);
pub const SPI_SETTOGGLEKEYS = 53;
pub const VP_FLAGS_TV_MODE = 1;
pub const MINLONGLONG = if (@typeInfo(@TypeOf(~MAXLONGLONG)) == @import("builtin").TypeId.Pointer) @ptrCast(LONGLONG, ~MAXLONGLONG) else if (@typeInfo(@TypeOf(~MAXLONGLONG)) == @import("builtin").TypeId.Int) @intToPtr(LONGLONG, ~MAXLONGLONG) else @as(LONGLONG, ~MAXLONGLONG);
pub const NF_QUERY = 3;
pub const LPD_TYPE_COLORINDEX = 1;
pub const ERROR_IPSEC_IKE_NEG_STATUS_BEGIN = c_long(13800);
pub const WN_BAD_PROVIDER = ERROR_BAD_PROVIDER;
pub const STATE_SYSTEM_MULTISELECTABLE = 16777216;
pub const __STDC_WANT_SECURE_LIB__ = 1;
pub const WNNC_NET_AVID = 1703936;
pub const ERROR_REPARSE_ATTRIBUTE_CONFLICT = c_long(4391);
pub const DMBIN_FIRST = DMBIN_UPPER;
pub const ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4;
pub const FILE_SUPPORTS_REPARSE_POINTS = 128;
pub const VK_KANA = 21;
pub const SP_PARITY = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const DESKTOPHORZRES = 118;
pub const ERROR_MCA_INVALID_TECHNOLOGY_TYPE_RETURNED = c_long(15206);
pub const SM_CYSCREEN = 1;
pub const DOMAIN_ALIAS_RID_USERS = c_long(545);
pub const ENOEXEC = 8;
pub const PEERDIST_ERROR_NO_MORE = c_long(4053);
pub const ERROR_IPSEC_IKE_NEGOTIATION_PENDING = c_long(13803);
pub const VK_GAMEPAD_B = 196;
pub const WM_PENWINLAST = 911;
pub const PRODUCT_EMBEDDED_INDUSTRY_E = 91;
pub const PRODUCT_ENTERPRISE_SERVER_CORE_V = 41;
pub const PPM_FIRMWARE_OSC = 65536;
pub const ERROR_PRINTER_ALREADY_EXISTS = c_long(1802);
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL = c_long(9991);
pub const RESTART_MAX_CMD_LINE = 1024;
pub const ERROR_NO_SUCH_PACKAGE = c_long(1364);
pub const IMAGE_REL_IA64_SECREL32 = 14;
pub const EXCEPTION_DEBUG_EVENT = 1;
pub const RPC_S_INVALID_AUTH_IDENTITY = c_long(1749);
pub const MNGO_NOINTERFACE = 0;
pub const BS_FLAT = c_long(32768);
pub const ERROR_STATE_ENUMERATE_SETTINGS_FAILED = c_long(15814);
pub const ERROR_DS_DRA_PREEMPTED = c_long(8461);
pub const EMR_ENDPATH = 60;
pub const DBG_CONTROL_BREAK = if (@typeInfo(@TypeOf(c_long(1073807368))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807368)) else if (@typeInfo(@TypeOf(c_long(1073807368))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807368)) else @as(DWORD, c_long(1073807368));
pub const SetFirmwareEnvironmentVariableEx = SetFirmwareEnvironmentVariableExA;
pub const ENDSESSION_LOGOFF = 2147483648;
pub const PFD_SWAP_COPY = 1024;
pub const SERVICE_DEMAND_START = 3;
pub const ERROR_ORPHAN_NAME_EXHAUSTED = c_long(799);
pub const ERROR_BAD_PIPE = c_long(230);
pub const ERROR_IPSEC_IKE_GENERAL_PROCESSING_ERROR = c_long(13804);
pub const WS_ACTIVECAPTION = 1;
pub const FW_BLACK = FW_HEAVY;
pub const FILE_MAP_TARGETS_INVALID = 1073741824;
pub const SYMBOLIC_LINK_FLAG_ALLOW_UNPRIVILEGED_CREATE = 2;
pub const FW_THIN = 100;
pub const R2_BLACK = 1;
pub const EnumResourceTypes = EnumResourceTypesA;
pub const WS_THICKFRAME = c_long(262144);
pub const ERROR_LOG_MULTIPLEXED = c_long(6630);
pub const SKF_AVAILABLE = 2;
pub const ENETDOWN = 116;
pub const RDW_VALIDATE = 8;
pub const BSF_FLUSHDISK = 4;
pub const IMAGE_REL_AMD64_ADDR32NB = 3;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_ALG = c_long(13874);
pub const HELP_HELPONHELP = c_long(4);
pub const ODS_NOFOCUSRECT = 512;
pub const DC_COLLATE = 22;
pub const PROCESS_QUERY_INFORMATION = 1024;
pub const ERROR_PRINTER_DRIVER_PACKAGE_IN_USE = c_long(3015);
pub const PAN_WEIGHT_NORD = 11;
pub const PDC_ORIENTATION_180 = 16;
pub const FLASHW_TIMER = 4;
pub const FACILITY_P2P = 99;
pub const RPC_S_FP_OVERFLOW = c_long(1771);
pub const ERROR_CLOUD_FILE_NOT_SUPPORTED = c_long(379);
pub const WSANO_RECOVERY = c_long(11003);
pub const IMAGE_CURSOR = 2;
pub const LANG_GREEK = 8;
pub const SPI_SETMENURECT = 163;
pub const ERROR_INVALID_ENVIRONMENT = c_long(1805);
pub const FILE_DISPOSITION_FLAG_DELETE = 1;
pub const RC_SAVEBITMAP = 64;
pub const LANG_SINDHI = 89;
pub const ERROR_WMI_GUID_NOT_FOUND = c_long(4200);
pub const DMDITHER_RESERVED6 = 6;
pub const VK_OEM_7 = 222;
pub const MDM_V120_ML_2 = 2;
pub const SPI_GETLOWPOWERACTIVE = 83;
pub const _INTEGRAL_MAX_BITS = 64;
pub const CB_SETITEMDATA = 337;
pub const DBG_PRINTEXCEPTION_C = if (@typeInfo(@TypeOf(c_long(1073807366))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807366)) else if (@typeInfo(@TypeOf(c_long(1073807366))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807366)) else @as(DWORD, c_long(1073807366));
pub const DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = c_long(9719);
pub const CAL_SMONTHNAME12 = 32;
pub const ERROR_INVALID_CAP = c_long(320);
pub const DEBUG_PROCESS = 1;
pub const MDM_PIAFS_OUTGOING = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_DEFER = if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 12) else if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 12) else c_uint(0)(i64 << 12);
pub const MSGF_MESSAGEBOX = 1;
pub const EXCEPTION_NONCONTINUABLE_EXCEPTION = STATUS_NONCONTINUABLE_EXCEPTION;
pub const PAN_FAMILY_SCRIPT = 3;
pub const WC_DISCARDNS = 16;
pub const APPCOMMAND_OPEN = 30;
pub const CDS_RESET = 1073741824;
pub const ERROR_NO_RECOVERY_POLICY = c_long(6003);
pub const FS_TURKISH = c_long(16);
pub const CONSOLE_MOUSE_DOWN = 8;
pub const __drv_typeCond = 1;
pub const LOCALE_SMONTHNAME7 = 62;
pub const MUI_FORMAT_INF_COMPAT = 2;
pub const SHTDN_REASON_MINOR_MMC = 25;
pub const HBMMENU_CALLBACK = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, -1) else @as(HBITMAP, -1);
pub const WNetConnectionDialog1 = WNetConnectionDialog1A;
pub const MONITOR_DEFAULTTONULL = 0;
pub const MOUSE_HWHEELED = 8;
pub const ERROR_DS_CANT_ACCESS_REMOTE_PART_OF_AD = c_long(8585);
pub const ERROR_DS_OBJECT_CLASS_REQUIRED = c_long(8315);
pub const GCLP_HCURSOR = -12;
pub const __drv_Mode_impl = x;
pub const GREEK_CHARSET = 161;
pub const LOCALE_INEGATIVEPERCENT = 116;
pub const PEERDIST_ERROR_OUT_OF_BOUNDS = c_long(4061);
pub const PS_ENDCAP_FLAT = 512;
pub const IME_ITHOTKEY_UISTYLE_TOGGLE = 514;
pub const ERROR_DS_SCHEMA_ALLOC_FAILED = c_long(8415);
pub const ULW_EX_NORESIZE = 8;
pub const COLOR_BTNHILIGHT = COLOR_BTNHIGHLIGHT;
pub const GEO_NAME_USER_DEFAULT = NULL;
pub const HC_SYSMODALOFF = 5;
pub const PRODUCT_CORE_N = 98;
pub const VK_CRSEL = 247;
pub const SECURITY_APPPOOL_ID_RID_COUNT = c_long(6);
pub const GetVolumePathName = GetVolumePathNameA;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ENABLE = 1;
pub const EMR_SELECTPALETTE = 48;
pub const DNS_ERROR_FORWARDER_ALREADY_EXISTS = c_long(9619);
pub const IMAGE_REL_IA64_DIR32 = 4;
pub const DMBIN_USER = 256;
pub const ERROR_CONNECTION_ACTIVE = c_long(1230);
pub const VK_UP = 38;
pub const ERROR_SERVER_HAS_OPEN_HANDLES = c_long(1811);
pub const SM_CXMIN = 28;
pub const ERROR_WRONG_COMPARTMENT = c_long(1468);
pub const ERROR_EC_LOG_DISABLED = c_long(15081);
pub const STATUS_CONTROL_C_EXIT = if (@typeInfo(@TypeOf(c_long(3221225786))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225786)) else if (@typeInfo(@TypeOf(c_long(3221225786))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225786)) else @as(DWORD, c_long(3221225786));
pub const DCB_RESET = 1;
pub const RPC_X_SS_CHAR_TRANS_OPEN_FAIL = c_long(1773);
pub const EXCEPTION_INVALID_HANDLE = STATUS_INVALID_HANDLE;
pub const AccessCheckByTypeAndAuditAlarm = AccessCheckByTypeAndAuditAlarmA;
pub const FRS_ERR_SYSVOL_IS_BUSY = c_long(8015);
pub const RIDEV_EXCLUDE = 16;
pub const PROCESSOR_THROTTLE_AUTOMATIC = 2;
pub const META_SETLAYOUT = 329;
pub const TIMEFMT_ENUMPROC = TIMEFMT_ENUMPROCA;
pub const SetEnvironmentStrings = SetEnvironmentStringsA;
pub const BACKUP_GHOSTED_FILE_EXTENTS = 11;
pub const FF_DECORATIVE = 5 << 4;
pub const TT_PRIM_CSPLINE = 3;
pub const WNNC_NET_EXIFS = 2949120;
pub const CAL_HEBREW = 8;
pub const ERROR_IPSEC_DOSP_MAX_PER_IP_RATELIMIT_QUEUES = c_long(13932);
pub const MM_LOMETRIC = 2;
pub const CAL_SSHORTESTDAYNAME3 = 51;
pub const DMPAPER_B_PLUS = 58;
pub const LogonUser = LogonUserA;
pub const EnumServicesStatus = EnumServicesStatusA;
pub const PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 40) else if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 40) else c_uint(1)(i64 << 40);
pub const ERROR_INSTALL_USEREXIT = c_long(1602);
pub const ONE5STOPBITS = 1;
pub const ERROR_REQ_NOT_ACCEP = c_long(71);
pub const SOUND_SYSTEM_MAXIMIZE = 8;
pub const MN_GETHMENU = 481;
pub const lstrcpy = lstrcpyA;
pub const SKF_RSHIFTLOCKED = 131072;
pub const EWX_SHUTDOWN = 1;
pub const MINLONG_PTR = ~MAXLONG_PTR;
pub const GIDC_REMOVAL = 2;
pub const SIZEICONIC = SIZE_MINIMIZED;
pub const DNS_ERROR_DNSSEC_IS_DISABLED = c_long(9125);
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_X = 2;
pub const ERROR_REPLY_MESSAGE_MISMATCH = c_long(595);
pub const SEF_AVOID_OWNER_CHECK = 16;
pub const HEAP_OPTIMIZE_RESOURCES_CURRENT_VERSION = 1;
pub const ReadLongPtrNoFence = ReadNoFence64;
pub const IMAGE_REL_BASED_DIR64 = 10;
pub const DOMAIN_GROUP_RID_PROTECTED_USERS = c_long(525);
pub const PROCESS_CREATION_ALL_APPLICATION_PACKAGES_OPT_OUT = 1;
pub const LANG_BRETON = 126;
pub const CS_BYTEALIGNWINDOW = 8192;
pub const IMAGE_REL_I386_SECREL = 11;
pub const SearchPath = SearchPathA;
pub const PLANES = 14;
pub const IMAGE_FILE_MACHINE_MIPSFPU16 = 1126;
pub const CLIPBRD_E_FIRST = c_long(2147746256);
pub const ACL_REVISION1 = 1;
pub const SHTDN_REASON_UNKNOWN = SHTDN_REASON_MINOR_NONE;
pub const LOAD_LIBRARY_OS_INTEGRITY_CONTINUITY = 32768;
pub const PRODUCT_STANDARD_SERVER = 7;
pub const PC_RECTANGLE = 2;
pub const ERROR_WMI_DP_NOT_FOUND = c_long(4204);
pub const SBS_VERT = c_long(1);
pub const X3_D_WH_SIZE_X = 3;
pub const EFS_USE_RECOVERY_KEYS = 1;
pub const NTDDI_WIN2K = 83886080;
pub const DSS_MONO = 128;
pub const VK_GAMEPAD_A = 195;
pub const MUI_FILEINFO_VERSION = 1;
pub const PROCESSOR_STRONGARM = 2577;
pub const SECTION_EXTEND_SIZE = 16;
pub const SW_INVALIDATE = 2;
pub const PF_VIRT_FIRMWARE_ENABLED = 21;
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const E2BIG = 7;
pub const VK_RMENU = 165;
pub const DNS_ERROR_RCODE_NOTZONE = c_long(9010);
pub const JOB_OBJECT_LIMIT_JOB_READ_BYTES = 65536;
pub const VK_F24 = 135;
pub const PAN_STROKE_GRADUAL_VERT = 4;
pub const ERROR_CLOUD_FILE_AUTHENTICATION_FAILED = c_long(386);
pub const DNS_ERROR_FILE_WRITEBACK_FAILED = c_long(9654);
pub const EMR_INTERSECTCLIPRECT = 30;
pub const GetTextExtentPoint32 = GetTextExtentPoint32A;
pub const GC_PAN_WITH_INERTIA = 16;
pub const WSA_E_CANCELLED = c_long(10111);
pub const ERROR_INSTALL_VOLUME_OFFLINE = c_long(15629);
pub const LOAD_LIBRARY_SAFE_CURRENT_DIRS = 8192;
pub const IME_SMODE_CONVERSATION = 16;
pub const ERROR_TRANSACTION_REQUIRED_PROMOTION = c_long(6837);
pub const UnsignedMultiplyHigh = __umulh;
pub const ERROR_DS_COULDNT_CONTACT_FSMO = c_long(8367);
pub const ERROR_DS_DRA_ABANDON_SYNC = c_long(8462);
pub const MEM_EXTENDED_PARAMETER_TYPE_BITS = 8;
pub const GetCPInfoEx = GetCPInfoExA;
pub const ERROR_DS_MISSING_FOREST_TRUST = c_long(8649);
pub const DMPAPER_PENV_6_ROTATED = 114;
pub const DNS_ERROR_AXFR = c_long(9752);
pub const PROCESSOR_ARCHITECTURE_UNKNOWN = 65535;
pub const DLGC_WANTMESSAGE = 4;
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const _WIN32_WINNT_WIN10 = 2560;
pub const PRODUCT_PRO_SINGLE_LANGUAGE = 138;
pub const DNS_ERROR_INVALID_SCOPE_NAME = c_long(9958);
pub const SC_ARRANGE = 61712;
pub const LOGON32_LOGON_NETWORK_CLEARTEXT = 8;
pub const WM_VKEYTOITEM = 46;
pub const SYSTEM_PROCESS_TRUST_NOCONSTRAINT_MASK = 4294967295;
pub const ERROR_SXS_PROTECTION_CATALOG_NOT_VALID = c_long(14076);
pub const DMRES_DRAFT = -1;
pub const IE_BAUDRATE = -12;
pub const ERROR_ARITHMETIC_OVERFLOW = c_long(534);
pub const BLACK_BRUSH = 4;
pub const BF_LEFT = 1;
pub const DNS_ERROR_DP_FSMO_ERROR = c_long(9906);
pub const TRANSACTION_NOTIFY_ENLIST_MASK = 262144;
pub const VK_OEM_6 = 221;
pub const DNS_ERROR_ROLLOVER_ALREADY_QUEUED = c_long(9120);
pub const ERROR_OLD_WIN_VERSION = c_long(1150);
pub const LR_LOADMAP3DCOLORS = 4096;
pub const PO_THROTTLE_CONSTANT = 1;
pub const META_SETPOLYFILLMODE = 262;
pub const EMR_SETROP2 = 20;
pub const MDM_PROTOCOLID_V110 = 4;
pub const PROCESS_POWER_THROTTLING_EXECUTION_SPEED = 1;
pub const RPI_FLAG_SMB2_SHARECAP_SCALEOUT = 32;
pub const MDIS_ALLCHILDSTYLES = 1;
pub const __clang_version__ = "8.0.0 (tags/RELEASE_800/rc5)";
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 44) else if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 44) else c_uint(2)(i64 << 44);
pub const RIDEV_PAGEONLY = 32;
pub const ERROR_NOTIFICATION_GUID_ALREADY_DEFINED = c_long(309);
pub const LOCALE_SMONTHNAME4 = 59;
pub const RESOURCEUSAGE_ATTACHED = 16;
pub const POINTER_MOD_SHIFT = 4;
pub const ENUM_CURRENT_SETTINGS = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const GWL_WNDPROC = -4;
pub const SERVICE_ACCEPT_PRESHUTDOWN = 256;
pub const FILE_FLAG_OVERLAPPED = 1073741824;
pub const MUI_SKIP_STRING_CACHE = 8;
pub const ERROR_DATATYPE_MISMATCH = c_long(1629);
pub const GetCharWidth32 = GetCharWidth32A;
pub const WSAEDISCON = c_long(10101);
pub const CAL_GREGORIAN_US = 2;
pub const _WIN32_IE_IE60 = 1536;
pub const IACE_CHILDREN = 1;
pub const ERROR_AUTODATASEG_EXCEEDS_64k = c_long(199);
pub const RTL_CRITICAL_SECTION_FLAG_FORCE_DEBUG_INFO = 268435456;
pub const CLASSFACTORY_E_LAST = c_long(2147746079);
pub const CreateService = CreateServiceA;
pub const LCS_CALIBRATED_RGB = c_long(0);
pub const WPF_RESTORETOMAXIMIZED = 2;
pub const DBG_EXCEPTION_HANDLED = if (@typeInfo(@TypeOf(c_long(65537))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(65537)) else if (@typeInfo(@TypeOf(c_long(65537))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(65537)) else @as(DWORD, c_long(65537));
pub const RIDEV_EXINPUTSINK = 4096;
pub const IME_CHOTKEY_SHAPE_TOGGLE = 17;
pub const _HAS_CXX20 = 0;
pub const LANG_KOREAN = 18;
pub const InterlockedBitTestAndSetRelease = _interlockedbittestandset;
pub const THREAD_PROFILING_FLAG_DISPATCH = 1;
pub const IMAGE_NT_OPTIONAL_HDR32_MAGIC = 267;
pub const PAN_WEIGHT_INDEX = 2;
pub const EXCEPTION_NONCONTINUABLE = 1;
pub const WM_SYSKEYDOWN = 260;
pub const SPI_GETDROPSHADOW = 4132;
pub const ESB_DISABLE_RTDN = ESB_DISABLE_RIGHT;
pub const LGRPID_ARMENIAN = 17;
pub const VBS_BASIC_PAGE_SYSTEM_CALL = 5;
pub const VBS_BASIC_PAGE_UNMEASURED_DATA = 2;
pub const OUTPUT_DEBUG_STRING_EVENT = 8;
pub const InterlockedIncrement = _InterlockedIncrement;
pub const SW_MAX = 11;
pub const __deref_opt_inout_ecount_nz_opt = size;
pub const WINGDIAPI = DECLSPEC_IMPORT;
pub const STDMETHODCALLTYPE = __stdcall;
pub const VFT_FONT = c_long(4);
pub const VER_PLATFORM_WIN32_NT = 2;
pub const EMR_DELETEOBJECT = 40;
pub const MOUSETRAILS = 39;
pub const PROCESSOR_PERF_BOOST_POLICY_DISABLED = 0;
pub const WNNC_NET_MSNET = 65536;
pub const __INT_FAST16_FMTi__ = "hi";
pub const ERROR_BAD_DEV_TYPE = c_long(66);
pub const FIND_FIRST_EX_ON_DISK_ENTRIES_ONLY = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_RESERVED = 3 << 20;
pub const __INT64_C_SUFFIX__ = LL;
pub const ERROR_FLOATED_SECTION = c_long(6846);
pub const ERROR_SXS_XML_E_BADPEREFINSUBSET = c_long(14059);
pub const ERROR_REGISTRATION_FROM_REMOTE_DRIVE_NOT_SUPPORTED = c_long(15647);
pub const SUBLANG_ENGLISH_TRINIDAD = 11;
pub const AW_BLEND = 524288;
pub const MAXDWORD64 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, 0) else DWORD64(0))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, 0) else DWORD64(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, 0) else DWORD64(0))) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, 0) else DWORD64(0)) else DWORD64(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD64, 0) else DWORD64(0));
pub const HELP_SETINDEX = c_long(5);
pub const ERROR_NOT_DAX_MAPPABLE = c_long(421);
pub const ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = c_long(2015);
pub const STANDARD_RIGHTS_ALL = c_long(2031616);
pub const LB_SETCOLUMNWIDTH = 405;
pub const PRODUCT_ENTERPRISE_SERVER_IA64 = 15;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_X = 1;
pub const MB_MODEMASK = c_long(12288);
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICATED = c_long(5983);
pub const GetProfileSection = GetProfileSectionA;
pub const PRODUCT_HOME_PREMIUM_N = 26;
pub const PPM_IDLE_IMPLEMENTATION_CSTATES = 1;
pub const LANG_NEPALI = 97;
pub const ERROR_TM_IDENTITY_MISMATCH = c_long(6845);
pub const IMAGE_SCN_MEM_LOCKED = 262144;
pub const MOD_RIGHT = 16384;
pub const MDM_HDLCPPP_SPEED_64K = 1;
pub const PIPE_ACCESS_OUTBOUND = 2;
pub const LOCALE_ENUMPROC = LOCALE_ENUMPROCA;
pub const PROCESSOR_MIPS_R4000 = 4000;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 52) else if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 52) else c_uint(2)(i64 << 52);
pub const FindFirstFileTransacted = FindFirstFileTransactedA;
pub const ERROR_DS_FOREST_VERSION_TOO_LOW = c_long(8565);
pub const FS_CYRILLIC = c_long(4);
pub const STYLE_DESCRIPTION_SIZE = 32;
pub const LANG_ENGLISH = 9;
pub const VK_OEM_RESET = 233;
pub const POINTER_MESSAGE_FLAG_CONFIDENCE = 16384;
pub const PAN_WEIGHT_BOOK = 5;
pub const WM_STYLECHANGING = 124;
pub const __MOVBE__ = 1;
pub const PAN_NO_FIT = 1;
pub const _WIN32_IE_IE20 = 512;
pub const ERROR_PATCH_TARGET_NOT_FOUND = c_long(1642);
pub const IMAGE_REL_PPC_SECRELLO = 19;
pub const SM_SERVERR2 = 89;
pub const DPI_AWARENESS_CONTEXT_SYSTEM_AWARE = if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Pointer) @ptrCast(DPI_AWARENESS_CONTEXT, -2) else if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Int) @intToPtr(DPI_AWARENESS_CONTEXT, -2) else @as(DPI_AWARENESS_CONTEXT, -2);
pub const TRUE = 1;
pub const PSPROTOCOL_ASCII = 0;
pub const GetSystemWow64Directory = GetSystemWow64DirectoryA;
pub const IMAGE_REL_CEF_SECTION = 4;
pub const LANG_CHINESE_SIMPLIFIED = 4;
pub const VK_F23 = 134;
pub const __deref_inout_bcount_nz = size;
pub const _M_AMD64 = 100;
pub const IACE_IGNORENOCONTEXT = 32;
pub const SM_SAMEDISPLAYFORMAT = 81;
pub const DNS_ERROR_RRL_INVALID_IPV6_PREFIX = c_long(9914);
pub const SM_CYSMSIZE = 53;
pub const __FLT16_DIG__ = 3;
pub const DOCKINFO_UNDOCKED = 1;
pub const __SIZEOF_LONG__ = 4;
pub const LANG_ROMANIAN = 24;
pub const IMAGE_REL_SH_NOMODE = 32768;
pub const _IRQL_raises_ = irql;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_APPLICATIONID_NOT_UNIQUE = c_long(15637);
pub const ERROR_SXS_ACTIVATION_CONTEXT_DISABLED = c_long(14006);
pub const DS_3DLOOK = c_long(4);
pub const IMAGE_REL_ARM_MOV32A = 16;
pub const __NO_INLINE__ = 1;
pub const TC_NORMAL = 0;
pub const IME_ITHOTKEY_RECONVERTSTRING = 515;
pub const ODS_FOCUS = 16;
pub const DATEFMT_ENUMPROCEX = DATEFMT_ENUMPROCEXA;
pub const WINSTA_CREATEDESKTOP = c_long(8);
pub const ERROR_EFS_VERSION_NOT_SUPPORT = c_long(6016);
pub const DNS_ERROR_ZONE_LOCKED = c_long(9607);
pub const MOD_NOREPEAT = 16384;
pub const RPC_S_INVALID_NETWORK_OPTIONS = c_long(1724);
pub const STATE_SYSTEM_MIXED = 32;
pub const SERVICE_STOP_REASON_MINOR_NONE = 23;
pub const META_PATBLT = 1565;
pub const SCS_WOW_BINARY = 2;
pub const SUBLANG_HEBREW_ISRAEL = 1;
pub const GM_LAST = 2;
pub const VK_ADD = 107;
pub const ERROR_DS_NAMING_MASTER_GC = c_long(8523);
pub const MEM_EXTENDED_PARAMETER_NONPAGED_LARGE = 8;
pub const IME_ESC_SEQUENCE_TO_INTERNAL = 4097;
pub const SUBLANG_BULGARIAN_BULGARIA = 1;
pub const ERROR_EVT_FILTER_INVTYPE = c_long(15018);
pub const COLOR_GRADIENTACTIVECAPTION = 27;
pub const LOCALE_SMONDECIMALSEP = 22;
pub const GUI_POPUPMENUMODE = 16;
pub const ERROR_REGISTRY_QUOTA_LIMIT = c_long(613);
pub const READ_CONTROL = c_long(131072);
pub const TRANSACTION_NOTIFY_PREPARE_COMPLETE = 32;
pub const FILE_VOLUME_QUOTAS = 32;
pub const DC_PAPERNAMES = 16;
pub const SE_DACL_PRESENT = 4;
pub const FACILITY_ACTION_QUEUE = 44;
pub const PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 4) else if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 4) else c_uint(2)(i64 << 4);
pub const VK_OEM_5 = 220;
pub const LOW_SURROGATE_END = 57343;
pub const ERROR_ABANDON_HIBERFILE = c_long(787);
pub const MoveFileWithProgress = MoveFileWithProgressA;
pub const VP_TV_STANDARD_SECAM_L = 16384;
pub const ERROR_PIPE_CONNECTED = c_long(535);
pub const TCI_SRCCHARSET = 1;
pub const ERROR_DS_DNS_LOOKUP_FAILURE = c_long(8524);
pub const TIME_NOMINUTESORSECONDS = 1;
pub const ENOTSOCK = 128;
pub const C3_HIGHSURROGATE = 2048;
pub const PM_QS_PAINT = QS_PAINT << 16;
pub const BS_PUSHBOX = c_long(10);
pub const ERROR_RESMON_INVALID_STATE = c_long(5084);
pub const IMEMENUITEM_STRING_SIZE = 80;
pub const PF_ARM_64BIT_LOADSTORE_ATOMIC = 25;
pub const SCS_32BIT_BINARY = 0;
pub const WM_TABLET_LAST = 735;
pub const WriteULongPtrRaw = WriteULong64Raw;
pub const LOCALE_SMONTHNAME5 = 60;
pub const EVENT_SYSTEM_END = 255;
pub const JOB_OBJECT_LIMIT_WORKINGSET = 1;
pub const SUBLANG_ENGLISH_US = 1;
pub const ERROR_RESMON_ONLINE_FAILED = c_long(5018);
pub const IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;
pub const MAX_HW_COUNTERS = 16;
pub const WNNC_NET_COGENT = 1114112;
pub const FILE_SUPPORTS_REMOTE_STORAGE = 256;
pub const CLAIM_SECURITY_ATTRIBUTE_VALUE_CASE_SENSITIVE = 2;
pub const LB_GETITEMDATA = 409;
pub const DATE_USE_ALT_CALENDAR = 4;
pub const LANG_CHINESE_TRADITIONAL = 31748;
pub const VerFindFile = VerFindFileA;
pub const DCX_CLIPCHILDREN = c_long(8);
pub const SUBLANG_SAKHA_RUSSIA = 1;
pub const IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;
pub const IMAGE_DEBUG_TYPE_REPRO = 16;
pub const GCL_WNDPROC = -24;
pub const SPI_GETMOUSECLICKLOCK = 4126;
pub const VER_LESS_EQUAL = 5;
pub const SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL = 22;
pub const AC_LINE_OFFLINE = 0;
pub const ODT_STATIC = 5;
pub const ERROR_DS_NAME_NOT_UNIQUE = c_long(8571);
pub const TAPE_LOGICAL_BLOCK = c_long(2);
pub const VK_VOLUME_MUTE = 173;
pub const InterlockedAdd = _InlineInterlockedAdd;
pub const FRS_ERR_STARTING_SERVICE = c_long(8002);
pub const IMAGE_SUBSYSTEM_EFI_APPLICATION = 10;
pub const DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED = c_long(9987);
pub const MWT_MAX = MWT_RIGHTMULTIPLY;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = 209;
pub const __RETURN_POLICY_SAME = _FunctionCall;
pub const IS_TEXT_UNICODE_SIGNATURE = 8;
pub const ERROR_JOIN_TO_SUBST = c_long(140);
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_UP = 215;
pub const APPCOMMAND_REPLY_TO_MAIL = 39;
pub const LANG_BANGLA = 69;
pub const __INTMAX_C_SUFFIX__ = LL;
pub const ERROR_RESOURCE_NOT_AVAILABLE = c_long(5006);
pub const ERROR_INVALID_FIELD = c_long(1616);
pub const SUBLANG_OCCITAN_FRANCE = 1;
pub const WM_INITMENU = 278;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_ARM64 = 14;
pub const PROCESSOR_PERF_BOOST_MODE_MAX = PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED;
pub const NOPARITY = 0;
pub const IGP_SELECT = 24;
pub const ERROR_INSTALL_FIREWALL_SERVICE_NOT_RUNNING = c_long(15626);
pub const LLMHF_INJECTED = 1;
pub const FACILITY_TIERING = 131;
pub const ERROR_LOGIN_WKSTA_RESTRICTION = c_long(1240);
pub const IMAGE_REL_ARM64_ADDR64 = 14;
pub const PAN_MIDLINE_HIGH_SERIFED = 7;
pub const HSHELL_SYSMENU = 9;
pub const IMAGE_REL_ARM_BLX24 = 8;
pub const ERROR_CLUSTER_UPGRADE_INCOMPLETE = c_long(5977);
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_STRING = 3;
pub const DT_RTLREADING = 131072;
pub const CTRY_BOLIVIA = 591;
pub const ERROR_SXS_PROTECTION_RECOVERY_FAILED = c_long(14074);
pub const ERROR_SERVICE_NEVER_STARTED = c_long(1077);
pub const CORE_PARKING_POLICY_CHANGE_MAX = CORE_PARKING_POLICY_CHANGE_MULTISTEP;
pub const ACL_REVISION3 = 3;
pub const LoadMenu = LoadMenuA;
pub const ERROR_INVALID_BLOCK = c_long(9);
pub const CM_SERVICE_VERIFIER_BOOT_LOAD = 64;
pub const ERROR_DS_DRA_BUSY = c_long(8438);
pub const DNS_ERROR_INVALID_ZONE_TYPE = c_long(9611);
pub const _IRQL_always_function_min_ = irql;
pub const MAXSTRETCHBLTMODE = 4;
pub const FAPPCOMMAND_MOUSE = 32768;
pub const SHTDN_REASON_MINOR_SYSTEMRESTORE = 26;
pub const STORE_ERROR_PENDING_COM_TRANSACTION = c_long(15863);
pub const CLASSFACTORY_S_LAST = c_long(262431);
pub const ERROR_WOF_WIM_RESOURCE_TABLE_CORRUPT = c_long(4447);
pub const META_SETTEXTCOLOR = 521;
pub const ERROR_SERVER_NOT_DISABLED = c_long(1342);
pub const ERROR_DS_OBJ_STRING_NAME_EXISTS = c_long(8305);
pub const CTRY_EGYPT = 20;
pub const MNS_NOCHECK = 2147483648;
pub const ERROR_EVT_INVALID_PUBLISHER_PROPERTY_VALUE = c_long(15024);
pub const LCMAP_BYTEREV = 2048;
pub const DOMAIN_GROUP_RID_CLONEABLE_CONTROLLERS = c_long(522);
pub const WM_IME_COMPOSITIONFULL = 644;
pub const UOI_FLAGS = 1;
pub const LANG_BOSNIAN = 26;
pub const GC_ROLLOVER = GC_PRESSANDTAP;
pub const PROCESSOR_ARCHITECTURE_AMD64 = 9;
pub const TRANSACTION_NOTIFY_COMMIT_FINALIZE = 1073741824;
pub const NTM_PS_OPENTYPE = 131072;
pub const PAN_SERIF_SQUARE = 6;
pub const ENLISTMENT_SET_INFORMATION = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_ALLOW_STORE = if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 44) else if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 44) else c_uint(3)(i64 << 44);
pub const CAL_SMONTHNAME2 = 22;
pub const LMEM_LOCKCOUNT = 255;
pub const CreateDesktop = CreateDesktopA;
pub const __sdv_save_request = r;
pub const EDESTADDRREQ = 109;
pub const IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8;
pub const ERROR_STATE_OPEN_CONTAINER_FAILED = c_long(15804);
pub const DMPAPER_JENV_KAKU3_ROTATED = 85;
pub const VK_F22 = 133;
pub const ERROR_DIRECT_ACCESS_HANDLE = c_long(130);
pub const SCS_QUERYRECONVERTSTRING = 131072;
pub const SHTDN_REASON_MINOR_CORDUNPLUGGED = 11;
pub const LOCALE_ALLOW_NEUTRAL_NAMES = 134217728;
pub const X3_IMM39_2_SIGN_VAL_POS_X = 20;
pub const ERROR_NOT_SUPPORTED_ON_SBS = c_long(1254);
pub const MB_HELP = c_long(16384);
pub const LBS_OWNERDRAWFIXED = c_long(16);
pub const TAPE_DRIVE_SEQUENTIAL_FMKS = 2148007936;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MUI = 4;
pub const X3_IMM39_2_INST_WORD_POS_X = 16;
pub const RegSaveKey = RegSaveKeyA;
pub const ERROR_IPSEC_IKE_QM_ACQUIRE_DROP = c_long(13810);
pub const VK_DELETE = 46;
pub const R2_MERGEPEN = 15;
pub const LOCALE_SENGCOUNTRY = LOCALE_SENGLISHCOUNTRYNAME;
pub const IDIGNORE = 5;
pub const FOREST_USER_RID_MAX = c_long(499);
pub const WT_EXECUTELONGFUNCTION = 16;
pub const S_SERQFUL = -4;
pub const ANSI_FIXED_FONT = 11;
pub const InterlockedBitTestAndReset = _interlockedbittestandreset;
pub const HCF_HIGHCONTRASTON = 1;
pub const SACL_SECURITY_INFORMATION = c_long(8);
pub const RGN_MAX = RGN_COPY;
pub const GetEnvironmentStringsA = GetEnvironmentStrings;
pub const MDM_PROTOCOLID_X75 = 3;
pub const IMAGE_SCN_LNK_REMOVE = 2048;
pub const SPI_SETBLOCKSENDINPUTRESETS = 4135;
pub const NTDDI_WINXPSP1 = 83951872;
pub const SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 4;
pub const MAP_FOLDDIGITS = 128;
pub const ERROR_CTX_ACCOUNT_RESTRICTION = c_long(7064);
pub const WM_NCMOUSEHOVER = 672;
pub const RPC_S_STRING_TOO_LONG = c_long(1743);
pub const ERROR_DISK_REPAIR_REDIRECTED = c_long(792);
pub const RPC_X_WRONG_STUB_VERSION = c_long(1829);
pub const VK_OEM_4 = 219;
pub const WM_MENURBUTTONUP = 290;
pub const LBS_NOTIFY = c_long(1);
pub const SET_BACKGROUND_COLOR = 4103;
pub const SPACEPARITY = 4;
pub const VFT2_DRV_SOUND = c_long(9);
pub const SW_SHOWDEFAULT = 10;
pub const WH_MOUSE_LL = 14;
pub const AnsiLower = CharLowerA;
pub const TKF_HOTKEYACTIVE = 4;
pub const RC_DEVBITS = 32768;
pub const APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;
pub const WM_RBUTTONUP = 517;
pub const SDC_PATH_PERSIST_IF_REQUIRED = 2048;
pub const ERROR_BAD_QUERY_SYNTAX = c_long(1615);
pub const ERROR_INSTALL_TEMP_UNWRITABLE = c_long(1632);
pub const HTCLOSE = 20;
pub const WDA_MONITOR = 1;
pub const SE_GROUP_ENABLED_BY_DEFAULT = c_long(2);
pub const SKF_HOTKEYACTIVE = 4;
pub const BS_AUTOCHECKBOX = c_long(3);
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED_UNLESS_SECURE = 4;
pub const DMPAPER_ESHEET = 26;
pub const SERVICE_TRIGGER_DATA_TYPE_STRING = 2;
pub const LOCALE_SSHORTTIME = 121;
pub const PF_RDRAND_INSTRUCTION_AVAILABLE = 28;
pub const DRAGDROP_S_FIRST = c_long(262400);
pub const _Writable_elements_impl_ = size;
pub const HTBOTTOM = 15;
pub const EVENT_SYSTEM_SWITCHER_APPGRABBED = 36;
pub const InterlockedIncrementAcquire = _InterlockedIncrement;
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE_WITH_OPTIONAL_RETRY = c_long(13907);
pub const LANG_MALTESE = 58;
pub const __amd64 = 1;
pub const LOCALE_SLOCALIZEDCOUNTRYNAME = 6;
pub const ERROR_DS_FILTER_UNKNOWN = c_long(8254);
pub const WNetGetNetworkInformation = WNetGetNetworkInformationA;
pub const MAXULONG64 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, 0) else ULONG64(0))) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, 0) else ULONG64(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, 0) else ULONG64(0))) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, 0) else ULONG64(0)) else ULONG64(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG64, 0) else ULONG64(0));
pub const GCP_DIACRITIC = 256;
pub const SOUND_SYSTEM_APPEND = 14;
pub const SPI_SETFILTERKEYS = 51;
pub const STATUS_ENCLAVE_VIOLATION = if (@typeInfo(@TypeOf(c_long(3221226658))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226658)) else if (@typeInfo(@TypeOf(c_long(3221226658))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226658)) else @as(DWORD, c_long(3221226658));
pub const ACTIVATION_CONTEXT_SECTION_WINRT_ACTIVATABLE_CLASSES = 12;
pub const ERROR_LOG_READ_CONTEXT_INVALID = c_long(6606);
pub const ERROR_BAD_ACCESSOR_FLAGS = c_long(773);
pub const SECURITY_PROCESS_PROTECTION_LEVEL_AUTHENTICODE_RID = c_long(1024);
pub const RPC_S_CALL_CANCELLED = c_long(1818);
pub const COMPRESSION_FORMAT_DEFAULT = 1;
pub const CDS_DISABLE_UNSAFE_MODES = 512;
pub const ERROR_PLATFORM_MANIFEST_NOT_SIGNED = c_long(4576);
pub const PROCESS_SET_QUOTA = 256;
pub const MDM_V23_OVERRIDE = 1024;
pub const BST_PUSHED = 4;
pub const DDL_READONLY = 1;
pub const GCS_RESULTREADSTR = 512;
pub const SetEnvironmentVariable = SetEnvironmentVariableA;
pub const BAUD_128K = if (@typeInfo(@TypeOf(65536)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 65536) else if (@typeInfo(@TypeOf(65536)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 65536) else @as(DWORD, 65536);
pub const ERROR_CONTENT_BLOCKED = c_long(1296);
pub const ILLUMINANT_D65 = 6;
pub const SUBLANG_SYRIAC_SYRIA = 1;
pub const ACPI_PPM_HARDWARE_ALL = 254;
pub const IDCANCEL = 2;
pub const INIT_ONCE_ASYNC = RTL_RUN_ONCE_ASYNC;
pub const ERROR_INC_BACKUP = c_long(4003);
pub const WNNC_NET_FARALLON = 1179648;
pub const ERROR_OBJECT_NAME_EXISTS = c_long(698);
pub const POINTER_FLAG_FIRSTBUTTON = 16;
pub const SM_CYFOCUSBORDER = 84;
pub const FILE_ATTRIBUTE_RECALL_ON_OPEN = 262144;
pub const IMAGE_REL_CEF_ABSOLUTE = 0;
pub const ERROR_DHCP_ADDRESS_CONFLICT = c_long(4100);
pub const IMAGE_REL_ALPHA_SECRELLO = 17;
pub const ERROR_DS_OBJ_NOT_FOUND = c_long(8333);
pub const ENOLCK = 39;
pub const _User_always_and_needs_probe_on_ = mode;
pub const DeleteVolumeMountPoint = DeleteVolumeMountPointA;
pub const SUBLANG_SAMI_SKOLT_FINLAND = 8;
pub const TC_EA_DOUBLE = 512;
pub const C2_SEGMENTSEPARATOR = 9;
pub const CB_GETLBTEXT = 328;
pub const WN_BAD_USER = ERROR_BAD_USERNAME;
pub const ERROR_CLUSTER_RESOURCE_CONFIGURATION_ERROR = c_long(5943);
pub const PBT_POWERSETTINGCHANGE = 32787;
pub const HTREDUCE = HTMINBUTTON;
pub const DMPAPER_EXECUTIVE = 7;
pub const ERROR_PIPE_BUSY = c_long(231);
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_VALUE = c_long(14090);
pub const VK_OEM_JUMP = 234;
pub const ERROR_EVT_INVALID_QUERY = c_long(15001);
pub const ERROR_CLUSTER_SHARED_VOLUMES_IN_USE = c_long(5947);
pub const HEAP_CREATE_ENABLE_TRACING = 131072;
pub const TAPE_ERASE_SHORT = c_long(0);
pub const ERROR_INVALID_MESSAGE = c_long(1002);
pub const ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = c_long(8236);
pub const __precond = expr;
pub const ERROR_IMAGE_NOT_AT_BASE = c_long(700);
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_OFF = 2 << 24;
pub const CONSOLE_NO_SELECTION = 0;
pub const CORE_PARKING_POLICY_CHANGE_ROCKET = 2;
pub const MB_ICONMASK = c_long(240);
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_DEFER = 0 << 16;
pub const ERROR_DS_INCOMPATIBLE_CONTROLS_USED = c_long(8574);
pub const ACL_REVISION2 = 2;
pub const GGO_UNHINTED = 256;
pub const InterlockedOr64NoFence = _InterlockedOr64;
pub const DNS_ERROR_BACKGROUND_LOADING = c_long(9568);
pub const TRANSACTION_NOTIFY_PREPARE = 2;
pub const VOS__WINDOWS32 = c_long(4);
pub const CAL_UMALQURA = 23;
pub const WH_MIN = -1;
pub const ERROR_SECUREBOOT_PLATFORM_ID_MISMATCH = c_long(4430);
pub const ERROR_DS_CONSTRUCTED_ATT_MOD = c_long(8475);
pub const SM_CYSMCAPTION = 51;
pub const ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = c_long(5047);
pub const DISPLAY_DEVICE_UNSAFE_MODES_ON = 524288;
pub const BS_USERBUTTON = c_long(8);
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE_NAME = c_long(14080);
pub const SECURITY_PACKAGE_SCHANNEL_RID = c_long(14);
pub const ERROR_EVT_QUERY_RESULT_STALE = c_long(15011);
pub const __drv_isCancelIRQL = _IRQL_is_cancel_;
pub const OemToAnsi = OemToCharA;
pub const SUBLANG_ALBANIAN_ALBANIA = 1;
pub const RC_BANDING = 2;
pub const ERROR_JOURNAL_DELETE_IN_PROGRESS = c_long(1178);
pub const DRIVE_FIXED = 3;
pub const PRODUCT_EMBEDDED_INDUSTRY_A = 86;
pub const SWP_NOOWNERZORDER = 512;
pub const LoadIcon = LoadIconA;
pub const ERROR_CORRUPT_LOG_DELETED_FULL = c_long(797);
pub const CAL_SMONTHNAME3 = 23;
pub const OF_EXIST = 16384;
pub const C2_ARABICNUMBER = 6;
pub const SUBLANG_SPANISH_PANAMA = 6;
pub const EVENT_OBJECT_STATECHANGE = 32778;
pub const TRANSACTION_NOTIFY_REQUEST_OUTCOME = 536870912;
pub const STDAPICALLTYPE = __stdcall;
pub const VK_F21 = 132;
pub const REG_FORCE_RESTORE = c_long(8);
pub const ERROR_CLUSTER_NODE_QUARANTINED = c_long(5985);
pub const CONSOLE_WINDOWED_MODE = 2;
pub const GCS_COMPREADSTR = 1;
pub const DeleteFileTransacted = DeleteFileTransactedA;
pub const APPCOMMAND_REDO = 35;
pub const ERROR_RECOVERY_NOT_NEEDED = c_long(6821);
pub const ERROR_LOG_SECTOR_INVALID = c_long(6600);
pub const ERROR_NO_TRUST_LSA_SECRET = c_long(1786);
pub const BS_CENTER = c_long(768);
pub const CTRY_HONG_KONG = 852;
pub const IMAGE_REL_PPC_ADDR24 = 3;
pub const MB_ERR_INVALID_CHARS = 8;
pub const FACILITY_DEPLOYMENT_SERVICES_BINLSVC = 261;
pub const ACCESS_DENIED_ACE_TYPE = 1;
pub const FACILITY_DEFRAG = 2304;
pub const EADDRINUSE = 100;
pub const POINTER_FLAG_NEW = 1;
pub const CAL_SENGLISHABBREVERANAME = 60;
pub const ES_SYSTEM_REQUIRED = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const IMFT_SEPARATOR = 2;
pub const ODS_GRAYED = 2;
pub const ERROR_METAFILE_NOT_SUPPORTED = c_long(2003);
pub const GGO_NATIVE = 2;
pub const IMAGE_SYM_DTYPE_NULL = 0;
pub const MF_UNHILITE = c_long(0);
pub const CreateActCtx = CreateActCtxA;
pub const ERROR_DS_OBJ_TOO_LARGE = c_long(8312);
pub const ERROR_TIMEOUT = c_long(1460);
pub const EVENT_OBJECT_DRAGCOMPLETE = 32803;
pub const META_SAVEDC = 30;
pub const DESKTOP_JOURNALPLAYBACK = c_long(32);
pub const HELP_MULTIKEY = c_long(513);
pub const VK_OEM_WSCTRL = 238;
pub const NTDDI_WINXPSP2 = 83952128;
pub const WINAPI_FAMILY_DESKTOP_APP = 100;
pub const META_RECTANGLE = 1051;
pub const EWX_HYBRID_SHUTDOWN = 4194304;
pub const HTBORDER = 18;
pub const ERROR_LOG_NOT_ENOUGH_CONTAINERS = c_long(6635);
pub const HW_PROFILE_GUIDLEN = 39;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_FIRST = 32;
pub const VK_OEM_3 = 192;
pub const CS_PARENTDC = 128;
pub const ERROR_FLOPPY_VOLUME = c_long(584);
pub const VP_TV_STANDARD_SECAM_B = 256;
pub const SERVICE_STOP_REASON_MAJOR_NONE = 393216;
pub const DNS_ERROR_DP_DOES_NOT_EXIST = c_long(9901);
pub const IMAGE_SUBSYSTEM_NATIVE = 1;
pub const ERROR_LOG_INCONSISTENT_SECURITY = c_long(6646);
pub const SEF_MACL_NO_WRITE_UP = 256;
pub const DlgDirList = DlgDirListA;
pub const TIMERV_COALESCING_MAX = 2147483637;
pub const ERROR_MAX_SESSIONS_REACHED = c_long(353);
pub const ERROR_PASSWORD_EXPIRED = c_long(1330);
pub const MOD_SHIFT = 4;
pub const IME_CMODE_CHARCODE = 32;
pub const ERROR_DS_SECURITY_ILLEGAL_MODIFY = c_long(8423);
pub const SPI_SETPENSIDEMOVETHRESHOLD = 139;
pub const PRODUCT_EMBEDDED_E = 90;
pub const IME_CONFIG_GENERAL = 1;
pub const SETMITERLIMIT = 23;
pub const IO_REPARSE_TAG_WCI = c_long(2147483672);
pub const ERROR_DEPLOYMENT_BLOCKED_BY_PROFILE_POLICY = c_long(15651);
pub const IMAGE_REL_THUMB_BRANCH20 = 18;
pub const TAPE_DRIVE_WRITE_SHORT_FMKS = 2214592512;
pub const WEOF = if (@typeInfo(@TypeOf(65535)) == @import("builtin").TypeId.Pointer) @ptrCast(wint_t, 65535) else if (@typeInfo(@TypeOf(65535)) == @import("builtin").TypeId.Int) @intToPtr(wint_t, 65535) else wint_t(65535);
pub const LCID_INSTALLED = 1;
pub const VER_SUITE_MULTIUSERTS = 131072;
pub const MEM_PRESERVE_PLACEHOLDER = 2;
pub const MSGF_NEXTWINDOW = 6;
pub const MM_MIN = MM_TEXT;
pub const SUBLANG_MALTESE_MALTA = 1;
pub const WNNC_NET_DISTINCT = 2293760;
pub const GCLP_WNDPROC = -24;
pub const STARTF_TITLEISLINKNAME = 2048;
pub const LR_SHARED = 32768;
pub const SKF_RCTLLOCKED = 524288;
pub const ERROR_MOD_NOT_FOUND = c_long(126);
pub const APPCOMMAND_BROWSER_FAVORITES = 6;
pub const PF_ARM_V8_CRYPTO_INSTRUCTIONS_AVAILABLE = 30;
pub const COLOR_INFOTEXT = 23;
pub const DM_ORIENTATION = c_long(1);
pub const IMAGE_REL_IA64_LTOFF22 = 10;
pub const S_PERIOD1024 = 1;
pub const ERROR_SEM_TIMEOUT = c_long(121);
pub const InterlockedCompareExchangeAcquire16 = _InterlockedCompareExchange16;
pub const EMLINK = 31;
pub const CONDITION_VARIABLE_LOCKMODE_SHARED = RTL_CONDITION_VARIABLE_LOCKMODE_SHARED;
pub const PF_FASTFAIL_AVAILABLE = 23;
pub const LOCALE_INEGSIGNPOSN = 83;
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const SUBLANG_ARABIC_BAHRAIN = 15;
pub const SPI_GETKEYBOARDDELAY = 22;
pub const RPC_S_NO_ENTRY_NAME = c_long(1735);
pub const ERROR_GENERIC_NOT_MAPPED = c_long(1360);
pub const ERROR_ABANDONED_WAIT_63 = c_long(736);
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE = 30;
pub const DMPAPER_LETTERSMALL = 2;
pub const HTRIGHT = 11;
pub const IGP_UI = 16;
pub const WSASYSNOTREADY = c_long(10091);
pub const FILE_ATTRIBUTE_READONLY = 1;
pub const PPM_IDLE_IMPLEMENTATION_PEP = 2;
pub const TAPE_FILEMARKS = c_long(1);
pub const SET_TAPE_MEDIA_INFORMATION = 0;
pub const PRODUCT_ENTERPRISE_S_N_EVALUATION = 130;
pub const COLORMGMTCAPS = 121;
pub const DCX_EXCLUDERGN = c_long(64);
pub const LOCALE_SMONGROUPING = 24;
pub const CS_DROPSHADOW = 131072;
pub const DFCS_BUTTONPUSH = 16;
pub const __UINT_FAST32_FMTX__ = "X";
pub const ERROR_PRINT_MONITOR_IN_USE = c_long(3008);
pub const GGO_BITMAP = 1;
pub const OF_SHARE_DENY_WRITE = 32;
pub const XSTATE_IPT = 8;
pub const PAGE_NOCACHE = 512;
pub const WSAVERNOTSUPPORTED = c_long(10092);
pub const FACILITY_BLB_CLI = 121;
pub const CTRY_AUSTRIA = 43;
pub const ERROR_INVALID_HOOK_FILTER = c_long(1426);
pub const DMPAPER_JENV_YOU4 = 91;
pub const SOUND_SYSTEM_RESTOREDOWN = 11;
pub const KF_MENUMODE = 4096;
pub const ERROR_CHECKOUT_REQUIRED = c_long(221);
pub const SPI_GETICONTITLEWRAP = 25;
pub const C3_KASHIDA = 512;
pub const LGRPID_TURKIC = 6;
pub const IMAGE_REL_IA64_ABSOLUTE = 0;
pub const ERROR_EVT_INVALID_PUBLISHER_NAME = c_long(15004);
pub const MDM_SHIFT_AUTO_ML = 6;
pub const TIME_ZONE_ID_STANDARD = 1;
pub const CORE_PARKING_POLICY_CHANGE_IDEAL = 0;
pub const FKF_AVAILABLE = 2;
pub const UnsignedMultiply128 = _umul128;
pub const ERROR_WMI_INSTANCE_NOT_FOUND = c_long(4201);
pub const WM_GETTEXT = 13;
pub const ERROR_PASSWORD_RESTRICTION = c_long(1325);
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE = c_long(9995);
pub const FILE_DISPOSITION_FLAG_ON_CLOSE = 8;
pub const ERROR_SERVICE_EXISTS = c_long(1073);
pub const ERROR_ADVANCED_INSTALLER_FAILED = c_long(14099);
pub const __GOT_SECURE_LIB__ = __STDC_SECURE_LIB__;
pub const ERROR_INVALID_PLUGPLAY_DEVICE_PATH = c_long(620);
pub const META_POLYPOLYGON = 1336;
pub const FF_SWISS = 2 << 4;
pub const SPI_SETICONTITLEWRAP = 26;
pub const LANG_KICHE = 134;
pub const IMAGE_REL_IA64_SREL22 = 18;
pub const ERROR_SXS_XML_E_UNCLOSEDSTARTTAG = c_long(14060);
pub const DATE_MONTHDAY = 128;
pub const ENABLE_WRAP_AT_EOL_OUTPUT = 2;
pub const ERROR_INSTALL_RESOLVE_DEPENDENCY_FAILED = c_long(15603);
pub const ERROR_NO_SYSTEM_MENU = c_long(1437);
pub const DFCS_CAPTIONMIN = 1;
pub const TOUCHEVENTF_PRIMARY = 16;
pub const ERROR_FLOPPY_UNKNOWN_ERROR = c_long(1124);
pub const ERROR_PRI_MERGE_WRITE_FILE_FAILED = c_long(15152);
pub const WN_BAD_POINTER = ERROR_INVALID_ADDRESS;
pub const BS_TYPEMASK = c_long(15);
pub const TCI_SRCCODEPAGE = 2;
pub const ERROR_VOLUME_NOT_SUPPORT_EFS = c_long(6014);
pub const WSA_QOS_RECEIVERS = c_long(11005);
pub const APPCOMMAND_BASS_BOOST = 20;
pub const __DBL_EPSILON__ = 0.000000;
pub const BSM_VXDS = 1;
pub const QDI_SETDIBITS = 1;
pub const SetFileAttributesTransacted = SetFileAttributesTransactedA;
pub const VK_F20 = 131;
pub const HWND_BROADCAST = if (@typeInfo(@TypeOf(65535)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, 65535) else if (@typeInfo(@TypeOf(65535)) == @import("builtin").TypeId.Int) @intToPtr(HWND, 65535) else @as(HWND, 65535);
pub const RPC_S_ENTRY_NOT_FOUND = c_long(1761);
pub const ERROR_NOT_ALL_ASSIGNED = c_long(1300);
pub const EWX_FORCEIFHUNG = 16;
pub const SUBLANG_SPANISH = 1;
pub const RPC_X_SS_CHAR_TRANS_SHORT_FILE = c_long(1774);
pub const DDL_DIRECTORY = 16;
pub const __INT16_FMTi__ = "hi";
pub const PROCESS_AFFINITY_ENABLE_AUTO_UPDATE = c_ulong(1);
pub const VK_ESCAPE = 27;
pub const InterlockedExchangePointerNoFence = _InterlockedExchangePointer;
pub const ERROR_INSTALL_VOLUME_CORRUPT = c_long(15630);
pub const DNS_ERROR_RRL_INVALID_IPV4_PREFIX = c_long(9913);
pub const CM_SERVICE_USB3_DISK_BOOT_LOAD = 16;
pub const _WIN32_IE_WS03 = 1538;
pub const DWL_DLGPROC = 4;
pub const IMAGE_ROM_OPTIONAL_HDR_MAGIC = 263;
pub const FMTID_NULL = GUID_NULL;
pub const DISPLAY_DEVICE_MODESPRUNED = 134217728;
pub const WM_CANCELJOURNAL = 75;
pub const WNNC_NET_TWINS = 2359296;
pub const ERROR_DEBUG_ATTACH_FAILED = c_long(590);
pub const ERROR_TRANSACTION_NO_SUPERIOR = c_long(6730);
pub const FACILITY_USERMODE_VHD = 58;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_LOW = 32768;
pub const SETCHARSET = 772;
pub const MWMO_INPUTAVAILABLE = 4;
pub const FRAME_TSS = 2;
pub const WINAPI_FAMILY_PC_APP = 2;
pub const WTS_SESSION_TERMINATE = 11;
pub const LGRPID_CENTRAL_EUROPE = 2;
pub const DT_EXTERNALLEADING = 512;
pub const SUBLANG_MONGOLIAN_PRC = 2;
pub const ERROR_INVALID_EDIT_HEIGHT = c_long(1424);
pub const PPM_IDLE_IMPLEMENTATION_NONE = 0;
pub const TME_LEAVE = 2;
pub const ERROR_OPLOCK_HANDLE_CLOSED = c_long(803);
pub const PROCESSOR_ARCHITECTURE_ALPHA = 2;
pub const HANDLE_FLAG_PROTECT_FROM_CLOSE = 2;
pub const IMAGE_REL_ARM64_ADDR32 = 1;
pub const SUBLANG_FRENCH_LUXEMBOURG = 5;
pub const ERROR_INVALID_ACE_CONDITION = c_long(805);
pub const SM_CXSMICON = 49;
pub const FIND_RESOURCE_DIRECTORY_TYPES = 256;
pub const META_SETMAPMODE = 259;
pub const NTDDI_WINXPSP3 = 83952384;
pub const SUBLANG_PASHTO_AFGHANISTAN = 1;
pub const CBS_OEMCONVERT = c_long(128);
pub const ERROR_CLUSTER_WRONG_OS_VERSION = c_long(5899);
pub const ERROR_DS_EXISTS_IN_POSS_SUP = c_long(8395);
pub const RPC_X_PIPE_CLOSED = c_long(1916);
pub const DMDITHER_RESERVED9 = 9;
pub const VK_OEM_2 = 191;
pub const NTDDI_WIN2KSP4 = 83887104;
pub const POWER_ACTION_DIRECTED_DRIPS = 67108864;
pub const DMCOLLATE_TRUE = 1;
pub const IMAGE_REL_ALPHA_REFLO = 11;
pub const WaitNamedPipe = WaitNamedPipeA;
pub const ERROR_LOG_ARCHIVE_IN_PROGRESS = c_long(6633);
pub const PBTF_APMRESUMEFROMFAILURE = 1;
pub const ES_WANTRETURN = c_long(4096);
pub const OBJID_MENU = if (@typeInfo(@TypeOf(4294967293)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967293) else if (@typeInfo(@TypeOf(4294967293)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967293) else @as(LONG, 4294967293);
pub const ERROR_BAD_FUNCTION_TABLE = c_long(559);
pub const MAXBYTE = 255;
pub const SM_CXHSCROLL = 21;
pub const ERROR_NOT_QUORUM_CLASS = c_long(5025);
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_OTHER = 29;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_CYRILLIC = 2;
pub const TAPE_DRIVE_ABSOLUTE_BLK = 2147487744;
pub const ERROR_SXS_XML_E_BADSTARTNAMECHAR = c_long(14032);
pub const ICM_ON = 2;
pub const ACTIVATION_CONTEXT_PATH_TYPE_ASSEMBLYREF = 4;
pub const PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21;
pub const SPI_SETBEEP = 2;
pub const CONSOLE_FULLSCREEN = 1;
pub const GetEnhMetaFileDescription = GetEnhMetaFileDescriptionA;
pub const GWLP_WNDPROC = -4;
pub const SERVICE_CONTROL_NETBINDADD = 7;
pub const EV_BREAK = 64;
pub const SUBLANG_ENGLISH_MALAYSIA = 17;
pub const LOCALE_SMONTHNAME8 = 63;
pub const PT_MOVETO = 6;
pub const IMAGE_DEBUG_TYPE_CODEVIEW = 2;
pub const ARW_DOWN = c_long(4);
pub const SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL = 1;
pub const AW_VER_POSITIVE = 4;
pub const SEMAPHORE_MODIFY_STATE = 2;
pub const ERROR_INVALID_STATE = c_long(5023);
pub const ERROR_VOLUME_NOT_CLUSTER_ALIGNED = c_long(407);
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_FLAG = c_long(8581);
pub const EV_EVENT1 = 2048;
pub const SM_CYCAPTION = 4;
pub const SPI_SETTOUCHPREDICTIONPARAMETERS = 157;
pub const KLF_NOTELLSHELL = 128;
pub const ERROR_VOLUME_NOT_SIS_ENABLED = c_long(4500);
pub const InterlockedIncrementRelease16 = _InterlockedIncrement16;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDLSVC = 62;
pub const ERROR_PROVISION_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_PROVISIONED = c_long(15642);
pub const PSINJECT_DOCSUPPLIEDRES = 6;
pub const ERROR_IPSEC_IKE_OUT_OF_MEMORY = c_long(13859);
pub const ERROR_LOG_DEDICATED = c_long(6631);
pub const EMR_EXTTEXTOUTA = 83;
pub const DNS_ERROR_RCODE_BADKEY = c_long(9017);
pub const INHERIT_PARENT_AFFINITY = 65536;
pub const ERROR_BUFFER_OVERFLOW = c_long(111);
pub const ERROR_DEPLOYMENT_FAILED_CONFLICTING_MUTABLE_PACKAGE_DIRECTORY = c_long(15652);
pub const PHYSICALHEIGHT = 111;
pub const RESOURCE_CONNECTED = 1;
pub const DOMAIN_GROUP_RID_KEY_ADMINS = c_long(526);
pub const DOMAIN_ALIAS_RID_MONITORING_USERS = c_long(558);
pub const SIZENORMAL = SIZE_RESTORED;
pub const PROC_THREAD_ATTRIBUTE_REPLACE_VALUE = 1;
pub const IMAGE_REL_PPC_PAIR = 18;
pub const IO_REPARSE_TAG_DFS = c_long(2147483658);
pub const SUBLANG_WELSH_UNITED_KINGDOM = 1;
pub const EN_BEFORE_PASTE = 2048;
pub const PRODUCT_CLOUD = 178;
pub const DELETE = c_long(65536);
pub const CREATE_SUSPENDED = 4;
pub const SM_CXMAXTRACK = 59;
pub const MUI_RESET_FILTERS = 1;
pub const MDM_FLOWCONTROL_HARD = 16;
pub const WM_PRINT = 791;
pub const ERROR_STORAGE_RESERVE_DOES_NOT_EXIST = c_long(417);
pub const ERROR_SXS_XML_E_INTERNALERROR = c_long(14041);
pub const EnumSystemCodePages = EnumSystemCodePagesA;
pub const ERROR_NO_DATA = c_long(232);
pub const DNS_ERROR_INVALID_XML = c_long(9126);
pub const FACILITY_SDIAG = 60;
pub const RESOURCEMANAGER_COMPLETE_PROPAGATION = 64;
pub const VK_CAPITAL = 20;
pub const JOB_OBJECT_TERMINATE = 8;
pub const VER_NT_WORKSTATION = 1;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X = 32;
pub const EPT_S_INVALID_ENTRY = c_long(1751);
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE_AT_GUARANTEED = 5;
pub const __STDC_SECURE_LIB__ = c_long(200411);
pub const DWL_USER = 8;
pub const ERROR_FILE_NOT_SUPPORTED = c_long(425);
pub const SUBLANG_BENGALI_BANGLADESH = 2;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12L = 7;
pub const LOCALE_ILDATE = 34;
pub const __POPCNT__ = 1;
pub const MAKEINTRESOURCE = MAKEINTRESOURCEA;
pub const IMAGE_REL_ALPHA_GPRELHI = 23;
pub const IMFS_UNHILITE = MFS_UNHILITE;
pub const EMARCH_ENC_I17_IMM7B_VAL_POS_X = 0;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_ENABLE_PROCESS_TREE = 1;
pub const _HAS_NODISCARD = _HAS_CXX17;
pub const PROTECTION_LEVEL_LSA_LIGHT = 4;
pub const __UINT_LEAST32_FMTu__ = "u";
pub const WM_NCCREATE = 129;
pub const DNS_ERROR_GENERAL_API_BASE = 9550;
pub const ACCESS_DENIED_OBJECT_ACE_TYPE = 6;
pub const META_SETVIEWPORTORG = 525;
pub const RTL_RUN_ONCE_ASYNC = c_ulong(2);
pub const VER_SUITE_ENTERPRISE = 2;
pub const EDS_RAWMODE = 2;
pub const DEVICEFAMILYDEVICEFORM_NETWORKING = 23;
pub const ACL_REVISION4 = 4;
pub const ETIME = 137;
pub const ERROR_WRONG_EFS = c_long(6005);
pub const WTS_CONSOLE_CONNECT = 1;
pub const ERROR_DYNAMIC_CODE_BLOCKED = c_long(1655);
pub const MAXIMUM_ALLOWED = c_long(33554432);
pub const IMAGE_SCN_CNT_CODE = 32;
pub const RegOpenKeyTransacted = RegOpenKeyTransactedA;
pub const PRODUCT_PRO_WORKSTATION = 161;
pub const SWP_DEFERERASE = 8192;
pub const FAST_FAIL_INVALID_NEXT_THREAD = 30;
pub const SPI_SETTOOLTIPANIMATION = 4119;
pub const DT_VCENTER = 4;
pub const ERROR_INVALID_HANDLE_STATE = c_long(1609);
pub const CWP_SKIPTRANSPARENT = 4;
pub const FAST_FAIL_INVALID_FAST_FAIL_CODE = 4294967295;
pub const HTSYSMENU = 3;
pub const TAPE_DRIVE_SET_PADDING = 2147484672;
pub const ERROR_INVALID_LOGON_HOURS = c_long(1328);
pub const SPI_GETACTIVEWINDOWTRACKING = 4096;
pub const CAL_SMONTHNAME1 = 21;
pub const ERROR_RETRY = c_long(1237);
pub const WM_MDIREFRESHMENU = 564;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_DEFER = 0 << 24;
pub const ERROR_DS_SAM_INIT_FAILURE_CONSOLE = c_long(8562);
pub const WM_MDIDESTROY = 545;
pub const PRODUCT_BUSINESS_N = 16;
pub const IDABORT = 3;
pub const SKF_LCTLLOCKED = 262144;
pub const MOVEFILE_WRITE_THROUGH = 8;
pub const CREATE_SHARED_WOW_VDM = 4096;
pub const IMAGE_SYM_CLASS_UNION_TAG = 12;
pub const SOUND_SYSTEM_STARTUP = 1;
pub const SOUND_SYSTEM_MENUCOMMAND = 15;
pub const ERROR_NOT_SAFEBOOT_SERVICE = c_long(1084);
pub const VK_HELP = 47;
pub const ERROR_DS_DRA_NOT_SUPPORTED = c_long(8454);
pub const SERVICE_CONTROL_STATUS_REASON_INFO = 1;
pub const ERROR_STATE_CREATE_CONTAINER_FAILED = c_long(15805);
pub const DNS_ERROR_ZONE_CONFIGURATION_ERROR = c_long(9604);
pub const PRODUCT_CORE_ARM = 97;
pub const SUBLANG_ARABIC_OMAN = 8;
pub const RASTER_FONTTYPE = 1;
pub const ERROR_CLUSTER_RESOURCE_CONTAINS_UNSUPPORTED_DIFF_AREA_FOR_SHARED_VOLUMES = c_long(5969);
pub const GCS_COMPCLAUSE = 32;
pub const ERROR_DS_NOT_ON_BACKLINK = c_long(8362);
pub const CREATE_BOUNDARY_DESCRIPTOR_ADD_APPCONTAINER_SID = 1;
pub const EMR_STROKEANDFILLPATH = 63;
pub const STORAGE_INFO_FLAGS_PARTITION_ALIGNED_ON_DEVICE = 2;
pub const IMAGE_REL_IA64_IMM22 = 2;
pub const SUBLANG_SPANISH_GUATEMALA = 4;
pub const SEC_RESERVE = 67108864;
pub const LANG_ARABIC = 1;
pub const ERROR_INVALID_PEP_INFO_VERSION = c_long(341);
pub const LOAD_LIBRARY_AS_DATAFILE = 2;
pub const GCP_ERROR = 32768;
pub const WS_CHILD = c_long(1073741824);
pub const ERROR_CAPAUTHZ_SCCD_DEV_MODE_REQUIRED = c_long(459);
pub const ERROR_JOURNAL_HOOK_SET = c_long(1430);
pub const DRAFT_QUALITY = 1;
pub const ERROR_LABEL_TOO_LONG = c_long(154);
pub const POWER_SYSTEM_MAXIMUM = 7;
pub const IMAGE_REL_IA64_PCREL60F = 23;
pub const EXTERN_C = @"extern";
pub const SUBLANG_IGBO_NIGERIA = 1;
pub const DMDITHER_RESERVED8 = 8;
pub const VK_OEM_1 = 186;
pub const NTDDI_WIN2KSP3 = 83886848;
pub const MEM_DIFFERENT_IMAGE_BASE_OK = 8388608;
pub const CWP_ALL = 0;
pub const ERROR_LOG_PINNED = c_long(6644);
pub const wcswcs = wcsstr;
pub const ERROR_MEDIA_INCOMPATIBLE = c_long(4315);
pub const LANG_MANIPURI = 88;
pub const LMEM_ZEROINIT = 64;
pub const SOUND_SYSTEM_QUESTION = 5;
pub const EXCEPTION_BREAKPOINT = STATUS_BREAKPOINT;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN = 0.900000;
pub const FROM_LEFT_2ND_BUTTON_PRESSED = 4;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_NO_MM = c_long(13812);
pub const DC_PRINTRATE = 26;
pub const VK_OEM_COPY = 242;
pub const PRODUCT_IOTEDGEOS = 187;
pub const SUBLANG_UZBEK_LATIN = 1;
pub const PAGE_EXECUTE_READWRITE = 64;
pub const ERROR_LINUX_SUBSYSTEM_NOT_PRESENT = c_long(414);
pub const SYSTEM_RESOURCE_ATTRIBUTE_ACE_TYPE = 18;
pub const SM_CXEDGE = 45;
pub const DMPAPER_A4_EXTRA = 53;
pub const EXCEPTION_DATATYPE_MISALIGNMENT = STATUS_DATATYPE_MISALIGNMENT;
pub const LOCALE_INEGNUMBER = 4112;
pub const ERROR_MCA_MCCS_VERSION_MISMATCH = c_long(15203);
pub const ERROR_SXS_UNKNOWN_ENCODING = c_long(14013);
pub const LOCALE_SMONTHNAME9 = 64;
pub const GCP_MAXEXTENT = c_long(1048576);
pub const InterlockedBitTestAndResetNoFence = _interlockedbittestandreset;
pub const PAN_LETT_OBLIQUE_BOXED = 11;
pub const EVENTLOG_FULL_INFO = 0;
pub const EMR_COLORMATCHTOTARGETW = 121;
pub const FAST_FAIL_FATAL_APP_EXIT = 7;
pub const MDM_HDLCPPP_ML_DEFAULT = 0;
pub const MAILSLOT_NO_MESSAGE = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const MIM_MENUDATA = 8;
pub const ERROR_NO_SUCH_USER = c_long(1317);
pub const FRS_ERR_INVALID_SERVICE_PARAMETER = c_long(8017);
pub const IMAGE_REL_THUMB_MOV32 = 17;
pub const MapVirtualKeyEx = MapVirtualKeyExA;
pub const WM_MDINEXT = 548;
pub const FAST_FAIL_FLAGS_CORRUPTION = 59;
pub const DNS_ERROR_UNSUPPORTED_ALGORITHM = c_long(9105);
pub const WS_ICONIC = WS_MINIMIZE;
pub const PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 4) else if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 4) else c_uint(1)(i64 << 4);
pub const WRITE_DAC = c_long(262144);
pub const CreateFont = CreateFontA;
pub const ERROR_ALLOTTED_SPACE_EXCEEDED = c_long(1344);
pub const FS_VOL_IS_COMPRESSED = FILE_VOLUME_IS_COMPRESSED;
pub const MEM_UNMAP_WITH_TRANSIENT_BOOST = 1;
pub const DNS_STATUS_FQDN = c_long(9557);
pub const IMAGE_HOT_PATCH_BASE_OBLIGATORY = 1;
pub const ERROR_NO_TXF_METADATA = c_long(6816);
pub const ERROR_INVALID_HW_PROFILE = c_long(619);
pub const FAST_FAIL_MRDATA_PROTECTION_FAILURE = 34;
pub const WH_KEYBOARD_LL = 13;
pub const REG_NONE = c_ulong(0);
pub const ERROR_IPSEC_INVALID_PACKET = c_long(13914);
pub const DM_PROMPT = 4;
pub const InterlockedBitTestAndReset64Release = _interlockedbittestandreset64;
pub const VTA_BASELINE = TA_BASELINE;
pub const ERROR_INCOMPATIBLE_SERVICE_SID_TYPE = c_long(1290);
pub const PAGE_GRAPHICS_READONLY = 4096;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS = 1;
pub const SEM_NOGPFAULTERRORBOX = 2;
pub const DOMAIN_ALIAS_RID_DCOM_USERS = c_long(562);
pub const APPCOMMAND_COPY = 36;
pub const ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = c_long(5075);
pub const SUBLANG_HAUSA_NIGERIA_LATIN = 1;
pub const IMAGE_REL_ARM_BRANCH20T = 18;
pub const ERROR_IPSEC_IKE_SOFT_SA_TORN_DOWN = c_long(13845);
pub const TAPE_LOGICAL_POSITION = c_long(1);
pub const EM_GETLINE = 196;
pub const QS_KEY = 1;
pub const EVENT_OBJECT_NAMECHANGE = 32780;
pub const WritePrivateProfileStruct = WritePrivateProfileStructA;
pub const CSTR_EQUAL = 2;
pub const SERVICE_STOP_REASON_MAJOR_HARDWARE = 131072;
pub const RPC_X_ENUM_VALUE_OUT_OF_RANGE = c_long(1781);
pub const GetConsoleTitle = GetConsoleTitleA;
pub const LOGON32_PROVIDER_WINNT35 = 1;
pub const SERVICE_CONFIG_LAUNCH_PROTECTED = 12;
pub const FILE_TYPE_DISK = 1;
pub const ERROR_LONGJUMP = c_long(682);
pub const ERROR_INVALID_FIELD_IN_PARAMETER_LIST = c_long(328);
pub const LOCALE_IDEFAULTEBCDICCODEPAGE = 4114;
pub const BS_DIBPATTERN8X8 = 8;
pub const SUBLANG_POLISH_POLAND = 1;
pub const SPI_SETHUNGAPPTIMEOUT = 121;
pub const PROTECTION_LEVEL_WINDOWS = 1;
pub const LLKHF_INJECTED = 16;
pub const ERROR_ACCESS_DISABLED_WEBBLADE = c_long(1277);
pub const ERROR_PRI_MERGE_MISSING_SCHEMA = c_long(15149);
pub const TC_SIGNAL = 3;
pub const MAP_COMPOSITE = 64;
pub const IMAGE_REL_MIPS_GPREL = 6;
pub const MUI_THREAD_LANGUAGES = 64;
pub const HELP_TCARD_DATA = 16;
pub const ERROR_CLOUD_FILE_SYNC_ROOT_METADATA_CORRUPT = c_long(358);
pub const POWERBUTTON_ACTION_INDEX_TURN_OFF_THE_DISPLAY = 4;
pub const DEVICEFAMILYDEVICEFORM_MEDICAL = 22;
pub const ARW_STARTMASK = c_long(3);
pub const PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_MASK = if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 4) else if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 4) else c_uint(3)(i64 << 4);
pub const ERROR_SET_NOT_FOUND = c_long(1170);
pub const RegLoadAppKey = RegLoadAppKeyA;
pub const HKL_NEXT = 1;
pub const VRL_PREDEFINED_CLASS_BEGIN = 1 << 0;
pub const CREATE_WAITABLE_TIMER_MANUAL_RESET = 1;
pub const SECTION_MAP_EXECUTE = 8;
pub const DISP_CHANGE_RESTART = 1;
pub const WM_IME_KEYDOWN = 656;
pub const FACILITY_P2P_INT = 98;
pub const ERROR_BUSY = c_long(170);
pub const ERROR_NO_RANGES_PROCESSED = c_long(312);
pub const MAXLONGLONG = 9223372036854775807;
pub const DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR = c_long(9109);
pub const WSAEDESTADDRREQ = c_long(10039);
pub const PRODUCT_EMBEDDED_AUTOMOTIVE = 85;
pub const RTL_CORRELATION_VECTOR_V2_LENGTH = 128;
pub const ENLISTMENT_SUPERIOR_RIGHTS = 16;
pub const MARSHAL_E_LAST = c_long(2147746095);
pub const WM_NCLBUTTONDOWN = 161;
pub const JOB_OBJECT_UI_VALID_FLAGS = 255;
pub const GETCOLORTABLE = 5;
pub const ERROR_SXS_XML_E_UNEXPECTEDENDTAG = c_long(14051);
pub const ERROR_DS_STRONG_AUTH_REQUIRED = c_long(8232);
pub const SPI_SETDOUBLECLICKTIME = 32;
pub const ERROR_IEPORT_FULL = c_long(4341);
pub const ERROR_IPSEC_INTEGRITY_CHECK_FAILED = c_long(13915);
pub const DOMAIN_ALIAS_RID_NON_CACHEABLE_PRINCIPALS_GROUP = c_long(572);
pub const IME_CMODE_SOFTKBD = 128;
pub const SOUND_SYSTEM_RESTOREUP = 10;
pub const SRWLOCK_INIT = RTL_SRWLOCK_INIT;
pub const EVENTLOG_FORWARDS_READ = 4;
pub const VOS_OS216 = c_long(131072);
pub const EMR_HEADER = 1;
pub const EINVAL = 22;
pub const ERROR_MRM_INVALID_QUALIFIER_OPERATOR = c_long(15137);
pub const NLS_HIRAGANA = 262144;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER_CORE = 159;
pub const IsCharUpper = IsCharUpperA;
pub const DMRES_MEDIUM = -3;
pub const SC_MANAGER_CONNECT = 1;
pub const ERROR_EVENTLOG_FILE_CHANGED = c_long(1503);
pub const CAL_SMONTHNAME6 = 26;
pub const TPM_HORIZONTAL = c_long(0);
pub const MDM_CELLULAR = 8;
pub const ERROR_GPIO_INTERRUPT_ALREADY_UNMASKED = c_long(15327);
pub const LOCALE_SSHORTESTAM = 126;
pub const HBMMENU_POPUP_RESTORE = if (@typeInfo(@TypeOf(9)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 9) else if (@typeInfo(@TypeOf(9)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 9) else @as(HBITMAP, 9);
pub const __inner_this_data_source = src_raw;
pub const SB_THUMBTRACK = 5;
pub const STATUS_STACK_OVERFLOW = if (@typeInfo(@TypeOf(c_long(3221225725))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225725)) else if (@typeInfo(@TypeOf(c_long(3221225725))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225725)) else @as(DWORD, c_long(3221225725));
pub const SUBLANG_ARABIC_LEBANON = 12;
pub const DCTT_DOWNLOAD_OUTLINE = c_long(8);
pub const GetConsoleAliases = GetConsoleAliasesA;
pub const EIMES_GETCOMPSTRATONCE = 1;
pub const SPI_SETPOWEROFFACTIVE = 86;
pub const PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 16) else if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 16) else c_uint(2)(i64 << 16);
pub const WT_EXECUTEINUITHREAD = 2;
pub const MM_HIMETRIC = 3;
pub const SPI_GETWHEELSCROLLLINES = 104;
pub const MIN_UCSCHAR = 0;
pub const HTNOWHERE = 0;
pub const MAXWORD = 65535;
pub const ERROR_VERSION_PARSE_ERROR = c_long(777);
pub const OpenWindowStation = OpenWindowStationA;
pub const DNS_ERROR_CANNOT_FIND_ROOT_HINTS = c_long(9564);
pub const ERROR_DUPLICATE_TAG = c_long(2014);
pub const SUBLANG_ITALIAN = 1;
pub const ERROR_TRANSACTIONS_UNSUPPORTED_REMOTE = c_long(6805);
pub const ERROR_PRINT_JOB_RESTART_REQUIRED = c_long(3020);
pub const ERROR_SECUREBOOT_INVALID_POLICY = c_long(4422);
pub const SUBLANG_AMHARIC_ETHIOPIA = 1;
pub const ERROR_FAIL_FAST_EXCEPTION = c_long(1653);
pub const NTDDI_WINBLUE = 100859904;
pub const IMAGE_REL_ARM_MOV32 = 16;
pub const PIPE_ACCESS_INBOUND = 1;
pub const UDIRTYUI = SHTDN_REASON_FLAG_DIRTY_UI;
pub const ERROR_UNWIND = c_long(542);
pub const GWL_EXSTYLE = -20;
pub const SUCCESSFUL_ACCESS_ACE_FLAG = 64;
pub const META_ESCAPE = 1574;
pub const ERROR_APPEXEC_NO_DONOR = c_long(3065);
pub const DFCS_CAPTIONCLOSE = 0;
pub const XSTATE_CET_U = 11;
pub const SKF_LCTLLATCHED = 67108864;
pub const ERROR_CTX_SESSION_IN_USE = c_long(7062);
pub const DCBA_FACEDOWNCENTER = 257;
pub const WM_INPUT_DEVICE_CHANGE = 254;
pub const SendMessageTimeout = SendMessageTimeoutA;
pub const CharToOem = CharToOemA;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const ERROR_CLUSTER_UPGRADE_FIX_QUORUM_NOT_SUPPORTED = c_long(5974);
pub const FIND_ACTCTX_SECTION_KEY_RETURN_ASSEMBLY_METADATA = 4;
pub const LPD_SHARE_STENCIL = 128;
pub const ERROR_BAD_PROVIDER = c_long(1204);
pub const STREAM_SPARSE_ATTRIBUTE = 8;
pub const ERROR_DEBUGGER_INACTIVE = c_long(1284);
pub const NTDDI_WIN2KSP2 = 83886592;
pub const GCP_NUMERICOVERRIDE = c_long(16777216);
pub const ERROR_CTX_SHADOW_DENIED = c_long(7044);
pub const ENUM_S_FIRST = c_long(262576);
pub const DCTT_SUBDEV = c_long(4);
pub const PAN_MIDLINE_STANDARD_POINTED = 3;
pub const PROCESS_HEAP_ENTRY_BUSY = 4;
pub const SSGF_DISPLAY = 3;
pub const IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;
pub const DESKTOP_HOOKCONTROL = c_long(8);
pub const VP_TV_STANDARD_SECAM_G = 1024;
pub const SUBLANG_TURKMEN_TURKMENISTAN = 1;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const VFT2_DRV_VERSIONED_PRINTER = c_long(12);
pub const DNS_ERROR_POLICY_DOES_NOT_EXIST = c_long(9972);
pub const FILE_ATTRIBUTE_NO_SCRUB_DATA = 131072;
pub const COLOR_MENUTEXT = 7;
pub const SPI_GETSCREENREADER = 70;
pub const TREE_CONNECT_ATTRIBUTE_PRIVACY = 16384;
pub const VER_MINORVERSION = 1;
pub const RPC_S_INVALID_TAG = c_long(1733);
pub const IMAGE_REL_M32R_ADDR24 = 3;
pub const PFD_TYPE_RGBA = 0;
pub const ERROR_MEDIA_UNAVAILABLE = c_long(4308);
pub const InterlockedExchangeAddAcquire = _InterlockedExchangeAdd;
pub const DC_PERSONALITY = 25;
pub const NTM_REGULAR = c_long(64);
pub const __UINT_FAST64_FMTu__ = "llu";
pub const THREAD_TERMINATE = 1;
pub const GCPCLASS_NUMERICSEPARATOR = 8;
pub const HIBERFILE_TYPE_REDUCED = 1;
pub const __INT_FAST16_TYPE__ = short;
pub const KF_UP = 32768;
pub const SPI_SETFOCUSBORDERWIDTH = 8207;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA = 0.001000;
pub const DNS_ERROR_POLICY_ALREADY_EXISTS = c_long(9971);
pub const DONT_RESOLVE_DLL_REFERENCES = 1;
pub const DEVICEFAMILYINFOENUM_8828080 = 14;
pub const CF_LOCALE = 16;
pub const WMSZ_LEFT = 1;
pub const ERROR_LOG_APPENDED_FLUSH_FAILED = c_long(6647);
pub const ERROR_DS_BAD_NAME_SYNTAX = c_long(8335);
pub const WNNC_NET_9P = 4718592;
pub const RotateLeft64 = _rotl64;
pub const GETPENWIDTH = 16;
pub const PRODUCT_CLUSTER_SERVER_V = 64;
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE = c_long(15634);
pub const STATE_SYSTEM_PRESSED = 8;
pub const REG_OPTION_OPEN_LINK = c_long(8);
pub const CP_ACP = 0;
pub const ERROR_DS_CONFIG_PARAM_MISSING = c_long(8427);
pub const IMAGE_REL_ALPHA_SECREL = 15;
pub const JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8;
pub const ERROR_LOG_PINNED_ARCHIVE_TAIL = c_long(6623);
pub const MDM_HDLCPPP_SPEED_DEFAULT = 0;
pub const BS_SOLID = 0;
pub const SECURITY_RESERVED_ID_BASE_RID = c_long(81);
pub const ERROR_ALREADY_EXISTS = c_long(183);
pub const META_FILLREGION = 552;
pub const CONDITION_VARIABLE_INIT = RTL_CONDITION_VARIABLE_INIT;
pub const WSAEBADF = c_long(10009);
pub const DCBA_FACEDOWNNONE = 256;
pub const FACILITY_OPC = 81;
pub const ES_READONLY = c_long(2048);
pub const SUBLANG_KASHMIRI_INDIA = 2;
pub const WM_GESTURENOTIFY = 282;
pub const ERROR_SXS_INVALID_DEACTIVATION = c_long(14085);
pub const ERROR_OVERRIDE_NOCHANGES = c_long(1252);
pub const R2_COPYPEN = 13;
pub const MAXUINT64 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT64, 0) else UINT64(0))) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT64, 0) else UINT64(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT64, 0) else UINT64(0))) == @import("builtin").TypeId.Int) @intToPtr(UINT64, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT64, 0) else UINT64(0)) else UINT64(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT64, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT64, 0) else UINT64(0));
pub const SERVICE_STOP_REASON_MAJOR_SOFTWARE = 262144;
pub const CPS_CANCEL = 4;
pub const FIND_ACTCTX_SECTION_KEY_RETURN_FLAGS = 2;
pub const ERROR_PACKAGES_REPUTATION_CHECK_TIMEDOUT = c_long(15644);
pub const GetModuleHandle = GetModuleHandleA;
pub const SS_ICON = c_long(3);
pub const SPI_SETMOUSE = 4;
pub const _HEX = 128;
pub const WS_EX_NOACTIVATE = c_long(134217728);
pub const PRODUCT_PROFESSIONAL_E = 69;
pub const FILE_SUPPORTS_ENCRYPTION = 131072;
pub const SUBLANG_SPANISH_MEXICAN = 2;
pub const MDM_DIAGNOSTICS = 2048;
pub const IGIMII_INPUTTOOLS = 64;
pub const ERROR_LOG_CONTAINER_OPEN_FAILED = c_long(6641);
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_SYSTEM = 16;
pub const GetDiskSpaceInformation = GetDiskSpaceInformationA;
pub const DNS_INFO_ADDED_LOCAL_WINS = c_long(9753);
pub const HS_CROSS = 4;
pub const MAXUINT_PTR = ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT_PTR, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT_PTR, 0) else @as(UINT_PTR, 0);
pub const ERROR_SXS_ASSEMBLY_MISSING = c_long(14081);
pub const EM_GETRECT = 178;
pub const PROTECTION_LEVEL_ANTIMALWARE_LIGHT = 3;
pub const GID_ROLLOVER = GID_PRESSANDTAP;
pub const PRODUCT_ENTERPRISE_S_N = 126;
pub const ACTIVATION_CONTEXT_PATH_TYPE_NONE = 1;
pub const GetCharWidthFloat = GetCharWidthFloatA;
pub const TC_SF_X_YINDEP = 32;
pub const DLL_THREAD_DETACH = 3;
pub const InterlockedAddNoFence64 = _InlineInterlockedAdd64;
pub const LANG_FARSI = 41;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const ACTCTX_FLAG_SET_PROCESS_DEFAULT = 16;
pub const CC_INTERIORS = 128;
pub const LOCALE_SCONSOLEFALLBACKNAME = 110;
pub const WN_NO_NET_OR_BAD_PATH = ERROR_NO_NET_OR_BAD_PATH;
pub const C2_OTHERNEUTRAL = 11;
pub const MEMORY_PRIORITY_LOWEST = 0;
pub const SM_CXFULLSCREEN = 16;
pub const BI_BITFIELDS = c_long(3);
pub const ERROR_FAIL_NOACTION_REBOOT = c_long(350);
pub const WNNC_NET_3IN1 = 2555904;
pub const ERROR_INVALID_MESSAGEDEST = c_long(1218);
pub const ERROR_INSTALL_NETWORK_FAILURE = c_long(15605);
pub const ENCLAVE_VBS_FLAG_DEBUG = 1;
pub const _SAL_VERSION_CHECK = _A;
pub const SERVICE_STOP_REASON_FLAG_CUSTOM = 536870912;
pub const ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = c_long(8515);
pub const IMAGE_SYM_SECTION_MAX = 65279;
pub const WM_MOUSEWHEEL = 522;
pub const SERVICE_ERROR_CRITICAL = 3;
pub const ERROR_CANNOT_LOAD_REGISTRY_FILE = c_long(589);
pub const MEMORY_PRIORITY_BELOW_NORMAL = 4;
pub const SUBLANG_GEORGIAN_GEORGIA = 1;
pub const ERROR_PNP_REBOOT_REQUIRED = c_long(638);
pub const __SSE4_2__ = 1;
pub const TPM_NOANIMATION = c_long(16384);
pub const ERROR_CANNOT_MAKE = c_long(82);
pub const NULL_PEN = 8;
pub const EMR_POLYPOLYLINE16 = 90;
pub const DMPAPER_LETTER_PLUS = 59;
pub const CAL_SMONTHNAME7 = 27;
pub const WNNC_NET_CLEARCASE = 1441792;
pub const TWF_FINETOUCH = 1;
pub const BI_JPEG = c_long(4);
pub const UIS_CLEAR = 2;
pub const TRANSACTION_PROPAGATE = 32;
pub const FACILITY_SQLITE = 1967;
pub const SPI_SETMESSAGEDURATION = 8215;
pub const ERROR_NET_WRITE_FAULT = c_long(88);
pub const PRODUCT_PROFESSIONAL = 48;
pub const SECURITY_BUILTIN_DOMAIN_RID = c_long(32);
pub const VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;
pub const SP_USERABORT = -3;
pub const DT_NOFULLWIDTHCHARBREAK = 524288;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_IN_SYNC = 2;
pub const SKF_LSHIFTLOCKED = 65536;
pub const PROCESSOR_HITACHI_SH4 = 10005;
pub const ERROR_DS_INAPPROPRIATE_AUTH = c_long(8233);
pub const FindResource = FindResourceA;
pub const REG_QWORD_LITTLE_ENDIAN = c_ulong(11);
pub const ERROR_DEVICE_ALREADY_ATTACHED = c_long(548);
pub const WM_POINTERHWHEEL = 591;
pub const SPI_SETTHREADLOCALINPUTSETTINGS = 4175;
pub const GESTUREVISUALIZATION_RIGHTTAP = 16;
pub const QS_SENDMESSAGE = 64;
pub const ERROR_INVALID_FORM_NAME = c_long(1902);
pub const RIP_EVENT = 9;
pub const LANG_ICELANDIC = 15;
pub const PRODUCT_UTILITY_VM = 149;
pub const WNFMT_ABBREVIATED = 2;
pub const SERVICE_NO_CHANGE = 4294967295;
pub const ERROR_CORE_DRIVER_PACKAGE_NOT_FOUND = c_long(3016);
pub const ERROR_IS_JOIN_PATH = c_long(147);
pub const HSHELL_WINDOWREPLACED = 13;
pub const LOGON32_LOGON_SERVICE = 5;
pub const LOCALE_SENGLANGUAGE = LOCALE_SENGLISHLANGUAGENAME;
pub const ERROR_PATCH_REMOVAL_UNSUPPORTED = c_long(1646);
pub const IMAGE_OS2_SIGNATURE = 17742;
pub const ERROR_CLUSTER_INVALID_NODE = c_long(5039);
pub const ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = c_long(7014);
pub const PDC_REMOVAL = 2;
pub const EVENTLOG_BACKWARDS_READ = 8;
pub const S_SERBDNT = -5;
pub const IMAGE_REL_ALPHA_GPRELLO = 22;
pub const STATE_SYSTEM_LINKED = 4194304;
pub const SID_RECOMMENDED_SUB_AUTHORITIES = 1;
pub const CreateAcceleratorTable = CreateAcceleratorTableA;
pub const ODS_CHECKED = 8;
pub const BitTestAndSet = _bittestandset;
pub const ERROR_SXS_INCORRECT_PUBLIC_KEY_TOKEN = c_long(14095);
pub const TWF_WANTPALM = 2;
pub const SS_REALSIZEIMAGE = c_long(2048);
pub const DNS_ERROR_CNAME_LOOP = c_long(9707);
pub const SM_CYMENUCHECK = 72;
pub const FILE_ATTRIBUTE_COMPRESSED = 2048;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_ON = 1 << 28;
pub const ERROR_INVALID_EVENT_COUNT = c_long(151);
pub const WAIT_FAILED = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4294967295) else @as(DWORD, 4294967295);
pub const DT_CALCRECT = 1024;
pub const RESOURCEMANAGER_SET_INFORMATION = 2;
pub const MAPVK_VK_TO_VSC_EX = 4;
pub const NTDDI_WIN2KSP1 = 83886336;
pub const ERROR_SERVICE_NOT_FOUND = c_long(1243);
pub const WAIT_TIMEOUT = c_long(258);
pub const CONVERT10_E_FIRST = c_long(2147746240);
pub const AC_LINE_BACKUP_POWER = 2;
pub const SECURITY_MIN_BASE_RID = c_long(80);
pub const SYSTEM_SCOPED_POLICY_ID_ACE_TYPE = 19;
pub const APPCOMMAND_CLOSE = 31;
pub const DNS_ERROR_ZONE_NOT_SECONDARY = c_long(9613);
pub const IMAGE_SIZEOF_SYMBOL = 18;
pub const PASSIVE_LEVEL = 0;
pub const ERROR_SECUREBOOT_ROLLBACK_DETECTED = c_long(4420);
pub const SPI_GETNONCLIENTMETRICS = 41;
pub const ERROR_EVT_SUBSCRIPTION_TO_DIRECT_CHANNEL = c_long(15009);
pub const COLOR_INACTIVEBORDER = 11;
pub const RI_MOUSE_RIGHT_BUTTON_UP = 8;
pub const ERROR_ARBITRATION_UNHANDLED = c_long(723);
pub const FILE_FLAG_OPEN_REPARSE_POINT = 2097152;
pub const DST_BITMAP = 4;
pub const TAPE_DRIVE_SET_BLOCK_SIZE = 2147483664;
pub const TMPF_FIXED_PITCH = 1;
pub const CREATE_SECURE_PROCESS = 4194304;
pub const NTDDI_WIN8 = 100794368;
pub const PRODUCT_EMBEDDED_A = 88;
pub const SHTDN_REASON_MINOR_OTHERDRIVER = 14;
pub const ERROR_CLUSTER_INVALID_NETWORK = c_long(5054);
pub const NOERROR = 0;
pub const MDM_X75_DATA_BTX = 4;
pub const IMAGE_REL_THUMB_BRANCH24 = 20;
pub const ERROR_INVALID_MEDIA_POOL = c_long(4302);
pub const TC_OP_STROKE = 2;
pub const SEC_E_NOT_SUPPORTED = SEC_E_UNSUPPORTED_FUNCTION;
pub const EV_EVENT2 = 4096;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL = c_long(9992);
pub const X3_I_INST_WORD_X = 3;
pub const ERROR_RESIDENT_FILE_NOT_SUPPORTED = c_long(334);
pub const ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = c_long(8549);
pub const ERROR_BLOCK_TOO_MANY_REFERENCES = c_long(347);
pub const SBM_ENABLE_ARROWS = 228;
pub const SE_SIGNING_LEVEL_UNCHECKED = 0;
pub const KEYEVENTF_SCANCODE = 8;
pub const SPI_GETFASTTASKSWITCH = 35;
pub const SERVICE_NOTIFY_PAUSE_PENDING = 32;
pub const ILLUMINANT_DEVICE_DEFAULT = 0;
pub const LR_DEFAULTSIZE = 64;
pub const WM_DESTROYCLIPBOARD = 775;
pub const DEVICEFAMILYDEVICEFORM_TABLET = 2;
pub const PST_UNSPECIFIED = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 0) else @as(DWORD, 0);
pub const TIMERV_DEFAULT_COALESCING = 0;
pub const SE_SACL_PRESENT = 16;
pub const SKF_TWOKEYSOFF = 256;
pub const __inner_transfer = formal;
pub const APPCOMMAND_MEDIA_REWIND = 50;
pub const __SIZEOF_INT128__ = 16;
pub const ERROR_DS_REPL_LIFETIME_EXCEEDED = c_long(8614);
pub const EOPNOTSUPP = 130;
pub const IMAGE_REL_SHM_RELLO = 22;
pub const IsCharLower = IsCharLowerA;
pub const EVENT_S_LAST = c_long(262687);
pub const DMBIN_MANUAL = 4;
pub const RESOURCE_ENUM_MUI_SYSTEM = 4;
pub const MDM_V120_ML_NONE = 1;
pub const WriteLongPtrRelease = WriteRelease64;
pub const UOI_IO = 6;
pub const SUBLANG_CROATIAN_CROATIA = 1;
pub const SORT_GEORGIAN_TRADITIONAL = 0;
pub const ERROR_DS_CROSS_DOM_MOVE_ERROR = c_long(8216);
pub const DNS_ERROR_UNEXPECTED_CNG_ERROR = c_long(9110);
pub const EN_ALIGN_LTR_EC = 1792;
pub const RC_STRETCHDIB = 8192;
pub const ERROR_CANCELLED = c_long(1223);
pub const IMAGE_REL_ARM64_SECREL_HIGH12A = 10;
pub const VK_OEM_ENLW = 244;
pub const ERROR_NO_SCROLLBARS = c_long(1447);
pub const SCRUB_DATA_OUTPUT_FLAG_NON_USER_DATA_RANGE = 65536;
pub const SUBLANG_SPANISH_PARAGUAY = 15;
pub const LANG_HINDI = 57;
pub const ERROR_PATH_BUSY = c_long(148);
pub const WS_OVERLAPPED = c_long(0);
pub const ERROR_TRANSFORM_NOT_SUPPORTED = c_long(2004);
pub const SPI_SETCARETWIDTH = 8199;
pub const RESOURCE_MANAGER_MAXIMUM_OPTION = 3;
pub const DCTT_DOWNLOAD = c_long(2);
pub const ERROR_UNHANDLED_EXCEPTION = c_long(574);
pub const PRODUCT_EDUCATION_N = 122;
pub const InitiateShutdown = InitiateShutdownA;
pub const ERROR_CTX_SHADOW_INVALID = c_long(7050);
pub const JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16;
pub const STATUS_SEGMENT_NOTIFICATION = if (@typeInfo(@TypeOf(c_long(1073741829))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073741829)) else if (@typeInfo(@TypeOf(c_long(1073741829))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073741829)) else @as(DWORD, c_long(1073741829));
pub const CREATE_IGNORE_SYSTEM_DEFAULT = 2147483648;
pub const EM_POSFROMCHAR = 214;
pub const DATE_YEARMONTH = 8;
pub const VP_TV_STANDARD_SECAM_L1 = 524288;
pub const SHTDN_REASON_MAJOR_OPERATINGSYSTEM = 131072;
pub const WSAEFAULT = c_long(10014);
pub const ERROR_CTX_WINSTATION_BUSY = c_long(7024);
pub const IMAGE_ENHMETAFILE = 3;
pub const CONVERT10_S_LAST = c_long(262607);
pub const GRADIENT_FILL_OP_FLAG = 255;
pub const __INT_LEAST32_FMTi__ = "i";
pub const VER_CONDITION_MASK = 7;
pub const IO_REPARSE_TAG_NFS = c_long(2147483668);
pub const OpenFileMapping = OpenFileMappingA;
pub const DMDO_180 = 2;
pub const FILE_MAP_LARGE_PAGES = 536870912;
pub const LANG_KANNADA = 75;
pub const __STDC_UTF_32__ = 1;
pub const MININT32 = if (@typeInfo(@TypeOf(~MAXINT32)) == @import("builtin").TypeId.Pointer) @ptrCast(INT32, ~MAXINT32) else if (@typeInfo(@TypeOf(~MAXINT32)) == @import("builtin").TypeId.Int) @intToPtr(INT32, ~MAXINT32) else INT32(~MAXINT32);
pub const IO_REPARSE_TAG_ONEDRIVE = c_long(2147483681);
pub const WM_PALETTECHANGED = 785;
pub const COMPRESSION_FORMAT_NONE = 0;
pub const TAPE_FORMAT = c_long(5);
pub const DNS_ERROR_DEFAULT_ZONESCOPE = c_long(9953);
pub const HS_BDIAGONAL = 3;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PEP = 4;
pub const LOCALE_S1159 = LOCALE_SAM;
pub const ERROR_DIFFERENT_SERVICE_ACCOUNT = c_long(1079);
pub const NUMLOCK_ON = 32;
pub const __SIZEOF_DOUBLE__ = 8;
pub const CAL_SMONTHNAME4 = 24;
pub const WNNC_NET_SMB = 131072;
pub const EMR_POLYLINE16 = 87;
pub const PFD_SUPPORT_COMPOSITION = 32768;
pub const PRODUCT_EMBEDDED_INDUSTRY_EVAL = 105;
pub const WM_CREATE = 1;
pub const WSAEALREADY = c_long(10037);
pub const IME_REGWORD_STYLE_USER_FIRST = 2147483648;
pub const PAN_FAMILY_TEXT_DISPLAY = 2;
pub const TPM_WORKAREA = c_long(65536);
pub const EPT_S_CANT_CREATE = c_long(1899);
pub const ERROR_TRANSACTION_RESPONSE_NOT_ENLISTED = c_long(6723);
pub const STATUS_IN_PAGE_ERROR = if (@typeInfo(@TypeOf(c_long(3221225478))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225478)) else if (@typeInfo(@TypeOf(c_long(3221225478))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225478)) else @as(DWORD, c_long(3221225478));
pub const NTM_DSIG = 2097152;
pub const CBR_256000 = 256000;
pub const PRODUCT_ENTERPRISE_S = 125;
pub const __inner_data_entrypoint = category;
pub const ETO_RTLREADING = 128;
pub const PAN_MIDLINE_HIGH_TRIMMED = 5;
pub const ERROR_CLUSCFG_ROLLBACK_FAILED = c_long(5902);
pub const RPC_S_PROFILE_NOT_ADDED = c_long(1925);
pub const STATUS_INVALID_DISPOSITION = if (@typeInfo(@TypeOf(c_long(3221225510))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225510)) else if (@typeInfo(@TypeOf(c_long(3221225510))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225510)) else @as(DWORD, c_long(3221225510));
pub const DC_DUPLEX = 7;
pub const FROM_LEFT_3RD_BUTTON_PRESSED = 8;
pub const STATUS_SXS_EARLY_DEACTIVATION = if (@typeInfo(@TypeOf(c_long(3222601743))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3222601743)) else if (@typeInfo(@TypeOf(c_long(3222601743))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3222601743)) else @as(DWORD, c_long(3222601743));
pub const FAST_FAIL_SET_CONTEXT_DENIED = 48;
pub const STATUS_PENDING = if (@typeInfo(@TypeOf(c_long(259))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(259)) else if (@typeInfo(@TypeOf(c_long(259))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(259)) else @as(DWORD, c_long(259));
pub const ERROR_SXS_XML_E_UNCLOSEDCDATA = c_long(14065);
pub const PAGE_TARGETS_INVALID = 1073741824;
pub const ERROR_CLUSTER_DATABASE_UPDATE_CONDITION_FAILED = c_long(5986);
pub const InterlockedOrRelease = _InterlockedOr;
pub const FACILITY_ACS = 20;
pub const ERROR_CLOUD_FILE_PROVIDER_TERMINATED = c_long(404);
pub const ERROR_PAGE_FAULT_PAGING_FILE = c_long(751);
pub const wglUseFontBitmaps = wglUseFontBitmapsA;
pub const OemToAnsiBuff = OemToCharBuffA;
pub const DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = c_long(9612);
pub const ACTCTX_FLAG_LANGID_VALID = 2;
pub const VIF_CANNOTLOADCABINET = c_long(1048576);
pub const __write_guarded_by = lock;
pub const TRANSACTION_NOTIFY_PROMOTE_NEW = 268435456;
pub const GID_END = 2;
pub const MUI_FULL_LANGUAGE = 1;
pub const ENODATA = 120;
pub const SET_CLIP_BOX = 4108;
pub const PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_DEFER = if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 24) else if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 24) else c_uint(0)(i64 << 24);
pub const EMARCH_ENC_I17_IMM41b_VAL_POS_X = 32;
pub const DNS_ERROR_INVALID_POLICY_TABLE = c_long(9572);
pub const APPCOMMAND_NEW = 29;
pub const ERROR_DS_SERVER_DOWN = c_long(8250);
pub const HTBOTTOMRIGHT = 17;
pub const C2_EUROPENUMBER = 3;
pub const PRODUCT_PRO_WORKSTATION_N = 162;
pub const GENERIC_WRITE = c_long(1073741824);
pub const ERROR_EXE_MACHINE_TYPE_MISMATCH = c_long(216);
pub const IMAGE_REL_PPC_ADDR32 = 2;
pub const DDD_REMOVE_DEFINITION = 2;
pub const ERROR_CTX_SERVICE_NAME_COLLISION = c_long(7006);
pub const IMPORT_OBJECT_HDR_SIG2 = 65535;
pub const DNS_ERROR_TRY_AGAIN_LATER = c_long(9554);
pub const WM_NCLBUTTONUP = 162;
pub const BI_PNG = c_long(5);
pub const REGDB_S_LAST = c_long(262495);
pub const EM_SCROLL = 181;
pub const ERROR_INVALID_SECURITY_DESCR = c_long(1338);
pub const WM_INPUTLANGCHANGEREQUEST = 80;
pub const SERVICE_ACCEPT_POWEREVENT = 64;
pub const LOCALE_SNEGINFINITY = 107;
pub const SB_PAGEDOWN = 3;
pub const NTDDI_WIN7 = 100728832;
pub const WSA_QOS_EPROVSPECBUF = c_long(11018);
pub const R2_NOT = 6;
pub const INFINITE = 4294967295;
pub const CTRY_CHILE = 56;
pub const VK_MEDIA_STOP = 178;
pub const IMAGE_REL_PPC_REFLO = 17;
pub const BDR_RAISEDINNER = 4;
pub const LANG_BASHKIR = 109;
pub const EN_UPDATE = 1024;
pub const DOMAIN_GROUP_RID_POLICY_ADMINS = c_long(520);
pub const ERROR_NO_SITENAME = c_long(1919);
pub const WM_DEVMODECHANGE = 27;
pub const POWER_REQUEST_CONTEXT_DETAILED_STRING = DIAGNOSTIC_REASON_DETAILED_STRING;
pub const ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = c_long(174);
pub const DMBIN_UPPER = 1;
pub const SPI_GETMOUSEWHEELROUTING = 8220;
pub const REG_EXPAND_SZ = c_ulong(2);
pub const FACILITY_DEPLOYMENT_SERVICES_TFTP = 264;
pub const __UINTPTR_MAX__ = c_ulonglong(18446744073709551615);
pub const MF_GRAYED = c_long(1);
pub const VER_OR = 7;
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const WM_NCMOUSELEAVE = 674;
pub const GetFileAttributesTransacted = GetFileAttributesTransactedA;
pub const IMAGE_NT_OPTIONAL_HDR64_MAGIC = 523;
pub const __SIZEOF_WCHAR_T__ = 2;
pub const ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = c_long(1807);
pub const RDW_ERASE = 4;
pub const ERROR_DS_INCOMPATIBLE_VERSION = c_long(8567);
pub const ERROR_WMI_SET_FAILURE = c_long(4214);
pub const LOCALE_ILZERO = 18;
pub const ERROR_CLUSTER_USE_SHARED_VOLUMES_API = c_long(5948);
pub const _WIN32_IE_IE55 = 1360;
pub const ERROR_NOT_JOINED = c_long(136);
pub const SCRUB_DATA_INPUT_FLAG_SKIP_DATA = 16;
pub const ERROR_ILLEGAL_CHARACTER = c_long(582);
pub const PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;
pub const SHUTDOWN_NORETRY = 1;
pub const LOCALE_SNATIVECTRYNAME = LOCALE_SNATIVECOUNTRYNAME;
pub const _WIN32_IE_IE401 = 1025;
pub const CF_TIFF = 6;
pub const ERROR_CLUSTER_SHARED_VOLUME_FAILOVER_NOT_ALLOWED = c_long(5961);
pub const EXIT_THREAD_DEBUG_EVENT = 4;
pub const ERROR_COMPRESSED_FILE_NOT_SUPPORTED = c_long(335);
pub const WB_RIGHT = 1;
pub const WNNC_NET_INTERGRAPH = 1310720;
pub const WTS_SESSION_LOGOFF = 6;
pub const CREATECOLORSPACE_EMBEDED = 1;
pub const SM_CYVIRTUALSCREEN = 79;
pub const DMDFO_CENTER = 2;
pub const FW_ULTRALIGHT = FW_EXTRALIGHT;
pub const BAUD_300 = if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 16) else if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 16) else @as(DWORD, 16);
pub const VER_SUITE_TERMINAL = 16;
pub const TAPE_DRIVE_LOG_BLK_IMMED = 2147516416;
pub const LCMAP_LOWERCASE = 256;
pub const PRODUCT_STORAGE_STANDARD_EVALUATION_SERVER = 96;
pub const DBG_EXCEPTION_NOT_HANDLED = if (@typeInfo(@TypeOf(c_long(2147549185))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147549185)) else if (@typeInfo(@TypeOf(c_long(2147549185))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147549185)) else @as(DWORD, c_long(2147549185));
pub const EMR_GLSBOUNDEDRECORD = 103;
pub const CTRY_POLAND = 48;
pub const PAGE_NOACCESS = 1;
pub const SUBLANG_TAMIL_SRI_LANKA = 2;
pub const __BMI__ = 1;
pub const NUMA_NO_PREFERRED_NODE = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const GS_8BIT_INDICES = 1;
pub const EM_GETIMESTATUS = 217;
pub const _IRQL_always_function_max_ = irql;
pub const ERROR_LOCK_VIOLATION = c_long(33);
pub const JOB_OBJECT_MSG_JOB_CYCLE_TIME_LIMIT = 12;
pub const SM_CXBORDER = 5;
pub const WM_XBUTTONUP = 524;
pub const DOMAIN_GROUP_RID_COMPUTERS = c_long(515);
pub const DMBIN_FORMSOURCE = 15;
pub const BM_SETDONTCLICK = 248;
pub const SERVICE_INACTIVE = 2;
pub const ERROR_INVALID_SID = c_long(1337);
pub const ERROR_APPX_INTEGRITY_FAILURE_CLR_NGEN = c_long(15624);
pub const FF_MODERN = 3 << 4;
pub const ESRCH = 3;
pub const APPCOMMAND_MEDIA_STOP = 13;
pub const ERROR_MORE_DATA = c_long(234);
pub const DMPAPER_JENV_KAKU2_ROTATED = 84;
pub const ERROR_LB_WITHOUT_TABSTOPS = c_long(1434);
pub const CLR_INVALID = 4294967295;
pub const VBS_BASIC_PAGE_MEASURED_DATA = 1;
pub const ERROR_LOG_METADATA_CORRUPT = c_long(6612);
pub const __failure = x;
pub const MDM_MASK_X75_DATA = 7;
pub const ERROR_WRONG_DISK = c_long(34);
pub const CRITICAL_ACE_FLAG = 32;
pub const NLS_IME_CONVERSION = 8388608;
pub const CONSOLE_MOUSE_SELECTION = 4;
pub const RTS_CONTROL_DISABLE = 0;
pub const FILE_NOTIFY_CHANGE_SIZE = 8;
pub const InterlockedPushListSList = InterlockedPushListSListEx;
pub const STATUS_PRIVILEGED_INSTRUCTION = if (@typeInfo(@TypeOf(c_long(3221225622))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225622)) else if (@typeInfo(@TypeOf(c_long(3221225622))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225622)) else @as(DWORD, c_long(3221225622));
pub const MF_MOUSESELECT = c_long(32768);
pub const EXCEPTION_ILLEGAL_INSTRUCTION = STATUS_ILLEGAL_INSTRUCTION;
pub const EM_REPLACESEL = 194;
pub const REG_NOTIFY_CHANGE_ATTRIBUTES = c_long(2);
pub const GDICOMMENT_UNICODE_END = 128;
pub const META_CHORD = 2096;
pub const CTLCOLOR_SCROLLBAR = 5;
pub const RESOURCETYPE_ANY = 0;
pub const PROCESSOR_AMD_X8664 = 8664;
pub const PRODUCT_EMBEDDED_INDUSTRY_E_EVAL = 106;
pub const SPI_SETCARETTIMEOUT = 8227;
pub const CAL_SMONTHNAME5 = 25;
pub const SE_PRIVILEGE_ENABLED_BY_DEFAULT = c_long(1);
pub const ERROR_DS_INAPPROPRIATE_MATCHING = c_long(8238);
pub const PAN_SERIF_EXAGGERATED = 9;
pub const ERROR_SXS_MANIFEST_IDENTITY_SAME_BUT_CONTENTS_DIFFERENT = c_long(14101);
pub const SCRUB_DATA_INPUT_FLAG_IGNORE_REDUNDANCY = 8;
pub const DFCS_SCROLLSIZEGRIP = 8;
pub const BACKUP_INVALID = 0;
pub const TOUCH_HIT_TESTING_DEFAULT = 0;
pub const FAR = far;
pub const DRIVE_UNKNOWN = 0;
pub const ACCESS_MAX_MS_V5_ACE_TYPE = 21;
pub const ERROR_RESOURCE_DATA_NOT_FOUND = c_long(1812);
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND_FOR_IP = c_long(5894);
pub const ERROR_UNABLE_TO_INVENTORY_SLOT = c_long(4326);
pub const RELATIVE = 2;
pub const CHINESEBIG5_CHARSET = 136;
pub const QDC_ALL_PATHS = 1;
pub const ES_RIGHT = c_long(2);
pub const ERROR_INVALID_DEVICE_OBJECT_PARAMETER = c_long(650);
pub const BN_KILLFOCUS = 7;
pub const HWND_DESKTOP = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(HWND, 0) else @as(HWND, 0);
pub const C1_CNTRL = 32;
pub const WM_DPICHANGED = 736;
pub const ERROR_CORE_RESOURCE = c_long(5026);
pub const STATE_SYSTEM_OFFSCREEN = 65536;
pub const CTRY_SOUTH_KOREA = 82;
pub const GetTabbedTextExtent = GetTabbedTextExtentA;
pub const SUBLANG_ASSAMESE_INDIA = 1;
pub const NTDDI_WS08SP2 = NTDDI_WIN6SP2;
pub const DMPAPER_A3_EXTRA = 63;
pub const SERVICES_ACTIVE_DATABASE = SERVICES_ACTIVE_DATABASEA;
pub const ERROR_TRANSACTION_INTEGRITY_VIOLATED = c_long(6726);
pub const DFCS_MENUARROW = 0;
pub const SET_MIRROR_MODE = 4110;
pub const PROC_THREAD_ATTRIBUTE_NUMBER = 65535;
pub const VK_ACCEPT = 30;
pub const N_TSHIFT = 2;
pub const EVENT_SYSTEM_IME_KEY_NOTIFICATION = 41;
pub const ERROR_TOO_MANY_DESCRIPTORS = c_long(331);
pub const WSAENOTEMPTY = c_long(10066);
pub const ERROR_DS_SINGLE_USER_MODE_FAILED = c_long(8590);
pub const IME_CMODE_KATAKANA = 2;
pub const SPI_GETMOUSE = 3;
pub const POWER_REQUEST_CONTEXT_SIMPLE_STRING = DIAGNOSTIC_REASON_SIMPLE_STRING;
pub const PSINJECT_PLATECOLOR = 104;
pub const DMPAPER_QUARTO = 15;
pub const PROCESS_NAME_NATIVE = 1;
pub const ERROR_IPSEC_IKE_UNKNOWN_DOI = c_long(13862);
pub const VP_FLAGS_FLICKER = 4;
pub const MEM_RESERVE = 8192;
pub const DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION = c_long(9111);
pub const PS_ENDCAP_ROUND = 0;
pub const IMAGE_REL_IA64_PCREL60B = 22;
pub const SUBLANG_ENGLISH_PHILIPPINES = 13;
pub const __file_parser = typ;
pub const LAYOUT_BITMAPORIENTATIONPRESERVED = 8;
pub const DLGC_WANTALLKEYS = 4;
pub const ERROR_DOMAIN_LIMIT_EXCEEDED = c_long(1357);
pub const VP_TV_STANDARD_SECAM_D = 512;
pub const TAPE_DRIVE_REWIND_IMMEDIATE = 2147483656;
pub const ERROR_SEM_NOT_FOUND = c_long(187);
pub const SPIF_SENDCHANGE = SPIF_SENDWININICHANGE;
pub const ICM_REGISTERICMATCHER = 5;
pub const TextOut = TextOutA;
pub const FEATURESETTING_CUSTPAPER = 3;
pub const VK_GAMEPAD_RIGHT_TRIGGER = 202;
pub const WS_EX_CLIENTEDGE = c_long(512);
pub const MM_TEXT = 1;
pub const ERROR_DS_NO_DELETED_NAME = c_long(8355);
pub const GrayString = GrayStringA;
pub const PROTECTED_DACL_SECURITY_INFORMATION = c_long(2147483648);
pub const __UINT_LEAST32_MAX__ = c_uint(4294967295);
pub const NTDDI_WIN6 = 100663296;
pub const FAST_FAIL_INVALID_DISPATCH_CONTEXT = 39;
pub const ELF_VENDOR_SIZE = 4;
pub const CONNDLG_CONN_POINT = 2;
pub const SUBLANG_ENGLISH_UK = 2;
pub const WINABLEAPI = DECLSPEC_IMPORT;
pub const CONTEXT_S_FIRST = c_long(319488);
pub const SUBLANG_SAMI_NORTHERN_FINLAND = 3;
pub const DI_IMAGE = 2;
pub const CTRY_TAIWAN = 886;
pub const iscsym = __iscsym;
pub const EMR_FILLPATH = 62;
pub const DCBA_FACEUPLEFT = 2;
pub const RegEnumValue = RegEnumValueA;
pub const ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = c_long(5031);
pub const WSAENOBUFS = c_long(10055);
pub const PROCESSOR_INTEL_PENTIUM = 586;
pub const CBN_DBLCLK = 2;
pub const CE_TXFULL = 256;
pub const GCL_CBWNDEXTRA = -18;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_OCTET_STRING = 16;
pub const __INTPTR_MAX__ = c_longlong(9223372036854775807);
pub const TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304;
pub const DCB_ENABLE = 4;
pub const VK_XBUTTON1 = 5;
pub const ATF_TIMEOUTON = 1;
pub const NORM_IGNOREKANATYPE = 65536;
pub const DC_BINADJUST = 19;
pub const DM_DISPLAYFLAGS = c_long(2097152);
pub const LANG_WELSH = 82;
pub const STATUS_SXS_INVALID_DEACTIVATION = if (@typeInfo(@TypeOf(c_long(3222601744))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3222601744)) else if (@typeInfo(@TypeOf(c_long(3222601744))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3222601744)) else @as(DWORD, c_long(3222601744));
pub const ERROR_DS_NCNAME_MISSING_CR_REF = c_long(8412);
pub const ERROR_CTX_CLOSE_PENDING = c_long(7007);
pub const SUBLANG_CZECH_CZECH_REPUBLIC = 1;
pub const RC_SCALING = 4;
pub const TT_AVAILABLE = 1;
pub const STRETCH_DELETESCANS = COLORONCOLOR;
pub const IMAGE_REL_CEE_ADDR32 = 1;
pub const ENOPROTOOPT = 123;
pub const LANG_VIETNAMESE = 42;
pub const ERROR_TRANSACTION_NOT_FOUND = c_long(6715);
pub const UILANGUAGE_ENUMPROC = UILANGUAGE_ENUMPROCA;
pub const VIF_BUFFTOOSMALL = c_long(262144);
pub const EMR_SETDIBITSTODEVICE = 80;
pub const VOS_NT_WINDOWS32 = c_long(262148);
pub const WOW64_CONTEXT_EXCEPTION_REQUEST = 1073741824;
pub const ERROR_IMPLEMENTATION_LIMIT = c_long(1292);
pub const CONTEXT_S_LAST = c_long(319535);
pub const SDC_TOPOLOGY_CLONE = 2;
pub const LOCALE_SABBREVMONTHNAME11 = 78;
pub const GetConsoleAlias = GetConsoleAliasA;
pub const __deref_opt_inout_bcount_nz_opt = size;
pub const SUBLANG_FAEROESE_FAROE_ISLANDS = 1;
pub const SKF_RALTLATCHED = 536870912;
pub const MDM_AUTO_SPEED_DEFAULT = 0;
pub const OutputDebugString = OutputDebugStringA;
pub const SPI_SETHOTTRACKING = 4111;
pub const EMR_POLYGON16 = 86;
pub const MF_UNCHECKED = c_long(0);
pub const __ATOMIC_SEQ_CST = 5;
pub const WVR_ALIGNBOTTOM = 64;
pub const FILE_SUPPORTS_HARD_LINKS = 4194304;
pub const LC_NONE = 0;
pub const __SIZEOF_LONG_LONG__ = 8;
pub const _Use_decl_annotations_ = _Use_decl_anno_impl_;
pub const ERROR_INVALID_NAME = c_long(123);
pub const DNS_ERROR_RCODE_LAST = DNS_ERROR_RCODE_BADTIME;
pub const ERROR_CLUSTER_AFFINITY_CONFLICT = c_long(5971);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const IMAGE_ARCHIVE_PAD = "\n";
pub const DISCHARGE_POLICY_CRITICAL = 0;
pub const POWER_CONNECTIVITY_IN_STANDBY_DISABLED = 0;
pub const PROC_THREAD_ATTRIBUTE_ADDITIVE = 262144;
pub const SCARD_S_SUCCESS = NO_ERROR;
pub const ERROR_JOURNAL_ENTRY_DELETED = c_long(1181);
pub const CC_CIRCLES = 1;
pub const DMPAPER_LETTER_TRANSVERSE = 54;
pub const LINECAPS = 30;
pub const HELP_SETCONTENTS = c_long(5);
pub const FILE_TYPE_PIPE = 3;
pub const DC_TEXT = 8;
pub const CCHILDREN_SCROLLBAR = 5;
pub const THREAD_PRIORITY_IDLE = THREAD_BASE_PRIORITY_IDLE;
pub const __FLT_MAX__ = 340282346999999984391321947108527833088.000000;
pub const ReadULongPtrAcquire = ReadULong64Acquire;
pub const DEVICEFAMILYINFOENUM_XBOX = 5;
pub const ERROR_SXS_XML_E_UNCLOSEDTAG = c_long(14052);
pub const ERROR_MUTUAL_AUTH_FAILED = c_long(1397);
pub const TRANSACTION_NOTIFY_RECOVER = 256;
pub const ERROR_EXE_MARKED_INVALID = c_long(192);
pub const ES_LOWERCASE = c_long(16);
pub const ERROR_SXS_ASSEMBLY_NOT_FOUND = c_long(14003);
pub const SPI_GETAUDIODESCRIPTION = 116;
pub const RPC_S_NO_CALL_ACTIVE = c_long(1725);
pub const MDM_HDLCPPP_SPEED_56K = 2;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;
pub const DMDUP_HORIZONTAL = 3;
pub const EMR_FILLRGN = 71;
pub const QS_MOUSEMOVE = 2;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const CF_DSPMETAFILEPICT = 131;
pub const OBJID_CLIENT = if (@typeInfo(@TypeOf(4294967292)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967292) else if (@typeInfo(@TypeOf(4294967292)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967292) else @as(LONG, 4294967292);
pub const ERROR_SXS_XML_E_MISSINGQUOTE = c_long(14030);
pub const TC_CR_ANY = 16;
pub const CF_OWNERDISPLAY = 128;
pub const CTRY_YEMEN = 967;
pub const PDCAP_WARM_EJECT_SUPPORTED = 256;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1;
pub const ERROR_TRANSACTIONS_NOT_FROZEN = c_long(6839);
pub const ERROR_INSTALL_OPEN_PACKAGE_FAILED = c_long(15600);
pub const VALID_INHERIT_FLAGS = 31;
pub const EXCEPTION_FLT_INEXACT_RESULT = STATUS_FLOAT_INEXACT_RESULT;
pub const __ADX__ = 1;
pub const SE_SIGNING_LEVEL_MICROSOFT = 8;
pub const SPI_GETHIGHCONTRAST = 66;
pub const NTDDI_WS08SP3 = NTDDI_WIN6SP3;
pub const FACILITY_XPS = 82;
pub const TA_TOP = 0;
pub const ERROR_DISK_OPERATION_FAILED = c_long(1127);
pub const DMDITHER_NONE = 1;
pub const FACILITY_DEPLOYMENT_SERVICES_IMAGING = 258;
pub const TAPE_DRIVE_CLEAN_REQUESTS = 33554432;
pub const XACT_S_LAST = 315408;
pub const MOUSE_EVENT = 2;
pub const IO_REPARSE_TAG_GLOBAL_REPARSE = c_long(2684354585);
pub const IME_ESC_AUTOMATA = 4105;
pub const pascal = __stdcall;
pub const ERROR_CLUSTER_NODE_UP = c_long(5056);
pub const DLL_THREAD_ATTACH = 2;
pub const ERROR_DS_NOT_SUPPORTED = c_long(8256);
pub const CREATE_NEW = 1;
pub const IMAGE_REL_ARM_BRANCH11 = 4;
pub const __XSAVEOPT__ = 1;
pub const InitiateSystemShutdownEx = InitiateSystemShutdownExA;
pub const WSAESOCKTNOSUPPORT = c_long(10044);
pub const SUBLANG_SPANISH_PERU = 10;
pub const SERVICE_STOP_REASON_MAJOR_MIN = 0;
pub const ERROR_REPARSE = c_long(741);
pub const ERROR_CASE_DIFFERING_NAMES_IN_DIR = c_long(424);
pub const TA_BASELINE = 24;
pub const DMICM_COLORIMETRIC = 3;
pub const __UINT_LEAST32_FMTx__ = "x";
pub const ERROR_DBG_COMMAND_EXCEPTION = c_long(697);
pub const RC_DIBTODEV = 512;
pub const PROCESS_VM_READ = 16;
pub const BS_PUSHBUTTON = c_long(0);
pub const MAXUINT8 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT8, 0) else UINT8(0))) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT8, 0) else UINT8(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT8, 0) else UINT8(0))) == @import("builtin").TypeId.Int) @intToPtr(UINT8, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT8, 0) else UINT8(0)) else UINT8(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT8, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT8, 0) else UINT8(0));
pub const ERROR_DEVICE_ENUMERATION_ERROR = c_long(648);
pub const ERROR_LOG_FILE_FULL = c_long(1502);
pub const ERROR_RESMON_SYSTEM_RESOURCES_LACKING = c_long(5956);
pub const LR_COPYRETURNORG = 4;
pub const PFD_STEREO_DONTCARE = 2147483648;
pub const VER_SUITE_PERSONAL = 512;
pub const HSHELL_APPCOMMAND = 12;
pub const ERROR_DS_DUP_SCHEMA_ID_GUID = c_long(8381);
pub const ALTERNATE = 1;
pub const InterlockedXor64 = _InterlockedXor64;
pub const EN_VSCROLL = 1538;
pub const PS_JOIN_ROUND = 0;
pub const WNNC_NET_MASFAX = 3211264;
pub const WNNC_NET_LOCK = 3473408;
pub const HCBT_CREATEWND = 3;
pub const SWP_DRAWFRAME = SWP_FRAMECHANGED;
pub const META_CREATEPENINDIRECT = 762;
pub const MOUSEEVENTF_ABSOLUTE = 32768;
pub const KF_DLGMODE = 2048;
pub const DSS_HIDEPREFIX = 512;
pub const VP_MODE_WIN_GRAPHICS = 1;
pub const CREATE_UNICODE_ENVIRONMENT = 1024;
pub const ILLUMINANT_MAX_INDEX = ILLUMINANT_F2;
pub const ERROR_FILE_LEVEL_TRIM_NOT_SUPPORTED = c_long(326);
pub const X3_P_SIGN_VAL_POS_X = 0;
pub const CB_GETCOMBOBOXINFO = 356;
pub const PIPE_TYPE_MESSAGE = 4;
pub const RPC_S_UNKNOWN_AUTHN_SERVICE = c_long(1747);
pub const ERROR_SXS_IDENTITY_DUPLICATE_ATTRIBUTE = c_long(14092);
pub const EMR_COLORCORRECTPALETTE = 111;
pub const RPC_S_GRP_ELT_NOT_REMOVED = c_long(1929);
pub const PPM_FIRMWARE_PSD = 512;
pub const ERROR_SXS_WRONG_SECTION_TYPE = c_long(14009);
pub const __INT_LEAST16_FMTi__ = "hi";
pub const ImmGetCandidateListCount = ImmGetCandidateListCountA;
pub const SETICMPROFILE_EMBEDED = 1;
pub const ERROR_CHILD_NOT_COMPLETE = c_long(129);
pub const ERROR_INVALID_LIST_FORMAT = c_long(153);
pub const ERROR_INVALID_SEGDPL = c_long(198);
pub const AnsiPrev = CharPrevA;
pub const STATUS_DLL_NOT_FOUND = if (@typeInfo(@TypeOf(c_long(3221225781))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225781)) else if (@typeInfo(@TypeOf(c_long(3221225781))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225781)) else @as(DWORD, c_long(3221225781));
pub const GL_LEVEL_ERROR = 2;
pub const LANG_ALSATIAN = 132;
pub const IMAGE_ORDINAL_FLAG32 = 2147483648;
pub const CC_NONE = 0;
pub const EC_LEFTMARGIN = 1;
pub const ERROR_TRANSACTION_INVALID_MARSHALL_BUFFER = c_long(6713);
pub const EM_SETSEL = 177;
pub const HS_DIAGCROSS = 5;
pub const VK_PA1 = 253;
pub const TPM_VERNEGANIMATION = c_long(8192);
pub const _WIN32_IE_WINME = _WIN32_IE_IE55;
pub const CT_CTYPE1 = 1;
pub const SECURITY_SERVICE_ID_BASE_RID = c_long(80);
pub const WM_INITMENUPOPUP = 279;
pub const MUI_NON_LANG_NEUTRAL_FILE = 512;
pub const ERROR_CLUSTER_GROUP_SINGLETON_RESOURCE = c_long(5941);
pub const SM_SECURE = 44;
pub const LOCALE_SABBREVMONTHNAME10 = 77;
pub const SERVICE_STOP_REASON_MINOR_MIN = 0;
pub const IMC_SETCOMPOSITIONWINDOW = 12;
pub const JOB_OBJECT_LIMIT_PROCESS_TIME = 2;
pub const PAN_XHEIGHT_DUCKING_SMALL = 5;
pub const IMAGE_REL_ARM_SECREL = 15;
pub const SCS_CAP_SETRECONVERTSTRING = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_MASK = if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 56) else if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 56) else c_uint(3)(i64 << 56);
pub const ERROR_ENCLAVE_NOT_TERMINATED = c_long(814);
pub const TAPE_SPACE_FILEMARKS = c_long(6);
pub const WN_SUCCESS = NO_ERROR;
pub const ERROR_IO_INCOMPLETE = c_long(996);
pub const CTRY_NETHERLANDS = 31;
pub const __LDBL_MAX_EXP__ = 1024;
pub const _WIN64 = 1;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER = 56;
pub const FILE_ATTRIBUTE_DIRECTORY = 16;
pub const VER_SUITE_STORAGE_SERVER = 8192;
pub const PRODUCT_SOLUTION_EMBEDDEDSERVER_CORE = 57;
pub const WM_IME_COMPOSITION = 271;
pub const ERROR_APP_DATA_CORRUPT = c_long(4402);
pub const IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;
pub const SC_MANAGER_LOCK = 8;
pub const POWER_ACTION_OVERRIDE_APPS = 4;
pub const DNS_ERROR_NAME_DOES_NOT_EXIST = c_long(9714);
pub const BST_UNCHECKED = 0;
pub const FEATURESETTING_MIRROR = 4;
pub const ImmGetCandidateList = ImmGetCandidateListA;
pub const IDH_MISSING_CONTEXT = 28441;
pub const TLS_OUT_OF_INDEXES = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4294967295) else @as(DWORD, 4294967295);
pub const MDMSPKR_DIAL = 1;
pub const ERROR_MCA_MONITOR_VIOLATES_MCCS_SPECIFICATION = c_long(15202);
pub const TRANSACTION_NOTIFY_INDOUBT = 16384;
pub const PRODUCT_ENTERPRISE_SERVER_CORE = 14;
pub const WM_PRINTCLIENT = 792;
pub const WN_CANCEL = ERROR_CANCELLED;
pub const LANG_GERMAN = 7;
pub const ERROR_IPSEC_IKE_CRITICAL_PAYLOAD_NOT_RECOGNIZED = c_long(13823);
pub const SERVICE_ENUMERATE_DEPENDENTS = 8;
pub const CreateMetaFile = CreateMetaFileA;
pub const STATE_SYSTEM_EXPANDED = 512;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_VOLUME = 2;
pub const LANG_SERBIAN_NEUTRAL = 31770;
pub const IMAGE_HOT_PATCH_NO_CALL_TARGET = 409600;
pub const IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;
pub const JOB_OBJECT_LIMIT_RATE_CONTROL = 262144;
pub const PROTECTION_LEVEL_NONE = 4294967294;
pub const MIIM_DATA = 32;
pub const TRANSACTION_NOTIFY_ENLIST_PREPREPARE = 4096;
pub const ERROR_INVALID_MODULETYPE = c_long(190);
pub const PST_FAX = if (@typeInfo(@TypeOf(33)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 33) else if (@typeInfo(@TypeOf(33)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 33) else @as(DWORD, 33);
pub const __UINT_FAST16_FMTX__ = "hX";
pub const LB_ADDFILE = 406;
pub const PAN_SERIF_SQUARE_COVE = 4;
pub const lstrcpyn = lstrcpynA;
pub const PCF_TOTALTIMEOUTS = if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 64) else if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 64) else @as(DWORD, 64);
pub const CTRY_QATAR = 974;
pub const WN_NET_ERROR = ERROR_UNEXP_NET_ERR;
pub const SUBLANG_LUXEMBOURGISH_LUXEMBOURG = 1;
pub const MB_RIGHT = c_long(524288);
pub const POLICY_SHOWREASONUI_ALWAYS = 1;
pub const LOCALE_SENGLISHLANGUAGENAME = 4097;
pub const ERROR_RELOC_CHAIN_XEEDS_SEGLIM = c_long(201);
pub const ERROR_THREAD_ALREADY_IN_TASK = c_long(1552);
pub const FILE_ADD_SUBDIRECTORY = 4;
pub const ObjectOpenAuditAlarm = ObjectOpenAuditAlarmA;
pub const ERROR_RESOURCE_NOT_IN_AVAILABLE_STORAGE = c_long(5965);
pub const WM_GETFONT = 49;
pub const ACTIVATION_CONTEXT_SECTION_WINDOW_CLASS_REDIRECTION = 3;
pub const ERROR_CANT_ACCESS_DOMAIN_INFO = c_long(1351);
pub const FW_EXTRALIGHT = 200;
pub const ERROR_CANT_TERMINATE_SELF = c_long(555);
pub const __UINTMAX_FMTo__ = "llo";
pub const ERROR_DEPENDENCY_NOT_ALLOWED = c_long(5069);
pub const SM_CXMINTRACK = 34;
pub const LANG_UPPER_SORBIAN = 46;
pub const FACILITY_WINPE = 61;
pub const ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = c_long(8537);
pub const S_THRESHOLD = 1;
pub const __F16C__ = 1;
pub const POWER_SETTING_VALUE_VERSION = 1;
pub const HEAP_DISABLE_COALESCE_ON_FREE = 128;
pub const STATUS_INVALID_CRUNTIME_PARAMETER = if (@typeInfo(@TypeOf(c_long(3221226519))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226519)) else if (@typeInfo(@TypeOf(c_long(3221226519))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226519)) else @as(DWORD, c_long(3221226519));
pub const IME_ESC_SET_EUDC_DICTIONARY = 4100;
pub const ERROR_EOM_OVERFLOW = c_long(1129);
pub const __inout_bcount_nz_opt = size;
pub const PROCESSOR_ARCHITECTURE_NEUTRAL = 11;
pub const GetExceptionCode = _exception_code;
pub const LMEM_INVALID_HANDLE = 32768;
pub const AW_CENTER = 16;
pub const ERROR_DS_CANT_CACHE_CLASS = c_long(8402);
pub const DEVICEFAMILYDEVICEFORM_PRINTING = 25;
pub const IMAGE_SYM_TYPE_BYTE = 12;
pub const GWL_ID = -12;
pub const CTRY_PORTUGAL = 351;
pub const FILE_SKIP_COMPLETION_PORT_ON_SUCCESS = 1;
pub const __inner_assume_bound = i;
pub const VK_MEDIA_PLAY_PAUSE = 179;
pub const PRODUCT_INDUSTRY_HANDHELD = 118;
pub const TA_RIGHT = 2;
pub const DMPAPER_ISO_B4 = 42;
pub const WS_POPUP = c_long(2147483648);
pub const VER_SERVER_NT = 2147483648;
pub const SPI_GETWHEELSCROLLCHARS = 108;
pub const WNNC_NET_MANGOSOFT = 1835008;
pub const ERROR_SCRUB_DATA_DISABLED = c_long(332);
pub const META_STRETCHBLT = 2851;
pub const KL_NAMELENGTH = 9;
pub const DOWNLOADFACE = 514;
pub const RPC_S_NOT_ALL_OBJS_EXPORTED = c_long(1923);
pub const VK_NAVIGATION_ACCEPT = 142;
pub const __FLT16_DECIMAL_DIG__ = 5;
pub const VER_SUITE_BLADE = 1024;
pub const LANG_SLOVAK = 27;
pub const SHTDN_REASON_MAJOR_APPLICATION = 262144;
pub const COPY_FILE_ALLOW_DECRYPTED_DESTINATION = 8;
pub const FILE_NAMED_STREAMS = 262144;
pub const ERROR_META_EXPANSION_TOO_LONG = c_long(208);
pub const LANG_KAZAK = 63;
pub const PF_PAE_ENABLED = 9;
pub const ERROR_NO_SYSTEM_RESOURCES = c_long(1450);
pub const ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = c_long(8307);
pub const TAPE_PSEUDO_LOGICAL_BLOCK = c_long(3);
pub const __INT64_FMTi__ = "lli";
pub const ERROR_CLUSTER_PARTIAL_WRITE = c_long(5922);
pub const SPI_GETFOCUSBORDERWIDTH = 8206;
pub const MM_HIENGLISH = 5;
pub const ERROR_BAD_LENGTH = c_long(24);
pub const BS_MONOPATTERN = 9;
pub const INITIAL_FPCSR = 639;
pub const RPC_S_BINDING_HAS_NO_AUTH = c_long(1746);
pub const FE_FONTSMOOTHINGSTANDARD = 1;
pub const WS_EX_WINDOWEDGE = c_long(256);
pub const SS_BLACKFRAME = c_long(7);
pub const MIIM_TYPE = 16;
pub const IMAGE_REL_AMD64_TOKEN = 13;
pub const SPI_GETMINIMUMHITRADIUS = 8212;
pub const ERROR_SXS_THREAD_QUERIES_DISABLED = c_long(14010);
pub const ERROR_NOT_QUORUM_CAPABLE = c_long(5021);
pub const _WIN32_IE_WIN98SE = _WIN32_IE_IE50;
pub const ERROR_BAD_FORMAT = c_long(11);
pub const DISP_CHANGE_SUCCESSFUL = 0;
pub const PWR_SUSPENDRESUME = 2;
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const ERROR_INVALID_KERNEL_INFO_VERSION = c_long(340);
pub const DOMAIN_GROUP_RID_CDC_RESERVED = c_long(524);
pub const ERROR_IPSEC_IKE_NO_CERT = c_long(13806);
pub const GetPrivateProfileSection = GetPrivateProfileSectionA;
pub const BM_GETIMAGE = 246;
pub const SetDlgItemText = SetDlgItemTextA;
pub const JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255;
pub const MAXUHALF_PTR = if (@typeInfo(@TypeOf(~0)) == @import("builtin").TypeId.Pointer) @ptrCast(UHALF_PTR, ~0) else if (@typeInfo(@TypeOf(~0)) == @import("builtin").TypeId.Int) @intToPtr(UHALF_PTR, ~0) else @as(UHALF_PTR, ~0);
pub const ERROR_CLUSTER_NOT_INSTALLED = c_long(5932);
pub const WM_MENUSELECT = 287;
pub const DOMAIN_ALIAS_RID_HYPER_V_ADMINS = c_long(578);
pub const _WIN32_IE_IE50 = 1280;
pub const MDM_MASK_V120_ML = 3 << 6;
pub const __UINT_FAST64_FMTo__ = "llo";
pub const FACILITY_USERMODE_VIRTUALIZATION = 55;
pub const ERROR_PATCH_MANAGED_ADVERTISED_PRODUCT = c_long(1651);
pub const ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = c_long(3005);
pub const ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = c_long(5030);
pub const SIZE_RESTORED = 0;
pub const SM_CXHTHUMB = 10;
pub const ERROR_IPSEC_IKE_INVALID_MM_FOR_QM = c_long(13894);
pub const CT_CTYPE2 = 2;
pub const EVENTLOG_SUCCESS = 0;
pub const LANG_SANSKRIT = 79;
pub const PAN_STRAIGHT_ARMS_HORZ = 2;
pub const SUBLANG_LITHUANIAN = 1;
pub const CBM_INIT = c_long(4);
pub const LOCALE_SABBREVMONTHNAME13 = 4111;
pub const SHTDN_REASON_FLAG_DIRTY_UI = 134217728;
pub const __UINT8_FMTX__ = "hhX";
pub const ERROR_DS_DRA_SCHEMA_MISMATCH = c_long(8418);
pub const PostAppMessage = PostAppMessageA;
pub const SECURITY_STATIC_TRACKING = FALSE;
pub const SW_HIDE = 0;
pub const ERROR_DS_ILLEGAL_MOD_OPERATION = c_long(8311);
pub const STATUS_NONCONTINUABLE_EXCEPTION = if (@typeInfo(@TypeOf(c_long(3221225509))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225509)) else if (@typeInfo(@TypeOf(c_long(3221225509))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225509)) else @as(DWORD, c_long(3221225509));
pub const DM_PAPERWIDTH = c_long(8);
pub const CTRY_FINLAND = 358;
pub const SYSTEM_AUDIT_ACE_TYPE = 2;
pub const ERROR_OPERATION_NOT_ALLOWED_FROM_SYSTEM_COMPONENT = c_long(15145);
pub const WSA_QOS_REQUEST_CONFIRMED = c_long(11009);
pub const X3_OPCODE_INST_WORD_POS_X = 28;
pub const ERROR_CLUSTER_CANNOT_RETURN_PROPERTIES = c_long(5968);
pub const RESTART_NO_PATCH = 4;
pub const DNS_ERROR_NUMERIC_NAME = c_long(9561);
pub const ERROR_CLASS_ALREADY_EXISTS = c_long(1410);
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const IDI_ERROR = IDI_HAND;
pub const DNS_ERROR_RCODE_FORMAT_ERROR = c_long(9001);
pub const RPC_S_CALL_IN_PROGRESS = c_long(1791);
pub const ERROR_DS_VERSION_CHECK_FAILURE = c_long(643);
pub const DNS_ERROR_SECONDARY_DATA = c_long(9712);
pub const GCS_CURSORPOS = 128;
pub const IMAGE_SCN_MEM_16BIT = 131072;
pub const CBS_UPPERCASE = c_long(8192);
pub const WINEVENT_SKIPOWNPROCESS = 2;
pub const MB_CANCELTRYCONTINUE = c_long(6);
pub const ENOSPC = 28;
pub const RPC_S_INVALID_BOUND = c_long(1734);
pub const DSS_NORMAL = 0;
pub const CBS_SORT = c_long(256);
pub const SetFileSecurity = SetFileSecurityA;
pub const VK_MODECHANGE = 31;
pub const CF_DSPENHMETAFILE = 142;
pub const HCBT_CLICKSKIPPED = 6;
pub const _WIN32_IE_WINBLUE = _WIN32_IE_IE100;
pub const CONTEXT_EXCEPTION_REQUEST = c_long(1073741824);
pub const ERROR_CLUSTER_JOIN_ABORTED = c_long(5074);
pub const DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1 = c_long(9103);
pub const MFT_MENUBARBREAK = MF_MENUBARBREAK;
pub const ERROR_TOO_MANY_SECRETS = c_long(1381);
pub const POLICY_SHOWREASONUI_NEVER = 0;
pub const ERROR_SAM_INIT_FAILURE = c_long(8541);
pub const PAGE_GRAPHICS_EXECUTE_READWRITE = 65536;
pub const EMR_SCALEVIEWPORTEXTEX = 31;
pub const DEVICEFAMILYDEVICEFORM_VENDING = 28;
pub const RTL_CRITICAL_SECTION_FLAG_RESOURCE_TYPE = 134217728;
pub const ERROR_DLL_MIGHT_BE_INCOMPATIBLE = c_long(687);
pub const ERROR_INVALID_ACL = c_long(1336);
pub const IMAGE_SYM_CLASS_STRUCT_TAG = 10;
pub const PENVISUALIZATION_OFF = 0;
pub const AD_COUNTERCLOCKWISE = 1;
pub const PC_PATHS = 512;
pub const TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = 4095;
pub const MAX_TOUCH_COUNT = 256;
pub const SBM_SETRANGE = 226;
pub const MIM_STYLE = 16;
pub const PC_STYLED = 32;
pub const RegEnumKeyEx = RegEnumKeyExA;
pub const POINTER_FLAG_THIRDBUTTON = 64;
pub const BITSPIXEL = 12;
pub const PS_JOIN_BEVEL = 4096;
pub const ERROR_ENLISTMENT_NOT_SUPERIOR = c_long(6820);
pub const QDC_ONLY_ACTIVE_PATHS = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 56) else if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 56) else c_uint(1)(i64 << 56);
pub const DATE_LONGDATE = 2;
pub const BAUD_38400 = if (@typeInfo(@TypeOf(16384)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 16384) else if (@typeInfo(@TypeOf(16384)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 16384) else @as(DWORD, 16384);
pub const ERROR_JOB_NO_CONTAINER = c_long(1505);
pub const MDM_SHIFT_V110_SPEED = 0;
pub const CTRY_SINGAPORE = 65;
pub const InterlockedDecrementAcquire16 = _InterlockedDecrement16;
pub const CALINFO_ENUMPROCEX = CALINFO_ENUMPROCEXA;
pub const DISP_CHANGE_BADDUALVIEW = -6;
pub const GL_LEVEL_WARNING = 3;
pub const CORE_PARKING_POLICY_CHANGE_MULTISTEP = 3;
pub const COPY_FILE_REQUEST_COMPRESSED_TRAFFIC = 16777216;
pub const SPI_GETMENUANIMATION = 4098;
pub const SW_SCROLLCHILDREN = 1;
pub const PAN_SERIF_OBTUSE_SANS = 12;
pub const IMAGE_FILE_MACHINE_AM33 = 467;
pub const ASPECT_FILTERING = 1;
pub const ERROR_DISK_FULL = c_long(112);
pub const IMAGE_DIRECTORY_ENTRY_IAT = 12;
pub const ERROR_NOT_SAFE_MODE_DRIVER = c_long(646);
pub const GCP_NEUTRALOVERRIDE = c_long(33554432);
pub const BuildCommDCB = BuildCommDCBA;
pub const TC_SA_INTEGER = 128;
pub const FACILITY_PLA = 48;
pub const TPM_VCENTERALIGN = c_long(16);
pub const NTDDI_WIN6SP1 = 100663552;
pub const PENVISUALIZATION_ON = 35;
pub const __UINT_FAST8_MAX__ = 255;
pub const __DBL_MIN_10_EXP__ = -307;
pub const WINUSERAPI = DECLSPEC_IMPORT;
pub const DMTT_SUBDEV = 3;
pub const CreateWindowStation = CreateWindowStationA;
pub const IMAGE_SYM_TYPE_WORD = 13;
pub const PARITY_EVEN = if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 1024) else if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 1024) else @as(WORD, 1024);
pub const ERROR_GROUPSET_NOT_AVAILABLE = c_long(5991);
pub const REG_CREATED_NEW_KEY = c_long(1);
pub const _LOWER = 2;
pub const FEATURESETTING_NEGATIVE = 5;
pub const TKF_HOTKEYSOUND = 16;
pub const LOCALE_SPERMILLE = 119;
pub const ERROR_CONTEXT_EXPIRED = c_long(1931);
pub const ACCESS_MAX_MS_OBJECT_ACE_TYPE = 8;
pub const CALLBACK_STREAM_SWITCH = 1;
pub const __SSP_STRONG__ = 2;
pub const BF_ADJUST = 8192;
pub const ERROR_MRM_GENERATION_COUNT_MISMATCH = c_long(15147);
pub const PAN_LETT_OBLIQUE_FLATTENED = 12;
pub const PSINJECT_BEGINSTREAM = 1;
pub const CSOUND_SYSTEM = 16;
pub const InterlockedBitTestAndReset64Acquire = _interlockedbittestandreset64;
pub const ZeroMemory = RtlZeroMemory;
pub const ERROR_CANT_RESOLVE_FILENAME = c_long(1921);
pub const isascii = __isascii;
pub const FAST_FAIL_UNSAFE_EXTENSION_CALL = 26;
pub const META_SETTEXTJUSTIFICATION = 522;
pub const ERROR_MRM_AUTOMERGE_ENABLED = c_long(15139);
pub const PAN_FAMILY_DECORATIVE = 4;
pub const DISPLAY_DEVICE_MULTI_DRIVER = 2;
pub const R2_NOP = 11;
pub const IMAGE_REL_AMD64_IMPORT_BR = 18;
pub const LGRPID_KOREAN = 8;
pub const SHUTDOWN_TYPE_LEN = 32;
pub const DOMAIN_USER_RID_ADMIN = c_long(500);
pub const VK_RSHIFT = 161;
pub const MDM_V120_SPEED_56K = 2;
pub const LMEM_NOCOMPACT = 16;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_RESERVED = 3 << 12;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY = 512;
pub const AddAtom = AddAtomA;
pub const IMAGE_SYM_CLASS_ARGUMENT = 9;
pub const ERROR_INVALID_SPI_VALUE = c_long(1439);
pub const PCF_SETXCHAR = if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 32) else if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 32) else @as(DWORD, 32);
pub const IME_REGWORD_STYLE_USER_LAST = 4294967295;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_USER_LOG_OFF = c_long(15641);
pub const ERROR_CLUSTER_LAST_INTERNAL_NETWORK = c_long(5066);
pub const ERROR_WMI_GUID_DISCONNECTED = c_long(4207);
pub const ERROR_APPEXEC_CONDITION_NOT_SATISFIED = c_long(3060);
pub const SPI_SETHANDEDNESS = 8229;
pub const RC_OP_DX_OUTPUT = 16384;
pub const ERROR_CLUSTER_INTERNAL_INVALID_FUNCTION = c_long(5912);
pub const GetConsoleCommandHistory = GetConsoleCommandHistoryA;
pub const FW_MEDIUM = 500;
pub const PFD_GENERIC_ACCELERATED = 4096;
pub const VK_MEDIA_NEXT_TRACK = 176;
pub const PFD_SUPPORT_DIRECTDRAW = 8192;
pub const PAGE_GRAPHICS_EXECUTE = 16384;
pub const MDM_MASK_AUTO_ML = 3 << 6;
pub const _Analysis_assume_lock_released_ = lock;
pub const SEF_MACL_NO_READ_UP = 512;
pub const MOUSE_MOVED = 1;
pub const ERROR_DATA_CHECKSUM_ERROR = c_long(323);
pub const DMPAPER_11X17 = 17;
pub const VK_XBUTTON2 = 6;
pub const RI_MOUSE_BUTTON_5_DOWN = 256;
pub const ERROR_CANT_DISABLE_MANDATORY = c_long(1310);
pub const PSINJECT_BEGINSETUP = 16;
pub const DMPAPER_B6_JIS = 88;
pub const APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;
pub const IMAGE_DEBUG_TYPE_POGO = 13;
pub const SUBLANG_SLOVENIAN_SLOVENIA = 1;
pub const FAST_FAIL_ADMINLESS_ACCESS_DENIED = 55;
pub const HSHELL_TASKMAN = 7;
pub const SERVICE_TRIGGER_DATA_TYPE_LEVEL = 3;
pub const SECURITY_MANDATORY_HIGH_RID = c_long(12288);
pub const PROCESS_CREATION_CHILD_PROCESS_RESTRICTED = 1;
pub const RGN_OR = 2;
pub const PRODUCT_STANDARD_SERVER_CORE = 13;
pub const ERROR_ONLY_IF_CONNECTED = c_long(1251);
pub const InterlockedBitTestAndSet64Acquire = _interlockedbittestandset64;
pub const ERROR_REM_NOT_LIST = c_long(51);
pub const ERROR_UNABLE_TO_UNLOAD_MEDIA = c_long(1109);
pub const HSHELL_ENDTASK = 10;
pub const ERROR_CLIENT_SERVER_PARAMETERS_INVALID = c_long(597);
pub const ERROR_DS_DRA_OUT_OF_MEM = c_long(8446);
pub const CT_CTYPE3 = 4;
pub const CREATE_DEFAULT_ERROR_MODE = 67108864;
pub const InterlockedDecrementRelease = _InterlockedDecrement;
pub const ERROR_DS_ILLEGAL_SUPERIOR = c_long(8345);
pub const FAST_FAIL_LPAC_ACCESS_DENIED = 43;
pub const RESOURCEDISPLAYTYPE_FILE = 4;
pub const LOCALE_SABBREVMONTHNAME12 = 79;
pub const LB_GETLOCALE = 422;
pub const PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 48) else if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 48) else c_uint(1)(i64 << 48);
pub const ERROR_SXS_XML_E_MULTIPLE_COLONS = c_long(14046);
pub const CreateDirectoryTransacted = CreateDirectoryTransactedA;
pub const CAL_SCALNAME = 2;
pub const SECURITY_CREATOR_OWNER_RIGHTS_RID = c_long(4);
pub const ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = c_long(8487);
pub const PSINJECT_ENDDEFAULTS = 13;
pub const AnsiUpper = CharUpperA;
pub const SHTDN_REASON_MINOR_UPGRADE = 3;
pub const WM_NCXBUTTONDBLCLK = 173;
pub const META_SETMAPPERFLAGS = 561;
pub const ERROR_PNP_IRQ_TRANSLATION_FAILED = c_long(673);
pub const SC_PREVWINDOW = 61520;
pub const X3_P_SIZE_X = 4;
pub const SM_TABLETPC = 86;
pub const PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 48) else if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 48) else c_uint(2)(i64 << 48);
pub const IS_TEXT_UNICODE_UNICODE_MASK = 15;
pub const VK_OEM_AX = 225;
pub const VK_DIVIDE = 111;
pub const PRODUCT_SERVERRDSH = 175;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub const REGDB_E_LAST = c_long(2147746143);
pub const ERROR_INSTALL_UI_FAILURE = c_long(1621);
pub const PM_REMOVE = 1;
pub const DO_PRINTFILE = c_long(1414419024);
pub const ERROR_VIRUS_INFECTED = c_long(225);
pub const ERROR_IPSEC_IKE_KERBEROS_ERROR = c_long(13827);
pub const TOKEN_ADJUST_GROUPS = 64;
pub const LF_FULLFACESIZE = 64;
pub const ERROR_CLUSTER_PARAMETER_OUT_OF_BOUNDS = c_long(5913);
pub const ERROR_IPSEC_IKE_INVALID_HASH_SIZE = c_long(13872);
pub const ERROR_CLUSTER_FAULT_DOMAIN_INVALID_HIERARCHY = c_long(5995);
pub const ERROR_VSM_DMA_PROTECTION_NOT_IN_USE = c_long(4561);
pub const TOKEN_MANDATORY_POLICY_NO_WRITE_UP = 1;
pub const RC_GDI20_STATE = 32;
pub const LANG_UIGHUR = 128;
pub const STATE_SYSTEM_BUSY = 2048;
pub const MDMSPKR_CALLSETUP = 3;
pub const FAST_FAIL_UNEXPECTED_HOST_BEHAVIOR = 58;
pub const ERROR_SXS_ASSEMBLY_NOT_LOCKED = c_long(14097);
pub const SECURITY_CAPABILITY_ENTERPRISE_AUTHENTICATION = c_long(8);
pub const _CRT_INTERNAL_NONSTDC_NAMES = 1;
pub const EVENT_OBJECT_DRAGLEAVE = 32805;
pub const CLASSFACTORY_E_FIRST = c_long(2147746064);
pub const TOKEN_DUPLICATE = 2;
pub const VER_SUITE_WH_SERVER = 32768;
pub const COPY_FILE_REQUEST_SECURITY_PRIVILEGES = 8192;
pub const ERROR_NO_YIELD_PERFORMED = c_long(721);
pub const ModifyMenu = ModifyMenuA;
pub const ERROR_DS_BUSY = c_long(8206);
pub const FACILITY_INPUT = 64;
pub const ERROR_CAPAUTHZ_SCCD_NO_AUTH_ENTITY = c_long(457);
pub const SB_RIGHT = 7;
pub const SC_SIZE = 61440;
pub const SP_NOTREPORTED = 16384;
pub const MM_MAX_AXES_NAMELEN = 16;
pub const DNS_ERROR_RECORD_ALREADY_EXISTS = c_long(9711);
pub const SECURITY_CAPABILITY_RID_COUNT = c_long(5);
pub const ATTACH_PARENT_PROCESS = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const COMMON_LVB_TRAILING_BYTE = 512;
pub const RTL_CONDITION_VARIABLE_LOCKMODE_SHARED = 1;
pub const FLI_GLYPHS = c_long(262144);
pub const ERROR_SYSTEM_INTEGRITY_POLICY_NOT_SIGNED = c_long(4553);
pub const PF_MMX_INSTRUCTIONS_AVAILABLE = 3;
pub const BSF_POSTMESSAGE = 16;
pub const ERROR_DS_NONEXISTENT_POSS_SUP = c_long(8390);
pub const CAL_NOUSEROVERRIDE = LOCALE_NOUSEROVERRIDE;
pub const MF_MENUBARBREAK = c_long(32);
pub const OBJID_QUERYCLASSNAMEIDX = if (@typeInfo(@TypeOf(4294967284)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967284) else if (@typeInfo(@TypeOf(4294967284)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967284) else @as(LONG, 4294967284);
pub const SB_CONST_ALPHA = 1;
pub const MAX_STR_BLOCKREASON = 256;
pub const ERROR_IPSEC_IKE_QM_LIMIT = c_long(13884);
pub const MDMSPKRFLAG_CALLSETUP = 8;
pub const ECANCELED = 105;
pub const ERROR_DS_CANT_MOD_SYSTEM_ONLY = c_long(8369);
pub const THREAD_DIRECT_IMPERSONATION = 512;
pub const ERROR_NETWORK_BUSY = c_long(54);
pub const PSINJECT_ORIENTATION = 8;
pub const COLOR_GRAYTEXT = 17;
pub const SWP_NOREDRAW = 8;
pub const WNNC_NET_9TILES = 589824;
pub const POWER_PLATFORM_ROLE_VERSION = POWER_PLATFORM_ROLE_V2;
pub const ERROR_TRUSTED_DOMAIN_FAILURE = c_long(1788);
pub const ERROR_CLUSTER_RESNAME_NOT_FOUND = c_long(5080);
pub const ERROR_IPSEC_MM_AUTH_NOT_FOUND = c_long(13011);
pub const ImmGetIMEFileName = ImmGetIMEFileNameA;
pub const EMARCH_ENC_I17_SIGN_SIZE_X = 1;
pub const FILL_NV_MEMORY_FLAG_NO_DRAIN = 256;
pub const VER_BUILDNUMBER = 4;
pub const TAPE_DRIVE_LOGICAL_BLK = 2147500032;
pub const TAPE_DRIVE_SETMARKS = 2148532224;
pub const IMAGE_REL_AM_SECREL = 7;
pub const BACKUP_SECURITY_DATA = 3;
pub const ERROR_INVALID_COMPUTERNAME = c_long(1210);
pub const BF_MONO = 32768;
pub const SE_GROUP_ENABLED = c_long(4);
pub const NON_PAGED_DEBUG_SIGNATURE = 18766;
pub const CF_METAFILEPICT = 3;
pub const NTDDI_WIN6SP2 = 100663808;
pub const WH_KEYBOARD = 2;
pub const ATTR_TARGET_NOTCONVERTED = 3;
pub const ERROR_DS_CANT_MOVE_APP_QUERY_GROUP = c_long(8609);
pub const ERROR_INSTALL_ALREADY_RUNNING = c_long(1618);
pub const SHTDN_REASON_MINOR_SERVICEPACK = 16;
pub const IMAGE_FILE_MACHINE_THUMB = 450;
pub const QDI_DIBTOSCREEN = 4;
pub const SC_GROUP_IDENTIFIER = SC_GROUP_IDENTIFIERA;
pub const VK_MENU = 18;
pub const ERROR_MRM_NAMED_RESOURCE_NOT_FOUND = c_long(15127);
pub const LCS_GM_IMAGES = c_long(4);
pub const WNNC_NET_SECUREAGENT = 4653056;
pub const DMPAPER_JENV_CHOU3 = 73;
pub const WM_DWMWINDOWMAXIMIZEDCHANGE = 801;
pub const JOB_OBJECT_POST_AT_END_OF_JOB = 1;
pub const ERROR_HOOK_TYPE_NOT_ALLOWED = c_long(1458);
pub const DNS_ERROR_POLICY_SCOPE_MISSING = c_long(9986);
pub const ERROR_ENCRYPTION_FAILED = c_long(6000);
pub const ERROR_POPUP_ALREADY_ACTIVE = c_long(1446);
pub const WRITE_NV_MEMORY_FLAG_NON_TEMPORAL = 2;
pub const ERROR_GROUP_NOT_FOUND = c_long(5013);
pub const ERROR_DS_WRONG_OM_OBJ_CLASS = c_long(8476);
pub const LB_ADDSTRING = 384;
pub const MAILSLOT_WAIT_FOREVER = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const GF_BEGIN = 1;
pub const WSA_QOS_NO_SENDERS = c_long(11007);
pub const TAPE_SPACE_SEQUENTIAL_FMKS = c_long(7);
pub const GetICMProfile = GetICMProfileA;
pub const ERROR_INSTALL_PACKAGE_VERSION = c_long(1613);
pub const PROCESS_POWER_THROTTLING_VALID_FLAGS = PROCESS_POWER_THROTTLING_EXECUTION_SPEED;
pub const CE_DNS = 2048;
pub const EMR_SETPIXELV = 15;
pub const TPM_LAYOUTRTL = c_long(32768);
pub const EIO = 5;
pub const DEVICEFAMILYDEVICEFORM_TOY = 27;
pub const WM_ENTERMENULOOP = 529;
pub const TAPE_DRIVE_ECC = 65536;
pub const ERROR_IPSEC_IKE_SRVQUERYCRED = c_long(13856);
pub const ODT_LISTBOX = 2;
pub const WM_NCDESTROY = 130;
pub const SERVICE_TRIGGER_TYPE_CUSTOM_SYSTEM_STATE_CHANGE = 7;
pub const SORT_CHINESE_UNICODE = 1;
pub const ERROR_NO_USER_KEYS = c_long(6006);
pub const ERROR_CTX_WINSTATION_ALREADY_EXISTS = c_long(7023);
pub const SYSTEM_ALARM_OBJECT_ACE_TYPE = 8;
pub const PostThreadMessage = PostThreadMessageA;
pub const MEM_IMAGE = 16777216;
pub const InsertMenuItem = InsertMenuItemA;
pub const GetNamedPipeClientComputerName = GetNamedPipeClientComputerNameA;
pub const ERROR_UNABLE_TO_LOAD_MEDIUM = c_long(4324);
pub const SS_ETCHEDHORZ = c_long(16);
pub const ICM_QUERYPROFILE = 3;
pub const VS_FF_PRERELEASE = c_long(2);
pub const SDC_TOPOLOGY_SUPPLIED = 16;
pub const IMAGE_SCN_ALIGN_4BYTES = 3145728;
pub const OLEOBJ_E_FIRST = c_long(2147746176);
pub const ERROR_INVALID_PRINTER_STATE = c_long(1906);
pub const APPCOMMAND_FORWARD_MAIL = 40;
pub const FILE_VER_GET_PREFETCHED = 4;
pub const PPM_FIRMWARE_CSD = 16;
pub const IMAGE_REL_ARM64_SECREL = 8;
pub const ERROR_CACHE_PAGE_LOCKED = c_long(752);
pub const __LITTLE_ENDIAN__ = 1;
pub const ERROR_DS_CANT_ADD_ATT_VALUES = c_long(8320);
pub const ERROR_LOG_PINNED_RESERVATION = c_long(6648);
pub const ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = c_long(8491);
pub const SW_RESTORE = 9;
pub const CTRY_SERBIA = 381;
pub const WS_EX_LEFTSCROLLBAR = c_long(16384);
pub const IO_REPARSE_TAG_SYMLINK = c_long(2684354572);
pub const PF_FLOATING_POINT_PRECISION_ERRATA = 0;
pub const IMAGE_GUARD_CF_ENABLE_EXPORT_SUPPRESSION = 32768;
pub const SERVICE_ACCEPT_TRIGGEREVENT = 1024;
pub const SUBLANG_NORWEGIAN_NYNORSK = 2;
pub const VK_NAVIGATION_MENU = 137;
pub const ERROR_WINDOW_NOT_DIALOG = c_long(1420);
pub const TC_OP_CHARACTER = 1;
pub const ERROR_DEPENDENCY_ALREADY_EXISTS = c_long(5003);
pub const APPCOMMAND_VOLUME_UP = 10;
pub const PAN_CONTRAST_NONE = 2;
pub const TAPE_DRIVE_RESERVED_BIT = 2147483648;
pub const ERROR_DS_LOCAL_ERROR = c_long(8251);
pub const SUBLANG_ARABIC_IRAQ = 2;
pub const VK_OEM_AUTO = 243;
pub const ERROR_CS_ENCRYPTION_FILE_NOT_CSE = c_long(6021);
pub const TRANSACTION_MAXIMUM_OPTION = 1;
pub const WINSTA_READATTRIBUTES = c_long(2);
pub const UI_CAP_ROT90 = 2;
pub const CreateMutex = CreateMutexA;
pub const IO_REPARSE_TAG_APPEXECLINK = c_long(2147483675);
pub const InterlockedExchangeAdd = _InterlockedExchangeAdd;
pub const SE_SACL_AUTO_INHERITED = 2048;
pub const SBM_SETPOS = 224;
pub const IDANI_OPEN = 1;
pub const LB_INSERTSTRING = 385;
pub const ZAWPROXYAPI = DECLSPEC_IMPORT;
pub const POWER_USER_NOTIFY_FORCED_SHUTDOWN = 32;
pub const LOCALE_SLONGDATE = 32;
pub const CB_ADDSTRING = 323;
pub const SetComputerName = SetComputerNameA;
pub const AddFontResource = AddFontResourceA;
pub const WSAEADDRNOTAVAIL = c_long(10049);
pub const IE_OPEN = -2;
pub const IMN_OPENCANDIDATE = 5;
pub const EPROTO = 134;
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_RID_COUNT = c_long(6);
pub const WM_NULL = 0;
pub const SUBLANG_SWAHILI_KENYA = 1;
pub const ERROR_CTX_WD_NOT_FOUND = c_long(7004);
pub const POWERBUTTON_ACTION_INDEX_NOTHING = 0;
pub const LOGON32_PROVIDER_WINNT40 = 2;
pub const SPI_GETDEFAULTINPUTLANG = 89;
pub const MEM_RESET_UNDO = 16777216;
pub const GetCalendarInfo = GetCalendarInfoA;
pub const FACILITY_WINDOWS_STORE = 63;
pub const CB_INITSTORAGE = 353;
pub const ERROR_CTX_CDM_DISCONNECT = c_long(7067);
pub const ERROR_INVALID_VARIANT = c_long(604);
pub const ERROR_SPECIAL_GROUP = c_long(1372);
pub const DNS_ERROR_POLICY_INVALID_NAME = c_long(9982);
pub const IMAGE_REL_BASED_IA64_IMM64 = 9;
pub const ERROR_DS_TREE_DELETE_NOT_FINISHED = c_long(8397);
pub const PRODUCT_STANDARD_EVALUATION_SERVER_CORE = 160;
pub const SPI_SETDRAGFROMMAXIMIZE = 141;
pub const ERROR_DS_VALUE_KEY_NOT_UNIQUE = c_long(8650);
pub const LANG_YORUBA = 106;
pub const SECURITY_AUTHENTICATION_FRESH_KEY_AUTH_RID = c_long(3);
pub const SUBLANG_DIVEHI_MALDIVES = 1;
pub const PARITY_ODD = if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 512) else if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 512) else @as(WORD, 512);
pub const JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4;
pub const ERROR_OPERATION_NOT_SUPPORTED_IN_TRANSACTION = c_long(6853);
pub const InterlockedXor64NoFence = _InterlockedXor64;
pub const ODA_SELECT = 2;
pub const ERROR_NO_MORE_USER_HANDLES = c_long(1158);
pub const RotateRight8 = _rotr8;
pub const DRAGDROP_E_LAST = c_long(2147746063);
pub const IMAGE_FILE_MACHINE_M32R = 36929;
pub const CALERT_SYSTEM = 6;
pub const WOW64_CONTEXT_EXCEPTION_ACTIVE = 134217728;
pub const __INT_FAST8_FMTd__ = "hhd";
pub const LANG_ORIYA = 72;
pub const InterlockedCompareExchangeNoFence = _InterlockedCompareExchange;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED = 16;
pub const ERROR_INVALID_STAGED_SIGNATURE = c_long(15620);
pub const EMR_RESIZEPALETTE = 51;
pub const MB_PRECOMPOSED = 1;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS = 52;
pub const SERVICE_CONTROL_SYSTEMLOWRESOURCES = 97;
pub const SECURITY_CAPABILITY_BASE_RID = c_long(3);
pub const _Requires_shared_lock_held_ = lock;
pub const ERROR_DS_SECURITY_CHECKING_ERROR = c_long(8413);
pub const __FLT_MAX_EXP__ = 128;
pub const NONZEROLHND = LMEM_MOVEABLE;
pub const TIMER_QUERY_STATE = 1;
pub const ERROR_BAD_DRIVER_LEVEL = c_long(119);
pub const DI_DEFAULTSIZE = 8;
pub const DMPAPER_JENV_CHOU4_ROTATED = 87;
pub const ERROR_PWD_TOO_RECENT = c_long(616);
pub const SPI_SETSOUNDSENTRY = 65;
pub const CONSOLE_FULLSCREEN_MODE = 1;
pub const ERROR_VIRUS_DELETED = c_long(226);
pub const PROCESSOR_HITACHI_SH3 = 10003;
pub const RemoveDirectoryTransacted = RemoveDirectoryTransactedA;
pub const GetOutlineTextMetrics = GetOutlineTextMetricsA;
pub const LANG_BELARUSIAN = 35;
pub const SECURITY_MANDATORY_UNTRUSTED_RID = c_long(0);
pub const DT_EXPANDTABS = 64;
pub const IMAGE_REL_BASED_MIPS_JMPADDR16 = 9;
pub const PROCESS_QUERY_LIMITED_INFORMATION = 4096;
pub const IMAGE_REL_IA64_IMMGPREL64 = 26;
pub const IMAGE_REL_IA64_TOKEN = 27;
pub const IMAGE_REL_ARM_BRANCH24T = 20;
pub const DOMAIN_ALIAS_RID_NETWORK_CONFIGURATION_OPS = c_long(556);
pub const ERROR_DS_INIT_FAILURE_CONSOLE = c_long(8561);
pub const PC_EXPLICIT = 2;
pub const SetProp = SetPropA;
pub const FLI_MASK = 4155;
pub const IME_JHOTKEY_CLOSE_OPEN = 48;
pub const ERROR_SXS_EARLY_DEACTIVATION = c_long(14084);
pub const ERROR_DEPENDENCY_NOT_FOUND = c_long(5002);
pub const ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = c_long(8426);
pub const WM_MDICREATE = 544;
pub const RPC_S_INTERNAL_ERROR = c_long(1766);
pub const ERROR_NOT_A_CLOUD_SYNC_ROOT = c_long(405);
pub const SetFirmwareEnvironmentVariable = SetFirmwareEnvironmentVariableA;
pub const ERROR_IPSEC_IKE_NEGOTIATION_DISABLED = c_long(13883);
pub const WM_USERCHANGED = 84;
pub const SM_CMOUSEBUTTONS = 43;
pub const ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = c_long(8548);
pub const DefWindowProc = DefWindowProcA;
pub const ERROR_SETMARK_DETECTED = c_long(1103);
pub const DOMAIN_USER_RID_GUEST = c_long(501);
pub const NTDDI_WIN6SP3 = 100664064;
pub const __CHAR_BIT__ = 8;
pub const LPTx = 128;
pub const ERROR_CLUSTER_CANT_DESERIALIZE_DATA = c_long(5923);
pub const CFS_POINT = 2;
pub const ERROR_SXS_XML_E_BADXMLDECL = c_long(14056);
pub const GetProp = GetPropA;
pub const APPCOMMAND_BROWSER_BACKWARD = 1;
pub const RPC_S_NO_PRINC_NAME = c_long(1822);
pub const ERROR_LOG_CONTAINER_STATE_INVALID = c_long(6642);
pub const GetServiceDisplayName = GetServiceDisplayNameA;
pub const CaptureStackBackTrace = RtlCaptureStackBackTrace;
pub const ERROR_NO_SUCH_ALIAS = c_long(1376);
pub const PRODUCT_ENTERPRISE_N_EVALUATION = 84;
pub const VK_OEM_8 = 223;
pub const IE_BYTESIZE = -11;
pub const OBJ_METADC = 4;
pub const HTGROWBOX = 4;
pub const WM_SYNCPAINT = 136;
pub const TRANSACTION_MANAGER_COMMIT_LOWEST = 8;
pub const SM_MIDEASTENABLED = 74;
pub const __FLT_HAS_INFINITY__ = 1;
pub const RegCopyTree = RegCopyTreeA;
pub const FKF_INDICATOR = 32;
pub const SS_PATHELLIPSIS = c_long(32768);
pub const POINTER_FLAG_HASTRANSFORM = 4194304;
pub const IO_REPARSE_TAG_CLOUD = c_long(2415919130);
pub const LOCALE_IDIGITS = 17;
pub const GetFirmwareEnvironmentVariable = GetFirmwareEnvironmentVariableA;
pub const SBS_LEFTALIGN = c_long(2);
pub const PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_DEFER = if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 8) else if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 8) else c_uint(0)(i64 << 8);
pub const FAILED_ACCESS_ACE_FLAG = 128;
pub const ERROR_IPSEC_WRONG_SA = c_long(13912);
pub const ERROR_IPSEC_CLEAR_TEXT_DROP = c_long(13916);
pub const MSGFLTINFO_ALREADYDISALLOWED_FORWND = 2;
pub const SPI_SETICONMETRICS = 46;
pub const NLS_VALID_LOCALE_MASK = 1048575;
pub const LCMAP_UPPERCASE = 512;
pub const ERROR_SHARING_VIOLATION = c_long(32);
pub const EMR_REALIZEPALETTE = 52;
pub const TRANSACTIONMANAGER_CREATE_RM = 16;
pub const SCS_SETRECONVERTSTRING = 65536;
pub const CpuIdEx = __cpuidex;
pub const SPI_GETFONTSMOOTHINGCONTRAST = 8204;
pub const SERVICE_STOP_REASON_MAJOR_MAX = 458752;
pub const ERROR_INVALID_SERVER_STATE = c_long(1352);
pub const __inner_this_out_validated = typ_raw;
pub const EXCEPTION_EXECUTE_HANDLER = 1;
pub const THREAD_POWER_THROTTLING_VALID_FLAGS = THREAD_POWER_THROTTLING_EXECUTION_SPEED;
pub const SERVICE_WIN32_OWN_PROCESS = 16;
pub const PC_WIDE = 16;
pub const HEAP_TAG_SHIFT = 18;
pub const BAUD_56K = if (@typeInfo(@TypeOf(32768)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 32768) else if (@typeInfo(@TypeOf(32768)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 32768) else @as(DWORD, 32768);
pub const IDRETRY = 4;
pub const SERVICE_ACCEPT_TIMECHANGE = 512;
pub const FAST_FAIL_ENCLAVE_CALL_FAILURE = 53;
pub const EV_ERR = 128;
pub const SCS_PIF_BINARY = 3;
pub const FILE_CS_FLAG_CASE_SENSITIVE_DIR = 1;
pub const CTRY_INDONESIA = 62;
pub const TAPE_DRIVE_LOAD_UNLOAD = 2147483649;
pub const MICROSOFT_WINBASE_H_DEFINE_INTERLOCKED_CPLUSPLUS_OVERLOADS = 0;
pub const TMPF_DEVICE = 8;
pub const CF_UNICODETEXT = 13;
pub const DESKTOP_READOBJECTS = c_long(1);
pub const CRM_PROTOCOL_EXPLICIT_MARSHAL_ONLY = 1;
pub const __SSE2__ = 1;
pub const CAL_RETURN_NUMBER = LOCALE_RETURN_NUMBER;
pub const CB_LIMITTEXT = 321;
pub const FACILITY_DEPLOYMENT_SERVICES_UTIL = 260;
pub const WNNC_NET_10NET = 327680;
pub const ERROR_SERVICE_DEPENDENCY_DELETED = c_long(1075);
pub const LANGGROUPLOCALE_ENUMPROC = LANGGROUPLOCALE_ENUMPROCA;
pub const IMAGE_FILE_MACHINE_ARM = 448;
pub const PF_ARM_V81_ATOMIC_INSTRUCTIONS_AVAILABLE = 34;
pub const LOCALE_TRANSIENT_KEYBOARD2 = 9216;
pub const FIND_FROMSTART = 4194304;
pub const CreateWindow = CreateWindowA;
pub const MB_ICONHAND = c_long(16);
pub const FILE_CASE_PRESERVED_NAMES = 2;
pub const RESOURCEDISPLAYTYPE_NDSCONTAINER = 11;
pub const SYSTEM_ALARM_CALLBACK_ACE_TYPE = 14;
pub const TRANSACTION_NOTIFICATION_TM_ONLINE_FLAG_IS_CLUSTERED = 1;
pub const SC_MONITORPOWER = 61808;
pub const LANG_LAO = 84;
pub const ERROR_CREATE_FAILED = c_long(1631);
pub const ERROR_INDIGENOUS_TYPE = c_long(4338);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_TRANS = c_long(13832);
pub const ERROR_LOG_CONTAINER_WRITE_FAILED = c_long(6640);
pub const ERROR_SXS_SECTION_NOT_FOUND = c_long(14000);
pub const EVENT_SYSTEM_SWITCHER_APPDROPPED = 38;
pub const MKF_CONFIRMHOTKEY = 8;
pub const RIM_TYPEKEYBOARD = 1;
pub const IMAGE_REL_EBC_REL32 = 2;
pub const SS_ENHMETAFILE = c_long(15);
pub const REG_LATEST_FORMAT = 2;
pub const FACILITY_WEB = 885;
pub const STARTF_USECOUNTCHARS = 8;
pub const BATTERY_FLAG_CRITICAL = 4;
pub const WM_SETHOTKEY = 50;
pub const JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;
pub const SERVICE_NOTIFY_DELETED = 256;
pub const SHTDN_REASON_MINOR_MAINTENANCE = 1;
pub const WM_NCMBUTTONDOWN = 167;
pub const DISPATCH_LEVEL = 2;
pub const DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED = c_long(9975);
pub const GIDC_ARRIVAL = 1;
pub const CreateDialogIndirect = CreateDialogIndirectA;
pub const FACILITY_WINDOWSUPDATE = 36;
pub const CAL_SLONGDATE = 6;
pub const FoldString = FoldStringA;
pub const GL_ID_INPUTSYMBOL = 39;
pub const ERROR_DS_CANT_REM_MISSING_ATT_VAL = c_long(8325);
pub const S_SERDVL = -9;
pub const LOCALE_NOUSEROVERRIDE = 2147483648;
pub const ERROR_PRIVATE_DIALOG_INDEX = c_long(1415);
pub const PSINJECT_PSADOBE = 2;
pub const SPI_SETAUDIODESCRIPTION = 117;
pub const SPI_SETFOCUSBORDERHEIGHT = 8209;
pub const MK_SHIFT = 4;
pub const MUI_FILETYPE_NOT_LANGUAGE_NEUTRAL = 1;
pub const __BMI2__ = 1;
pub const MEM_REPLACE_PLACEHOLDER = 16384;
pub const VIEW_S_FIRST = c_long(262464);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_KE = c_long(13833);
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;
pub const ERROR_LOGON_SESSION_EXISTS = c_long(1363);
pub const SDC_FORCE_MODE_ENUMERATION = 4096;
pub const STARTF_USEPOSITION = 4;
pub const WM_SETICON = 128;
pub const NUMBRUSHES = 16;
pub const INIT_ONCE_STATIC_INIT = RTL_RUN_ONCE_INIT;
pub const ERROR_EVT_FILTER_NOTELTSET = c_long(15015);
pub const _WIN32_IE_WIN7 = _WIN32_IE_IE80;
pub const HEAP_GROWABLE = 2;
pub const __corei7 = 1;
pub const VER_SUITE_BACKOFFICE = 4;
pub const FRAME_FPO = 0;
pub const RPC_S_INVALID_TIMEOUT = c_long(1709);
pub const WS_EX_RIGHTSCROLLBAR = c_long(0);
pub const DWL_MSGRESULT = 0;
pub const DSS_DISABLED = 32;
pub const DNS_ERROR_PACKET_FMT_BASE = 9500;
pub const SPI_GETMOUSEVANISH = 4128;
pub const VK_NAVIGATION_VIEW = 136;
pub const __file_parser_library = typ;
pub const InterlockedIncrementRelease = _InterlockedIncrement;
pub const SUBLANG_VIETNAMESE_VIETNAM = 1;
pub const PS_ENDCAP_MASK = 3840;
pub const ERROR_DS_ATT_VAL_ALREADY_EXISTS = c_long(8323);
pub const CTRY_LEBANON = 961;
pub const NLS_ALPHANUMERIC = 0;
pub const CS_DBLCLKS = 8;
pub const NTDDI_WS08SP4 = NTDDI_WIN6SP4;
pub const ENABLE_AUTO_POSITION = 256;
pub const TRANSACTION_MANAGER_COMMIT_SYSTEM_HIVES = 4;
pub const STATUS_ABANDONED_WAIT_0 = if (@typeInfo(@TypeOf(c_long(128))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(128)) else if (@typeInfo(@TypeOf(c_long(128))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(128)) else @as(DWORD, c_long(128));
pub const DRIVE_NO_ROOT_DIR = 1;
pub const LINGUISTIC_IGNORECASE = 16;
pub const EVENT_CONSOLE_UPDATE_SCROLL = 16388;
pub const IMAGE_REL_ARM64_REL21 = 5;
pub const ERROR_INVALID_DRIVE = c_long(15);
pub const LOCALE_IPOSSIGNPOSN = 82;
pub const ERROR_IPSEC_IKE_NO_MM_POLICY = c_long(13850);
pub const NTDDI_WIN6SP4 = 100664320;
pub const FACILITY_DRVSERVICING = 136;
pub const IMAGE_REL_AMD64_INDIR_CALL = 25;
pub const SPI_GETGRADIENTCAPTIONS = 4104;
pub const LOCALE_ICOUNTRY = LOCALE_IDIALINGCODE;
pub const IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;
pub const UNW_FLAG_UHANDLER = 2;
pub const VK_LCONTROL = 162;
pub const REG_PROCESS_APPKEY = 1;
pub const IMAGE_REL_CEE_ADDR32NB = 3;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN = c_long(9994);
pub const EVENT_SYSTEM_DIALOGSTART = 16;
pub const PRODUCT_DATACENTER_SERVER_V = 37;
pub const ES_OEMCONVERT = c_long(1024);
pub const ERROR_LOG_HARD_ERROR = c_long(718);
pub const __inner_adt_type_props = typ;
pub const RPC_S_WRONG_KIND_OF_BINDING = c_long(1701);
pub const __CLFLUSHOPT__ = 1;
pub const SMTO_ABORTIFHUNG = 2;
pub const WSAEREFUSED = c_long(10112);
pub const ERROR_INVALID_WORKSTATION = c_long(1329);
pub const DISPLAYCONFIG_PATH_TARGET_MODE_IDX_INVALID = 65535;
pub const ERROR_CANT_WAIT = c_long(554);
pub const ERROR_SXS_DUPLICATE_WINDOWCLASS_NAME = c_long(14022);
pub const MOUSEWHEEL_ROUTING_MOUSE_POS = 2;
pub const TOKEN_EXECUTE = STANDARD_RIGHTS_EXECUTE;
pub const FF_ROMAN = 1 << 4;
pub const EVENT_SYSTEM_MOVESIZEEND = 11;
pub const ERROR_WAIT_63 = c_long(734);
pub const ERROR_SXS_XML_E_INVALID_STANDALONE = c_long(14070);
pub const WGL_FONT_POLYGONS = 1;
pub const GCPCLASS_POSTBOUNDLTR = 32;
pub const GCL_CBCLSEXTRA = -20;
pub const ERROR_RM_ALREADY_STARTED = c_long(6822);
pub const WH_MSGFILTER = -1;
pub const VK_GAMEPAD_LEFT_SHOULDER = 200;
pub const CLAIM_SECURITY_ATTRIBUTE_USE_FOR_DENY_ONLY = 4;
pub const EALREADY = 103;
pub const PSINJECT_ENDSETUP = 17;
pub const SUBLANG_ARABIC_YEMEN = 9;
pub const ERROR_NOTHING_TO_TERMINATE = c_long(758);
pub const FLS_MAXIMUM_AVAILABLE = 4080;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 8;
pub const REALTIME_PRIORITY_CLASS = 256;
pub const SE_SIGNING_LEVEL_CUSTOM_7 = 13;
pub const APPMODEL_ERROR_PACKAGE_NOT_AVAILABLE = c_long(15706);
pub const ERROR_SECUREBOOT_POLICY_UNKNOWN = c_long(4428);
pub const QDI_GETDIBITS = 2;
pub const DNS_ERROR_SCOPE_DOES_NOT_EXIST = c_long(9959);
pub const EMR_ELLIPSE = 42;
pub const SECURITY_LOGON_IDS_RID = c_long(5);
pub const ERROR_REQUEST_OUT_OF_SEQUENCE = c_long(776);
pub const ERROR_FS_DRIVER_REQUIRED = c_long(588);
pub const RegisterClass = RegisterClassA;
pub const TPM_RETURNCMD = c_long(256);
pub const MUTANT_QUERY_STATE = 1;
pub const META_OFFSETCLIPRGN = 544;
pub const IME_CAND_STROKE = 5;
pub const SUBLANG_MACEDONIAN_MACEDONIA = 1;
pub const ERROR_PRI_MERGE_ADD_FILE_FAILED = c_long(15151);
pub const HEBREW_CHARSET = 177;
pub const SBM_GETRANGE = 227;
pub const InterlockedExchangeAdd64 = _InterlockedExchangeAdd64;
pub const FILE_ATTRIBUTE_UNPINNED = 1048576;
pub const EnumSystemLocales = EnumSystemLocalesA;
pub const FF_SCRIPT = 4 << 4;
pub const SPI_GETPENDRAGOUTTHRESHOLD = 134;
pub const ERROR_NO_UNICODE_TRANSLATION = c_long(1113);
pub const EMR_SETMAPPERFLAGS = 16;
pub const SIZEZOOMHIDE = SIZE_MAXHIDE;
pub const LANG_CORSICAN = 131;
pub const ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = c_long(8376);
pub const IMAGE_FILE_MACHINE_ALPHA64 = 644;
pub const ERROR_DISK_CORRUPT = c_long(1393);
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_MACHINE = c_long(15650);
pub const CTRL_SHUTDOWN_EVENT = 6;
pub const CS_HREDRAW = 2;
pub const IMAGE_ARCHIVE_END = "`\n";
pub const HBMMENU_MBAR_MINIMIZE = if (@typeInfo(@TypeOf(3)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 3) else if (@typeInfo(@TypeOf(3)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 3) else @as(HBITMAP, 3);
pub const SPI_SETACCESSTIMEOUT = 61;
pub const MDM_V110_SPEED_1DOT2K = 1;
pub const IMAGE_REL_ALPHA_PAIR = 12;
pub const SERVICE_START_REASON_DEMAND = 1;
pub const ABORTDOC = 2;
pub const DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST = c_long(9952);
pub const HELP_WM_HELP = 12;
pub const RPC_X_BYTE_COUNT_TOO_SMALL = c_long(1782);
pub const SECURITY_CREATOR_OWNER_RID = c_long(0);
pub const HTTOP = 12;
pub const EMARCH_ENC_I17_IMM7B_SIZE_X = 7;
pub const LOCALE_TRANSIENT_KEYBOARD3 = 10240;
pub const GDICOMMENT_MULTIFORMATS = 1073741828;
pub const SB_LINELEFT = 0;
pub const SUBLANG_ARMENIAN_ARMENIA = 1;
pub const SECURITY_NETWORK_RID = c_long(2);
pub const DTR_CONTROL_ENABLE = 1;
pub const RID_HEADER = 268435461;
pub const MDM_BEARERMODE_ISDN = 1;
pub const ERROR_NOT_SUPPORTED_IN_APPCONTAINER = c_long(4252);
pub const ODT_BUTTON = 4;
pub const IDHOT_SNAPWINDOW = -1;
pub const ERROR_RESOURCE_LANG_NOT_FOUND = c_long(1815);
pub const DNS_ERROR_DNSSEC_BASE = 9100;
pub const HWND_TOP = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(HWND, 0) else @as(HWND, 0);
pub const OpenMutex = OpenMutexA;
pub const __requires_lock_not_held = lock;
pub const MILCORE_TS_QUERYVER_RESULT_FALSE = 0;
pub const PC_WINDPOLYGON = 4;
pub const CS_BYTEALIGNCLIENT = 4096;
pub const ERROR_DS_CANT_FIND_DSA_OBJ = c_long(8419);
pub const WM_SETTINGCHANGE = WM_WININICHANGE;
pub const LCMAP_HALFWIDTH = 4194304;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMTSVC = 61;
pub const __UINT_LEAST64_MAX__ = c_ulonglong(18446744073709551615);
pub const META_SETDIBTODEV = 3379;
pub const PM_NOREMOVE = 0;
pub const ERROR_DS_DUP_MAPI_ID = c_long(8380);
pub const ERROR_QUORUM_RESOURCE_ONLINE_FAILED = c_long(5027);
pub const SERVICES_FAILED_DATABASE = SERVICES_FAILED_DATABASEA;
pub const RPC_S_UNSUPPORTED_NAME_SYNTAX = c_long(1737);
pub const PAN_STROKE_GRADUAL_DIAG = 2;
pub const VK_F12 = 123;
pub const ERROR_SEVERITY_WARNING = 2147483648;
pub const SC_CONTEXTHELP = 61824;
pub const BF_MIDDLE = 2048;
pub const ERROR_SEVERITY_SUCCESS = 0;
pub const AW_ACTIVATE = 131072;
pub const JOB_OBJECT_MSG_EXIT_PROCESS = 7;
pub const BATTERY_DISCHARGE_FLAGS_EVENTCODE_MASK = 7;
pub const FACILITY_WIA = 33;
pub const SPI_GETDRAGFROMMAXIMIZE = 140;
pub const CreateHardLinkTransacted = CreateHardLinkTransactedA;
pub const WriteLongPtrNoFence = WriteNoFence64;
pub const MSGFLT_RESET = 0;
pub const CompareString = CompareStringA;
pub const MNS_NOTIFYBYPOS = 134217728;
pub const DOMAIN_ALIAS_RID_AUTHORIZATIONACCESS = c_long(560);
pub const ERROR_FILE_IDENTITY_NOT_PERSISTENT = c_long(6823);
pub const LOGON32_PROVIDER_VIRTUAL = 4;
pub const __file_parser_class = typ;
pub const CB_GETCOUNT = 326;
pub const EnumDisplaySettingsEx = EnumDisplaySettingsExA;
pub const TAPE_DRIVE_SELECT = 2;
pub const WS_EX_LTRREADING = c_long(0);
pub const RemoveFontResourceEx = RemoveFontResourceExA;
pub const EMR_POLYPOLYLINE = 7;
pub const GESTURECONFIGMAXCOUNT = 256;
pub const BS_LEFTTEXT = c_long(32);
pub const LCMAP_SORTHANDLE = 536870912;
pub const SETKERNTRACK = 770;
pub const InterlockedAddRelease = _InlineInterlockedAdd;
pub const GESTUREVISUALIZATION_DOUBLETAP = 2;
pub const SPI_SETDOUBLECLKWIDTH = 29;
pub const TIME_FORCE24HOURFORMAT = 8;
pub const _WIN32_IE_WIN6 = _WIN32_IE_IE70;
pub const PRODUCT_CORE_CONNECTED = 111;
pub const DEVICEFAMILYDEVICEFORM_HOME_AUTOMATION = 18;
pub const PO_THROTTLE_DEGRADE = 2;
pub const CRM_PROTOCOL_DYNAMIC_MARSHAL_INFO = 2;
pub const CharNext = CharNextA;
pub const GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS = 4;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_X_DEVKIT = 33;
pub const HSHELL_LANGUAGE = 8;
pub const IMAGE_SCN_MEM_NOT_PAGED = 134217728;
pub const WS_TILEDWINDOW = WS_OVERLAPPEDWINDOW;
pub const ERROR_ALREADY_WIN32 = c_long(719);
pub const PROCESSOR_HITACHI_SH3E = 10004;
pub const ERROR_CTX_INVALID_PD = c_long(7002);
pub const FACILITY_JSCRIPT = 2306;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_PROGRESS = 32;
pub const RDH_RECTANGLES = 1;
pub const InterlockedIncrementAcquire64 = _InterlockedIncrement64;
pub const WM_SYSCOLORCHANGE = 21;
pub const DT_INTERNAL = 4096;
pub const SE_ACCESS_CHECK_VALID_FLAGS = 8;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_POS_X = 13;
pub const IMAGE_HOT_PATCH_BASE_CAN_ROLL_BACK = 2;
pub const ERROR_EVT_FILTER_UNSUPPORTEDOP = c_long(15020);
pub const EMR_PAINTRGN = 74;
pub const EM_GETMARGINS = 212;
pub const MAX_LEADBYTES = 12;
pub const DOMAIN_ALIAS_RID_CACHEABLE_PRINCIPALS_GROUP = c_long(571);
pub const IMAGE_REL_PPC_BRNTAKEN = 1024;
pub const ERROR_SHUTDOWN_IS_SCHEDULED = c_long(1190);
pub const STATUS_ACCESS_VIOLATION = if (@typeInfo(@TypeOf(c_long(3221225477))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225477)) else if (@typeInfo(@TypeOf(c_long(3221225477))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225477)) else @as(DWORD, c_long(3221225477));
pub const PAN_LETT_NORMAL_OFF_CENTER = 7;
pub const PCF_RTSCTS = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2) else @as(DWORD, 2);
pub const __RDRND__ = 1;
pub const TRANSACTION_NOTIFY_MARSHAL = 131072;
pub const DCBA_FACEUPRIGHT = 3;
pub const ERROR_WINDOW_NOT_COMBOBOX = c_long(1423);
pub const PEERDIST_ERROR_INVALIDATED = c_long(4057);
pub const ERROR_DS_AUDIT_FAILURE = c_long(8625);
pub const DMPAPER_A5_TRANSVERSE = 61;
pub const COPYFILE2_MESSAGE_COPY_OFFLOAD = c_long(1);
pub const SERVICE_ACCEPT_NETBINDCHANGE = 16;
pub const SPI_GETLISTBOXSMOOTHSCROLLING = 4102;
pub const HEAP_PSEUDO_TAG_FLAG = 32768;
pub const ERROR_IPSEC_IKE_ENCRYPT = c_long(13866);
pub const GDICOMMENT_UNICODE_STRING = 64;
pub const FRS_ERR_AUTHENTICATION = c_long(8008);
pub const ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = c_long(7005);
pub const SYSTEM_MANDATORY_LABEL_NO_WRITE_UP = 1;
pub const ERROR_FOUND_OUT_OF_SCOPE = c_long(601);
pub const ERROR_INSTALL_SUSPEND = c_long(1604);
pub const VFF_BUFFTOOSMALL = 4;
pub const ERROR_IPSEC_IKE_LOAD_FAILED = c_long(13876);
pub const PRODUCT_ANDROMEDA = 184;
pub const WS_EX_MDICHILD = c_long(64);
pub const IMAGE_REL_BASED_HIGHADJ = 4;
pub const LEFT_ALT_PRESSED = 2;
pub const IMAGE_REL_IA64_PCREL60M = 25;
pub const CreateFileMappingNuma = CreateFileMappingNumaA;
pub const DFCS_BUTTONRADIO = 4;
pub const GET_MODULE_HANDLE_EX_FLAG_PIN = 1;
pub const DMICMMETHOD_SYSTEM = 2;
pub const SYNCHRONIZATION_BARRIER_FLAGS_SPIN_ONLY = 1;
pub const FILE_SHARE_WRITE = 2;
pub const IMAGE_REL_CEE_TOKEN = 6;
pub const LWA_ALPHA = 2;
pub const ERROR_API_UNAVAILABLE = c_long(15841);
pub const IME_ESC_PRIVATE_FIRST = 2048;
pub const UNALIGNED = __unaligned;
pub const UNPROTECTED_SACL_SECURITY_INFORMATION = c_long(268435456);
pub const EMR_TRANSPARENTBLT = 116;
pub const HIBERFILE_TYPE_NONE = 0;
pub const CAL_SERASTRING = 4;
pub const SPI_GETMOUSECLICKLOCKTIME = 8200;
pub const SE_SIGNING_LEVEL_CUSTOM_6 = 15;
pub const ERROR_ADAP_HDW_ERR = c_long(57);
pub const MAX_TOUCH_PREDICTION_FILTER_TAPS = 3;
pub const VIFF_DONTDELETEOLD = 2;
pub const PROFILE_SERVER = 1073741824;
pub const __UINTMAX_FMTu__ = "llu";
pub const WMSZ_BOTTOMRIGHT = 8;
pub const APPCOMMAND_BROWSER_SEARCH = 5;
pub const ERROR_DS_CLASS_MUST_BE_CONCRETE = c_long(8359);
pub const S_SERDDR = -14;
pub const LANG_TATAR = 68;
pub const BS_PATTERN8X8 = 7;
pub const CDS_GLOBAL = 8;
pub const EM_SETMARGINS = 211;
pub const S_QUEUEEMPTY = 0;
pub const BM_SETCHECK = 241;
pub const PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_MASK = if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 24) else if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 24) else c_uint(3)(i64 << 24);
pub const WT_EXECUTEONLYONCE = 8;
pub const FAST_FAIL_INVALID_IAT = 49;
pub const RegisterClassEx = RegisterClassExA;
pub const MWT_MIN = MWT_IDENTITY;
pub const IMAGE_REL_ALPHA_GPREL32 = 3;
pub const ACCESS_MIN_MS_ACE_TYPE = 0;
pub const WM_CTLCOLORLISTBOX = 308;
pub const LOCALE_SMONTHOUSANDSEP = 23;
pub const SPI_SETSERIALKEYS = 63;
pub const ERROR_TAG_NOT_FOUND = c_long(2012);
pub const TAPE_DRIVE_LOCK_UNLOCK = 2147483652;
pub const SECURITY_LOCAL_ACCOUNT_RID = c_long(113);
pub const FILE_SUPPORTS_OBJECT_IDS = 65536;
pub const HTBOTTOMLEFT = 16;
pub const ERROR_SYSTEM_INTEGRITY_SUPPLEMENTAL_POLICY_NOT_AUTHORIZED = c_long(4555);
pub const WS_EX_LAYOUTRTL = c_long(4194304);
pub const OBJID_ALERT = if (@typeInfo(@TypeOf(4294967286)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967286) else if (@typeInfo(@TypeOf(4294967286)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967286) else @as(LONG, 4294967286);
pub const SCS_OS216_BINARY = 5;
pub const COMPRESSION_FORMAT_XPRESS_HUFF = 4;
pub const GL_ID_TYPINGERROR = 33;
pub const DMBIN_LOWER = 2;
pub const MF_HILITE = c_long(128);
pub const PDC_ARRIVAL = 1;
pub const BSF_SENDNOTIFYMESSAGE = 256;
pub const SERVICE_CONFIG_TRIGGER_INFO = 8;
pub const DefineDosDevice = DefineDosDeviceA;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_ON = 1 << 20;
pub const GMEM_DDESHARE = 8192;
pub const SC_MINIMIZE = 61472;
pub const GetRawInputDeviceInfo = GetRawInputDeviceInfoA;
pub const CS_VREDRAW = 1;
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_PRESENT = 1024;
pub const MOVEFILE_COPY_ALLOWED = 2;
pub const DEVICEFAMILYINFOENUM_WINDOWS_PHONE_8X = 2;
pub const __MIDL_CONST = @"const";
pub const DMDITHER_COARSE = 2;
pub const CTRY_CZECH = 420;
pub const __UINT64_FMTx__ = "llx";
pub const EVENT_SYSTEM_ALERT = 2;
pub const CC_CHORD = 4;
pub const SPI_GETACCESSTIMEOUT = 60;
pub const STATE_SYSTEM_FOCUSED = 4;
pub const CTRY_AZERBAIJAN = 994;
pub const SetFileAttributes = SetFileAttributesA;
pub const GetDefaultCommConfig = GetDefaultCommConfigA;
pub const TRANSACTION_ENLIST = 4;
pub const ERROR_TRANSACTIONMANAGER_RECOVERY_NAME_COLLISION = c_long(6720);
pub const VK_F13 = 124;
pub const PROCESSOR_PERF_BOOST_MODE_DISABLED = 0;
pub const EMR_CLOSEFIGURE = 61;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_MASK = 3 << 20;
pub const DNS_ERROR_NON_RFC_NAME = c_long(9556);
pub const __UINTPTR_WIDTH__ = 64;
pub const MOUSE_VIRTUAL_DESKTOP = 2;
pub const XSTATE_ALIGN_BIT = 1;
pub const ERROR_TRANSACTION_NOT_ROOT = c_long(6721);
pub const HELPINFO_WINDOW = 1;
pub const SP_APPABORT = -2;
pub const MNS_MODELESS = 1073741824;
pub const ERROR_CANTWRITE = c_long(1013);
pub const APPMODEL_ERROR_NO_APPLICATION = c_long(15703);
pub const PPM_PERFORMANCE_IMPLEMENTATION_PCCV1 = 2;
pub const OPAQUE = 2;
pub const WM_TIMECHANGE = 30;
pub const RDW_ALLCHILDREN = 128;
pub const C1_DIGIT = 4;
pub const VIF_WRITEPROT = c_long(64);
pub const SERVICE_STOP_REASON_MINOR_SECURITY = 16;
pub const ERROR_PATCH_PACKAGE_OPEN_FAILED = c_long(1635);
pub const __AES__ = 1;
pub const PROCESS_SUSPEND_RESUME = 2048;
pub const FIND_FIRST_EX_LARGE_FETCH = 2;
pub const ERROR_NETNAME_DELETED = c_long(64);
pub const ERROR_FSFILTER_OP_COMPLETED_SUCCESSFULLY = c_long(762);
pub const SPI_SETFOREGROUNDLOCKTIMEOUT = 8193;
pub const CAL_KOREA = 5;
pub const EVENTLOG_START_PAIRED_EVENT = 1;
pub const SORT_DIGITSASNUMBERS = 8;
pub const GetVersionEx = GetVersionExA;
pub const QS_MOUSEBUTTON = 4;
pub const ERROR_DS_COMPARE_TRUE = c_long(8230);
pub const X3_IMM20_INST_WORD_X = 3;
pub const FKF_CONFIRMHOTKEY = 8;
pub const ERROR_HASH_NOT_PRESENT = c_long(15301);
pub const INPUT_KEYBOARD = 1;
pub const ERROR_DRIVER_FAILED_PRIOR_UNLOAD = c_long(654);
pub const SE_SECURITY_DESCRIPTOR_VALID_FLAGS = 7;
pub const COMPRESSION_FORMAT_XPRESS = 3;
pub const ERROR_DECRYPTION_FAILED = c_long(6001);
pub const ERROR_INVALID_SERVICENAME = c_long(1213);
pub const LOCALE_SNATIVEDISPLAYNAME = 115;
pub const ERROR_DS_UNABLE_TO_SURRENDER_ROLES = c_long(8435);
pub const STATUS_DLL_INIT_FAILED = if (@typeInfo(@TypeOf(c_long(3221225794))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225794)) else if (@typeInfo(@TypeOf(c_long(3221225794))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225794)) else @as(DWORD, c_long(3221225794));
pub const DNS_ERROR_KEYMASTER_REQUIRED = c_long(9101);
pub const ALTNUMPAD_BIT = 67108864;
pub const ERROR_SINGLETON_RESOURCE_INSTALLED_IN_ACTIVE_USER = c_long(15653);
pub const ERROR_NO_PHYSICALLY_ALIGNED_FREE_SPACE_FOUND = c_long(408);
pub const ERROR_HIBERNATION_FAILURE = c_long(656);
pub const SHTDN_REASON_VALID_BIT_MASK = 3238002687;
pub const WOW64_SIZE_OF_80387_REGISTERS = 80;
pub const STREAM_CONTAINS_PROPERTIES = 4;
pub const FILE_ATTRIBUTE_STRICTLY_SEQUENTIAL = 536870912;
pub const ERROR_CLOUD_FILE_IN_USE = c_long(391);
pub const CM_CMYK_COLOR = 4;
pub const CM_IN_GAMUT = 0;
pub const ERROR_WINDOW_OF_OTHER_THREAD = c_long(1408);
pub const X3_IMM20_SIGN_VAL_POS_X = 0;
pub const EM_GETPASSWORDCHAR = 210;
pub const COPY_FILE_RESTARTABLE = 2;
pub const FAST_FAIL_GUARD_ICALL_CHECK_SUPPRESSED = 31;
pub const IMAGE_FILE_RELOCS_STRIPPED = 1;
pub const PROTECTION_LEVEL_WINTCB_LIGHT = 0;
pub const __clang_major__ = 8;
pub const IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;
pub const MEM_EXTENDED_PARAMETER_GRAPHICS = 1;
pub const LANG_SWAHILI = 65;
pub const SCRUB_DATA_INPUT_FLAG_SKIP_NON_INTEGRITY_DATA = 4;
pub const DISCHARGE_POLICY_LOW = 1;
pub const ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = c_long(5088);
pub const SDC_SAVE_TO_DATABASE = 512;
pub const NID_EXTERNAL_PEN = 8;
pub const PBT_APMRESUMECRITICAL = 6;
pub const DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2 = if (@typeInfo(@TypeOf(-4)) == @import("builtin").TypeId.Pointer) @ptrCast(DPI_AWARENESS_CONTEXT, -4) else if (@typeInfo(@TypeOf(-4)) == @import("builtin").TypeId.Int) @intToPtr(DPI_AWARENESS_CONTEXT, -4) else @as(DPI_AWARENESS_CONTEXT, -4);
pub const ERROR_CLUSTER_POISONED = c_long(5907);
pub const SHTDN_REASON_MINOR_SECURITYFIX = 18;
pub const ERROR_POSSIBLE_DEADLOCK = c_long(1131);
pub const ERROR_SYSTEM_PROCESS_TERMINATED = c_long(591);
pub const DBG_RIPEXCEPTION = if (@typeInfo(@TypeOf(c_long(1073807367))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807367)) else if (@typeInfo(@TypeOf(c_long(1073807367))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807367)) else @as(DWORD, c_long(1073807367));
pub const CONVERT10_E_LAST = c_long(2147746255);
pub const HTTOPRIGHT = 14;
pub const MAP_PRECOMPOSED = 32;
pub const RTL_CORRELATION_VECTOR_V1_PREFIX_LENGTH = 16;
pub const CONNECT_RESERVED = 4278190080;
pub const META_CREATEPATTERNBRUSH = 505;
pub const AW_VER_NEGATIVE = 8;
pub const SERVICE_STOP_REASON_MINOR_OTHERDRIVER = 12;
pub const ERROR_IS_SUBST_PATH = c_long(146);
pub const NTM_TYPE1 = 1048576;
pub const CAL_SYEARMONTH = 47;
pub const TAPE_DRIVE_REVERSE_POSITION = 2151677952;
pub const ERROR_INVALID_PARAMETER = c_long(87);
pub const SE_SIGNING_LEVEL_CUSTOM_5 = 10;
pub const GCPCLASS_LATINNUMERICTERMINATOR = 6;
pub const LOCALE_INEGSEPBYSPACE = 87;
pub const EMR_DELETECOLORSPACE = 101;
pub const SB_PAGERIGHT = 3;
pub const SUBLANG_ARABIC_KUWAIT = 13;
pub const ERROR_UNKNOWN_PROPERTY = c_long(1608);
pub const LOCALE_IREADINGLAYOUT = 112;
pub const PAN_SERIF_ROUNDED = 15;
pub const SAVE_CTM = 4101;
pub const SERVICE_TRIGGER_ACTION_SERVICE_STOP = 2;
pub const SPI_GETTOUCHPREDICTIONPARAMETERS = 156;
pub const COLOR_BTNFACE = 15;
pub const _Acquires_exclusive_lock_ = lock;
pub const META_SETWINDOWORG = 523;
pub const GGO_GRAY2_BITMAP = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 36) else if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 36) else c_uint(2)(i64 << 36);
pub const LR_MONOCHROME = 1;
pub const PC_TRAPEZOID = 4;
pub const VIEW_E_LAST = c_long(2147746127);
pub const FIND_FIRST_EX_CASE_SENSITIVE = 1;
pub const RIM_INPUTSINK = 1;
pub const ES_CONTINUOUS = if (@typeInfo(@TypeOf(2147483648)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2147483648) else if (@typeInfo(@TypeOf(2147483648)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2147483648) else @as(DWORD, 2147483648);
pub const ERROR_MUI_INVALID_FILE = c_long(15101);
pub const FACILITY_XBOX = 2339;
pub const CAL_SABBREVDAYNAME2 = 15;
pub const STATUS_USER_APC = if (@typeInfo(@TypeOf(c_long(192))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(192)) else if (@typeInfo(@TypeOf(c_long(192))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(192)) else @as(DWORD, c_long(192));
pub const ERROR_CANT_CROSS_RM_BOUNDARY = c_long(6825);
pub const ERROR_DRIVERS_LEAKING_LOCKED_PAGES = c_long(729);
pub const ERROR_DS_KEY_NOT_UNIQUE = c_long(8527);
pub const ERROR_INVALID_MEDIA = c_long(4300);
pub const ERROR_IPSEC_IKE_SA_REAPED = c_long(13808);
pub const STATUS_DATATYPE_MISALIGNMENT = if (@typeInfo(@TypeOf(c_long(2147483650))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483650)) else if (@typeInfo(@TypeOf(c_long(2147483650))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483650)) else @as(DWORD, c_long(2147483650));
pub const OPERATION_END_DISCARD = 1;
pub const FILE_LIST_DIRECTORY = 1;
pub const ERROR_INVALID_ORDINAL = c_long(182);
pub const LOCALE_TRANSIENT_KEYBOARD1 = 8192;
pub const ERROR_FLOPPY_WRONG_CYLINDER = c_long(1123);
pub const SHOW_OPENWINDOW = 1;
pub const PROCESS_CREATION_CHILD_PROCESS_OVERRIDE = 2;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_HMODULE = 8;
pub const GetMonitorInfo = GetMonitorInfoA;
pub const KF_EXTENDED = 256;
pub const HELP_CONTEXT = c_long(1);
pub const HSHELL_ACTIVATESHELLWINDOW = 3;
pub const SE_PRIVILEGE_REMOVED = c_long(4);
pub const ERROR_CURRENT_TRANSACTION_NOT_VALID = c_long(6714);
pub const MOD_ALT = 1;
pub const MUI_PARTIAL_LANGUAGE = 2;
pub const DMPAPER_A6_ROTATED = 83;
pub const CLIPBRD_S_LAST = c_long(262623);
pub const WINSTORAGEAPI = DECLSPEC_IMPORT;
pub const IMAGE_REL_ARM64_PAGEOFFSET_12A = 6;
pub const JOB_OBJECT_CPU_RATE_CONTROL_HARD_CAP = 4;
pub const WM_ENDSESSION = 22;
pub const ERROR_DC_NOT_FOUND = c_long(1425);
pub const NTM_NONNEGATIVE_AC = 65536;
pub const VK_F10 = 121;
pub const PC_NONE = 0;
pub const CLIENTSITE_E_FIRST = c_long(2147746192);
pub const MEM_WRITE_WATCH = 2097152;
pub const SORT_STRINGSORT = 4096;
pub const SEF_MACL_NO_EXECUTE_UP = 1024;
pub const ICM_ADDPROFILE = 1;
pub const ERROR_BAD_USERNAME = c_long(2202);
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_ADDL = 60;
pub const ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = c_long(8555);
pub const IMAGE_SCN_MEM_SHARED = 268435456;
pub const SERVICE_STOP_REASON_MAJOR_OTHER = 65536;
pub const ERROR_TOO_MANY_MUXWAITERS = c_long(152);
pub const SM_SHUTTINGDOWN = 8192;
pub const SM_CYKANJIWINDOW = 18;
pub const XSTATE_MASK_LEGACY_SSE = if (@typeInfo(@TypeOf(i64 << XSTATE_LEGACY_SSE)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_LEGACY_SSE) else if (@typeInfo(@TypeOf(i64 << XSTATE_LEGACY_SSE)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_LEGACY_SSE) else c_uint(1)(i64 << XSTATE_LEGACY_SSE);
pub const RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO = 16777216;
pub const LC_POLYLINE = 2;
pub const FACILITY_AUDCLNT = 2185;
pub const SKF_STICKYKEYSON = 1;
pub const WM_CTLCOLORMSGBOX = 306;
pub const ERROR_ALREADY_REGISTERED = c_long(1242);
pub const SPI_SETMOUSESPEED = 113;
pub const MDM_X75_DATA_T_70 = 3;
pub const WS_CLIPCHILDREN = c_long(33554432);
pub const FILE_NOTIFY_CHANGE_SECURITY = 256;
pub const MAXLONG = 2147483647;
pub const DOF_MULTIPLE = 32772;
pub const __INT64_MAX__ = c_longlong(9223372036854775807);
pub const ERROR_INVALID_TASK_NAME = c_long(1550);
pub const ERROR_PRI_MERGE_LOAD_FILE_FAILED = c_long(15150);
pub const __releases_lock = lock;
pub const SPI_GETICONTITLELOGFONT = 31;
pub const GMEM_LOWER = GMEM_NOT_BANKED;
pub const CTRY_JAMAICA = 1;
pub const ERROR_IPSEC_MM_POLICY_EXISTS = c_long(13003);
pub const PAN_XHEIGHT_CONSTANT_LARGE = 4;
pub const ERROR_INVALID_MESSAGENAME = c_long(1217);
pub const ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = c_long(8540);
pub const VK_LAUNCH_MAIL = 180;
pub const EVENT_CONSOLE_CARET = 16385;
pub const IMAGE_REL_I386_SECREL7 = 13;
pub const ERROR_CANTREAD = c_long(1012);
pub const EMR_SETBKMODE = 18;
pub const IMAGE_COMDAT_SELECT_LARGEST = 6;
pub const SS_RIGHTJUST = c_long(1024);
pub const IO_REPARSE_TAG_CLOUD_D = c_long(2415972378);
pub const MDM_PROTOCOLID_HDLCPPP = 1;
pub const FACILITY_WINCODEC_DWRITE_DWM = 2200;
pub const ERROR_SERVICE_ALREADY_RUNNING = c_long(1056);
pub const WM_MDIRESTORE = 547;
pub const DI_NORMAL = 3;
pub const GL_LEVEL_FATAL = 1;
pub const ERROR_CORRUPT_SYSTEM_FILE = c_long(634);
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INT64 = 1;
pub const GC_TWOFINGERTAP = 1;
pub const DTR_CONTROL_HANDSHAKE = 2;
pub const ERROR_INVALID_EXE_SIGNATURE = c_long(191);
pub const VIF_CANNOTCREATE = c_long(2048);
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const DNS_ERROR_BAD_PACKET = c_long(9502);
pub const SERVICE_CONFIG_DESCRIPTION = 1;
pub const TAPE_DRIVE_SPACE_IMMEDIATE = 2155872256;
pub const DMDUP_VERTICAL = 2;
pub const NTDDI_VERSION = WDK_NTDDI_VERSION;
pub const _Deref2_ret1_impl_ = p1;
pub const MNGO_NOERROR = 1;
pub const ANSI_CHARSET = 0;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_MASK = if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 52) else if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 52) else c_uint(3)(i64 << 52);
pub const MIIM_BITMAP = 128;
pub const BLACKONWHITE = 1;
pub const ERROR_DS_SEC_DESC_INVALID = c_long(8354);
pub const MONITORINFOF_PRIMARY = 1;
pub const FS_CHINESETRAD = c_long(1048576);
pub const ERROR_CLOUD_FILE_INSUFFICIENT_RESOURCES = c_long(387);
pub const PROCESS_CREATE_PROCESS = 128;
pub const CO_E_FIRST = c_long(2147746288);
pub const LGRPID_INSTALLED = 1;
pub const FACILITY_PIDGENX = 2561;
pub const OBJ_PAL = 5;
pub const ERROR_LOG_POLICY_CONFLICT = c_long(6622);
pub const TAPE_UNLOCK = c_long(4);
pub const DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = c_long(9710);
pub const DMPAPER_JENV_CHOU4 = 74;
pub const DOMAIN_ALIAS_RID_EVENT_LOG_READERS_GROUP = c_long(573);
pub const __DBL_MIN_EXP__ = -1021;
pub const ERROR_SXS_XML_E_UNBALANCEDPAREN = c_long(14040);
pub const DFCS_MONO = 32768;
pub const C1_BLANK = 64;
pub const PS_DASH = 1;
pub const CTRY_SLOVAK = 421;
pub const PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_RESERVED = if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 8) else if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 8) else c_uint(3)(i64 << 8);
pub const CTRY_PARAGUAY = 595;
pub const _MM_HINT_T2 = 3;
pub const TA_RTLREADING = 256;
pub const MF_SYSMENU = c_long(8192);
pub const GETTECHNOLGY = 20;
pub const SERVICE_CONTROL_STOP = 1;
pub const GCP_DISPLAYZWG = c_long(4194304);
pub const SE_SIGNING_LEVEL_CUSTOM_4 = 9;
pub const TPM_RIGHTALIGN = c_long(8);
pub const FAST_FAIL_INVALID_BALANCED_TREE = 29;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_MASK = 3 << 12;
pub const META_OFFSETWINDOWORG = 527;
pub const SERVICE_STOP_REASON_MINOR_MAX_CUSTOM = 65535;
pub const DS_CONTROL = c_long(1024);
pub const CONTACTVISUALIZATION_OFF = 0;
pub const CTLCOLOR_LISTBOX = 2;
pub const CAL_SRELATIVELONGDATE = 58;
pub const PEN_FLAG_BARREL = 1;
pub const LB_SELECTSTRING = 396;
pub const ERROR_NET_OPEN_FAILED = c_long(570);
pub const ERROR_EVT_FILTER_INVTEST = c_long(15017);
pub const LCS_GM_GRAPHICS = c_long(2);
pub const _Releases_shared_lock_ = lock;
pub const WS_MAXIMIZEBOX = c_long(65536);
pub const INIT_ONCE_CTX_RESERVED_BITS = RTL_RUN_ONCE_CTX_RESERVED_BITS;
pub const WSAHOST_NOT_FOUND = c_long(11001);
pub const WSAEMSGSIZE = c_long(10040);
pub const FILE_EXECUTE = 32;
pub const SUBLANG_ARABIC_JORDAN = 11;
pub const InterlockedExchangeAcquire = _InterlockedExchange;
pub const ERROR_CLUSTER_RESOURCE_IS_IN_MAINTENANCE_MODE = c_long(5970);
pub const DOMAIN_ALIAS_RID_ADMINS = c_long(544);
pub const ERROR_ACPI_ERROR = c_long(669);
pub const __inner_assume_validated = p;
pub const ERROR_CONNECTION_COUNT_LIMIT = c_long(1238);
pub const ERROR_SXS_DUPLICATE_TLBID = c_long(14025);
pub const CE_MODE = 32768;
pub const ERROR_COM_TASK_STOP_PENDING = c_long(15501);
pub const _Releases_exclusive_lock_ = lock;
pub const ERROR_DS_DRA_SHUTDOWN = c_long(8463);
pub const STATE_SYSTEM_ANIMATED = 16384;
pub const WM_NCXBUTTONDOWN = 171;
pub const CAL_SABBREVDAYNAME3 = 16;
pub const POWER_ACTION_CRITICAL = 2147483648;
pub const WTS_REMOTE_CONNECT = 3;
pub const EM_LINEINDEX = 187;
pub const X3_D_WH_SIGN_VAL_POS_X = 0;
pub const CM_SERVICE_SD_DISK_BOOT_LOAD = 8;
pub const APPCOMMAND_MEDIA_PLAY = 46;
pub const ERROR_SETCOUNT_ON_BAD_LB = c_long(1433);
pub const ERROR_WAKE_SYSTEM_DEBUGGER = c_long(675);
pub const ERROR_SINGLE_INSTANCE_APP = c_long(1152);
pub const ACTIVATION_CONTEXT_SECTION_GLOBAL_OBJECT_RENAME_TABLE = 8;
pub const VK_MEDIA_PREV_TRACK = 177;
pub const GL_ID_READINGCONFLICT = 35;
pub const SUBLANG_ARABIC_SAUDI_ARABIA = 1;
pub const VOS_WINCE = c_long(327680);
pub const TAPE_DRIVE_RELATIVE_BLKS = 2147614720;
pub const ERROR_DS_DOMAIN_NAME_EXISTS_IN_FOREST = c_long(8634);
pub const IME_ESC_GETHELPFILENAME = 4107;
pub const META_CREATEFONTINDIRECT = 763;
pub const SERVICE_ACCEPT_SHUTDOWN = 4;
pub const CDS_RESET_EX = 536870912;
pub const ERROR_DS_NO_CHECKPOINT_WITH_PDC = c_long(8551);
pub const DNS_ERROR_LOAD_ZONESCOPE_FAILED = c_long(9956);
pub const MDMSPKRFLAG_ON = 4;
pub const COPY_FILE_FAIL_IF_EXISTS = 1;
pub const WSAEAFNOSUPPORT = c_long(10047);
pub const ERROR_CLUSTER_SHARED_VOLUME_REDIRECTED = c_long(5966);
pub const SPI_GETSCREENSAVERRUNNING = 114;
pub const POSTSCRIPT_IGNORE = 38;
pub const JOB_OBJECT_IMPERSONATE = 32;
pub const SPI_GETTHREADLOCALINPUTSETTINGS = 4174;
pub const WNetDisconnectDialog1 = WNetDisconnectDialog1A;
pub const CTRY_GREECE = 30;
pub const SECURITY_CRED_TYPE_RID_COUNT = c_long(2);
pub const ERROR_REDIR_PAUSED = c_long(72);
pub const IMAGE_SUBSYSTEM_UNKNOWN = 0;
pub const ERROR_EVT_PUBLISHER_METADATA_NOT_FOUND = c_long(15002);
pub const ERROR_DS_SCHEMA_NOT_LOADED = c_long(8414);
pub const GetClipboardFormatName = GetClipboardFormatNameA;
pub const DEVICEFAMILYDEVICEFORM_PHONE = 1;
pub const DC_PAPERSIZE = 3;
pub const FS_WANSUNG = c_long(524288);
pub const MM_ISOTROPIC = 7;
pub const EVENT_OBJECT_INVOKED = 32787;
pub const VkKeyScanEx = VkKeyScanExA;
pub const DIALOPTION_DIALTONE = 256;
pub const IMAGE_REL_M32R_REFHI = 9;
pub const LB_GETSEL = 391;
pub const PRODUCT_CORE_CONNECTED_N = 113;
pub const IMAGE_REL_MIPS_REFHI = 4;
pub const SECURITY_AUTHENTICATION_KEY_TRUST_RID = c_long(4);
pub const S_SERDSH = -11;
pub const PAGE_GUARD = 256;
pub const VK_F11 = 122;
pub const JOB_OBJECT_CPU_RATE_CONTROL_WEIGHT_BASED = 2;
pub const WM_MENUCOMMAND = 294;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_SWITCHTABLE_BRANCH = 5;
pub const ERROR_MULTIPLE_FAULT_VIOLATION = c_long(640);
pub const ERROR_DS_NO_REF_DOMAIN = c_long(8575);
pub const JOHAB_CHARSET = 130;
pub const ERROR_DS_PARAM_ERROR = c_long(8255);
pub const SERVICES_FAILED_DATABASEA = "ServicesFailed";
pub const SPI_GETSCREENSAVEACTIVE = 16;
pub const ERROR_DS_EXISTS_IN_MAY_HAVE = c_long(8386);
pub const ERROR_SXS_XML_E_UNEXPECTED_WHITESPACE = c_long(14042);
pub const FACILITY_WSB_ONLINE = 133;
pub const __INTPTR_WIDTH__ = 64;
pub const CTRY_UNITED_STATES = 1;
pub const ERROR_DBG_CONTINUE = c_long(767);
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_DEFER = if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 60) else if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 60) else c_uint(0)(i64 << 60);
pub const SendNotifyMessage = SendNotifyMessageA;
pub const GetFirmwareEnvironmentVariableEx = GetFirmwareEnvironmentVariableExA;
pub const BitScanReverse64 = _BitScanReverse64;
pub const EXCEPTION_FLT_OVERFLOW = STATUS_FLOAT_OVERFLOW;
pub const SUBLANG_PUNJABI_INDIA = 1;
pub const ERROR_IPSEC_IKE_ADD_UPDATE_KEY_FAILED = c_long(13860);
pub const RegQueryInfoKey = RegQueryInfoKeyA;
pub const TAPE_SPACE_END_OF_DATA = c_long(4);
pub const IMAGE_REL_AMD64_REL32 = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_DEFER = if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 16) else if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 16) else c_uint(0)(i64 << 16);
pub const MNC_EXECUTE = 2;
pub const ERROR_SERVICE_MARKED_FOR_DELETE = c_long(1072);
pub const SC_HOTKEY = 61776;
pub const POWER_ACTION_UI_ALLOWED = 2;
pub const DMBIN_LAST = DMBIN_FORMSOURCE;
pub const CreateDC = CreateDCA;
pub const IMAGE_REL_SH3_DIRECT16 = 1;
pub const SC_TASKLIST = 61744;
pub const REG_FULL_RESOURCE_DESCRIPTOR = c_ulong(9);
pub const REG_OPENED_EXISTING_KEY = c_long(2);
pub const REG_LINK = c_ulong(6);
pub const DISPLAY_DEVICE_REMOVABLE = 32;
pub const __FLT16_HAS_INFINITY__ = 1;
pub const DS_FIXEDSYS = c_long(8);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const MWT_RIGHTMULTIPLY = 3;
pub const IMAGE_RESOURCE_NAME_IS_STRING = 2147483648;
pub const SYSTEM_ALARM_ACE_TYPE = 3;
pub const WriteConsole = WriteConsoleA;
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub const ERROR_REMOTE_STORAGE_MEDIA_ERROR = c_long(4352);
pub const RPI_SMB2_FLAG_SERVERCAP_PERSISTENT_HANDLES = 16;
pub const LANG_LITHUANIAN = 39;
pub const TRANSACTION_NOTIFY_TM_ONLINE = 33554432;
pub const SPI_GETDESKWALLPAPER = 115;
pub const IMAGE_ICON = 1;
pub const XSTATE_GSSE = 2;
pub const ERROR_SXS_XML_E_INVALIDENCODING = c_long(14067);
pub const POINTER_FLAG_HWHEEL = 1048576;
pub const CTRY_PUERTO_RICO = 1;
pub const DMPAPER_LEGAL_EXTRA = 51;
pub const IO_REPARSE_TAG_CLOUD_E = c_long(2415976474);
pub const REG_OPTION_NON_VOLATILE = c_long(0);
pub const ERROR_SEEK_ON_DEVICE = c_long(132);
pub const WM_WINDOWPOSCHANGING = 70;
pub const SERVICE_ERROR_IGNORE = 0;
pub const IMAGE_REL_AMD64_CFG_BR = 20;
pub const ERROR_CHILD_WINDOW_MENU = c_long(1436);
pub const POINTER_FLAG_UPDATE = 131072;
pub const PAN_MIDLINE_LOW_SERIFED = 13;
pub const EMR_SETICMPROFILEW = 113;
pub const SUBLANG_BENGALI_INDIA = 1;
pub const SEC_FILE = 8388608;
pub const FILE_ACTION_REMOVED = 2;
pub const ERROR_DATABASE_BACKUP_CORRUPT = c_long(5087);
pub const RESOURCEDISPLAYTYPE_SHAREADMIN = 8;
pub const C2_BLOCKSEPARATOR = 8;
pub const DEFAULT_PITCH = 0;
pub const TECHNOLOGY = 2;
pub const EMR_RESERVED_105 = 105;
pub const PROCESSOR_ARM_7TDMI = 70001;
pub const PAGE_WRITECOPY = 8;
pub const RPC_S_PROXY_ACCESS_DENIED = c_long(1729);
pub const ScrollConsoleScreenBuffer = ScrollConsoleScreenBufferA;
pub const __UINTMAX_MAX__ = c_ulonglong(18446744073709551615);
pub const GRADIENT_FILL_RECT_H = 0;
pub const SUBLANG_ARABIC_ALGERIA = 5;
pub const FROM_LEFT_1ST_BUTTON_PRESSED = 1;
pub const MEMORY_ALLOCATION_ALIGNMENT = 16;
pub const SM_CXDOUBLECLK = 36;
pub const VFT2_DRV_INSTALLABLE = c_long(8);
pub const INPLACE_S_LAST = c_long(262575);
pub const DOMAIN_ALIAS_RID_RDS_MANAGEMENT_SERVERS = c_long(577);
pub const INPUTLANGCHANGE_SYSCHARSET = 1;
pub const NLS_KATAKANA = 131072;
pub const LOCALE_SABBREVDAYNAME2 = 50;
pub const LANG_GEORGIAN = 55;
pub const MOUSEEVENTF_MIDDLEUP = 64;
pub const DT_RASCAMERA = 3;
pub const ERROR_DS_BAD_INSTANCE_TYPE = c_long(8313);
pub const DC_FILEDEPENDENCIES = 14;
pub const SKF_LALTLATCHED = 268435456;
pub const DNS_ERROR_INVALID_DATAFILE_NAME = c_long(9652);
pub const ERROR_SYSTEM_IMAGE_BAD_SIGNATURE = c_long(637);
pub const EM_FMTLINES = 200;
pub const NTDDI_WINXP = 83951616;
pub const DC_MEDIATYPES = 35;
pub const EVENT_OBJECT_CLOAKED = 32791;
pub const FACILITY_USERMODE_FILTER_MANAGER = 31;
pub const MDM_PROTOCOLID_ANALOG = 7;
pub const STARTF_PREVENTPINNING = 8192;
pub const LPD_SHARE_ACCUM = 256;
pub const ERROR_IPSEC_MM_AUTH_IN_USE = c_long(13012);
pub const FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;
pub const PDC_ORIGIN = 1024;
pub const SERVICE_QUERY_CONFIG = 1;
pub const SM_RESERVED2 = 25;
pub const ERROR_PIPE_NOT_CONNECTED = c_long(233);
pub const FRS_ERR_PARENT_INSUFFICIENT_PRIV = c_long(8009);
pub const ERROR_VALIDATE_CONTINUE = c_long(625);
pub const _MM_HINT_T1 = 2;
pub const ERROR_OPEN_FAILED = c_long(110);
pub const META_CREATEREGION = 1791;
pub const EMR_SAVEDC = 33;
pub const ERROR_PROFILING_AT_LIMIT = c_long(553);
pub const STD_OUTPUT_HANDLE = if (@typeInfo(@TypeOf(-11)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -11) else if (@typeInfo(@TypeOf(-11)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -11) else @as(DWORD, -11);
pub const ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = c_long(1220);
pub const X3_OPCODE_SIZE_X = 4;
pub const __INT_FAST32_FMTi__ = "i";
pub const SUBLANG_TIBETAN_PRC = 1;
pub const SE_SIGNING_LEVEL_CUSTOM_3 = 7;
pub const ERROR_HOTKEY_ALREADY_REGISTERED = c_long(1409);
pub const SECURITY_APPPOOL_ID_BASE_RID = c_long(82);
pub const CTRY_MALAYSIA = 60;
pub const PAN_XHEIGHT_CONSTANT_SMALL = 2;
pub const WS_MAXIMIZE = c_long(16777216);
pub const ERROR_CANTFETCHBACKWARDS = c_long(770);
pub const ERROR_FATAL_APP_EXIT = c_long(713);
pub const ERROR_INVALID_LABEL = c_long(1299);
pub const CreateDialogIndirectParam = CreateDialogIndirectParamA;
pub const SPI_GETTOOLTIPANIMATION = 4118;
pub const IO_REPARSE_TAG_MOUNT_POINT = c_long(2684354563);
pub const GGL_STRING = 3;
pub const VP_CP_CMD_ACTIVATE = 1;
pub const SPI_SETDOCKMOVING = 145;
pub const CE_FRAME = 8;
pub const RDW_INVALIDATE = 1;
pub const ERROR_INVALID_SCROLLBAR_RANGE = c_long(1448);
pub const RPC_S_NOT_LISTENING = c_long(1715);
pub const GetClassLong = GetClassLongA;
pub const LGRPID_VIETNAMESE = 14;
pub const SUBLANG_MONGOLIAN_CYRILLIC_MONGOLIA = 1;
pub const ERROR_COMPRESSION_NOT_BENEFICIAL = c_long(344);
pub const ERROR_INVALID_ICON_HANDLE = c_long(1414);
pub const CreateWaitableTimer = CreateWaitableTimerA;
pub const __inner_control_entrypoint = category;
pub const __ATOMIC_RELEASE = 3;
pub const RPI_SMB2_FLAG_SERVERCAP_DIRECTORY_LEASING = 32;
pub const CONNECT_WRITE_THROUGH_SEMANTICS = 65536;
pub const __SIZEOF_LONG_DOUBLE__ = 8;
pub const GetVolumeInformation = GetVolumeInformationA;
pub const LoadLibraryEx = LoadLibraryExA;
pub const DMPAPER_A4_PLUS = 60;
pub const ERROR_PAGE_FAULT_DEMAND_ZERO = c_long(748);
pub const POWERBUTTON_ACTION_VALUE_SHUTDOWN = 6;
pub const WM_NEXTMENU = 531;
pub const SUBLANG_SPANISH_COSTA_RICA = 5;
pub const ERROR_NOT_FOUND = c_long(1168);
pub const __SSE2_MATH__ = 1;
pub const SPI_SETLOWPOWERACTIVE = 85;
pub const PROCESSOR_DUTY_CYCLING_ENABLED = 1;
pub const ERROR_KM_DRIVER_BLOCKED = c_long(1930);
pub const WARNING_IPSEC_QM_POLICY_PRUNED = c_long(13025);
pub const DBG_REPLY_LATER = if (@typeInfo(@TypeOf(c_long(1073807361))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807361)) else if (@typeInfo(@TypeOf(c_long(1073807361))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807361)) else @as(DWORD, c_long(1073807361));
pub const PEERDIST_ERROR_VERSION_UNSUPPORTED = c_long(4062);
pub const XSTATE_MASK_GSSE = if (@typeInfo(@TypeOf(i64 << XSTATE_GSSE)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_GSSE) else if (@typeInfo(@TypeOf(i64 << XSTATE_GSSE)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_GSSE) else c_uint(1)(i64 << XSTATE_GSSE);
pub const MAXCHAR = 127;
pub const ERROR_CTX_LOGON_DISABLED = c_long(7037);
pub const PRODUCT_HOME_PREMIUM = 3;
pub const SM_CYVTHUMB = 9;
pub const MKF_MOUSEKEYSON = 1;
pub const __UINT64_FMTu__ = "llu";
pub const LBS_USETABSTOPS = c_long(128);
pub const ua_lstrcmp = lstrcmpA;
pub const FS_FILE_ENCRYPTION = FILE_SUPPORTS_ENCRYPTION;
pub const ERROR_NO_SUCH_PRIVILEGE = c_long(1313);
pub const SECURITY_CLOUD_INFRASTRUCTURE_SERVICES_ID_BASE_RID = c_long(85);
pub const SYSTEM_AUDIT_CALLBACK_ACE_TYPE = 13;
pub const ERROR_APP_DATA_REBOOT_REQUIRED = c_long(4404);
pub const WRITE_NV_MEMORY_FLAG_FLUSH = 1;
pub const EM_GETLIMITTEXT = 213;
pub const PIPE_UNLIMITED_INSTANCES = 255;
pub const FLOODFILLSURFACE = 1;
pub const EWX_REBOOT = 2;
pub const VK_F16 = 127;
pub const WM_EXITSIZEMOVE = 562;
pub const SECURITY_PROXY_RID = c_long(8);
pub const PRODUCT_EMBEDDED_INDUSTRY_A_E = 92;
pub const ERROR_DBG_EXCEPTION_HANDLED = c_long(766);
pub const MB_ICONASTERISK = c_long(64);
pub const ERROR_SYSTEM_POWERSTATE_COMPLEX_TRANSITION = c_long(783);
pub const CB_INSERTSTRING = 330;
pub const PRODUCT_IOTOS = 185;
pub const PROCESS_SET_SESSIONID = 4;
pub const RIDEV_INPUTSINK = 256;
pub const ERROR_IPSEC_IKE_UNSUPPORTED_ID = c_long(13869);
pub const EMR_BEGINPATH = 59;
pub const ERROR_CANNOT_OPEN_PROFILE = c_long(1205);
pub const ERROR_SPECIAL_USER = c_long(1373);
pub const TOKEN_ADJUST_DEFAULT = 128;
pub const LOCALE_SSORTNAME = 4115;
pub const ERROR_SUCCESS_REBOOT_REQUIRED = c_long(3010);
pub const UOI_TYPE = 3;
pub const LogonUserEx = LogonUserExA;
pub const FAST_FAIL_INVALID_REFERENCE_COUNT = 14;
pub const SUBLANG_URDU_INDIA = 2;
pub const SIZEZOOMSHOW = SIZE_MAXSHOW;
pub const LB_DELETESTRING = 386;
pub const _Deref2_pre1_impl_ = p1;
pub const CB_GETDROPPEDWIDTH = 351;
pub const LOCALE_IPAPERSIZE = 4106;
pub const SERVICE_STOP_REASON_MINOR_MMC = 22;
pub const ERROR_UNMAPPED_SUBSTITUTION_STRING = c_long(14096);
pub const RC_STRETCHBLT = 2048;
pub const HSHELL_REDRAW = 6;
pub const LBN_ERRSPACE = -2;
pub const TA_CENTER = 6;
pub const TPM_LEFTALIGN = c_long(0);
pub const ERROR_CALLBACK_INVOKE_INLINE = c_long(812);
pub const HSHELL_GETMINRECT = 5;
pub const ERROR_CTX_PD_NOT_FOUND = c_long(7003);
pub const DMPAPER_B6_JIS_ROTATED = 89;
pub const DOMAIN_GROUP_RID_USERS = c_long(513);
pub const ERROR_INSTALL_OUT_OF_DISK_SPACE = c_long(15604);
pub const ERROR_CONNECTION_ABORTED = c_long(1236);
pub const FILE_DISPOSITION_FLAG_DO_NOT_DELETE = 0;
pub const GID_ZOOM = 3;
pub const PAN_SERIF_THIN = 7;
pub const IME_ESC_GET_EUDC_DICTIONARY = 4099;
pub const SECURITY_CAPABILITY_PRIVATE_NETWORK_CLIENT_SERVER = c_long(3);
pub const ERROR_DS_CROSS_REF_BUSY = c_long(8602);
pub const ERROR_CLUSTER_NODE_ALREADY_MEMBER = c_long(5065);
pub const COLOR_ACTIVEBORDER = 10;
pub const ERROR_CLUSTER_RESOURCE_TYPE_BUSY = c_long(5909);
pub const VOS__PM32 = c_long(3);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const CLIP_LH_ANGLES = 1 << 4;
pub const PF_SECOND_LEVEL_ADDRESS_TRANSLATION = 20;
pub const DISP_CHANGE_FAILED = -1;
pub const EC_RIGHTMARGIN = 2;
pub const HEAP_ZERO_MEMORY = 8;
pub const __drv_acquiresExclusiveResource = kind;
pub const FLUSH_FLAGS_FILE_DATA_ONLY = 1;
pub const META_SETPALENTRIES = 55;
pub const TC_RESERVED = 32768;
pub const HEAP_GENERATE_EXCEPTIONS = 4;
pub const WM_PALETTEISCHANGING = 784;
pub const META_SCALEWINDOWEXT = 1040;
pub const SM_CYBORDER = 6;
pub const SUBLANG_MALAY_BRUNEI_DARUSSALAM = 2;
pub const ACCESS_DENIED_CALLBACK_OBJECT_ACE_TYPE = 12;
pub const VK_OEM_102 = 226;
pub const IO_REPARSE_TAG_CLOUD_F = c_long(2415980570);
pub const FACILITY_WINDOWS_SETUP = 48;
pub const ERROR_IPSEC_IKE_CRL_FAILED = c_long(13817);
pub const ERROR_MCA_INTERNAL_ERROR = c_long(15205);
pub const MDM_MASK_V120_SPEED = 7;
pub const PME_CURRENT_VERSION = 1;
pub const REGDB_S_FIRST = c_long(262480);
pub const GCP_KASHIDA = 1024;
pub const EMR_RESERVED_106 = 106;
pub const EMR_SETCOLORSPACE = 100;
pub const ERROR_NO_NVRAM_RESOURCES = c_long(1470);
pub const ICM_DELETEPROFILE = 2;
pub const MSGFLT_REMOVE = 2;
pub const FACILITY_SCRIPT = 112;
pub const ERROR_DS_STRING_SD_CONVERSION_FAILED = c_long(8522);
pub const DNS_ERROR_POLICY_INVALID_SETTINGS = c_long(9974);
pub const InterlockedBitTestAndSet64NoFence = _interlockedbittestandset64;
pub const DIB_RGB_COLORS = 0;
pub const WB_ISDELIMITER = 2;
pub const _USE_DECLSPECS_FOR_SAL = 0;
pub const FILE_SEQUENTIAL_WRITE_ONCE = 1048576;
pub const LOCALE_SABBREVDAYNAME3 = 51;
pub const CLAIM_SECURITY_ATTRIBUTE_MANDATORY = 32;
pub const GET_TAPE_MEDIA_INFORMATION = 0;
pub const ASPECTXY = 44;
pub const VS_FFI_FILEFLAGSMASK = c_long(63);
pub const IMAGE_REL_IA64_PCREL60I = 24;
pub const GDICOMMENT_BEGINGROUP = 2;
pub const FACILITY_WIN32 = 7;
pub const WM_RBUTTONDBLCLK = 518;
pub const WM_NOTIFY = 78;
pub const SM_REMOTECONTROL = 8193;
pub const InterlockedAddNoFence = _InlineInterlockedAdd;
pub const FILE_SHARE_DELETE = 4;
pub const SM_RESERVED3 = 26;
pub const CTRY_KYRGYZSTAN = 996;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS = 24;
pub const GENERIC_EXECUTE = c_long(536870912);
pub const GCL_CONVERSION = 1;
pub const DCX_PARENTCLIP = c_long(32);
pub const _MM_HINT_T0 = 1;
pub const SUBLANG_RUSSIAN_RUSSIA = 1;
pub const NONANTIALIASED_QUALITY = 3;
pub const WM_CLEAR = 771;
pub const SIZE_MAXSHOW = 3;
pub const SE_SIGNING_LEVEL_CUSTOM_2 = 5;
pub const ALERT_SYSTEM_CRITICAL = 5;
pub const RRF_ZEROONFAILURE = 536870912;
pub const BitTestAndSet64 = _bittestandset64;
pub const LB_DIR = 397;
pub const WM_MOUSEACTIVATE = 33;
pub const GWL_HINSTANCE = -6;
pub const Multiply128 = _mul128;
pub const ERROR_RESOURCE_DISABLED = c_long(4309);
pub const ERROR_INDOUBT_TRANSACTIONS_EXIST = c_long(6827);
pub const LR_COPYFROMRESOURCE = 16384;
pub const GCL_HMODULE = -16;
pub const PCF_SPECIALCHARS = if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 256) else if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 256) else @as(DWORD, 256);
pub const ERROR_CLUSTER_TOO_MANY_NODES = c_long(5935);
pub const SPI_GETDRAGFULLWINDOWS = 38;
pub const IMAGE_SYM_CLASS_REGISTER = 4;
pub const CA_LOG_FILTER = 2;
pub const SHTDN_REASON_MINOR_HOTFIX = 17;
pub const FACILITY_DEPLOYMENT_SERVICES_SERVER = 257;
pub const SPI_SETUIEFFECTS = 4159;
pub const IMAGE_REL_BASED_ARM_MOV32 = 5;
pub const ERROR_DS_MODIFYDN_WRONG_GRANDPARENT = c_long(8582);
pub const SPI_SETDRAGFULLWINDOWS = 37;
pub const SERVICE_STOP_REASON_MINOR_RECONFIG = 5;
pub const IME_CMODE_FIXED = 2048;
pub const VK_MULTIPLY = 106;
pub const CAL_SENGLISHERANAME = 59;
pub const QueryServiceConfig2 = QueryServiceConfig2A;
pub const ERROR_UNIDENTIFIED_ERROR = c_long(1287);
pub const IMAGE_SCN_ALIGN_MASK = 15728640;
pub const RDW_NOFRAME = 2048;
pub const WM_PAINTCLIPBOARD = 777;
pub const SUBLANG_CHINESE_MACAU = 5;
pub const SPI_GETMOUSEHOVERWIDTH = 98;
pub const EM_SETMODIFY = 185;
pub const SPI_GETPOWEROFFACTIVE = 84;
pub const MAXIMUM_XSTATE_FEATURES = 64;
pub const ERROR_RM_DISCONNECTED = c_long(6819);
pub const MB_YESNOCANCEL = c_long(3);
pub const __analysis_assume_lock_acquired = lock;
pub const IMAGE_REL_I386_SEG12 = 9;
pub const CAL_SABBREVDAYNAME1 = 14;
pub const ERROR_DS_CANT_MOD_PRIMARYGROUPID = c_long(8506);
pub const ERROR_PROC_NOT_FOUND = c_long(127);
pub const ERROR_IPSEC_IKE_MM_LIMIT = c_long(13882);
pub const TRANSACTION_NOTIFY_ROLLBACK_COMPLETE = 128;
pub const PAN_MIDLINE_STANDARD_TRIMMED = 2;
pub const BSM_INSTALLABLEDRIVERS = 4;
pub const LANG_AMHARIC = 94;
pub const VRL_CLASS_CONSISTENCY = VRL_PREDEFINED_CLASS_BEGIN << 0;
pub const IMAGE_REL_IA64_ADDEND = 31;
pub const THREAD_GET_CONTEXT = 8;
pub const WM_IME_SELECT = 645;
pub const FILE_ACTION_MODIFIED = 3;
pub const ECONNABORTED = 106;
pub const JOB_OBJECT_SECURITY_NO_ADMIN = 1;
pub const LOCALE_TRANSIENT_KEYBOARD4 = 11264;
pub const PRINTRATEUNIT_PPM = 1;
pub const EM_SETRECT = 179;
pub const ERROR_DS_RANGE_CONSTRAINT = c_long(8322);
pub const ERROR_BAD_NET_RESP = c_long(58);
pub const ERROR_DS_CANT_FIND_EXPECTED_NC = c_long(8420);
pub const PRODUCT_STANDARD_SERVER_V = 36;
pub const AC_SRC_ALPHA = 1;
pub const ERROR_CLUSTER_OLD_VERSION = c_long(5904);
pub const TPM_RIGHTBUTTON = c_long(2);
pub const PRODUCT_STORAGE_WORKGROUP_EVALUATION_SERVER = 95;
pub const RotateRight16 = _rotr16;
pub const IO_REPARSE_TAG_CLOUD_MASK = c_long(61440);
pub const CB_MSGMAX = 357;
pub const DNS_ERROR_RRL_INVALID_WINDOW_SIZE = c_long(9912);
pub const NI_IMEMENUSELECTED = 24;
pub const SUBLANG_CORSICAN_FRANCE = 1;
pub const ERROR_RXACT_COMMIT_FAILURE = c_long(1370);
pub const OF_WRITE = 1;
pub const BF_DIAGONAL = 16;
pub const SUBLANG_ENGLISH_SINGAPORE = 18;
pub const VK_F17 = 128;
pub const DISPLAYCONFIG_TARGET_IS_HMD = 32;
pub const STATE_SYSTEM_ALERT_HIGH = 268435456;
pub const EMR_POLYBEZIER16 = 85;
pub const ERROR_COUNTER_TIMEOUT = c_long(1121);
pub const WNetGetLastError = WNetGetLastErrorA;
pub const SPI_SETSNAPSIZING = 143;
pub const DEVICEFAMILYDEVICEFORM_INDUSTRIAL_AUTOMATION = 19;
pub const ENLISTMENT_RECOVER = 4;
pub const ENUM_E_LAST = c_long(2147746239);
pub const ERROR_CLOUD_FILE_METADATA_CORRUPT = c_long(363);
pub const IMAGE_DEBUG_TYPE_CLSID = 11;
pub const ImmSetCompositionString = ImmSetCompositionStringA;
pub const SYSTEM_CACHE_ALIGNMENT_SIZE = 64;
pub const IMAGE_REL_PPC_ABSOLUTE = 0;
pub const GGO_GRAY8_BITMAP = 6;
pub const InterlockedAndRelease = _InterlockedAnd;
pub const ERROR_DS_ROOT_REQUIRES_CLASS_TOP = c_long(8432);
pub const META_REALIZEPALETTE = 53;
pub const DOMAIN_ALIAS_RID_DEVICE_OWNERS = c_long(583);
pub const InterlockedExchange64 = _InterlockedExchange64;
pub const HTLEFT = 10;
pub const ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = c_long(8502);
pub const lstrlen = lstrlenA;
pub const WS_EX_TRANSPARENT = c_long(32);
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_BUSY = c_long(371);
pub const FNOINVERT = 2;
pub const ERROR_CLUSTER_NODE_PAUSED = c_long(5070);
pub const ERROR_STATE_STRUCTURED_RESET_FAILED = c_long(15803);
pub const PROCESS_SET_INFORMATION = 512;
pub const ERROR_OFFSET_ALIGNMENT_VIOLATION = c_long(327);
pub const CBR_19200 = 19200;
pub const LOCALE_NEUTRALDATA = 16;
pub const MDM_HDLCPPP_ML_NONE = 1;
pub const WSAELOOP = c_long(10062);
pub const ERROR_CLOUD_FILE_PROVIDER_NOT_RUNNING = c_long(362);
pub const ERROR_VOLUME_MOUNTED = c_long(743);
pub const HS_VERTICAL = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_DEFER = 0 << 12;
pub const ERROR_NULL_LM_PASSWORD = c_long(1304);
pub const InterlockedCompareExchange64 = _InterlockedCompareExchange64;
pub const LOCALE_WINDOWS = 1;
pub const MF_APPEND = c_long(256);
pub const GET_MOUSEORKEY_LPARAM = GET_DEVICE_LPARAM;
pub const XSTATE_LWP = 62;
pub const IGIMII_TOOLS = 8;
pub const SM_CYICON = 12;
pub const DOMAIN_ALIAS_RID_CERTSVC_DCOM_ACCESS_GROUP = c_long(574);
pub const ERROR_IPSEC_IKE_INVALID_ENCRYPT_ALG = c_long(13873);
pub const ERROR_CLUSTER_NETWORK_NOT_FOUND = c_long(5045);
pub const PAN_LETT_OBLIQUE_OFF_CENTER = 14;
pub const IMAGE_FILE_EXECUTABLE_IMAGE = 2;
pub const PROCESSOR_IDLESTATE_POLICY_COUNT = 3;
pub const ERROR_BAD_STACK = c_long(543);
pub const DF_ALLOWOTHERACCOUNTHOOK = c_long(1);
pub const TPM_BOTTOMALIGN = c_long(32);
pub const PENARBITRATIONTYPE_SPT = 3;
pub const SESSION_MODIFY_ACCESS = 2;
pub const FILE_RENAME_FLAG_REPLACE_IF_EXISTS = 1;
pub const ERROR_DS_GC_NOT_AVAILABLE = c_long(8217);
pub const EMR_RESERVED_107 = 107;
pub const ERROR_STRICT_CFG_VIOLATION = c_long(1657);
pub const ERROR_USER_DELETE_TRUST_QUOTA_EXCEEDED = c_long(1934);
pub const MAX_ACL_REVISION = ACL_REVISION4;
pub const SetComputerNameEx = SetComputerNameExA;
pub const AddFontResourceEx = AddFontResourceExA;
pub const ERROR_INVALID_SEGMENT_NUMBER = c_long(180);
pub const X3_I_SIGN_VAL_POS_X = 59;
pub const _Acquires_nonreentrant_lock_ = lock;
pub const ERROR_ACCOUNT_RESTRICTION = c_long(1327);
pub const GRADIENT_FILL_RECT_V = 1;
pub const C3_DIACRITIC = 2;
pub const EVENTLOG_INFORMATION_TYPE = 4;
pub const SSF_AVAILABLE = 2;
pub const PRF_ERASEBKGND = c_long(8);
pub const ERROR_EDP_POLICY_DENIES_OPERATION = c_long(356);
pub const EVENT_CONSOLE_UPDATE_SIMPLE = 16387;
pub const SW_SMOOTHSCROLL = 16;
pub const LOAD_LIBRARY_AS_IMAGE_RESOURCE = 32;
pub const __UINT8_FMTo__ = "hho";
pub const EM_CHARFROMPOS = 215;
pub const SBS_SIZEBOX = c_long(8);
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const RPC_S_DUPLICATE_ENDPOINT = c_long(1740);
pub const OPENCHANNEL = 4110;
pub const IMAGE_REL_AM_ADDR32 = 1;
pub const FindFirstChangeNotification = FindFirstChangeNotificationA;
pub const ERROR_IPSEC_IKE_SHUTTING_DOWN = c_long(13891);
pub const BAUD_2400 = if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 256) else if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 256) else @as(DWORD, 256);
pub const MWT_LEFTMULTIPLY = 2;
pub const SERVICE_STOP_REASON_FLAG_PLANNED = 1073741824;
pub const FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
pub const ERROR_DS_COUNTING_AB_INDICES_FAILED = c_long(8428);
pub const RPI_FLAG_SMB2_SHARECAP_DFS = 8;
pub const ERROR_NODE_NOT_AVAILABLE = c_long(5036);
pub const LANG_THAI = 30;
pub const LANG_POLISH = 21;
pub const WM_IME_NOTIFY = 642;
pub const SE_SIGNING_LEVEL_CUSTOM_1 = 3;
pub const IMAGE_HOT_PATCH_REL32 = 245760;
pub const EMR_STROKEPATH = 64;
pub const WM_DEVICECHANGE = 537;
pub const __POINTER_WIDTH__ = 64;
pub const IMAGE_REL_IA64_IMM64 = 3;
pub const ERROR_MRM_NO_CURRENT_VIEW_ON_THREAD = c_long(15143);
pub const ERROR_STACK_BUFFER_OVERRUN = c_long(1282);
pub const CONTACTVISUALIZATION_PRESENTATIONMODE = 2;
pub const MOUSE_MOVE_RELATIVE = 0;
pub const ERROR_LOG_SECTOR_REMAPPED = c_long(6602);
pub const ERROR_TRANSACTION_NOT_ACTIVE = c_long(6701);
pub const ERROR_CLUSTER_GROUP_MOVING = c_long(5908);
pub const IMAGE_REL_ARM64_TOKEN = 12;
pub const RTS_CONTROL_ENABLE = 1;
pub const DOMAIN_USER_RID_KRBTGT = c_long(502);
pub const DNS_ERROR_SERVERSCOPE_IS_REFERENCED = c_long(9988);
pub const DNS_ERROR_RCODE_REFUSED = c_long(9005);
pub const ERROR_SXS_CANT_GEN_ACTCTX = c_long(14001);
pub const ESB_DISABLE_UP = 1;
pub const SETDTR = 5;
pub const ERROR_DOMAIN_TRUST_INCONSISTENT = c_long(1810);
pub const IMAGE_REL_SHM_REFLO = 20;
pub const EVENT_OBJECT_CONTENTSCROLLED = 32789;
pub const DNS_ERROR_DS_ZONE_ALREADY_EXISTS = c_long(9718);
pub const DFCS_MENUARROWRIGHT = 4;
pub const RPC_S_NO_CONTEXT_AVAILABLE = c_long(1765);
pub const ERROR_DS_COULDNT_UPDATE_SPNS = c_long(8525);
pub const RPC_S_UNKNOWN_AUTHN_TYPE = c_long(1741);
pub const ERROR_SECUREBOOT_NOT_ENABLED = c_long(4425);
pub const MultinetGetConnectionPerformance = MultinetGetConnectionPerformanceA;
pub const MEM_EXTENDED_PARAMETER_NUMA_NODE_MANDATORY = MINLONG64;
pub const LCS_GM_BUSINESS = c_long(1);
pub const PCASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = PCASSEMBLY_FILE_DETAILED_INFORMATION;
pub const IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;
pub const CTRY_PAKISTAN = 92;
pub const ERROR_INSTRUCTION_MISALIGNMENT = c_long(549);
pub const SUBLANG_INUKTITUT_CANADA = 1;
pub const CAL_SABBREVDAYNAME6 = 19;
pub const _IRQL_requires_min_ = irql;
pub const RPC_S_NO_ENDPOINT_FOUND = c_long(1708);
pub const ERROR_IPSEC_DOSP_NOT_INSTALLED = c_long(13931);
pub const ACCESS_REASON_TYPE_MASK = 16711680;
pub const PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_MASK = if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 36) else if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 36) else c_uint(3)(i64 << 36);
pub const EIDRM = 111;
pub const EMR_GRADIENTFILL = 118;
pub const MDM_HDLCPPP_AUTH_CHAP = 3;
pub const GC_ALLGESTURES = 1;
pub const RPC_S_NO_PROTSEQS = c_long(1719);
pub const TRANSACTION_NOTIFY_PREPREPARE = 1;
pub const MB_ICONQUESTION = c_long(32);
pub const IMAGE_ENCLAVE_IMPORT_MATCH_AUTHOR_ID = 2;
pub const POINTER_MESSAGE_FLAG_CANCELED = 32768;
pub const LOCALE_INEUTRAL = 113;
pub const WM_CHARTOITEM = 47;
pub const SUBLANG_INDONESIAN_INDONESIA = 1;
pub const EMARCH_ENC_I17_IMM5C_VAL_POS_X = 16;
pub const EMARCH_ENC_I17_IMM9D_VAL_POS_X = 7;
pub const PA_ACTIVATE = MA_ACTIVATE;
pub const ERROR_SXS_XML_E_BADNAMECHAR = c_long(14033);
pub const _SAL_nop_impl_ = X;
pub const FACILITY_FWP = 50;
pub const DESKTOPVERTRES = 117;
pub const DefMDIChildProc = DefMDIChildProcA;
pub const FILE_ROOT_DIR = 3;
pub const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 13;
pub const CURSOR_SHOWING = 1;
pub const EVENPARITY = 2;
pub const DCBA_FACEDOWNLEFT = 258;
pub const SPI_GETWORKAREA = 48;
pub const ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = c_long(5082);
pub const SHTDN_REASON_MINOR_HARDWARE_DRIVER = 13;
pub const SSWF_NONE = 0;
pub const SERVICE_CONFIG_FAILURE_ACTIONS = 2;
pub const ERROR_SMARTCARD_SUBSYSTEM_FAILURE = c_long(1264);
pub const IMAGE_REL_PPC_SECTION = 12;
pub const ERROR_NOT_SUPPORTED_ON_DAX = c_long(360);
pub const WNNC_NET_IBMAL = 3407872;
pub const VK_F14 = 125;
pub const IMAGE_REL_MIPS_REFWORD = 2;
pub const ERROR_CROSS_PARTITION_VIOLATION = c_long(1661);
pub const EWX_RESTARTAPPS = 64;
pub const WS_EX_RTLREADING = c_long(8192);
pub const SET_SPREAD = 4106;
pub const ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = c_long(5089);
pub const PPM_FIRMWARE_LPI = 524288;
pub const _IRQL_requires_ = irql;
pub const DCTT_BITMAP = c_long(1);
pub const PS_DASHDOTDOT = 4;
pub const ERROR_CLUSTER_NETINTERFACE_EXISTS = c_long(5046);
pub const ERROR_INSTALL_OPTIONAL_PACKAGE_REQUIRES_MAIN_PACKAGE_FULLTRUST_CAPABILITY = c_long(15640);
pub const SERVICE_STOP_REASON_FLAG_MIN = 0;
pub const DMBIN_TRACTOR = 8;
pub const RPC_S_FP_DIV_ZERO = c_long(1769);
pub const ERROR_DS_DST_DOMAIN_NOT_NATIVE = c_long(8496);
pub const TOUCH_FEEDBACK_DEFAULT = 1;
pub const SE_GROUP_MANDATORY = c_long(1);
pub const ERROR_GROUPSET_NOT_FOUND = c_long(5992);
pub const FACILITY_USERMODE_SPACES = 231;
pub const EM_GETWORDBREAKPROC = 209;
pub const MAXUINT32 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT32, 0) else UINT32(0))) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT32, 0) else UINT32(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT32, 0) else UINT32(0))) == @import("builtin").TypeId.Int) @intToPtr(UINT32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT32, 0) else UINT32(0)) else UINT32(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT32, 0) else UINT32(0));
pub const ERROR_LOG_RECORD_NONEXISTENT = c_long(6624);
pub const HORZRES = 8;
pub const ERROR_LOST_WRITEBEHIND_DATA = c_long(596);
pub const __INT16_FMTd__ = "hd";
pub const STATE_SYSTEM_CHECKED = 16;
pub const WM_SETTEXT = 12;
pub const GID_PAN = 4;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const ERROR_DS_MISSING_REQUIRED_ATT = c_long(8316);
pub const ERROR_UNRECOGNIZED_VOLUME = c_long(1005);
pub const CAL_SSHORTDATE = 5;
pub const __INTMAX_WIDTH__ = 64;
pub const UCSCHAR_INVALID_CHARACTER = 4294967295;
pub const ERROR_NOT_ENOUGH_SERVER_MEMORY = c_long(1130);
pub const CharPrev = CharPrevA;
pub const GCP_JUSTIFYIN = c_long(2097152);
pub const SetUserObjectInformation = SetUserObjectInformationA;
pub const DOMAIN_GROUP_RID_ADMINS = c_long(512);
pub const ERROR_DS_CODE_INCONSISTENCY = c_long(8408);
pub const ERROR_DBG_EXCEPTION_NOT_HANDLED = c_long(688);
pub const KEY_NOTIFY = 16;
pub const FAPPCOMMAND_KEY = 0;
pub const RPC_S_INVALID_ASYNC_HANDLE = c_long(1914);
pub const ERROR_SXS_ROOT_MANIFEST_DEPENDENCY_NOT_INSTALLED = c_long(14015);
pub const ERROR_NO_MORE_SEARCH_HANDLES = c_long(113);
pub const LOCALE_SMONTHNAME11 = 66;
pub const HTTOPLEFT = 13;
pub const FILE_FLAG_OPEN_REQUIRING_OPLOCK = 262144;
pub const ERROR_MRM_DIRECT_REF_TO_NON_DEFAULT_RESOURCE = c_long(15146);
pub const DEVICEFAMILYDEVICEFORM_MAX = 33;
pub const ERROR_IPSEC_IKE_TIMED_OUT = c_long(13805);
pub const DBG_COMMAND_EXCEPTION = if (@typeInfo(@TypeOf(c_long(1073807369))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807369)) else if (@typeInfo(@TypeOf(c_long(1073807369))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807369)) else @as(DWORD, c_long(1073807369));
pub const MS_DSR_ON = if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 32) else if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 32) else @as(DWORD, 32);
pub const LAYOUT_BTT = 2;
pub const EMR_RESERVED_108 = 108;
pub const SetWindowText = SetWindowTextA;
pub const MDM_MASK_HDLCPPP_AUTH = 7 << 3;
pub const GDI_ERROR = c_long(4294967295);
pub const CE_IOE = 1024;
pub const IMAGE_REL_M32R_GPREL16 = 4;
pub const TAPE_DRIVE_SET_ECC = 2147483904;
pub const CBS_DISABLENOSCROLL = c_long(2048);
pub const __requires_shared_lock_held = lock;
pub const ERROR_SECUREBOOT_POLICY_NOT_SIGNED = c_long(4424);
pub const ERROR_RESOURCE_NOT_ONLINE = c_long(5004);
pub const GetCharWidth = GetCharWidthA;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_IS_COMPOUNDED = c_long(496);
pub const PRINTRATEUNIT_IPM = 4;
pub const __drv_typeConst = 0;
pub const LOCALE_SABBREVDAYNAME1 = 49;
pub const MDITILE_HORIZONTAL = 1;
pub const X3_BTYPE_QP_INST_VAL_POS_X = 0;
pub const BitTestAndReset64 = _bittestandreset64;
pub const SEF_DACL_AUTO_INHERIT = 1;
pub const ERROR_RESOURCE_NOT_PRESENT = c_long(4316);
pub const PROC_THREAD_ATTRIBUTE_THREAD = 65536;
pub const CLIENTSITE_E_LAST = c_long(2147746207);
pub const DISPLAYCONFIG_PATH_SUPPORT_VIRTUAL_MODE = 8;
pub const PRODUCT_DATACENTER_A_SERVER_CORE = 145;
pub const GetKerningPairs = GetKerningPairsA;
pub const VFT2_FONT_RASTER = c_long(1);
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_ALWAYS_OFF = 2 << 28;
pub const RPC_X_PIPE_DISCIPLINE_ERROR = c_long(1917);
pub const FRS_ERR_SYSVOL_POPULATE_TIMEOUT = c_long(8014);
pub const WNNC_NET_BWNFS = 1048576;
pub const SM_RESERVED1 = 24;
pub const REMOTE_NAME_INFO_LEVEL = 2;
pub const WM_QUERYUISTATE = 297;
pub const STARTF_USESHOWWINDOW = 1;
pub const SERKF_SERIALKEYSON = 1;
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ANY = 4;
pub const QUOTA_LIMITS_HARDWS_MAX_DISABLE = 8;
pub const COLOR_BACKGROUND = 1;
pub const WHEEL_PAGESCROLL = UINT_MAX;
pub const InterlockedOrAcquire = _InterlockedOr;
pub const _WIN32_WINNT_WINBLUE = 1539;
pub const OUT_SCREEN_OUTLINE_PRECIS = 9;
pub const WSAECONNABORTED = c_long(10053);
pub const RPC_S_INTERFACE_NOT_EXPORTED = c_long(1924);
pub const DNS_ERROR_NOT_UNIQUE = c_long(9555);
pub const CopyAcceleratorTable = CopyAcceleratorTableA;
pub const RI_MOUSE_LEFT_BUTTON_UP = 2;
pub const CB_SHOWDROPDOWN = 335;
pub const EnumResourceNames = EnumResourceNamesA;
pub const EXTTEXTOUT = 512;
pub const _WIN32_IE_XP = _WIN32_IE_IE60;
pub const IME_HOTKEY_PRIVATE_LAST = 543;
pub const ENOENT = 2;
pub const DS_CENTER = c_long(2048);
pub const SPI_SETBORDER = 6;
pub const SPI_GETLOWPOWERTIMEOUT = 79;
pub const ERROR_LOG_RECORDS_RESERVED_INVALID = c_long(6625);
pub const CONTAINER_INHERIT_ACE = 2;
pub const UNPROTECTED_DACL_SECURITY_INFORMATION = c_long(536870912);
pub const _NLSCMPERROR = _CRT_INT_MAX;
pub const GGO_GRAY4_BITMAP = 5;
pub const BS_NULL = 1;
pub const SM_CYEDGE = 46;
pub const SPI_SETMINIMIZEDMETRICS = 44;
pub const __LDBL_MIN_EXP__ = -1021;
pub const ImmGetGuideLine = ImmGetGuideLineA;
pub const HWND_MESSAGE = if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, -3) else if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Int) @intToPtr(HWND, -3) else @as(HWND, -3);
pub const LANG_HUNGARIAN = 14;
pub const ES_UPPERCASE = c_long(8);
pub const ERROR_CAPAUTHZ_SCCD_PARSE_ERROR = c_long(458);
pub const IMN_CHANGECANDIDATE = 3;
pub const SSTF_BORDER = 2;
pub const PRODUCT_ENTERPRISE_EVALUATION = 72;
pub const OpenSemaphore = OpenSemaphoreA;
pub const VFT2_DRV_INPUTMETHOD = c_long(11);
pub const PRINTRATEUNIT_CPS = 2;
pub const DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST = c_long(9976);
pub const PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_MASK = if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 20) else if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 20) else c_uint(3)(i64 << 20);
pub const WN_NOT_CONNECTED = ERROR_NOT_CONNECTED;
pub const ERROR_DS_DRA_BAD_DN = c_long(8439);
pub const DLGC_HASSETSEL = 8;
pub const OF_SHARE_EXCLUSIVE = 16;
pub const DDL_READWRITE = 0;
pub const POWER_ACTION_HIBERBOOT = 8;
pub const ERROR_DS_DRA_SOURCE_DISABLED = c_long(8456);
pub const PS_DASHDOT = 3;
pub const IME_HOTKEY_PRIVATE_FIRST = 512;
pub const CAL_SABBREVDAYNAME7 = 20;
pub const XSTATE_CONTROLFLAG_XSAVEOPT_MASK = 1;
pub const ERROR_DS_INCORRECT_ROLE_OWNER = c_long(8210);
pub const __writableTo = size;
pub const NETPROPERTY_PERSISTENT = 1;
pub const IMAGE_REL_ALPHA_REFQUAD = 2;
pub const FONTMAPPER_MAX = 10;
pub const SPI_SETSTICKYKEYS = 59;
pub const ERROR_INVALID_LB_MESSAGE = c_long(1432);
pub const ERROR_SXS_XML_E_UNEXPECTEDEOF = c_long(14058);
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_ENABLED = 1;
pub const DT_NOCLIP = 256;
pub const ERROR_PLATFORM_MANIFEST_BINARY_ID_NOT_FOUND = c_long(4574);
pub const SDC_APPLY = 128;
pub const S_STACCATO = 2;
pub const VK_GAMEPAD_DPAD_UP = 203;
pub const ERROR_DIFFERENT_VERSION_OF_PACKAGED_SERVICE_INSTALLED = c_long(15654);
pub const ODS_DEFAULT = 32;
pub const __INT_LEAST16_MAX__ = 32767;
pub const LANG_SPANISH = 10;
pub const ERROR_STORAGE_RESERVE_ID_INVALID = c_long(416);
pub const __UINT32_FMTo__ = "o";
pub const IMN_PRIVATE = 14;
pub const EM_SETHANDLE = 188;
pub const ERROR_INVALID_DWP_HANDLE = c_long(1405);
pub const SERVICE_WIN32_SHARE_PROCESS = 32;
pub const ERROR_DS_NO_CROSSREF_FOR_NC = c_long(8363);
pub const EMARCH_ENC_I17_IC_INST_WORD_X = 3;
pub const ERROR_LOG_RESTART_INVALID = c_long(6607);
pub const LSFW_UNLOCK = 2;
pub const DEVICEFAMILYDEVICEFORM_BANKING = 14;
pub const FROM_LEFT_4TH_BUTTON_PRESSED = 16;
pub const VK_F15 = 126;
pub const SPI_ICONVERTICALSPACING = 24;
pub const LOCALE_STHOUSAND = 15;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const META_DELETEOBJECT = 496;
pub const LCMAP_HASH = 262144;
pub const SUBLANG_MOHAWK_MOHAWK = 1;
pub const SUBLANG_SPANISH_ECUADOR = 12;
pub const WNNC_NET_FTP_NFS = 786432;
pub const FACILITY_WEBSERVICES = 61;
pub const ERROR_INVALID_SHARENAME = c_long(1215);
pub const ERROR_CANT_ACCESS_FILE = c_long(1920);
pub const PRODUCT_EMBEDDED_INDUSTRY = 89;
pub const PFD_SWAP_LAYER_BUFFERS = 2048;
pub const ODT_MENU = 1;
pub const VTA_TOP = TA_LEFT;
pub const ReportEvent = ReportEventA;
pub const RI_MOUSE_BUTTON_4_UP = 128;
pub const WH_DEBUG = 9;
pub const SERVICE_STOP_REASON_MAJOR_MIN_CUSTOM = 4194304;
pub const VK_GAMEPAD_DPAD_LEFT = 205;
pub const UNIFIEDBUILDREVISION_MIN = 0;
pub const ENOMEM = 12;
pub const IMAGE_REL_PPC_TOCDEFN = 2048;
pub const MDM_SHIFT_X75_DATA = 0;
pub const LR_CREATEDIBSECTION = 8192;
pub const UMS_VERSION = RTL_UMS_VERSION;
pub const ERROR_DS_OBJECT_RESULTS_TOO_LARGE = c_long(8248);
pub const WM_POINTERROUTEDRELEASED = 595;
pub const IMAGE_REL_AMD64_REL32_5 = 9;
pub const CTRY_SYRIA = 963;
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_X = 3;
pub const ERROR_INVALID_PRIORITY = c_long(1800);
pub const LUA_TOKEN = 4;
pub const LOCALE_SLOCALIZEDLANGUAGENAME = 111;
pub const FACILITY_USERMODE_VOLMGR = 56;
pub const RPC_S_INCOMPLETE_NAME = c_long(1755);
pub const _WIN32_IE_LONGHORN = _WIN32_IE_IE70;
pub const DIAGNOSTIC_REASON_INVALID_FLAGS = ~2147483655;
pub const SECURITY_APP_PACKAGE_BASE_RID = c_long(2);
pub const CTRY_SPAIN = 34;
pub const SPI_SETICONTITLELOGFONT = 34;
pub const _M_X64 = 100;
pub const IO_REPARSE_TAG_CLOUD_A = c_long(2415960090);
pub const DNS_ERROR_RECORD_FORMAT = c_long(9702);
pub const SERVICE_TRIGGER_DATA_TYPE_BINARY = 1;
pub const RESOURCEDISPLAYTYPE_GROUP = 5;
pub const LOCALE_SMONTHNAME10 = 65;
pub const PAGE_EXECUTE = 16;
pub const TAPE_DRIVE_SET_COMPRESSION = 2147484160;
pub const ERROR_NOT_SNAPSHOT_VOLUME = c_long(6841);
pub const CTRY_LATVIA = 371;
pub const HEAP_CREATE_ALIGN_16 = 65536;
pub const ERROR_RM_METADATA_CORRUPT = c_long(6802);
pub const ERROR_MACHINE_LOCKED = c_long(1271);
pub const EMR_RESERVED_109 = 109;
pub const DATA_S_LAST = c_long(262463);
pub const SPI_SETICONS = 88;
pub const SM_CYMENUSIZE = 55;
pub const EIMES_CANCELCOMPSTRINFOCUS = 2;
pub const MARSHAL_S_LAST = c_long(262447);
pub const IMC_SETSTATUSWINDOWPOS = 16;
pub const CopyFile = CopyFileA;
pub const EXCEPTION_SINGLE_STEP = STATUS_SINGLE_STEP;
pub const HTHSCROLL = 6;
pub const LOAD_LIBRARY_SEARCH_SYSTEM32 = 2048;
pub const LOCALE_SABBREVDAYNAME6 = 54;
pub const PeekMessage = PeekMessageA;
pub const RI_MOUSE_BUTTON_2_UP = RI_MOUSE_RIGHT_BUTTON_UP;
pub const MB_ABORTRETRYIGNORE = c_long(2);
pub const ECONNREFUSED = 107;
pub const RegUnLoadKey = RegUnLoadKeyA;
pub const META_SCALEVIEWPORTEXT = 1042;
pub const CB_FINDSTRING = 332;
pub const PFD_SUPPORT_GDI = 16;
pub const wglUseFontOutlines = wglUseFontOutlinesA;
pub const VS_FF_INFOINFERRED = c_long(16);
pub const WM_POINTERDEVICECHANGE = 568;
pub const WS_EX_ACCEPTFILES = c_long(16);
pub const TA_BOTTOM = 8;
pub const STATE_SYSTEM_EXTSELECTABLE = 33554432;
pub const PAN_XHEIGHT_CONSTANT_STD = 3;
pub const SECURITY_ANONYMOUS = SecurityAnonymous << 16;
pub const CTRY_LITHUANIA = 370;
pub const DOMAIN_ALIAS_RID_STORAGE_REPLICA_ADMINS = c_long(582);
pub const ERROR_CLUSTER_MAX_NODES_IN_CLUSTER = c_long(5934);
pub const C3_VOWELMARK = 4;
pub const DNS_ERROR_INVALID_ROLLOVER_PERIOD = c_long(9114);
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_METADATA_CORRUPT = c_long(370);
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_INVALID = 0;
pub const APPCOMMAND_CUT = 37;
pub const WM_TABLET_FIRST = 704;
pub const WSA_QOS_RESERVED_PETYPE = c_long(11031);
pub const WSABASEERR = 10000;
pub const MDM_CCITT_OVERRIDE = 64;
pub const FOCUS_EVENT = 16;
pub const ERROR_TOO_MANY_LINKS = c_long(1142);
pub const MB_SYSTEMMODAL = c_long(4096);
pub const SYSTEM_PROCESS_TRUST_LABEL_VALID_MASK = 16777215;
pub const FILE_TYPE_REMOTE = 32768;
pub const __ATOMIC_RELAXED = 0;
pub const __XSAVEC__ = 1;
pub const DC_SIZE = 8;
pub const R2_NOTCOPYPEN = 4;
pub const ChangeDisplaySettingsEx = ChangeDisplaySettingsExA;
pub const __UINT_FAST16_MAX__ = 65535;
pub const ENABLE_EXTENDED_FLAGS = 128;
pub const CLRRTS = 4;
pub const SUBLANG_BOSNIAN_BOSNIA_HERZEGOVINA_LATIN = 5;
pub const FACILITY_DEVICE_UPDATE_AGENT = 135;
pub const WN_DEVICE_ALREADY_REMEMBERED = ERROR_DEVICE_ALREADY_REMEMBERED;
pub const EMR_ANGLEARC = 41;
pub const POWER_FORCE_TRIGGER_RESET = 2147483648;
pub const ICON_SMALL = 0;
pub const TC_SA_DOUBLE = 64;
pub const ERROR_INVALID_LOCK_RANGE = c_long(307);
pub const ERROR_APP_DATA_NOT_FOUND = c_long(4400);
pub const PROCESSOR_THROTTLE_ENABLED = 1;
pub const IMFT_SUBMENU = 4;
pub const MOUSEEVENTF_VIRTUALDESK = 16384;
pub const __FLT16_MIN_EXP__ = -14;
pub const HCBT_MOVESIZE = 0;
pub const CAL_SABBREVDAYNAME4 = 17;
pub const APPCOMMAND_VOLUME_DOWN = 9;
pub const MAX_PATH = 260;
pub const ERROR_DS_DRA_MAIL_PROBLEM = c_long(8447);
pub const S_WHITEVOICE = 7;
pub const C3_KATAKANA = 16;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const X3_TMPLT_INST_WORD_X = 0;
pub const DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = c_long(554);
pub const CM_DEVICE_ICM = 1;
pub const EXCEPTION_TARGET_UNWIND = 32;
pub const IMAGE_FILE_MACHINE_AXP64 = IMAGE_FILE_MACHINE_ALPHA64;
pub const EVENTLOG_WARNING_TYPE = 2;
pub const WSA_QOS_TRAFFIC_CTRL_ERROR = c_long(11014);
pub const ERROR_EC_CIRCULAR_FORWARDING = c_long(15082);
pub const SC_ZOOM = SC_MAXIMIZE;
pub const LOAD_DLL_DEBUG_EVENT = 6;
pub const S_SERDMD = -10;
pub const ENUM_E_FIRST = c_long(2147746224);
pub const OpenEncryptedFileRaw = OpenEncryptedFileRawA;
pub const SM_MOUSEWHEELPRESENT = 75;
pub const PAN_SERIF_COVE = 2;
pub const STOPBITS_10 = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 1) else @as(WORD, 1);
pub const EMR_CREATECOLORSPACEW = 122;
pub const DOMAIN_ALIAS_RID_GUESTS = c_long(546);
pub const CreateMailslot = CreateMailslotA;
pub const ERROR_INCORRECT_ADDRESS = c_long(1241);
pub const GetClassName = GetClassNameA;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_IMPORT_CONTROL_TRANSFER = 3;
pub const SBM_SETRANGEREDRAW = 230;
pub const SUBLANG_GALICIAN_GALICIAN = 1;
pub const ERROR_PRINTER_DRIVER_BLOCKED = c_long(3014);
pub const SE_GROUP_INTEGRITY_ENABLED = c_long(64);
pub const MAP_FOLDCZONE = 16;
pub const LoadCursor = LoadCursorA;
pub const EHOSTUNREACH = 110;
pub const ERROR_MEMBERS_PRIMARY_GROUP = c_long(1374);
pub const ENLISTMENT_MAXIMUM_OPTION = 1;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_IMAGE_ID = 4;
pub const SUBLANG_ESTONIAN_ESTONIA = 1;
pub const DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD = c_long(9119);
pub const SUBLANG_KYRGYZ_KYRGYZSTAN = 1;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY = c_long(9996);
pub const ACCESS_OBJECT_GUID = 0;
pub const VER_NT_SERVER = 3;
pub const ERROR_CALLBACK_SUPPLIED_INVALID_DATA = c_long(1273);
pub const MOUSEEVENTF_LEFTUP = 4;
pub const InterlockedAnd8 = _InterlockedAnd8;
pub const CTRY_VENEZUELA = 58;
pub const ETO_CLIPPED = 4;
pub const IMN_SETSTATUSWINDOWPOS = 12;
pub const WSAEPROVIDERFAILEDINIT = c_long(10106);
pub const LOCALE_ICALENDARTYPE = 4105;
pub const MEM_DECOMMIT = 16384;
pub const ERROR_DS_LOW_DSA_VERSION = c_long(8568);
pub const BALTIC_CHARSET = 186;
pub const PAN_PROPORTION_INDEX = 3;
pub const ERROR_LOG_SPACE_RESERVED_INVALID = c_long(6626);
pub const CTRY_HUNGARY = 36;
pub const GMEM_NOT_BANKED = 4096;
pub const ERROR_DPL_NOT_SUPPORTED_FOR_USER = c_long(423);
pub const PAN_MIDLINE_LOW_POINTED = 12;
pub const WN_CANNOT_OPEN_PROFILE = ERROR_CANNOT_OPEN_PROFILE;
pub const POINTER_FLAG_DOWN = 65536;
pub const DMPAPER_TABLOID = 3;
pub const OBJ_EXTPEN = 11;
pub const IMAGE_REL_AMD64_PAIR = 15;
pub const VK_END = 35;
pub const IME_THOTKEY_SYMBOL_TOGGLE = 114;
pub const RPI_FLAG_SMB2_SHARECAP_CONTINUOUS_AVAILABILITY = 16;
pub const __FLT16_MAX_10_EXP__ = 4;
pub const CB_RESETCONTENT = 331;
pub const VK_GAMEPAD_Y = 198;
pub const CAL_ICALINTVALUE = 1;
pub const SWP_NOACTIVATE = 16;
pub const CFORCEINLINE = FORCEINLINE;
pub const EVENT_OBJECT_HIDE = 32771;
pub const MDM_X75_DATA_64K = 1;
pub const IMAGE_REL_AMD64_REL32_4 = 8;
pub const VK_SELECT = 41;
pub const PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_MASK = if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 8) else if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 8) else c_uint(3)(i64 << 8);
pub const LSFW_LOCK = 1;
pub const __corei7__ = 1;
pub const GDI_OBJ_LAST = OBJ_COLORSPACE;
pub const CLIPBRD_E_LAST = c_long(2147746271);
pub const GWL_STYLE = -16;
pub const _WIN32_WINNT_VISTA = 1536;
pub const SHUFFLE_FILE_FLAG_SKIP_INITIALIZING_NEW_CLUSTERS = 1;
pub const SPI_SETKEYBOARDCUES = 4107;
pub const SW_PARENTOPENING = 3;
pub const IMN_CLOSECANDIDATE = 4;
pub const EMR_SETLAYOUT = 115;
pub const RegDeleteTree = RegDeleteTreeA;
pub const IO_REPARSE_TAG_CLOUD_B = c_long(2415964186);
pub const R2_WHITE = 16;
pub const MultiplyHigh = __mulh;
pub const LOCALE_SMONTHNAME13 = 4110;
pub const SIF_POS = 4;
pub const BSF_NOTIMEOUTIFNOTHUNG = 64;
pub const WriteProfileSection = WriteProfileSectionA;
pub const LB_SETTABSTOPS = 402;
pub const FILE_NOTIFY_CHANGE_LAST_ACCESS = 32;
pub const ERROR_IPSEC_IKE_INVALID_COOKIE = c_long(13846);
pub const WM_POWER = 72;
pub const FAST_FAIL_DLOAD_PROTECTION_FAILURE = 25;
pub const CTRY_LUXEMBOURG = 352;
pub const OLE_S_LAST = if (@typeInfo(@TypeOf(c_long(262399))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(262399)) else if (@typeInfo(@TypeOf(c_long(262399))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(262399)) else @as(HRESULT, c_long(262399));
pub const ua_lstrlen = lstrlenA;
pub const DEFAULT_PALETTE = 15;
pub const VOS_OS232 = c_long(196608);
pub const JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 16;
pub const FAST_FAIL_VTGUARD_CHECK_FAILURE = 1;
pub const OF_READWRITE = 2;
pub const TAPE_FIXED_PARTITIONS = c_long(0);
pub const LOCALE_SABBREVDAYNAME7 = 55;
pub const InterlockedAnd = _InterlockedAnd;
pub const SKF_RWINLATCHED = 2147483648;
pub const LOCALE_SENGLISHDISPLAYNAME = 114;
pub const IMAGE_REL_SH3_SECTION = 14;
pub const ERROR_DS_INVALID_NAME_FOR_SPN = c_long(8554);
pub const MOVEFILE_FAIL_IF_NOT_TRACKABLE = 32;
pub const MEM_ROTATE = 8388608;
pub const DNS_ERROR_POLICY_INVALID_WEIGHT = c_long(9981);
pub const FACILITY_AAF = 18;
pub const ERROR_CAPAUTHZ_NOT_DEVUNLOCKED = c_long(450);
pub const CONNECT_TEMPORARY = 4;
pub const SUBLANG_SAMI_NORTHERN_NORWAY = 1;
pub const MB_DEFAULT_DESKTOP_ONLY = c_long(131072);
pub const CTRY_THAILAND = 66;
pub const GDICOMMENT_IDENTIFIER = 1128875079;
pub const ERROR_DS_SAM_INIT_FAILURE = c_long(8504);
pub const CTRY_ITALY = 39;
pub const ACCESS_DS_OBJECT_TYPE_NAME_A = "Directory Service Object";
pub const KEY_WOW64_32KEY = 512;
pub const DNS_ERROR_RCODE_YXRRSET = c_long(9007);
pub const LBS_NODATA = c_long(8192);
pub const SecureZeroMemory = RtlSecureZeroMemory;
pub const BS_DEFPUSHBUTTON = c_long(1);
pub const MEM_MAPPED = 262144;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_VENDOR = c_long(13842);
pub const PFD_DOUBLEBUFFER = 1;
pub const EMR_RESERVED_120 = 120;
pub const FEATURESETTING_PROTOCOL = 6;
pub const ERROR_LOG_RESERVATION_INVALID = c_long(6615);
pub const SUBLANG_SPANISH_HONDURAS = 18;
pub const EnumCalendarInfoEx = EnumCalendarInfoExA;
pub const QueryServiceLockStatus = QueryServiceLockStatusA;
pub const PST_X25 = if (@typeInfo(@TypeOf(259)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 259) else if (@typeInfo(@TypeOf(259)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 259) else @as(DWORD, 259);
pub const PST_RS232 = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const COMMON_LVB_GRID_LVERTICAL = 2048;
pub const IMAGE_HOT_PATCH_NONE = 0;
pub const EILSEQ = 42;
pub const FILE_MAP_ALL_ACCESS = SECTION_ALL_ACCESS;
pub const DMPAPER_P16K_ROTATED = 106;
pub const WNNC_NET_LANTASTIC = 655360;
pub const __UINT_FAST32_MAX__ = c_uint(4294967295);
pub const PF_PPC_MOVEMEM_64BIT_OK = 4;
pub const WM_DRAWCLIPBOARD = 776;
pub const HSHELL_WINDOWDESTROYED = 2;
pub const IMAGE_SCN_ALIGN_32BYTES = 6291456;
pub const IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;
pub const SUBLANG_KASHMIRI_SASIA = 2;
pub const MNS_AUTODISMISS = 268435456;
pub const ReadSizeTAcquire = ReadULongPtrAcquire;
pub const ERROR_RESTART_APPLICATION = c_long(1467);
pub const LOCALE_SABBREVCTRYNAME = 7;
pub const GMEM_NODISCARD = 32;
pub const __SPECSTRINGS_STRICT_LEVEL = 1;
pub const IMAGE_REL_PPC_ADDR14 = 5;
pub const CopyMetaFile = CopyMetaFileA;
pub const IO_REPARSE_TAG_AF_UNIX = c_long(2147483683);
pub const TT_ENABLED = 2;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_INDIR_CONTROL_TRANSFER = 4;
pub const CAL_SABBREVDAYNAME5 = 18;
pub const LOCALE_SSORTLOCALE = 123;
pub const ERROR_DBG_REPLY_LATER = c_long(689);
pub const LB_CTLCODE = c_long(0);
pub const POINTER_MESSAGE_FLAG_INRANGE = 2;
pub const GCL_STYLE = -26;
pub const ARW_STARTTOP = c_long(2);
pub const RI_MOUSE_BUTTON_3_DOWN = RI_MOUSE_MIDDLE_BUTTON_DOWN;
pub const ERROR_DS_NO_BEHAVIOR_VERSION_IN_MIXEDDOMAIN = c_long(8569);
pub const STANDARD_RIGHTS_EXECUTE = READ_CONTROL;
pub const DC_EMF_COMPLIANT = 20;
pub const VK_OEM_FJ_TOUROKU = 148;
pub const QUERYDIBSUPPORT = 3073;
pub const MUI_QUERY_CHECKSUM = 2;
pub const DC_MODEL = 24;
pub const ERROR_DS_NOT_INSTALLED = c_long(8200);
pub const ERROR_STACK_OVERFLOW = c_long(1001);
pub const ERROR_SXS_XML_E_BADCHARINSTRING = c_long(14034);
pub const IDHOT_SNAPDESKTOP = -2;
pub const SPI_SETDOUBLECLKHEIGHT = 30;
pub const EMR_SETVIEWPORTORGEX = 12;
pub const WNNC_NET_OBJECT_DIRE = 3145728;
pub const PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_DEFER = if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 20) else if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 20) else c_uint(0)(i64 << 20);
pub const ERROR_DISK_RESET_FAILED = c_long(1128);
pub const SECURITY_MIN_IMPERSONATION_LEVEL = SecurityAnonymous;
pub const ERROR_DS_AUTH_UNKNOWN = c_long(8234);
pub const RPC_S_SERVER_UNAVAILABLE = c_long(1722);
pub const ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = c_long(8497);
pub const MF_BYCOMMAND = c_long(0);
pub const LB_RESETCONTENT = 388;
pub const SHUTDOWN_RESTART_BOOTOPTIONS = 1024;
pub const SUBLANG_SPANISH_CHILE = 13;
pub const SYSTEM_AUDIT_CALLBACK_OBJECT_ACE_TYPE = 15;
pub const MDM_SHIFT_BEARERMODE = 12;
pub const ERROR_TOO_MANY_THREADS = c_long(565);
pub const PAN_STRAIGHT_ARMS_WEDGE = 3;
pub const OemToChar = OemToCharA;
pub const XACT_E_FIRST = 2147799040;
pub const SB_LEFT = 6;
pub const ChangeServiceConfig2 = ChangeServiceConfig2A;
pub const InterlockedExchangePointerAcquire = _InterlockedExchangePointer;
pub const GENERIC_ALL = c_long(268435456);
pub const IMAGE_REL_ARM_ADDR32 = 1;
pub const DM_DITHERTYPE = c_long(67108864);
pub const WSA_QOS_EFILTERCOUNT = c_long(11021);
pub const ERROR_MEDIA_OFFLINE = c_long(4304);
pub const SPI_ICONHORIZONTALSPACING = 13;
pub const InterlockedAnd64Release = _InterlockedAnd64;
pub const TOUCH_HIT_TESTING_CLIENT = 1;
pub const DOMAIN_ALIAS_RID_ACCOUNT_OPS = c_long(548);
pub const CTRL_LOGOFF_EVENT = 5;
pub const ERROR_MUI_FILE_NOT_FOUND = c_long(15100);
pub const ERROR_DS_IS_LEAF = c_long(8243);
pub const ERROR_DS_NO_MSDS_INTID = c_long(8596);
pub const MFS_HILITE = MF_HILITE;
pub const ERROR_DS_NO_PARENT_OBJECT = c_long(8329);
pub const RC_FLOODFILL = 4096;
pub const LANG_JAPANESE = 17;
pub const ERROR_LOG_BLOCK_VERSION = c_long(6608);
pub const LANG_INVARIANT = 127;
pub const LANG_LATVIAN = 38;
pub const DNS_ERROR_RCODE_NO_ERROR = NO_ERROR;
pub const DM_DISPLAYFREQUENCY = c_long(4194304);
pub const GESTUREVISUALIZATION_PRESSANDHOLD = 8;
pub const EN_KILLFOCUS = 512;
pub const VIF_OUTOFSPACE = c_long(256);
pub const ERROR_EVENTLOG_CANT_START = c_long(1501);
pub const DI_COMPAT = 4;
pub const FILE_ADD_FILE = 2;
pub const IMR_QUERYCHARPOSITION = 6;
pub const FACILITY_DISPATCH = 2;
pub const DFCS_SCROLLRIGHT = 3;
pub const IMC_CLOSESTATUSWINDOW = 33;
pub const EVENT_OBJECT_FOCUS = 32773;
pub const DispatchMessage = DispatchMessageA;
pub const MFS_GRAYED = c_long(3);
pub const IMAGE_REL_SH3_ABSOLUTE = 0;
pub const LANG_TURKISH = 31;
pub const SPI_SETKEYBOARDPREF = 69;
pub const ERROR_REPARSE_TAG_INVALID = c_long(4393);
pub const VK_GAMEPAD_X = 197;
pub const BN_HILITE = 2;
pub const DOMAIN_ALIAS_RID_CRYPTO_OPERATORS = c_long(569);
pub const FEATURESETTING_PRIVATE_BEGIN = 4096;
pub const WM_DELETEITEM = 45;
pub const SW_SHOW = 5;
pub const USER_TIMER_MINIMUM = 10;
pub const EMARCH_ENC_I17_IC_SIZE_X = 1;
pub const ERROR_APPHELP_BLOCK = c_long(1259);
pub const WM_CTLCOLORSCROLLBAR = 311;
pub const ERROR_RUNLEVEL_SWITCH_TIMEOUT = c_long(15402);
pub const ERROR_NO_SUCH_DEVICE = c_long(433);
pub const ERROR_RESUME_HIBERNATION = c_long(727);
pub const FAST_FAIL_PAYLOAD_RESTRICTION_VIOLATION = 51;
pub const ERROR_INVALID_CLUSTER_IPV6_ADDRESS = c_long(5911);
pub const WVR_VREDRAW = 512;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_X = 3;
pub const DFCS_CAPTIONHELP = 4;
pub const SPI_GETMOUSESPEED = 112;
pub const IO_REPARSE_TAG_CLOUD_C = c_long(2415968282);
pub const ERROR_BLOCKED_BY_PARENTAL_CONTROLS = c_long(346);
pub const DMPAPER_LETTER_ROTATED = 75;
pub const SECURITY_CAPABILITY_INTERNET_EXPLORER = c_long(4096);
pub const LOCALE_SMONTHNAME12 = 67;
pub const SELECT_CAP_CONVERSION = 1;
pub const HBMMENU_MBAR_MINIMIZE_D = if (@typeInfo(@TypeOf(7)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 7) else if (@typeInfo(@TypeOf(7)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 7) else @as(HBITMAP, 7);
pub const ERROR_WRITE_PROTECT = c_long(19);
pub const CAL_IYEAROFFSETRANGE = 3;
pub const ERROR_LOG_CONTAINER_LIMIT_EXCEEDED = c_long(6617);
pub const WA_ACTIVE = 1;
pub const FACILITY_DLS = 153;
pub const PPM_PERFORMANCE_IMPLEMENTATION_PSTATES = 1;
pub const IMAGE_REL_ARM_GPREL7 = 7;
pub const SUBLANG_UIGHUR_PRC = 1;
pub const ERROR_SHORT_NAMES_NOT_ENABLED_ON_VOLUME = c_long(305);
pub const MAX_REASON_COMMENT_LEN = 512;
pub const SERVICE_TRIGGER_TYPE_AGGREGATE = 30;
pub const FEATURESETTING_PRIVATE_END = 8191;
pub const WNNC_NET_OPENAFS = 3735552;
pub const RTL_CORRELATION_VECTOR_STRING_LENGTH = 129;
pub const RPC_X_WRONG_PIPE_ORDER = c_long(1831);
pub const ERROR_DS_CANT_RETRIEVE_INSTANCE = c_long(8407);
pub const PROOF_QUALITY = 2;
pub const GMMP_USE_DISPLAY_POINTS = 1;
pub const DNS_ERROR_DEFAULT_SCOPE = c_long(9960);
pub const DCB_DIRTY = DCB_ACCUMULATE;
pub const RRF_RT_REG_DWORD = 16;
pub const EMR_POLYTEXTOUTW = 97;
pub const LPD_TRANSPARENT = 4096;
pub const LOCALE_SABBREVDAYNAME4 = 52;
pub const WM_SIZING = 532;
pub const __FLT_MIN_10_EXP__ = -37;
pub const ERROR_LOCAL_USER_SESSION_KEY = c_long(1303);
pub const ETO_REVERSE_INDEX_MAP = 65536;
pub const SS_GRAYRECT = c_long(5);
pub const ERROR_CALL_NOT_IMPLEMENTED = c_long(120);
pub const ERROR_SERIAL_NO_DEVICE = c_long(1118);
pub const ERROR_TRANSACTIONAL_CONFLICT = c_long(6800);
pub const SetCurrentDirectory = SetCurrentDirectoryA;
pub const GetStringTypeEx = GetStringTypeExA;
pub const DFCS_SCROLLSIZEGRIPRIGHT = 16;
pub const PRODUCT_CORE_COUNTRYSPECIFIC = 99;
pub const STATUS_ILLEGAL_INSTRUCTION = if (@typeInfo(@TypeOf(c_long(3221225501))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225501)) else if (@typeInfo(@TypeOf(c_long(3221225501))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225501)) else @as(DWORD, c_long(3221225501));
pub const DATABITS_16 = if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 16) else if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 16) else @as(WORD, 16);
pub const ERROR_CIRCULAR_DEPENDENCY = c_long(1059);
pub const __class_code_content = typ;
pub const APIPRIVATE = __stdcall;
pub const IMAGE_REL_CEF_ADDR32 = 1;
pub const PolyTextOut = PolyTextOutA;
pub const SM_RESERVED4 = 27;
pub const GESTUREVISUALIZATION_TAP = 1;
pub const IMAGE_REL_SH3_SIZEOF_SECTION = 13;
pub const PROGRESS_STOP = 2;
pub const __deref_inout_ecount_nz_opt = size;
pub const IMAGE_REL_AMD64_SECREL = 11;
pub const PROC_IDLE_BUCKET_COUNT_EX = 16;
pub const FIBER_FLAG_FLOAT_SWITCH = 1;
pub const WINSTA_ENUMDESKTOPS = c_long(1);
pub const HOVER_DEFAULT = 4294967295;
pub const SE_GROUP_LOGON_ID = c_long(3221225472);
pub const FILE_TRAVERSE = 32;
pub const _WIN32_IE_IE40 = 1024;
pub const DM_PRINTQUALITY = c_long(1024);
pub const ERROR_EVT_EVENT_DEFINITION_NOT_FOUND = c_long(15032);
pub const CHECKPNGFORMAT = 4120;
pub const SPI_GETPENSIDEMOVETHRESHOLD = 138;
pub const DM_OUT_DEFAULT = DM_UPDATE;
pub const DMPAPER_B5_TRANSVERSE = 62;
pub const NeedCurrentDirectoryForExePath = NeedCurrentDirectoryForExePathA;
pub const CBR_57600 = 57600;
pub const ERROR_INSTALL_WRONG_PROCESSOR_ARCHITECTURE = c_long(15632);
pub const WC_ERR_INVALID_CHARS = 128;
pub const GETSETPAPERMETRICS = 35;
pub const __deref_inout_ecount_nz = size;
pub const ERROR_SPL_NO_STARTDOC = c_long(3003);
pub const ERROR_PNP_QUERY_REMOVE_DEVICE_TIMEOUT = c_long(480);
pub const VIF_CANNOTDELETECUR = c_long(16384);
pub const TRANSACTION_NOTIFY_PREPREPARE_COMPLETE = 16;
pub const CLAIM_SECURITY_ATTRIBUTE_DISABLED_BY_DEFAULT = 8;
pub const ChangeDisplaySettings = ChangeDisplaySettingsA;
pub const SBS_SIZEGRIP = c_long(16);
pub const QDC_INCLUDE_HMD = 32;
pub const ERROR_DEVICE_NOT_CONNECTED = c_long(1167);
pub const CP_OEMCP = 1;
pub const ERROR_DS_CANT_MOVE_DELETED_OBJECT = c_long(8489);
pub const ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = c_long(8392);
pub const MSGFLT_ADD = 1;
pub const LGRPID_WESTERN_EUROPE = 1;
pub const PPM_FIRMWARE_PSS = 64;
pub const GMEM_ZEROINIT = 64;
pub const ERROR_SXS_LEAF_MANIFEST_DEPENDENCY_NOT_INSTALLED = c_long(14016);
pub const PRODUCT_SERVER_FOUNDATION = 33;
pub const WSF_VISIBLE = c_long(1);
pub const ERROR_ENCRYPTED_IO_NOT_POSSIBLE = c_long(808);
pub const ERROR_SXS_XML_E_MISSINGEQUALS = c_long(14073);
pub const DRIVE_REMOVABLE = 2;
pub const IMAGE_REL_AMD64_CFG_CALL = 22;
pub const ERROR_NONE_MAPPED = c_long(1332);
pub const WN_NOT_CONTAINER = ERROR_NOT_CONTAINER;
pub const TME_CANCEL = 2147483648;
pub const POLYGONALCAPS = 32;
pub const VTA_LEFT = TA_BOTTOM;
pub const ERROR_ENCRYPTING_METADATA_DISALLOWED = c_long(431);
pub const MFS_UNHILITE = MF_UNHILITE;
pub const WNNC_NET_LANSTEP = 524288;
pub const ERROR_CLUSTER_FAULT_DOMAIN_S2D_CONNECTIVITY_LOSS = c_long(5997);
pub const FILE_NOTIFY_CHANGE_LAST_WRITE = 16;
pub const FACILITY_DEPLOYMENT_SERVICES_PXE = 263;
pub const GESTUREVISUALIZATION_ON = 31;
pub const ERROR_CTX_SHADOW_NOT_RUNNING = c_long(7057);
pub const ERROR_DS_NAME_ERROR_DOMAIN_ONLY = c_long(8473);
pub const CAL_PERSIAN = 22;
pub const SEC_COMMIT = 134217728;
pub const WM_CTLCOLOREDIT = 307;
pub const STDMETHODVCALLTYPE = __cdecl;
pub const ERROR_DRIVER_PROCESS_TERMINATED = c_long(1291);
pub const WM_INPUTLANGCHANGE = 81;
pub const CWF_CREATE_ONLY = 1;
pub const VK_PACKET = 231;
pub const FACILITY_BACKGROUNDCOPY = 32;
pub const WriteSizeTRelease = WriteULongPtrRelease;
pub const SetICMProfile = SetICMProfileA;
pub const DEVICEFAMILYINFOENUM_SERVER_NANO = 13;
pub const ERROR_SECUREBOOT_POLICY_NOT_AUTHORIZED = c_long(4427);
pub const LB_SETCOUNT = 423;
pub const SPI_GETTOOLTIPFADE = 4120;
pub const ETO_NUMERICSLOCAL = 1024;
pub const BACKUP_PROPERTY_DATA = 6;
pub const RIM_TYPEMAX = 2;
pub const ERROR_SXS_IDENTITY_PARSE_ERROR = c_long(14093);
pub const UOI_USER_SID = 4;
pub const SPIF_UPDATEINIFILE = 1;
pub const __LZCNT__ = 1;
pub const DFCS_SCROLLCOMBOBOX = 5;
pub const COLOR_HOTLIGHT = 26;
pub const PAN_CONTRAST_LOW = 4;
pub const RESOURCEDISPLAYTYPE_TREE = 10;
pub const PBT_APMSTANDBY = 5;
pub const OLEOBJ_S_LAST = c_long(262543);
pub const PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_NOINHERIT = if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 12) else if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 12) else c_uint(3)(i64 << 12);
pub const DNS_ERROR_SUBNET_DOES_NOT_EXIST = c_long(9978);
pub const RotateLeft32 = _rotl;
pub const FACILITY_UMI = 22;
pub const ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = c_long(8231);
pub const CF_DIBV5 = 17;
pub const VK_F18 = 129;
pub const FAST_FAIL_INVALID_CALL_IN_DLL_CALLOUT = 23;
pub const __FMA__ = 1;
pub const RPI_SMB2_FLAG_SERVERCAP_DFS = 1;
pub const __MMX__ = 1;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_BASE = 32;
pub const _WIN32_IE_IE90 = 2304;
pub const META_CREATEPALETTE = 247;
pub const TC_CR_90 = 8;
pub const SPI_SETLISTBOXSMOOTHSCROLLING = 4103;
pub const MAXUINT = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT, 0) else @as(UINT, 0))) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT, 0) else @as(UINT, 0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT, 0) else @as(UINT, 0))) == @import("builtin").TypeId.Int) @intToPtr(UINT, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT, 0) else @as(UINT, 0)) else @as(UINT, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT, 0) else @as(UINT, 0));
pub const IMR_DOCUMENTFEED = 7;
pub const SECURITY_PROCESS_PROTECTION_TYPE_LITE_RID = c_long(512);
pub const LOCALE_SABBREVMONTHNAME2 = 69;
pub const ERROR_SERVICE_EXISTS_AS_NON_PACKAGED_SERVICE = c_long(15655);
pub const FW_SEMIBOLD = 600;
pub const FAST_FAIL_UNEXPECTED_HEAP_EXCEPTION = 35;
pub const CTLCOLOR_MSGBOX = 0;
pub const SUBLANG_TELUGU_INDIA = 1;
pub const REASON_LEGACY_API = SHTDN_REASON_LEGACY_API;
pub const EM_GETHANDLE = 189;
pub const EADDRNOTAVAIL = 101;
pub const PMB_ACTIVE = 1;
pub const VIF_FILEINUSE = c_long(128);
pub const COLOR_3DHIGHLIGHT = COLOR_BTNHIGHLIGHT;
pub const LOCALE_SDAYNAME2 = 43;
pub const LOCALE_SISO639LANGNAME2 = 103;
pub const ERROR_ACCOUNT_EXPIRED = c_long(1793);
pub const OpenDesktop = OpenDesktopA;
pub const DISP_CHANGE_BADPARAM = -5;
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const SPI_GETBORDER = 5;
pub const TAPE_LOAD = c_long(0);
pub const ARW_BOTTOMLEFT = c_long(0);
pub const GlobalFindAtom = GlobalFindAtomA;
pub const SPI_GETCLIENTAREAANIMATION = 4162;
pub const _WIN32_IE_WIN8 = _WIN32_IE_IE100;
pub const ERROR_CLUSTER_GROUP_BUSY = c_long(5944);
pub const ERROR_BADSTARTPOSITION = c_long(778);
pub const DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;
pub const HCBT_KEYSKIPPED = 7;
pub const DCBA_FACEUPNONE = 0;
pub const DM_MEDIATYPE = c_long(33554432);
pub const ERROR_CLUSTER_DISK_NOT_CONNECTED = c_long(5963);
pub const InterlockedExchangeAddRelease64 = _InterlockedExchangeAdd64;
pub const SERVICE_CONTROL_PARAMCHANGE = 6;
pub const ERROR_OPEN_FILES = c_long(2401);
pub const DC_VERSION = 10;
pub const DOMAIN_ALIAS_RID_REPLICATOR = c_long(552);
pub const GetMessage = GetMessageA;
pub const CS_INSERTCHAR = 8192;
pub const CTRY_JORDAN = 962;
pub const _Function_ignore_lock_checking_ = lock;
pub const ERROR_DS_REMOTE_CROSSREF_OP_FAILED = c_long(8601);
pub const ERROR_CANT_OPEN_MINIVERSION_WITH_MODIFY_INTENT = c_long(6811);
pub const DM_ICMINTENT = c_long(16777216);
pub const LOCALE_IGEOID = 91;
pub const LR_DEFAULTCOLOR = 0;
pub const VIF_CANNOTREADSRC = c_long(65536);
pub const ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = c_long(8536);
pub const GWLP_HINSTANCE = -6;
pub const PROCESS_DUP_HANDLE = 64;
pub const GetEnvironmentVariable = GetEnvironmentVariableA;
pub const PSINJECT_COMMENTS = 11;
pub const ERROR_CAPAUTHZ_DB_CORRUPTED = c_long(455);
pub const APPCOMMAND_MEDIA_FAST_FORWARD = 49;
pub const ERROR_IPSEC_IKE_CERT_CHAIN_POLICY_MISMATCH = c_long(13887);
pub const FS_JOHAB = c_long(2097152);
pub const DT_DISPFILE = 6;
pub const ERROR_PWD_TOO_SHORT = c_long(615);
pub const EXT_DEVICE_CAPS = 4099;
pub const FLASHW_TRAY = 2;
pub const IMAGE_REL_PPC_IMGLUE = 14;
pub const DEVICEFAMILYDEVICEFORM_GAMING = 17;
pub const WSA_QOS_ESDMODEOBJ = c_long(11029);
pub const APPCOMMAND_BROWSER_REFRESH = 3;
pub const TPM_NONOTIFY = c_long(128);
pub const GW_ENABLEDPOPUP = 6;
pub const __DBL_DIG__ = 15;
pub const MESSAGE_RESOURCE_UNICODE = 1;
pub const LOCALE_SABBREVDAYNAME5 = 53;
pub const ERROR_IRQ_BUSY = c_long(1119);
pub const MF_DELETE = c_long(512);
pub const ERROR_ALREADY_FIBER = c_long(1280);
pub const ENABLEDUPLEX = 28;
pub const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 8192;
pub const MNS_CHECKORBMP = 67108864;
pub const ERROR_LOG_BLOCK_INVALID = c_long(6609);
pub const LMEM_MODIFY = 128;
pub const PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 12) else if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 12) else c_uint(2)(i64 << 12);
pub const EISCONN = 113;
pub const __VERSION__ = "4.2.1 Compatible Clang 8.0.0 (tags/RELEASE_800/rc5)";
pub const SE_RM_CONTROL_VALID = 16384;
pub const WM_SYSCOMMAND = 274;
pub const FORMAT_MESSAGE_IGNORE_INSERTS = 512;
pub const SSF_INDICATOR = 4;
pub const SUBLANG_TAMAZIGHT_MOROCCO_TIFINAGH = 4;
pub const SPI_SETCLEARTYPE = 4169;
pub const SUBLANG_TIGRIGNA_ERITREA = 2;
pub const ERROR_APP_INIT_FAILURE = c_long(575);
pub const ERROR_INSTALL_LANGUAGE_UNSUPPORTED = c_long(1623);
pub const IMAGE_REL_ARM_BRANCH24 = 3;
pub const ERROR_INVALID_ACCOUNT_NAME = c_long(1315);
pub const CLIENTSITE_S_FIRST = c_long(262544);
pub const WS_VISIBLE = c_long(268435456);
pub const COMPRESSION_ENGINE_HIBER = 512;
pub const FACILITY_GAME = 2340;
pub const DEVICEFAMILYINFOENUM_UAP = 0;
pub const JOB_OBJECT_MSG_SILO_TERMINATED = 13;
pub const SPI_SETPENDRAGOUTTHRESHOLD = 135;
pub const UISF_HIDEFOCUS = 1;
pub const CheckNameLegalDOS8Dot3 = CheckNameLegalDOS8Dot3A;
pub const SECURITY_DASHOST_ID_RID_COUNT = c_long(6);
pub const SPI_GETWINARRANGING = 130;
pub const ENCLAVE_SHORT_ID_LENGTH = 16;
pub const TIME_ZONE_ID_INVALID = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4294967295) else @as(DWORD, 4294967295);
pub const ERROR_CRM_PROTOCOL_ALREADY_EXISTS = c_long(6710);
pub const InterlockedAdd64 = _InlineInterlockedAdd64;
pub const ERROR_DS_LOW_ADLDS_FFL = c_long(8643);
pub const ERROR_DEVICE_ALREADY_REMEMBERED = c_long(1202);
pub const X3_EMPTY_INST_WORD_X = 1;
pub const NUMFONTS = 22;
pub const AbnormalTermination = _abnormal_termination;
pub const IMAGE_REL_PPC_ADDR16 = 4;
pub const EMR_EXTTEXTOUTW = 84;
pub const POWERBUTTON_ACTION_VALUE_SLEEP = 2;
pub const BN_DOUBLECLICKED = 5;
pub const BAUD_57600 = if (@typeInfo(@TypeOf(262144)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 262144) else if (@typeInfo(@TypeOf(262144)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 262144) else @as(DWORD, 262144);
pub const SM_SWAPBUTTON = 23;
pub const ERROR_STREAM_MINIVERSION_NOT_VALID = c_long(6809);
pub const MDM_MASK_BEARERMODE = 61440;
pub const MB_DEFBUTTON2 = c_long(256);
pub const ERROR_TRANSACTION_SCOPE_CALLBACKS_NOT_SET = c_long(6836);
pub const TRUNCATE_EXISTING = 5;
pub const DMICMMETHOD_NONE = 1;
pub const SUBLANG_KAZAK_KAZAKHSTAN = 1;
pub const WINSTA_EXITWINDOWS = c_long(64);
pub const ERROR_MRM_INVALID_RESOURCE_IDENTIFIER = c_long(15120);
pub const PRODUCT_PPI_PRO = 119;
pub const WINSTA_WRITEATTRIBUTES = c_long(16);
pub const HELP_QUIT = c_long(2);
pub const UIS_INITIALIZE = 3;
pub const SYSTEM_ACCESS_FILTER_VALID_MASK = 16777215;
pub const ODDPARITY = 1;
pub const SET_SCREEN_ANGLE = 4105;
pub const TabbedTextOut = TabbedTextOutA;
pub const IMAGE_DOS_SIGNATURE = 23117;
pub const ERROR_IPSEC_MM_AUTH_EXISTS = c_long(13010);
pub const ERROR_BAD_CLUSTERS = c_long(6849);
pub const MOUSEWHEEL_ROUTING_FOCUS = 0;
pub const META_ARC = 2071;
pub const WNNC_NET_LOCUS = 393216;
pub const ERROR_LIBRARY_FULL = c_long(4322);
pub const InterlockedCompareExchange = _InterlockedCompareExchange;
pub const ERROR_INVALID_STARTING_CODESEG = c_long(188);
pub const MF_CHECKED = c_long(8);
pub const SPI_SETMENUANIMATION = 4099;
pub const SystemParametersInfo = SystemParametersInfoA;
pub const ERROR_CLOUD_FILE_ALREADY_CONNECTED = c_long(378);
pub const UISF_HIDEACCEL = 2;
pub const EVENT_SYSTEM_DRAGDROPSTART = 14;
pub const KLF_RESET = 1073741824;
pub const SUBLANG_NEPALI_INDIA = 2;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM_CORE = 63;
pub const DRIVE_RAMDISK = 6;
pub const ERROR_DATABASE_DOES_NOT_EXIST = c_long(1065);
pub const INPUTLANGCHANGE_BACKWARD = 4;
pub const STOPBITS_15 = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 2) else @as(WORD, 2);
pub const LANG_FULAH = 103;
pub const TAPE_DRIVE_LOAD_UNLD_IMMED = 2147483680;
pub const APPCOMMAND_MEDIA_NEXTTRACK = 11;
pub const TT_PRIM_QSPLINE = 2;
pub const WNNC_NET_SHIVA = 3342336;
pub const ERROR_CLUSTER_NODE_DRAIN_IN_PROGRESS = c_long(5962);
pub const MEM_4MB_PAGES = 2147483648;
pub const ERROR_INSTALL_SERVICE_SAFEBOOT = c_long(1652);
pub const APPCOMMAND_BROWSER_FORWARD = 2;
pub const IME_ITHOTKEY_PREVIOUS_COMPOSITION = 513;
pub const FindAtom = FindAtomA;
pub const IGIMII_CONFIGURE = 4;
pub const PFD_OVERLAY_PLANE = 1;
pub const COLOR_WINDOWFRAME = 6;
pub const DM_INTERLACED = 2;
pub const RPC_S_NO_PROTSEQS_REGISTERED = c_long(1714);
pub const VK_F19 = 130;
pub const SUBLANG_ENGLISH_ZIMBABWE = 12;
pub const IME_CMODE_NATIVE = 1;
pub const ERROR_IPSEC_IKE_MM_ACQUIRE_DROP = c_long(13809);
pub const EXCEPTION_GUARD_PAGE = STATUS_GUARD_PAGE_VIOLATION;
pub const ES_NOHIDESEL = c_long(256);
pub const PAN_LETT_OBLIQUE_ROUNDED = 13;
pub const PRODUCT_PROFESSIONAL_EMBEDDED = 58;
pub const XSTATE_MPX_BNDCSR = 4;
pub const LOCALE_SABBREVMONTHNAME3 = 70;
pub const SECURITY_DESCRIPTOR_MIN_LENGTH = if (@typeInfo(@TypeOf(SECURITY_DESCRIPTOR)) == @import("builtin").TypeId.Pointer) @ptrCast(sizeof, SECURITY_DESCRIPTOR) else if (@typeInfo(@TypeOf(SECURITY_DESCRIPTOR)) == @import("builtin").TypeId.Int) @intToPtr(sizeof, SECURITY_DESCRIPTOR) else sizeof(SECURITY_DESCRIPTOR);
pub const ERROR_INVALID_FORM_SIZE = c_long(1903);
pub const ERROR_SXS_XML_E_EXPECTINGCLOSEQUOTE = c_long(14045);
pub const STARTF_USESIZE = 2;
pub const CTRY_GEORGIA = 995;
pub const LOCALE_SDAYNAME3 = 44;
pub const SERVICE_CONFIG_PRESHUTDOWN_INFO = 7;
pub const SERVICE_STOP_REASON_MINOR_MAINTENANCE = 2;
pub const CBS_HASSTRINGS = c_long(512);
pub const LOCALE_SPARENT = 109;
pub const DC_PRINTRATEUNIT = 27;
pub const ERROR_CONTROL_ID_NOT_FOUND = c_long(1421);
pub const CTRY_TRINIDAD_Y_TOBAGO = 1;
pub const _DEBUG = 1;
pub const SKF_LALTLOCKED = 1048576;
pub const COPY_FILE_COPY_SYMLINK = 2048;
pub const REGDB_E_FIRST = c_long(2147746128);
pub const ERROR_EVT_MALFORMED_XML_TEXT = c_long(15008);
pub const ERROR_WMI_SERVER_UNAVAILABLE = c_long(4208);
pub const CDS_FULLSCREEN = 4;
pub const R2_LAST = 16;
pub const SUBLANG_KANNADA_INDIA = 1;
pub const DMPAPER_ENV_C3 = 29;
pub const CTRY_GUATEMALA = 502;
pub const VFT2_DRV_COMM = c_long(10);
pub const CREATE_FOR_IMPORT = 1;
pub const ERROR_IPSEC_IKE_INVALID_FILTER = c_long(13858);
pub const IME_REGWORD_STYLE_EUDC = 1;
pub const IMAGE_REL_AMD64_REL32_1 = 5;
pub const ImmUnregisterWord = ImmUnregisterWordA;
pub const GUI_INMENUMODE = 4;
pub const DOMAIN_USER_RID_DEFAULT_ACCOUNT = c_long(503);
pub const ERROR_CANT_ENABLE_DENY_ONLY = c_long(629);
pub const BM_GETSTATE = 242;
pub const DMPAPER_CSHEET = 24;
pub const ERROR_SXS_DUPLICATE_ASSEMBLY_NAME = c_long(14027);
pub const SM_DIGITIZER = 94;
pub const EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = 32816;
pub const COPY_FILE_NO_BUFFERING = 4096;
pub const CreateDialogParam = CreateDialogParamA;
pub const AnsiLowerBuff = CharLowerBuffA;
pub const FILE_READ_EA = 8;
pub const ERROR_CANNOT_IMPERSONATE = c_long(1368);
pub const ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = c_long(8560);
pub const SPI_SETTOOLTIPFADE = 4121;
pub const ERROR_UNEXPECTED_MM_CREATE_ERR = c_long(556);
pub const WM_DROPFILES = 563;
pub const ERROR_CLUSTER_NO_QUORUM = c_long(5925);
pub const ISC_SHOWUIALL = 3221225487;
pub const DNS_ERROR_ZONE_CREATION_FAILED = c_long(9608);
pub const SUBLANG_SCOTTISH_GAELIC = 1;
pub const WM_DISPLAYCHANGE = 126;
pub const SERVICES_ACTIVE_DATABASEA = "ServicesActive";
pub const ERROR_MUI_INVALID_RC_CONFIG = c_long(15102);
pub const SUBLANG_VALENCIAN_VALENCIA = 2;
pub const PSINJECT_DOCUMENTPROCESSCOLORS = 10;
pub const GCL_REVERSECONVERSION = 2;
pub const ERROR_BAD_DEVICE = c_long(1200);
pub const DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD = c_long(9123);
pub const WSAEPROCLIM = c_long(10067);
pub const SPI_SETSNAPTODEFBUTTON = 96;
pub const ENABLE_LVB_GRID_WORLDWIDE = 16;
pub const __UINT_LEAST32_FMTo__ = "o";
pub const MB_ICONINFORMATION = MB_ICONASTERISK;
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const DISPLAYCONFIG_PATH_SOURCE_MODE_IDX_INVALID = 65535;
pub const MNC_IGNORE = 0;
pub const WM_LBUTTONUP = 514;
pub const __INT_FAST64_FMTd__ = "lld";
pub const SERVICE_CONTROL_NETBINDENABLE = 9;
pub const DEVICEFAMILYDEVICEFORM_STICKPC = 8;
pub const ERROR_CONNECTED_OTHER_PASSWORD = c_long(2108);
pub const SECURITY_MANDATORY_PROTECTED_PROCESS_RID = c_long(20480);
pub const RPC_S_PROTSEQ_NOT_SUPPORTED = c_long(1703);
pub const DMPAPER_DBL_JAPANESE_POSTCARD = 69;
pub const ERROR_IPSEC_IKE_QM_DELAY_DROP = c_long(13815);
pub const WM_NCLBUTTONDBLCLK = 163;
pub const X3_BTYPE_QP_INST_WORD_X = 2;
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const SHTDN_REASON_MINOR_RECONFIG = 4;
pub const RI_MOUSE_LEFT_BUTTON_DOWN = 1;
pub const DC_FIELDS = 1;
pub const RIGHT_ALT_PRESSED = 1;
pub const ERROR_CLOUD_FILE_NOT_UNDER_SYNC_ROOT = c_long(390);
pub const PW_CLIENTONLY = 1;
pub const GetSystemDirectory = GetSystemDirectoryA;
pub const FILE_FLAG_OPEN_NO_RECALL = 1048576;
pub const TT_PRIM_LINE = 1;
pub const PFD_NEED_SYSTEM_PALETTE = 256;
pub const WSAENAMETOOLONG = c_long(10063);
pub const ERROR_LOG_CONTAINER_READ_FAILED = c_long(6639);
pub const OUT_PS_ONLY_PRECIS = 10;
pub const InitiateSystemShutdown = InitiateSystemShutdownA;
pub const MKF_MOUSEMODE = 2147483648;
pub const ERROR_PACKAGED_SERVICE_REQUIRES_ADMIN_PRIVILEGES = c_long(15656);
pub const WNNC_NET_KWNP = 3932160;
pub const SKF_AUDIBLEFEEDBACK = 64;
pub const ERROR_IPSEC_IKE_ERROR = c_long(13816);
pub const OLDFONTENUMPROC = OLDFONTENUMPROCA;
pub const ERROR_USER_APC = c_long(737);
pub const ERROR_IPSEC_MM_POLICY_PENDING_DELETION = c_long(13021);
pub const CTRY_SWITZERLAND = 41;
pub const InterlockedBitTestAndSet64Release = _interlockedbittestandset64;
pub const DTR_CONTROL_DISABLE = 0;
pub const MDM_X75_DATA_128K = 2;
pub const SC_NEXTWINDOW = 61504;
pub const ACCESS_DENIED_CALLBACK_ACE_TYPE = 10;
pub const ERROR_NO_EFS = c_long(6004);
pub const HTMENU = 5;
pub const SUBLANG_LAO_LAO = 1;
pub const DFC_BUTTON = 4;
pub const SM_CYFULLSCREEN = 17;
pub const SOUND_SYSTEM_APPSTART = 12;
pub const VK_OEM_FJ_ROYA = 150;
pub const GetSystemWindowsDirectory = GetSystemWindowsDirectoryA;
pub const BATTERY_DISCHARGE_FLAGS_ENABLE = 2147483648;
pub const ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = c_long(8519);
pub const DCX_INTERSECTRGN = c_long(128);
pub const XBUTTON2 = 2;
pub const PROCESS_MODE_BACKGROUND_END = 2097152;
pub const __SIZE_FMTu__ = "llu";
pub const ERROR_CLUSTER_REGISTRY_INVALID_FUNCTION = c_long(5915);
pub const MB_DEFBUTTON3 = c_long(512);
pub const IMAGE_POLICY_SECTION_NAME = ".tPolicy";
pub const WT_TRANSFER_IMPERSONATION = 256;
pub const CreateMDIWindow = CreateMDIWindowA;
pub const RDW_INTERNALPAINT = 2;
pub const EV_TXEMPTY = 4;
pub const ERROR_DS_DISALLOWED_IN_SYSTEM_CONTAINER = c_long(8615);
pub const R2_NOTXORPEN = 10;
pub const ERROR_INSTALL_FAILED = c_long(15609);
pub const QS_RAWINPUT = 1024;
pub const PDCAP_D0_SUPPORTED = 1;
pub const ERROR_PORT_UNREACHABLE = c_long(1234);
pub const WNetGetUser = WNetGetUserA;
pub const DlgDirListComboBox = DlgDirListComboBoxA;
pub const ERROR_DS_CANT_FIND_NC_IN_CACHE = c_long(8421);
pub const ERROR_CTX_INVALID_WD = c_long(7049);
pub const PRAGMA_DEPRECATED_DDK = 0;
pub const ERROR_INVALID_LOGON_TYPE = c_long(1367);
pub const ERROR_LOG_POLICY_NOT_INSTALLED = c_long(6620);
pub const ERROR_CONNECTION_REFUSED = c_long(1225);
pub const PROCESS_HEAP_ENTRY_MOVEABLE = 16;
pub const ERROR_VOLSNAP_PREPARE_HIBERNATE = c_long(655);
pub const STRETCH_HALFTONE = HALFTONE;
pub const ERROR_TS_INCOMPATIBLE_SESSIONS = c_long(7069);
pub const ERROR_APP_DATA_EXPIRED = c_long(4401);
pub const DC_NUP = 33;
pub const IMEVER_0310 = 196618;
pub const SPI_GETDISABLEOVERLAPPEDCONTENT = 4160;
pub const EBUSY = 16;
pub const FillConsoleOutputCharacter = FillConsoleOutputCharacterA;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 60) else if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 60) else c_uint(2)(i64 << 60);
pub const EnumDisplaySettings = EnumDisplaySettingsA;
pub const ERROR_USER_MAPPED_FILE = c_long(1224);
pub const ERROR_DS_INVALID_LDAP_DISPLAY_NAME = c_long(8479);
pub const WIN31_CLASS = NULL;
pub const EMR_SETMITERLIMIT = 58;
pub const GetPrivateProfileStruct = GetPrivateProfileStructA;
pub const SS_RIGHT = c_long(2);
pub const MKF_INDICATOR = 32;
pub const FACILITY_DEPLOYMENT_SERVICES_TRANSPORT_MANAGEMENT = 272;
pub const MAXIMUM_PROCESSORS = MAXIMUM_PROC_PER_GROUP;
pub const ERROR_CTX_CDM_CONNECT = c_long(7066);
pub const ERROR_REC_NON_EXISTENT = c_long(4005);
pub const NMPWAIT_USE_DEFAULT_WAIT = 0;
pub const MDM_HDLCPPP_AUTH_MSCHAP = 4;
pub const DSS_UNION = 16;
pub const PDCAP_WAKE_FROM_D1_SUPPORTED = 32;
pub const EVENT_SYSTEM_CONTEXTHELPEND = 13;
pub const UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7;
pub const VOS__WINDOWS16 = c_long(1);
pub const SORT_CHINESE_PRCP = 0;
pub const DC_BRUSH = 18;
pub const FILE_SUPPORTS_EXTENDED_ATTRIBUTES = 8388608;
pub const JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;
pub const CTRY_CANADA = 2;
pub const TRANSACTION_MANAGER_COMMIT_DEFAULT = 0;
pub const ERROR_EXCEPTION_IN_SERVICE = c_long(1064);
pub const PARITY_SPACE = if (@typeInfo(@TypeOf(4096)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 4096) else if (@typeInfo(@TypeOf(4096)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 4096) else @as(WORD, 4096);
pub const ACTIVATION_CONTEXT_SECTION_COM_SERVER_REDIRECTION = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_DEFER = if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 36) else if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 36) else c_uint(0)(i64 << 36);
pub const GetObject = GetObjectA;
pub const FACILITY_USN = 129;
pub const FACILITY_BLUETOOTH_ATT = 101;
pub const POWERBUTTON_ACTION_VALUE_NOTHING = 0;
pub const IMAGE_DEBUG_TYPE_BORLAND = 9;
pub const ACTIVATION_CONTEXT_SECTION_CLR_SURROGATES = 9;
pub const DMPAPER_PENV_7_ROTATED = 115;
pub const FAST_FAIL_UNHANDLED_LSS_EXCEPTON = 54;
pub const __LDBL_MIN_10_EXP__ = -307;
pub const EVENTLOG_SEEK_READ = 2;
pub const ARW_UP = c_long(4);
pub const ENLISTMENT_SUBORDINATE_RIGHTS = 8;
pub const ERROR_CLUSTER_NODE_ALREADY_DOWN = c_long(5062);
pub const MDM_PROTOCOLID_V128 = 2;
pub const ERROR_VOLSNAP_HIBERNATE_READY = c_long(761);
pub const PBT_APMQUERYSTANDBY = 1;
pub const ACCESS_MAX_MS_V4_ACE_TYPE = 8;
pub const MIIM_CHECKMARKS = 8;
pub const EMR_PIE = 47;
pub const ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = c_long(8557);
pub const ERROR_DS_DOMAIN_VERSION_TOO_LOW = c_long(8566);
pub const ERROR_SMB_GUEST_LOGON_BLOCKED = c_long(1272);
pub const PROCESS_LEAP_SECOND_INFO_VALID_FLAGS = PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND;
pub const InterlockedDecrementNoFence = _InterlockedDecrement;
pub const TRANSACTION_MANAGER_CORRUPT_FOR_RECOVERY = 16;
pub const LCMAP_SIMPLIFIED_CHINESE = 33554432;
pub const ERROR_INVALID_INDEX = c_long(1413);
pub const DIAGNOSTIC_REASON_DETAILED_STRING = 2;
pub const VK_OEM_CUSEL = 239;
pub const ERROR_ACCESS_DISABLED_WEBBLADE_TAMPER = c_long(1278);
pub const CONSOLE_FULLSCREEN_HARDWARE = 2;
pub const TOUCHEVENTF_PALM = 128;
pub const ERROR_CLUSTER_INVALID_IPV6_NETWORK = c_long(5926);
pub const DNS_ERROR_INVALID_NAME_CHAR = c_long(9560);
pub const ERROR_TOO_MANY_NAMES = c_long(68);
pub const DLGC_WANTTAB = 2;
pub const __clang__ = 1;
pub const GetVolumePathNamesForVolumeName = GetVolumePathNamesForVolumeNameA;
pub const ODS_NOACCEL = 256;
pub const PF_RDTSCP_INSTRUCTION_AVAILABLE = 32;
pub const VOS_DOS_WINDOWS16 = c_long(65537);
pub const GetCompressedFileSize = GetCompressedFileSizeA;
pub const ERROR_SHUTDOWN_USERS_LOGGED_ON = c_long(1191);
pub const IMAGE_REL_IA64_UREL32 = 20;
pub const PRODUCT_EDUCATION = 121;
pub const LANG_CHINESE = 4;
pub const SUBLANG_GUJARATI_INDIA = 1;
pub const FAST_FAIL_INVALID_ARG = 5;
pub const FACILITY_XAML = 43;
pub const SHTDN_REASON_MINOR_DC_PROMOTION = 33;
pub const XSTATE_MPX_BNDREGS = 3;
pub const FACILITY_VISUALCPP = 109;
pub const ERROR_MESSAGE_EXCEEDS_MAX_SIZE = c_long(4336);
pub const OUT_STROKE_PRECIS = 3;
pub const LookupAccountNameLocal = LookupAccountNameLocalA;
pub const DNS_ERROR_RCODE_BADTIME = c_long(9018);
pub const MM_ANISOTROPIC = 8;
pub const FACILITY_WINDOWS_CE = 24;
pub const WNNC_NET_LIFENET = 917504;
pub const DFC_POPUPMENU = 5;
pub const GetFileSecurity = GetFileSecurityA;
pub const IMAGE_SYM_TYPE_UNION = 9;
pub const DecryptFile = DecryptFileA;
pub const ERROR_WIP_ENCRYPTION_FAILED = c_long(6023);
pub const MAXULONG_PTR = ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG_PTR, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG_PTR, 0) else @as(ULONG_PTR, 0);
pub const EM_GETLINECOUNT = 186;
pub const WS_TABSTOP = c_long(65536);
pub const IMAGE_ARCHIVE_START = "!<arch>\n";
pub const PAN_STROKEVARIATION_INDEX = 5;
pub const SHTDN_REASON_MAJOR_NONE = 0;
pub const DT_TOP = 0;
pub const WM_DRAWITEM = 43;
pub const __FINITE_MATH_ONLY__ = 0;
pub const IMAGE_REL_BASED_ABSOLUTE = 0;
pub const COLOR_BTNSHADOW = 16;
pub const ERROR_IPSEC_IKE_COEXISTENCE_SUPPRESS = c_long(13902);
pub const ERROR_COULD_NOT_RESIZE_LOG = c_long(6629);
pub const BS_RIGHTBUTTON = BS_LEFTTEXT;
pub const SECURITY_PACKAGE_DIGEST_RID = c_long(21);
pub const SPI_SETCURSORS = 87;
pub const IMAGE_DEBUG_TYPE_RESERVED10 = 10;
pub const TAPE_PSEUDO_LOGICAL_POSITION = c_long(2);
pub const ERROR_DS_CANT_ON_NON_LEAF = c_long(8213);
pub const JOB_OBJECT_LIMIT_JOB_TIME = 4;
pub const WSASERVICE_NOT_FOUND = c_long(10108);
pub const SDC_TOPOLOGY_EXTEND = 4;
pub const RDW_ERASENOW = 512;
pub const ERROR_DS_ATT_ALREADY_EXISTS = c_long(8318);
pub const ERROR_WOF_FILE_RESOURCE_TABLE_CORRUPT = c_long(4448);
pub const WM_SIZECLIPBOARD = 779;
pub const ERROR_ACCESS_AUDIT_BY_POLICY = c_long(785);
pub const InterlockedCompareExchangePointerAcquire = _InterlockedCompareExchangePointer;
pub const GetTimeFormat = GetTimeFormatA;
pub const RPC_S_TYPE_ALREADY_REGISTERED = c_long(1712);
pub const SM_CYSIZE = 31;
pub const STM_MSGMAX = 372;
pub const ENCLAVE_TYPE_VBS_BASIC = 17;
pub const CTRY_ARMENIA = 374;
pub const RESTORE_CTM = 4100;
pub const ERROR_IPSEC_MM_FILTER_PENDING_DELETION = c_long(13018);
pub const META_RESTOREDC = 295;
pub const SS_LEFTNOWORDWRAP = c_long(12);
pub const ERROR_PAGEFILE_QUOTA_EXCEEDED = c_long(567);
pub const PF_ALPHA_BYTE_INSTRUCTIONS = 5;
pub const LOCALE_IOPTIONALCALENDAR = 4107;
pub const ECHILD = 10;
pub const CONSOLE_TEXTMODE_BUFFER = 1;
pub const DM_PELSHEIGHT = c_long(1048576);
pub const ERROR_DS_GENERIC_ERROR = c_long(8341);
pub const ERROR_EVT_FILTER_UNEXPECTEDTOKEN = c_long(15021);
pub const LOCALE_NAME_MAX_LENGTH = 85;
pub const ERROR_LOG_POLICY_INVALID = c_long(6621);
pub const WNNC_NET_STAC = 2752512;
pub const POWER_ACTION_USER_NOTIFY = 16;
pub const CTLCOLOR_DLG = 4;
pub const ERROR_PREDEFINED_HANDLE = c_long(714);
pub const XBUTTON1 = 1;
pub const SPI_GETKEYBOARDSPEED = 10;
pub const ERROR_SXS_MULTIPLE_DEACTIVATION = c_long(14086);
pub const _IRQL_requires_max_ = irql;
pub const IMAGE_SYM_CLASS_BIT_FIELD = 18;
pub const ERROR_PASSWORD_CHANGE_REQUIRED = c_long(1938);
pub const ERROR_IMAGE_SUBSYSTEM_NOT_PRESENT = c_long(308);
pub const ERROR_NO_MORE_MATCHES = c_long(626);
pub const DMTT_DOWNLOAD_OUTLINE = 4;
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const MENU_EVENT = 8;
pub const MDM_MASK_AUTO_SPEED = 7;
pub const X3_OPCODE_SIGN_VAL_POS_X = 0;
pub const ERROR_DS_INVALID_SCRIPT = c_long(8600);
pub const _Analysis_assume_nullterminated_ = x;
pub const ERROR_IPSEC_IKE_FAILSSPINIT = c_long(13853);
pub const RUSSIAN_CHARSET = 204;
pub const SB_PIXEL_ALPHA = 2;
pub const ERROR_SECTOR_NOT_FOUND = c_long(27);
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_TOO_LARGE = c_long(365);
pub const SORT_KOREAN_KSC = 0;
pub const SPI_SETSCREENSAVETIMEOUT = 15;
pub const VP_FLAGS_POSITION = 32;
pub const FAST_FAIL_INVALID_LONGJUMP_TARGET = 38;
pub const ENXIO = 6;
pub const COLOR_WINDOWTEXT = 8;
pub const PAN_CONTRAST_MEDIUM = 6;
pub const ARW_RIGHT = c_long(0);
pub const GCPCLASS_LATINNUMERICSEPARATOR = 7;
pub const LOCKFILE_EXCLUSIVE_LOCK = 2;
pub const ERROR_USER_PROFILE_LOAD = c_long(500);
pub const SUBLANG_CATALAN_CATALAN = 1;
pub const __LDBL_MANT_DIG__ = 53;
pub const OF_READ = 0;
pub const DT_MODIFYSTRING = 65536;
pub const ERROR_NOT_GUI_PROCESS = c_long(1471);
pub const ISMEX_CALLBACK = 4;
pub const DM_POSITION = c_long(32);
pub const WM_CHANGEUISTATE = 295;
pub const WM_MBUTTONDBLCLK = 521;
pub const RPC_S_SEC_PKG_ERROR = c_long(1825);
pub const EVENT_OEM_DEFINED_END = 511;
pub const ERROR_STATE_DELETE_SETTING_FAILED = c_long(15809);
pub const SIMPLEREGION = 2;
pub const FACILITY_WEP = 2049;
pub const CONNDLG_PERSIST = 16;
pub const SM_SLOWMACHINE = 73;
pub const PDEVICESIZE = 26;
pub const SUBLANG_KICHE_GUATEMALA = 1;
pub const CREATE_PROCESS_DEBUG_EVENT = 3;
pub const EnumWindowStations = EnumWindowStationsA;
pub const __SSE__ = 1;
pub const IMAGE_ENCLAVE_SHORT_ID_LENGTH = ENCLAVE_SHORT_ID_LENGTH;
pub const MUI_IMMUTABLE_LOOKUP = 16;
pub const RESOURCETYPE_UNKNOWN = 4294967295;
pub const CACHE_E_LAST = c_long(2147746175);
pub const ERROR_DS_CANT_MOVE_RESOURCE_GROUP = c_long(8499);
pub const IMAGE_ENCLAVE_IMPORT_MATCH_UNIQUE_ID = 1;
pub const ERROR_EC_NO_ACTIVE_CHANNEL = c_long(15085);
pub const LOCALE_SABBREVMONTHNAME1 = 68;
pub const SEC_PARTITION_OWNER_HANDLE = 262144;
pub const FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 8192;
pub const RegDeleteKeyValue = RegDeleteKeyValueA;
pub const ERROR_NOT_DOS_DISK = c_long(26);
pub const STATE_SYSTEM_MOVEABLE = 262144;
pub const LANG_DUTCH = 19;
pub const PSIDENT_GDICENTRIC = 0;
pub const LOCALE_SDAYNAME1 = 42;
pub const IMAGE_SYM_CLASS_NULL = 0;
pub const GCS_DELTASTART = 256;
pub const MUI_FILETYPE_LANGUAGE_NEUTRAL_MAIN = 2;
pub const ERROR_SYSTEM_INTEGRITY_TOO_MANY_POLICIES = c_long(4554);
pub const ISMEX_REPLIED = 8;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8;
pub const PROTECTED_SACL_SECURITY_INFORMATION = c_long(1073741824);
pub const ERROR_CLUSTER_NODE_ALREADY_UP = c_long(5061);
pub const EXCEPTION_UNWINDING = 2;
pub const PROCESSOR_PERF_ENERGY_PREFERENCE = 0;
pub const ERROR_DS_FLAT_NAME_EXISTS_IN_FOREST = c_long(8635);
pub const ERROR_INVALID_PRINTER_NAME = c_long(1801);
pub const TRANSACTION_NOTIFY_SINGLE_PHASE_COMMIT = 512;
pub const ERROR_CLUSTER_PARTIAL_SEND = c_long(5914);
pub const SPCLPASSTHROUGH2 = 4568;
pub const ERROR = 0;
pub const RPC_S_GRP_ELT_NOT_ADDED = c_long(1928);
pub const LOCALE_SSHORTDATE = 31;
pub const WM_IME_SETCONTEXT = 641;
pub const IMAGE_REL_AMD64_REL32_3 = 7;
pub const PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_DEFER = if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 32) else if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 32) else c_uint(0)(i64 << 32);
pub const MDM_AUTO_ML_NONE = 1;
pub const SPI_SETLOWPOWERTIMEOUT = 81;
pub const _Releases_nonreentrant_lock_ = lock;
pub const LPD_DOUBLEBUFFER = 1;
pub const WSAESTALE = c_long(10070);
pub const PAN_WEIGHT_LIGHT = 3;
pub const ERROR_CSV_VOLUME_NOT_LOCAL = c_long(5951);
pub const STARTF_USESTDHANDLES = 256;
pub const CTRY_OMAN = 968;
pub const CS_IME = 65536;
pub const PAN_CONTRAST_INDEX = 4;
pub const WM_CTLCOLORBTN = 309;
pub const GetBinaryType = GetBinaryTypeA;
pub const ERROR_DEVICE_NOT_AVAILABLE = c_long(4319);
pub const MOD_WIN = 8;
pub const PRODUCT_NANO_SERVER = 109;
pub const IMAGE_REL_ALPHA_SECRELHI = 18;
pub const ERROR_RECOVERY_FILE_CORRUPT = c_long(15619);
pub const EMR_SETICMPROFILEA = 112;
pub const N_BTSHFT = 4;
pub const MFS_CHECKED = MF_CHECKED;
pub const SECURITY_MANDATORY_LOW_RID = c_long(4096);
pub const GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = 4;
pub const ERROR_SXS_XML_E_RESERVEDNAMESPACE = c_long(14066);
pub const ERROR_WAIT_1 = c_long(731);
pub const GCW_ATOM = -32;
pub const ERROR_NO_LOGON_SERVERS = c_long(1311);
pub const DFCS_CAPTIONRESTORE = 3;
pub const ERROR_DEVICE_REQUIRES_CLEANING = c_long(1165);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SA = c_long(13830);
pub const DIAGNOSTIC_REASON_VERSION = 0;
pub const ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = c_long(1808);
pub const GCLP_HICONSM = -34;
pub const _WIN32_IE_WINTHRESHOLD = _WIN32_IE_IE110;
pub const ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = c_long(8544);
pub const ERROR_DEVICE_UNREACHABLE = c_long(321);
pub const META_SETWINDOWEXT = 524;
pub const LR_LOADFROMFILE = 16;
pub const HCF_LOGONDESKTOP = 256;
pub const ERROR_INVALID_DOMAIN_ROLE = c_long(1354);
pub const ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = c_long(1459);
pub const WM_COMPAREITEM = 57;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_READ_FAILED = c_long(15704);
pub const PAN_WEIGHT_THIN = 4;
pub const ERROR_IPSEC_IKE_INVALID_PAYLOAD = c_long(13843);
pub const CBN_DROPDOWN = 7;
pub const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 12;
pub const IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;
pub const EMR_FRAMERGN = 72;
pub const GetTextFace = GetTextFaceA;
pub const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 7;
pub const SERKF_INDICATOR = 4;
pub const LANG_XHOSA = 52;
pub const __UINT_LEAST32_FMTX__ = "X";
pub const SUBLANG_FRENCH_SWISS = 4;
pub const IMAGE_REL_EBC_ABSOLUTE = 0;
pub const __inout_ecount_nz = size;
pub const NTDDI_WIN10_TH2 = 167772161;
pub const FRS_ERR_SYSVOL_POPULATE = c_long(8013);
pub const ERROR_PNP_TRANSLATION_FAILED = c_long(672);
pub const ERROR_SMR_GARBAGE_COLLECTION_REQUIRED = c_long(4445);
pub const DATE_AUTOLAYOUT = 64;
pub const C2_EUROPETERMINATOR = 5;
pub const ERROR_DS_DRA_ACCESS_DENIED = c_long(8453);
pub const BM_CLICK = 245;
pub const LBS_MULTIPLESEL = c_long(8);
pub const ERROR_DS_NO_SERVER_OBJECT = c_long(8622);
pub const __drv_typeBitset = 2;
pub const LANG_SWEDISH = 29;
pub const LOCALE_IMONLZERO = 39;
pub const SERVICE_FILE_SYSTEM_DRIVER = 2;
pub const FILE_FLAG_FIRST_PIPE_INSTANCE = 524288;
pub const AC_LINE_ONLINE = 1;
pub const SB_LINEUP = 0;
pub const IMAGE_GUARD_RF_ENABLE = 262144;
pub const ERROR_SECRET_TOO_LONG = c_long(1382);
pub const EBADF = 9;
pub const ERROR_WMI_ALREADY_DISABLED = c_long(4212);
pub const EVENT_SYSTEM_SOUND = 1;
pub const TPM_VERPOSANIMATION = c_long(4096);
pub const InterlockedAndAcquire = _InterlockedAnd;
pub const LTGRAY_BRUSH = 1;
pub const DMPAPER_PENV_1_ROTATED = 109;
pub const ERROR_DS_REFERRAL = c_long(8235);
pub const CreateDesktopEx = CreateDesktopExA;
pub const IMAGE_REL_M32R_SECTION = 12;
pub const ERROR_DBG_CONTROL_BREAK = c_long(696);
pub const DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME = c_long(9924);
pub const VkKeyScan = VkKeyScanA;
pub const SS_USERITEM = c_long(10);
pub const MB_DEFBUTTON1 = c_long(0);
pub const ERROR_CLUSTER_PROPERTY_DATA_TYPE_MISMATCH = c_long(5895);
pub const REG_RESOURCE_LIST = c_ulong(8);
pub const InterlockedDecrementNoFence64 = _InterlockedDecrement64;
pub const FILE_READ_ONLY_VOLUME = 524288;
pub const OUT_TT_ONLY_PRECIS = 7;
pub const SPI_SETHANDHELD = 78;
pub const SECURITY_AUTHENTICATED_USER_RID = c_long(11);
pub const InterlockedOr16 = _InterlockedOr16;
pub const ERROR_NO_WILDCARD_CHARACTERS = c_long(1417);
pub const ERROR_ROLLBACK_TIMER_EXPIRED = c_long(6829);
pub const PBT_APMOEMEVENT = 11;
pub const DC_GRADIENT = 32;
pub const VP_CP_TYPE_APS_TRIGGER = 1;
pub const ERROR_EA_TABLE_FULL = c_long(277);
pub const ERROR_IPSEC_IKE_RPC_DELETE = c_long(13877);
pub const CTRY_NEW_ZEALAND = 64;
pub const SS_NOPREFIX = c_long(128);
pub const CWP_SKIPINVISIBLE = 1;
pub const ERROR_CLUSTER_NOT_SHARED_VOLUME = c_long(5945);
pub const SPI_SETDESKWALLPAPER = 20;
pub const DNS_REQUEST_PENDING = c_long(9506);
pub const SM_XVIRTUALSCREEN = 76;
pub const BACKGROUND_BLUE = 16;
pub const ERROR_IPSEC_IKE_SA_DELETED = c_long(13807);
pub const DEVICEFAMILYINFOENUM_SERVER = 9;
pub const FACILITY_ONLINE_ID = 134;
pub const GetStartupInfo = GetStartupInfoA;
pub const SOUND_SYSTEM_INFORMATION = 7;
pub const IMAGE_FILE_MACHINE_EBC = 3772;
pub const WH_GETMESSAGE = 3;
pub const HSHELL_ACCESSIBILITYSTATE = 11;
pub const SUBLANG_DEFAULT = 1;
pub const DLGC_DEFPUSHBUTTON = 16;
pub const RPC_S_DO_NOT_DISTURB = c_long(1834);
pub const KEY_ENUMERATE_SUB_KEYS = 8;
pub const EMR_MASKBLT = 78;
pub const SECURITY_WRITE_RESTRICTED_CODE_RID = c_long(33);
pub const PRODUCT_MULTIPOINT_PREMIUM_SERVER = 77;
pub const RPC_S_INVALID_NAF_ID = c_long(1763);
pub const ERROR_NETWORK_ACCESS_DENIED = c_long(65);
pub const WM_MDIMAXIMIZE = 549;
pub const LOCALE_SABBREVMONTHNAME6 = 73;
pub const ERROR_SXS_SETTING_NOT_REGISTERED = c_long(14106);
pub const PURGE_TXCLEAR = 4;
pub const RegSetKeyValue = RegSetKeyValueA;
pub const SM_CYFIXEDFRAME = SM_CYDLGFRAME;
pub const ERROR_DS_CANT_RETRIEVE_DN = c_long(8405);
pub const COPY_FILE_OPEN_SOURCE_FOR_WRITE = 4;
pub const LOCALE_SDAYNAME6 = 47;
pub const __INTMAX_FMTi__ = "lli";
pub const VK_ATTN = 246;
pub const TMPF_VECTOR = 2;
pub const CharLower = CharLowerA;
pub const ERROR_TXF_METADATA_ALREADY_PRESENT = c_long(6835);
pub const WGL_SWAP_OVERLAY8 = 256;
pub const WM_POINTERACTIVATE = 587;
pub const ERROR_CLUSTER_EVICT_WITHOUT_CLEANUP = c_long(5896);
pub const DM_TTOPTION = c_long(16384);
pub const TPM_HORNEGANIMATION = c_long(2048);
pub const FILE_FLAG_NO_BUFFERING = 536870912;
pub const SERVICE_STOP_REASON_MINOR_HUNG = 6;
pub const DMPAPER_ENV_C6 = 31;
pub const WN_MORE_DATA = ERROR_MORE_DATA;
pub const ESB_DISABLE_LEFT = 1;
pub const DMPAPER_A4_TRANSVERSE = 55;
pub const FACILITY_DIRECT3D12 = 2174;
pub const IMAGE_REL_AMD64_REL32_2 = 6;
pub const FRS_ERR_PARENT_AUTHENTICATION = c_long(8010);
pub const PS_ALTERNATE = 8;
pub const ERROR_DS_UNDELETE_SAM_VALIDATION_FAILED = c_long(8645);
pub const GGO_GLYPH_INDEX = 128;
pub const EMR_POLYPOLYGON = 8;
pub const PRODUCT_ENTERPRISE_E = 70;
pub const TC_UA_ABLE = 2048;
pub const DISPLAY_DEVICE_RDPUDD = 16777216;
pub const COLORMATCHTOTARGET_EMBEDED = 1;
pub const ERROR_FILE_ENCRYPTED = c_long(6002);
pub const DEFAULT_CHARSET = 1;
pub const CTRY_ECUADOR = 593;
pub const ERROR_DS_NO_CHAINED_EVAL = c_long(8328);
pub const NTDDI_LONGHORN = NTDDI_VISTA;
pub const DT_CENTER = 1;
pub const ERROR_WAIT_2 = c_long(732);
pub const SYSPAL_STATIC = 1;
pub const MIIM_SUBMENU = 4;
pub const EVENT_S_FIRST = c_long(262656);
pub const __UINT8_MAX__ = 255;
pub const ERROR_NO_MEDIA_IN_DRIVE = c_long(1112);
pub const BS_BITMAP = c_long(128);
pub const RI_MOUSE_WHEEL = 1024;
pub const ERROR_IPSEC_IKE_DOS_COOKIE_SENT = c_long(13890);
pub const ICMENUMPROC = ICMENUMPROCA;
pub const IMAGE_SCN_TYPE_NO_PAD = 8;
pub const MF_INSERT = c_long(0);
pub const SUBLANG_ZULU_SOUTH_AFRICA = 1;
pub const WSAENOTCONN = c_long(10057);
pub const EV_DSR = 16;
pub const SE_SACL_DEFAULTED = 32;
pub const EN_ALIGN_RTL_EC = 1793;
pub const IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;
pub const META_SETTEXTALIGN = 302;
pub const ERROR_PRINTER_DRIVER_DOWNLOAD_NEEDED = c_long(3019);
pub const WM_DWMCOLORIZATIONCOLORCHANGED = 800;
pub const PRODUCT_SB_SOLUTION_SERVER_EM = 54;
pub const GW_OWNER = 4;
pub const FILE_ATTRIBUTE_SPARSE_FILE = 512;
pub const LANG_LUXEMBOURGISH = 110;
pub const MEM_TOP_DOWN = 1048576;
pub const RRF_RT_REG_BINARY = 8;
pub const LANG_UZBEK = 67;
pub const SECURITY_ENTERPRISE_READONLY_CONTROLLERS_RID = c_long(22);
pub const SERVICE_ADAPTER = 4;
pub const FACILITY_SYNCENGINE = 2050;
pub const ERROR_BUFFER_ALL_ZEROS = c_long(754);
pub const TURKISH_CHARSET = 162;
pub const ERROR_OPLOCK_SWITCHED_TO_NEW_HANDLE = c_long(800);
pub const RPC_S_COOKIE_AUTH_FAILED = c_long(1833);
pub const SPI_GETPOWEROFFTIMEOUT = 80;
pub const _GrouP_impl_ = annos;
pub const VerInstallFile = VerInstallFileA;
pub const MUI_MERGE_USER_FALLBACK = 32;
pub const LEFT_CTRL_PRESSED = 8;
pub const WM_POWERBROADCAST = 536;
pub const THREAD_BASE_PRIORITY_IDLE = -15;
pub const ERROR_NO_PAGEFILE = c_long(578);
pub const ERROR_ENVVAR_NOT_FOUND = c_long(203);
pub const RPC_S_OUT_OF_RESOURCES = c_long(1721);
pub const ERROR_HOOK_NEEDS_HMOD = c_long(1428);
pub const PAGE_ENCLAVE_THREAD_CONTROL = 2147483648;
pub const ERROR_DS_DRA_NO_REPLICA = c_long(8452);
pub const VK_HANGUL = 21;
pub const LB_SELITEMRANGE = 411;
pub const DMPAPER_P16K = 93;
pub const PWR_CRITICALRESUME = 3;
pub const DCX_WINDOW = c_long(1);
pub const DISC_NO_FORCE = 64;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_DELETE = c_long(13841);
pub const FLOODFILLBORDER = 0;
pub const ERROR_CTX_LICENSE_EXPIRED = c_long(7056);
pub const DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER = c_long(9562);
pub const FORMAT_MESSAGE_FROM_HMODULE = 2048;
pub const CTRL_C_EVENT = 0;
pub const ERROR_RXACT_INVALID_STATE = c_long(1369);
pub const RPC_S_PROTSEQ_NOT_FOUND = c_long(1744);
pub const lstrcat = lstrcatA;
pub const ERROR_INVALID_ID_AUTHORITY = c_long(1343);
pub const ERROR_SERVICE_CANNOT_ACCEPT_CTRL = c_long(1061);
pub const ERROR_CLUSCFG_SYSTEM_DISK_DRIVE_LETTER_CONFLICT = c_long(5903);
pub const ERROR_DS_DRA_MISSING_PARENT = c_long(8460);
pub const IMAGE_REL_BASED_THUMB_MOV32 = 7;
pub const WM_AFXFIRST = 864;
pub const PRODUCT_SMALLBUSINESS_SERVER = 9;
pub const VFT2_DRV_NETWORK = c_long(6);
pub const PAN_BENT_ARMS_DOUBLE_SERIF = 11;
pub const GESTUREVISUALIZATION_PRESSANDTAP = 4;
pub const SPI_GETKEYBOARDCUES = 4106;
pub const FILE_UNICODE_ON_DISK = 4;
pub const LB_GETTEXT = 393;
pub const ERROR_IPSEC_AUTH_FIREWALL_DROP = c_long(13917);
pub const IMAGE_REL_IA64_SECREL22 = 12;
pub const META_ELLIPSE = 1048;
pub const _TRUNCATE = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(size_t, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(size_t, -1) else size_t(-1);
pub const BEGIN_PATH = 4096;
pub const ERROR_MRM_INVALID_FILE_TYPE = c_long(15112);
pub const MUTEX_MODIFY_STATE = MUTANT_QUERY_STATE;
pub const GETTECHNOLOGY = 20;
pub const VS_USER_DEFINED = 100;
pub const VFT2_FONT_TRUETYPE = c_long(3);
pub const RPC_S_NO_INTERFACES = c_long(1817);
pub const META_INTERSECTCLIPRECT = 1046;
pub const CP_RECTANGLE = 1;
pub const REPLACEFILE_IGNORE_ACL_ERRORS = 4;
pub const EMR_CREATEPALETTE = 49;
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE = 4;
pub const DNS_ERROR_NO_MEMORY = ERROR_OUTOFMEMORY;
pub const IMAGE_REL_SH3_GPREL4_LONG = 17;
pub const WriteConsoleInput = WriteConsoleInputA;
pub const HWND_NOTOPMOST = if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, -2) else if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Int) @intToPtr(HWND, -2) else @as(HWND, -2);
pub const ERROR_DS_MISSING_FSMO_SETTINGS = c_long(8434);
pub const COLOR_3DHILIGHT = COLOR_BTNHIGHLIGHT;
pub const PT_LINETO = 2;
pub const ENABLEPAIRKERNING = 769;
pub const APPCOMMAND_MEDIA_RECORD = 48;
pub const GetMenuItemInfo = GetMenuItemInfoA;
pub const EMR_ARCTO = 55;
pub const VK_CANCEL = 3;
pub const TOUCHINPUTMASKF_TIMEFROMSYSTEM = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_MASK = if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 16) else if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 16) else c_uint(3)(i64 << 16);
pub const FACILITY_WER = 27;
pub const KLF_ACTIVATE = 1;
pub const PAN_MIDLINE_INDEX = 8;
pub const LC_WIDE = 16;
pub const __STDC_VERSION__ = c_long(201112);
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION = c_long(9563);
pub const RIDEV_NOLEGACY = 48;
pub const ERROR_APPEXEC_UNKNOWN_USER = c_long(3067);
pub const ENUMRESLANGPROC = ENUMRESLANGPROCA;
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const APPCOMMAND_BASS_UP = 21;
pub const ERROR_RWRAW_ENCRYPTED_FILE_NOT_ENCRYPTED = c_long(410);
pub const REG_OPEN_READ_ONLY = c_long(8192);
pub const DMPAPER_P32K = 94;
pub const LOCALE_SABBREVMONTHNAME7 = 74;
pub const MUI_USE_INSTALLED_LANGUAGES = 32;
pub const _Maybevalid_ = _Maybevalid_impl_;
pub const DNS_ERROR_CNAME_COLLISION = c_long(9709);
pub const REMOTE_PROTOCOL_INFO_FLAG_LOOPBACK = 1;
pub const GDIPLUS_TS_RECORD = 4123;
pub const IMAGE_SUBSYSTEM_XBOX_CODE_CATALOG = 17;
pub const SHUTDOWN_MOBILE_UI = 4096;
pub const LOCALE_SDAYNAME7 = 48;
pub const ABOVE_NORMAL_PRIORITY_CLASS = 32768;
pub const ERROR_XML_ENCODING_MISMATCH = c_long(14100);
pub const VER_PRODUCT_TYPE = 128;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub const SPI_GETMENURECT = 162;
pub const FACILITY_POWERSHELL = 84;
pub const WGL_SWAP_OVERLAY9 = 512;
pub const EXCEPTION_ACCESS_VIOLATION = STATUS_ACCESS_VIOLATION;
pub const WM_CANCELMODE = 31;
pub const SPI_GETMINIMIZEDMETRICS = 43;
pub const LPSERVICE_MAIN_FUNCTION = LPSERVICE_MAIN_FUNCTIONA;
pub const __RDSEED__ = 1;
pub const WM_MENUCHAR = 288;
pub const MAX_REASON_DESC_LEN = 256;
pub const CTRY_MACAU = 853;
pub const CTRY_SAUDI_ARABIA = 966;
pub const __FSGSBASE__ = 1;
pub const SECURITY_WINDOWSMOBILE_ID_BASE_RID = c_long(112);
pub const FILE_TYPE_UNKNOWN = 0;
pub const BSF_NOHANG = 8;
pub const __FLT_EVAL_METHOD__ = 0;
pub const __SSE_MATH__ = 1;
pub const IMAGE_GUARD_RF_INSTRUMENTED = 131072;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const FILE_DISPOSITION_FLAG_POSIX_SEMANTICS = 2;
pub const ENABLE_LINE_INPUT = 2;
pub const WNetGetResourceInformation = WNetGetResourceInformationA;
pub const __DBL_DECIMAL_DIG__ = 17;
pub const BN_DISABLE = 4;
pub const ERROR_PLATFORM_MANIFEST_FILE_NOT_AUTHORIZED = c_long(4572);
pub const ENHMETA_STOCK_OBJECT = 2147483648;
pub const IME_PROP_COMPLETE_ON_UNSELECT = 1048576;
pub const TOUCH_FEEDBACK_NONE = 3;
pub const LPD_SUPPORT_OPENGL = 32;
pub const VFF_FILEINUSE = 2;
pub const S_SEROFM = -2;
pub const ERROR_INTERRUPT_VECTOR_ALREADY_CONNECTED = c_long(763);
pub const __LONG_MAX__ = c_long(2147483647);
pub const ERROR_MEDIA_CHECK = c_long(679);
pub const ERROR_CLUSTER_DATABASE_SEQMISMATCH = c_long(5083);
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_BOOT = 4;
pub const ERROR_WAIT_3 = c_long(733);
pub const POWER_ACTION_PSEUDO_TRANSITION = 134217728;
pub const EMARCH_ENC_I17_SIGN_INST_WORD_POS_X = 27;
pub const LOGON32_LOGON_NETWORK = 3;
pub const CharToOemBuff = CharToOemBuffA;
pub const InterlockedAnd64NoFence = _InterlockedAnd64;
pub const WM_NCXBUTTONUP = 172;
pub const SET_ARC_DIRECTION = 4102;
pub const DMPAPER_RESERVED_48 = 48;
pub const ERROR_DS_CANT_START = c_long(8531);
pub const ERROR_SOME_NOT_MAPPED = c_long(1301);
pub const CTRY_TATARSTAN = 7;
pub const IMAGE_SYM_CLASS_CLR_TOKEN = 107;
pub const ERROR_DS_OBJ_GUID_EXISTS = c_long(8361);
pub const TCI_SRCFONTSIG = 3;
pub const VIF_SRCOLD = c_long(4);
pub const GetCurrentHwProfile = GetCurrentHwProfileA;
pub const PS_COSMETIC = 0;
pub const STORE_ERROR_UNLICENSED = c_long(15861);
pub const HELP_TCARD_OTHER_CALLER = 17;
pub const ERROR_CLUSTER_NODE_SHUTTING_DOWN = c_long(5073);
pub const JOB_OBJECT_UILIMIT_EXITWINDOWS = 128;
pub const __deref_out_ecount_nz_opt = size;
pub const TAPE_DRIVE_ERASE_BOP_ONLY = 64;
pub const EEXIST = 17;
pub const ERROR_INVALID_TASK_INDEX = c_long(1551);
pub const PIPE_TYPE_BYTE = 0;
pub const SECURITY_USERMANAGER_ID_BASE_RID = c_long(93);
pub const WM_MOVE = 3;
pub const WM_COMMNOTIFY = 68;
pub const PSINJECT_ENDPROLOG = 15;
pub const FILE_MAP_RESERVE = 2147483648;
pub const MININT64 = if (@typeInfo(@TypeOf(~MAXINT64)) == @import("builtin").TypeId.Pointer) @ptrCast(INT64, ~MAXINT64) else if (@typeInfo(@TypeOf(~MAXINT64)) == @import("builtin").TypeId.Int) @intToPtr(INT64, ~MAXINT64) else INT64(~MAXINT64);
pub const FAST_FAIL_INVALID_BUFFER_ACCESS = 28;
pub const JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048;
pub const ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = c_long(5077);
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE = 16;
pub const __requires_exclusive_lock_held = lock;
pub const PIPE_READMODE_MESSAGE = 2;
pub const IMAGE_GUARD_CF_EXPORT_SUPPRESSION_INFO_PRESENT = 16384;
pub const PHYSICALWIDTH = 110;
pub const SHUTDOWN_NOREBOOT = 16;
pub const DialogBoxParam = DialogBoxParamA;
pub const PAN_WEIGHT_VERY_LIGHT = 2;
pub const __UINT_FAST32_FMTx__ = "x";
pub const JOB_OBJECT_SECURITY_FILTER_TOKENS = 8;
pub const MINLONG32 = if (@typeInfo(@TypeOf(~MAXLONG32)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG32, ~MAXLONG32) else if (@typeInfo(@TypeOf(~MAXLONG32)) == @import("builtin").TypeId.Int) @intToPtr(LONG32, ~MAXLONG32) else LONG32(~MAXLONG32);
pub const ERROR_INVALID_LIBRARY = c_long(4301);
pub const GB2312_CHARSET = 134;
pub const GetCurrencyFormat = GetCurrencyFormatA;
pub const TT_POLYGON_TYPE = 24;
pub const CALLBACK = __stdcall;
pub const ERROR_INVALID_MINALLOCSIZE = c_long(195);
pub const EMR_SETWINDOWORGEX = 10;
pub const IMAGE_REL_PPC_GPREL = 21;
pub const ERROR_SXS_FILE_HASH_MISSING = c_long(14110);
pub const ERROR_DS_OUT_OF_VERSION_STORE = c_long(8573);
pub const WN_NO_MORE_DEVICES = ERROR_NO_MORE_DEVICES;
pub const PCF_INTTIMEOUTS = if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 128) else if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 128) else @as(DWORD, 128);
pub const SPI_GETFOREGROUNDFLASHCOUNT = 8196;
pub const TRANSACTIONMANAGER_SET_INFORMATION = 2;
pub const CO_E_LAST = c_long(2147746303);
pub const PAN_SERIF_OBTUSE_COVE = 3;
pub const EM_SETLIMITTEXT = EM_LIMITTEXT;
pub const ACTIVATION_CONTEXT_SECTION_ASSEMBLY_INFORMATION = 1;
pub const DMPAPER_ENV_INVITE = 47;
pub const GL_LEVEL_INFORMATION = 4;
pub const WS_EX_RIGHT = c_long(4096);
pub const LCID_SUPPORTED = 2;
pub const PRF_OWNED = c_long(32);
pub const IMAGE_COMDAT_SELECT_NODUPLICATES = 1;
pub const InterlockedDecrement16 = _InterlockedDecrement16;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_DEFER = if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 52) else if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 52) else c_uint(0)(i64 << 52);
pub const META_RESIZEPALETTE = 313;
pub const DEVICEFAMILYINFOENUM_MOBILE = 4;
pub const SP_DATABITS = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4) else @as(DWORD, 4);
pub const APPCOMMAND_CORRECTION_LIST = 45;
pub const FatalAppExit = FatalAppExitA;
pub const RESOURCEUSAGE_SIBLING = 8;
pub const ERROR_BAD_CONFIGURATION = c_long(1610);
pub const WSAECONNREFUSED = c_long(10061);
pub const MDM_FLOWCONTROL_SOFT = 32;
pub const SERVICE_CONTROL_LOWRESOURCES = 96;
pub const EV_RING = 256;
pub const SPI_SETACTIVEWNDTRKTIMEOUT = 8195;
pub const _CRT_BUILD_DESKTOP_APP = 1;
pub const PF_SSE3_INSTRUCTIONS_AVAILABLE = 13;
pub const DFC_SCROLL = 3;
pub const R2_XORPEN = 7;
pub const IMAGE_FILE_MACHINE_SH3DSP = 419;
pub const IMAGE_SYM_TYPE_MOE = 11;
pub const FILE_UNKNOWN = 5;
pub const SUBLANG_SPANISH_VENEZUELA = 8;
pub const WNNC_NET_SYMFONET = 1376256;
pub const CONNECT_CURRENT_MEDIA = 512;
pub const ERROR_PRI_MERGE_INVALID_FILE_NAME = c_long(15158);
pub const ERROR_MISSING_SYSTEMFILE = c_long(573);
pub const IMAGE_SYM_TYPE_STRUCT = 8;
pub const SC_RESTORE = 61728;
pub const PC_RESERVED = 1;
pub const SSWF_TITLE = 1;
pub const SUBLANG_FRENCH_MONACO = 6;
pub const FAST_FAIL_CERTIFICATION_FAILURE = 20;
pub const ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = c_long(7013);
pub const CTRY_UNITED_KINGDOM = 44;
pub const REG_WHOLE_HIVE_VOLATILE = c_long(1);
pub const ERROR_SPOOL_FILE_NOT_FOUND = c_long(3002);
pub const WVR_HREDRAW = 256;
pub const ERROR_TLW_WITH_WSCHILD = c_long(1406);
pub const RRF_WOW64_MASK = 196608;
pub const IMM_ERROR_GENERAL = -2;
pub const ERROR_OPERATION_IN_PROGRESS = c_long(329);
pub const CTRY_MALDIVES = 960;
pub const ERROR_SERVICE_NO_THREAD = c_long(1054);
pub const SHTDN_REASON_MINOR_TERMSRV = 32;
pub const _Satisfies_impl_ = expr;
pub const _ARGMAX = 100;
pub const IMAGE_REL_AMD64_INDIR_BR_REX = 24;
pub const LANG_KASHMIRI = 96;
pub const PROCESS_HEAP_UNCOMMITTED_RANGE = 2;
pub const S_WHITE2048 = 6;
pub const ERROR_DS_NAMING_VIOLATION = c_long(8247);
pub const VIF_DIFFCODEPG = c_long(16);
pub const RPC_S_ALREADY_REGISTERED = c_long(1711);
pub const DOMAIN_ALIAS_RID_REMOTE_DESKTOP_USERS = c_long(555);
pub const SUBLANG_SERBIAN_MONTENEGRO_CYRILLIC = 12;
pub const SETABORTPROC = 9;
pub const ERROR_RESOURCE_ONLINE = c_long(5019);
pub const __LDBL_MIN__ = 0.000000;
pub const SUBLANG_SWEDISH_FINLAND = 2;
pub const VK_BROWSER_SEARCH = 170;
pub const LOCALE_SABBREVMONTHNAME4 = 71;
pub const SYSPAL_NOSTATIC = 2;
pub const CONNECT_REDIRECT = 128;
pub const IMAGE_REL_SH3_PCREL12_WORD = 11;
pub const WM_CONTEXTMENU = 123;
pub const IMAGE_SCN_MEM_PRELOAD = 524288;
pub const ERROR_DS_SRC_NAME_MISMATCH = c_long(8484);
pub const REG_NO_COMPRESSION = 4;
pub const LOCALE_SDAYNAME4 = 45;
pub const XSTATE_MASK_CET_U = if (@typeInfo(@TypeOf(i64 << XSTATE_CET_U)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_CET_U) else if (@typeInfo(@TypeOf(i64 << XSTATE_CET_U)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_CET_U) else c_uint(1)(i64 << XSTATE_CET_U);
pub const __CRTDECL = __CLRCALL_PURE_OR_CDECL;
pub const IME_CHOTKEY_SYMBOL_TOGGLE = 18;
pub const LANG_IGBO = 112;
pub const FW_DONTCARE = 0;
pub const WM_WTSSESSION_CHANGE = 689;
pub const PEN_MASK_PRESSURE = 1;
pub const SUBLANG_XHOSA_SOUTH_AFRICA = 1;
pub const FS_PERSISTENT_ACLS = FILE_PERSISTENT_ACLS;
pub const DMPAPER_B4_JIS_ROTATED = 79;
pub const CB_GETITEMDATA = 336;
pub const DMPAPER_ENV_C4 = 30;
pub const WM_CHANGECBCHAIN = 781;
pub const PCF_DTRDSR = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const CONNECT_UPDATE_PROFILE = 1;
pub const FACILITY_DIRECT3D10 = 2169;
pub const LANG_QUECHUA = 107;
pub const MEMORY_PRIORITY_LOW = 2;
pub const DEVICEFAMILYDEVICEFORM_KIOSK = 20;
pub const HALFTONE = 4;
pub const IME_CAND_RADICAL = 4;
pub const VS_FILE_INFO = RT_VERSION;
pub const IMAGE_SYM_TYPE_ENUM = 10;
pub const ERROR_TOO_MANY_TCBS = c_long(155);
pub const SW_SHOWMINNOACTIVE = 7;
pub const ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = c_long(5076);
pub const CONNDLG_HIDE_BOX = 8;
pub const APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;
pub const TRANSACTION_NOTIFY_LAST_RECOVER = 8192;
pub const ERROR_SXS_XML_E_MISSINGSEMICOLON = c_long(14039);
pub const PAGE_GRAPHICS_READWRITE = 8192;
pub const WSAEOPNOTSUPP = c_long(10045);
pub const SBS_HORZ = c_long(0);
pub const ERROR_ILL_FORMED_PASSWORD = c_long(1324);
pub const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA = 32;
pub const SUBLANG_TURKISH_TURKEY = 1;
pub const VFF_CURNEDEST = 1;
pub const ERROR_CLOUD_FILE_PROPERTY_LOCK_CONFLICT = c_long(397);
pub const DM_YRESOLUTION = c_long(8192);
pub const IMAGE_FILE_MACHINE_R10000 = 360;
pub const THREAD_SET_LIMITED_INFORMATION = 1024;
pub const DMPAPER_B5_JIS_ROTATED = 80;
pub const IMAGE_REL_ARM64_BRANCH26 = 3;
pub const VK_NEXT = 34;
pub const FAST_FAIL_RANGE_CHECK_FAILURE = 8;
pub const IMAGE_REL_PPC_SECREL = 11;
pub const ImmGetCompositionFont = ImmGetCompositionFontA;
pub const IO_REPARSE_TAG_RESERVED_RANGE = IO_REPARSE_TAG_RESERVED_TWO;
pub const DMPAPER_RESERVED_49 = 49;
pub const VK_LBUTTON = 1;
pub const PARITY_MARK = if (@typeInfo(@TypeOf(2048)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 2048) else if (@typeInfo(@TypeOf(2048)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 2048) else @as(WORD, 2048);
pub const ERROR_CLIPBOARD_NOT_OPEN = c_long(1418);
pub const HEAP_CREATE_SEGMENT_HEAP = 256;
pub const CTRY_AUSTRALIA = 61;
pub const ERROR_SECUREBOOT_NOT_SUPPLEMENTAL_POLICY = c_long(4435);
pub const ERROR_NOT_LOCKED = c_long(158);
pub const SUBLANG_SINDHI_INDIA = 1;
pub const IMAGE_REL_SH3_DIRECT4_LONG = 8;
pub const CB_GETDROPPEDCONTROLRECT = 338;
pub const ERROR_DS_INIT_FAILURE = c_long(8532);
pub const ERROR_HOOK_NOT_INSTALLED = c_long(1431);
pub const DMPAPER_LEGAL = 5;
pub const __elem_writableTo = size;
pub const ERROR_IPSEC_TUNNEL_FILTER_PENDING_DELETION = c_long(13020);
pub const IME_KHOTKEY_SHAPE_TOGGLE = 80;
pub const MF_STRING = c_long(0);
pub const PRODUCT_STORAGE_STANDARD_SERVER_CORE = 44;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_NONE_RID = c_long(0);
pub const CF_PRIVATELAST = 767;
pub const WNetGetProviderName = WNetGetProviderNameA;
pub const PF_TEMPORAL_LEVEL_1 = _MM_HINT_T0;
pub const GCP_NUMERICSLOCAL = c_long(134217728);
pub const OBJ_COLORSPACE = 14;
pub const EMR_POLYBEZIERTO = 5;
pub const LOGON32_LOGON_NEW_CREDENTIALS = 9;
pub const BAUD_19200 = if (@typeInfo(@TypeOf(8192)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 8192) else if (@typeInfo(@TypeOf(8192)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 8192) else @as(DWORD, 8192);
pub const ERROR_ALREADY_RUNNING_LKG = c_long(1074);
pub const TIMERV_COALESCING_MIN = 1;
pub const WM_HSCROLL = 276;
pub const WINEVENT_SKIPOWNTHREAD = 1;
pub const DNS_ERROR_NODE_IS_DNAME = c_long(9720);
pub const ERROR_GPIO_VERSION_NOT_SUPPORTED = c_long(15323);
pub const POINTER_FLAG_CONFIDENCE = 16384;
pub const IMC_GETCANDIDATEPOS = 7;
pub const VER_GREATER = 2;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const ASPECTY = 42;
pub const RPC_S_BINDING_INCOMPLETE = c_long(1819);
pub const ERROR_INVALID_HOOK_HANDLE = c_long(1404);
pub const META_POLYGON = 804;
pub const LookupPrivilegeValue = LookupPrivilegeValueA;
pub const GetModuleFileName = GetModuleFileNameA;
pub const CBR_600 = 600;
pub const ERROR_DEVICE_SUPPORT_IN_PROGRESS = c_long(171);
pub const MDM_SHIFT_HDLCPPP_ML = 6;
pub const SPI_SETLOGICALDPIOVERRIDE = 159;
pub const GL_ID_REVERSECONVERSION = 41;
pub const NORM_IGNORENONSPACE = 2;
pub const ERROR_EVT_FILTER_ALREADYSCOPED = c_long(15014);
pub const PAN_BENT_ARMS_VERT = 9;
pub const MFS_DISABLED = MFS_GRAYED;
pub const THREAD_PRIORITY_LOWEST = THREAD_BASE_PRIORITY_MIN;
pub const PROCESSOR_PPC_604 = 604;
pub const IMAGE_REL_SH3_DIRECT8 = 3;
pub const MB_DEFBUTTON4 = c_long(768);
pub const LOCALE_SENGCURRNAME = 4103;
pub const WINVER = _WIN32_WINNT;
pub const ERROR_MOUNT_POINT_NOT_RESOLVED = c_long(649);
pub const WM_CLIPBOARDUPDATE = 797;
pub const BitScanForward = _BitScanForward;
pub const SetFileShortName = SetFileShortNameA;
pub const PAN_PROP_VERY_CONDENSED = 8;
pub const PPM_IDLE_IMPLEMENTATION_LPISTATES = 4;
pub const SYSTEM_FONT = 13;
pub const SUBLANG_SOTHO_NORTHERN_SOUTH_AFRICA = 1;
pub const RGN_MIN = RGN_AND;
pub const OF_REOPEN = 32768;
pub const COMMPROP_INITIALIZED = if (@typeInfo(@TypeOf(3879531822)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 3879531822) else if (@typeInfo(@TypeOf(3879531822)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 3879531822) else @as(DWORD, 3879531822);
pub const LOGON32_LOGON_BATCH = 4;
pub const SERVICE_STOP_REASON_MINOR_UPGRADE = 4;
pub const ERROR_SXS_DUPLICATE_PROGID = c_long(14026);
pub const ERROR_IPSEC_IKE_SIMULTANEOUS_REKEY = c_long(13821);
pub const ERROR_NO_NETWORK = c_long(1222);
pub const SETRTS = 3;
pub const CREATE_NEW_CONSOLE = 16;
pub const VK_EXSEL = 248;
pub const SPI_GETSCREENSAVETIMEOUT = 14;
pub const POWER_ACTION_LOCK_CONSOLE = 536870912;
pub const ERROR_SET_POWER_STATE_VETOED = c_long(1140);
pub const LOCALE_SPOSITIVESIGN = 80;
pub const DT_PREFIXONLY = 2097152;
pub const SM_MENUDROPALIGNMENT = 40;
pub const STARTF_USEFILLATTRIBUTE = 16;
pub const SUBLANG_TIGRINYA_ERITREA = 2;
pub const ERROR_NOT_CONTAINER = c_long(1207);
pub const SM_MAXIMUMTOUCHES = 95;
pub const ERROR_IS_JOINED = c_long(134);
pub const PAGE_REVERT_TO_FILE_MAP = 2147483648;
pub const PIPE_REJECT_REMOTE_CLIENTS = 8;
pub const DOMAIN_GROUP_RID_AUTHORIZATION_DATA_CONTAINS_CLAIMS = c_long(497);
pub const FACILITY_METADIRECTORY = 35;
pub const __SIZE_MAX__ = c_ulonglong(18446744073709551615);
pub const ERROR_INVALID_WINDOW_HANDLE = c_long(1400);
pub const EVENT_SYSTEM_SWITCHER_APPOVERTARGET = 37;
pub const ERROR_SEGMENT_NOTIFICATION = c_long(702);
pub const MDM_SHIFT_PROTOCOLINFO = MDM_SHIFT_PROTOCOLID;
pub const SERVICE_USER_SERVICE = 64;
pub const ERROR_PNP_BAD_MPS_TABLE = c_long(671);
pub const BLTALIGNMENT = 119;
pub const FACILITY_DELIVERY_OPTIMIZATION = 208;
pub const ENAMETOOLONG = 38;
pub const DEVICEFAMILYINFOENUM_WINDOWS_8X = 1;
pub const RC_BITMAP64 = 8;
pub const IMAGE_SYM_TYPE_DOUBLE = 7;
pub const SERVICE_STOP_REASON_FLAG_UNPLANNED = 268435456;
pub const SECURITY_IDENTIFICATION = SecurityIdentification << 16;
pub const LoadBitmap = LoadBitmapA;
pub const ERROR_DS_PDC_OPERATION_IN_PROGRESS = c_long(8490);
pub const ERROR_DS_INVALID_ROLE_OWNER = c_long(8366);
pub const ERROR_FLOAT_MULTIPLE_FAULTS = c_long(630);
pub const LB_GETLISTBOXINFO = 434;
pub const HELP_CONTENTS = c_long(3);
pub const SPI_SETMINIMUMHITRADIUS = 8213;
pub const DNS_ERROR_RCODE_SERVER_FAILURE = c_long(9002);
pub const LOCALE_SABBREVMONTHNAME5 = 72;
pub const CLEARTYPE_NATURAL_QUALITY = 6;
pub const DOF_DIRECTORY = 32771;
pub const ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = c_long(8400);
pub const CTRY_BELIZE = 501;
pub const SM_CYICONSPACING = 39;
pub const ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = c_long(8306);
pub const _WIN32_WINNT = 2560;
pub const SORT_HUNGARIAN_TECHNICAL = 1;
pub const ERROR_DEPENDENT_RESOURCE_EXISTS = c_long(5001);
pub const LOCALE_SDAYNAME5 = 46;
pub const GET_PS_FEATURESETTING = 4121;
pub const FW_BOLD = 700;
pub const RIDEV_REMOVE = 1;
pub const SIZE_MINIMIZED = 1;
pub const ERROR_CS_ENCRYPTION_INVALID_SERVER_RESPONSE = c_long(6017);
pub const DFC_CAPTION = 1;
pub const STATE_SYSTEM_SIZEABLE = 131072;
pub const PRODUCT_PROFESSIONAL_STUDENT_N = 114;
pub const PDCAP_WAKE_FROM_D0_SUPPORTED = 16;
pub const ERROR_DS_NO_TREE_DELETE_ABOVE_NC = c_long(8501);
pub const DNS_ERROR_ZONE_ALREADY_EXISTS = c_long(9609);
pub const ACTIVATION_CONTEXT_PATH_TYPE_WIN32_FILE = 2;
pub const CACHE_FULLY_ASSOCIATIVE = 255;
pub const EIMES_COMPLETECOMPSTRKILLFOCUS = 4;
pub const ERROR_LOG_RESIZE_INVALID_SIZE = c_long(6806);
pub const ERROR_ASSERTION_FAILURE = c_long(668);
pub const SP_PARITY_CHECK = if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 32) else if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 32) else @as(DWORD, 32);
pub const META_OFFSETVIEWPORTORG = 529;
pub const FLUSH_FLAGS_FILE_DATA_SYNC_ONLY = 4;
pub const DMPAPER_ENV_C5 = 28;
pub const abnormal_termination = _abnormal_termination;
pub const EXIT_PROCESS_DEBUG_EVENT = 5;
pub const FACILITY_DIRECT3D11 = 2172;
pub const WN_NOT_VALIDATED = ERROR_NO_LOGON_SERVERS;
pub const IMAGE_REL_M32R_REFHALF = 8;
pub const __LDBL_MAX_10_EXP__ = 308;
pub const GetWindowLongPtr = GetWindowLongPtrA;
pub const IDI_INFORMATION = IDI_ASTERISK;
pub const BroadcastSystemMessage = BroadcastSystemMessageA;
pub const EC_USEFONTINFO = 65535;
pub const DNS_ERROR_INVALID_DATA = ERROR_INVALID_DATA;
pub const InterlockedCompareExchangeRelease16 = _InterlockedCompareExchange16;
pub const DLL_PROCESS_DETACH = 0;
pub const ERROR_PNP_RESTART_ENUMERATION = c_long(636);
pub const META_TEXTOUT = 1313;
pub const GESTUREVISUALIZATION_OFF = 0;
pub const ERROR_NO_PROMOTION_ACTIVE = c_long(8222);
pub const ERROR_DISK_CHANGE = c_long(107);
pub const MOUSEEVENTF_XDOWN = 128;
pub const SC_DEFAULT = 61792;
pub const WM_CHAR = 258;
pub const STN_DBLCLK = 1;
pub const WM_QUERYDRAGICON = 55;
pub const ERROR_DS_NTDSCRIPT_SYNTAX_ERROR = c_long(8591);
pub const ERROR_DS_TIMELIMIT_EXCEEDED = c_long(8226);
pub const LGRPID_CYRILLIC = 5;
pub const DNS_ERROR_NO_ZONE_INFO = c_long(9602);
pub const RegConnectRegistryEx = RegConnectRegistryExA;
pub const SECURITY_UMFD_BASE_RID = c_long(96);
pub const LimitEmsPages = dw;
pub const LANG_MAPUDUNGUN = 122;
pub const SECURITY_BATCH_RID = c_long(3);
pub const CLEARTYPE_QUALITY = 5;
pub const HEAP_MAXIMUM_TAG = 4095;
pub const ERROR_CLUSTER_MEMBERSHIP_INVALID_STATE = c_long(5890);
pub const BS_AUTO3STATE = c_long(6);
pub const ERROR_IPSEC_IKE_AUTHORIZATION_FAILURE = c_long(13905);
pub const ERROR_INVALID_PRINT_MONITOR = c_long(3007);
pub const PURGE_RXCLEAR = 8;
pub const MDM_AUTO_ML_2 = 2;
pub const ENABLE_PROCESSED_OUTPUT = 1;
pub const FS_UNICODE_STORED_ON_DISK = FILE_UNICODE_ON_DISK;
pub const CAL_JAPAN = 3;
pub const ERROR_DS_CHILDREN_EXIST = c_long(8332);
pub const WH_MAX = 14;
pub const SHIFTJIS_CHARSET = 128;
pub const IMAGE_HOT_PATCH_CHUNK_OBLIGATORY = 1073741824;
pub const LANG_NEUTRAL = 0;
pub const IMAGE_FILE_DLL = 8192;
pub const SPI_SETPENVISUALIZATION = 8223;
pub const DMPAPER_ENV_ITALY = 36;
pub const EMSIS_COMPOSITIONSTRING = 1;
pub const PROCESS_SET_LIMITED_INFORMATION = 8192;
pub const IMAGE_DEBUG_TYPE_ILTCG = 14;
pub const TAPE_DRIVE_FORMAT_IMMEDIATE = 3221225472;
pub const FS_ARABIC = c_long(64);
pub const PF_TEMPORAL_LEVEL_2 = _MM_HINT_T1;
pub const DMPAPER_USER = 256;
pub const ERROR_CLUSTER_CANT_CREATE_DUP_CLUSTER_NAME = c_long(5900);
pub const __SIZEOF_FLOAT__ = 4;
pub const LMEM_NODISCARD = 32;
pub const SEM_FAILCRITICALERRORS = 1;
pub const GL_ID_TOOMANYSTROKE = 34;
pub const ERROR_DS_NTDSCRIPT_PROCESS_ERROR = c_long(8592);
pub const TAPE_DRIVE_ERASE_SHORT = 16;
pub const _SPACE = 8;
pub const DNS_ERROR_DATAFILE_OPEN_FAILURE = c_long(9653);
pub const X3_IMM39_1_SIGN_VAL_POS_X = 36;
pub const ERROR_ILLEGAL_ELEMENT_ADDRESS = c_long(1162);
pub const IMAGE_SYM_CLASS_EXTERNAL = 2;
pub const PSINJECT_ENDPAGESETUP = 102;
pub const ERROR_INVALID_TARGET_HANDLE = c_long(114);
pub const SPI_SETMOUSEDOCKTHRESHOLD = 127;
pub const FW_DEMIBOLD = FW_SEMIBOLD;
pub const RTL_UMS_VERSION = 256;
pub const ASPECTX = 40;
pub const WINAPI_FAMILY_SERVER = 5;
pub const MDMVOLFLAG_MEDIUM = 2;
pub const LANG_CZECH = 5;
pub const MWT_IDENTITY = 1;
pub const FindFirstFile = FindFirstFileA;
pub const ERROR_NOT_EMPTY = c_long(4307);
pub const DC_ENUMRESOLUTIONS = 13;
pub const WNNC_NET_EXTENDNET = 2686976;
pub const SERVICE_CONFIG_PREFERRED_NODE = 9;
pub const ERROR_FILE_PROTECTED_UNDER_DPL = c_long(406);
pub const ERROR_SOURCE_ELEMENT_EMPTY = c_long(1160);
pub const ERROR_LOG_ARCHIVE_NOT_IN_PROGRESS = c_long(6632);
pub const FACILITY_USERMODE_HNS = 59;
pub const NTDDI_WINTHRESHOLD = 167772160;
pub const ERROR_CTX_MODEM_RESPONSE_BUSY = c_long(7015);
pub const TOKEN_ADJUST_PRIVILEGES = 32;
pub const LOCALE_ICURRDIGITS = 25;
pub const IS_TEXT_UNICODE_CONTROLS = 4;
pub const __declare_lock_level = level;
pub const SERVICE_CONFIG_DELAYED_AUTO_START_INFO = 3;
pub const __drv_setsIRQL = irql;
pub const ENABLE_MOUSE_INPUT = 16;
pub const EPIPE = 32;
pub const ERROR_HOTKEY_NOT_REGISTERED = c_long(1419);
pub const ERROR_COMMITMENT_LIMIT = c_long(1455);
pub const SHUTDOWN_RESTARTAPPS = 128;
pub const SC_MANAGER_CREATE_SERVICE = 2;
pub const FILE_READ_ONLY = 8;
pub const ETXTBSY = 139;
pub const __DBL_HAS_DENORM__ = 1;
pub const ERROR_NO_TRACKING_SERVICE = c_long(1172);
pub const IMAGE_FILE_LINE_NUMS_STRIPPED = 4;
pub const ERROR_WX86_ERROR = c_long(540);
pub const ERROR_CTX_CLIENT_QUERY_TIMEOUT = c_long(7040);
pub const IMAGE_REL_MIPS_TOKEN = 14;
pub const PEERDIST_ERROR_SERVICE_UNAVAILABLE = c_long(4065);
pub const __WINT_MAX__ = 65535;
pub const EnumResourceLanguagesEx = EnumResourceLanguagesExA;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_APP_RID = c_long(2048);
pub const VOS__BASE = c_long(0);
pub const HBMMENU_MBAR_CLOSE = if (@typeInfo(@TypeOf(5)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 5) else if (@typeInfo(@TypeOf(5)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 5) else @as(HBITMAP, 5);
pub const ERROR_DS_DRA_CORRUPT_UTD_VECTOR = c_long(8629);
pub const SECURITY_WMIHOST_ID_BASE_RID = c_long(86);
pub const SPI_GETMOUSEDOCKTHRESHOLD = 126;
pub const OF_VERIFY = 1024;
pub const MoveMemory = RtlMoveMemory;
pub const __acquires_lock = lock;
pub const RegDeleteKeyTransacted = RegDeleteKeyTransactedA;
pub const SEC_WRITECOMBINE = 1073741824;
pub const IMAGE_FILE_MACHINE_R3000 = 354;
pub const ERROR_CLUSTER_NODE_DOWN = c_long(5050);
pub const SETXON = 2;
pub const PRODUCT_CLOUD_HOST_INFRASTRUCTURE_SERVER = 124;
pub const ERROR_DS_DRA_MISSING_KRBTGT_SECRET = c_long(8633);
pub const LB_OKAY = 0;
pub const ES_AWAYMODE_REQUIRED = if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 64) else if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 64) else @as(DWORD, 64);
pub const ERROR_SXS_MISSING_ASSEMBLY_IDENTITY_ATTRIBUTE = c_long(14079);
pub const LOCALE_SNATIVECURRNAME = 4104;
pub const CF_TEXT = 1;
pub const FKF_HOTKEYSOUND = 16;
pub const ERROR_WOF_WIM_HEADER_CORRUPT = c_long(4446);
pub const IMAGE_HOT_PATCH_CHUNK_TYPE = 1032192;
pub const VOS_NT = c_long(262144);
pub const ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = c_long(8516);
pub const C3_LOWSURROGATE = 4096;
pub const InterlockedCompareExchangeNoFence64 = InterlockedCompareExchange64;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const IMAGE_REL_IA64_GPREL22 = 9;
pub const CTRY_NORWAY = 47;
pub const TC_GP_TRAP = 2;
pub const FACILITY_AUDIO = 102;
pub const ERROR_DS_CANT_DERIVE_SPN_WITHOUT_SERVER_REF = c_long(8589);
pub const VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = 214;
pub const ERROR_MARKED_TO_DISALLOW_WRITES = c_long(348);
pub const FindFirstFileEx = FindFirstFileExA;
pub const ERROR_MINIVERSION_INACCESSIBLE_FROM_SPECIFIED_TRANSACTION = c_long(6810);
pub const DS_CONTEXTHELP = c_long(8192);
pub const STATE_SYSTEM_PROTECTED = 536870912;
pub const LBS_EXTENDEDSEL = c_long(2048);
pub const SECURITY_CAPABILITY_INTERNET_CLIENT_SERVER = c_long(2);
pub const ETO_GLYPH_INDEX = 16;
pub const MF_DISABLED = c_long(2);
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK = 13;
pub const ERROR_NO_INHERITANCE = c_long(1391);
pub const SM_CXSMSIZE = 52;
pub const PRODUCT_CONNECTED_CAR = 117;
pub const BACKGROUND_INTENSITY = 128;
pub const ERROR_EC_CREDSTORE_FULL = c_long(15083);
pub const ERROR_BAD_THREADID_ADDR = c_long(159);
pub const SOUND_SYSTEM_ERROR = 4;
pub const REG_DWORD = c_ulong(4);
pub const PROTECTION_LEVEL_WINDOWS_LIGHT = 2;
pub const RPC_S_NO_BINDINGS = c_long(1718);
pub const VK_SNAPSHOT = 44;
pub const SC_HSCROLL = 61568;
pub const IMAGE_GUARD_FLAG_FID_SUPPRESSED = 1;
pub const DOF_PROGMAN = 1;
pub const ERROR_UNABLE_TO_LOCK_MEDIA = c_long(1108);
pub const DM_NUP = c_long(64);
pub const SERVICE_DYNAMIC_INFORMATION_LEVEL_START_REASON = 1;
pub const SPI_GETMOUSETRAILS = 94;
pub const EVENT_CONSOLE_END = 16639;
pub const IMAGE_REL_ALPHA_MATCH = 13;
pub const DMPAPER_JENV_YOU4_ROTATED = 92;
pub const SPI_GETWAITTOKILLTIMEOUT = 122;
pub const SUBLANG_FRENCH = 1;
pub const LOCALE_USE_CP_ACP = 1073741824;
pub const IMAGE_REL_M32R_PCREL16 = 6;
pub const FILE_ATTRIBUTE_NORMAL = 128;
pub const LANG_BASQUE = 45;
pub const SECURITY_SERVICE_ID_RID_COUNT = c_long(6);
pub const ERROR_SERVICE_DISABLED = c_long(1058);
pub const WTS_CONSOLE_DISCONNECT = 2;
pub const __DBL_MIN__ = 0.000000;
pub const LB_SETCURSEL = 390;
pub const FindNextFile = FindNextFileA;
pub const _WIN32 = 1;
pub const ERROR_TOO_MANY_SESS = c_long(69);
pub const ERROR_DS_SRC_GUID_MISMATCH = c_long(8488);
pub const FAST_FAIL_INVALID_IDLE_STATE = 33;
pub const RIDEV_NOHOTKEYS = 512;
pub const ERROR_RMODE_APP = c_long(1153);
pub const CharUpperBuff = CharUpperBuffA;
pub const EXCEPTION_FLT_INVALID_OPERATION = STATUS_FLOAT_INVALID_OPERATION;
pub const CBR_300 = 300;
pub const ERROR_IPSEC_DOSP_KEYMOD_NOT_ALLOWED = c_long(13930);
pub const FACILITY_USERMODE_COMMONLOG = 26;
pub const ERROR_MEDIUM_NOT_ACCESSIBLE = c_long(4323);
pub const LBS_COMBOBOX = c_long(32768);
pub const TAPE_DRIVE_END_OF_DATA = 2147549184;
pub const PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_MASK = if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 40) else if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 40) else c_uint(3)(i64 << 40);
pub const IMAGE_REL_PPC_TOKEN = 22;
pub const SM_CXMENUSIZE = 54;
pub const GCLP_HMODULE = -16;
pub const PEN_MASK_ROTATION = 2;
pub const ERROR_OFFLOAD_READ_FLT_NOT_SUPPORTED = c_long(4440);
pub const SM_CXMENUCHECK = 71;
pub const MA_ACTIVATE = 1;
pub const SPI_GETHANDEDNESS = 8228;
pub const VerQueryValue = VerQueryValueA;
pub const RES_CURSOR = 2;
pub const ERROR_TIMER_RESUME_IGNORED = c_long(722);
pub const EXCEPTION_IN_PAGE_ERROR = STATUS_IN_PAGE_ERROR;
pub const RRF_SUBKEY_WOW6432KEY = 131072;
pub const _Group_impl_ = annos;
pub const EMR_SCALEWINDOWEXTEX = 32;
pub const ERROR_IO_PENDING = c_long(997);
pub const PAN_LETT_NORMAL_BOXED = 4;
pub const WN_EXTENDED_ERROR = ERROR_EXTENDED_ERROR;
pub const ERROR_INSTALL_INVALID_RELATED_SET_UPDATE = c_long(15639);
pub const MONITOR_DEFAULTTOPRIMARY = 1;
pub const CC_PIE = 2;
pub const VK_SUBTRACT = 109;
pub const CB_GETHORIZONTALEXTENT = 349;
pub const PRODUCT_STARTER_E = 66;
pub const ERROR_INVALID_COLORINDEX = c_long(2022);
pub const PF_TEMPORAL_LEVEL_3 = _MM_HINT_T2;
pub const SUBLANG_GERMAN = 1;
pub const IMAGE_REL_I386_DIR32 = 6;
pub const BAUD_14400 = if (@typeInfo(@TypeOf(4096)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4096) else if (@typeInfo(@TypeOf(4096)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4096) else @as(DWORD, 4096);
pub const GSS_ALLOW_INHERITED_COMMON = 1;
pub const ERROR_INVALID_SIGNAL_NUMBER = c_long(209);
pub const RPC_S_COMM_FAILURE = c_long(1820);
pub const WNNC_NET_DOCUSHARE = 4521984;
pub const LANG_KINYARWANDA = 135;
pub const ERROR_TRANSACTIONMANAGER_IDENTITY_MISMATCH = c_long(6727);
pub const DM_DISPLAYFIXEDOUTPUT = c_long(536870912);
pub const SECURITY_DIALUP_RID = c_long(1);
pub const ERROR_NON_DOMAIN_SID = c_long(1258);
pub const WA_INACTIVE = 0;
pub const VFT2_DRV_KEYBOARD = c_long(2);
pub const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 11;
pub const S_WHITE512 = 4;
pub const SUBLANG_IRISH_IRELAND = 2;
pub const LGRPID_THAI = 11;
pub const MININT8 = if (@typeInfo(@TypeOf(~MAXINT8)) == @import("builtin").TypeId.Pointer) @ptrCast(INT8, ~MAXINT8) else if (@typeInfo(@TypeOf(~MAXINT8)) == @import("builtin").TypeId.Int) @intToPtr(INT8, ~MAXINT8) else INT8(~MAXINT8);
pub const _SAL_VERSION = 20;
pub const ERROR_NOT_REDUNDANT_STORAGE = c_long(333);
pub const SERVICE_TRIGGER_DATA_TYPE_KEYWORD_ALL = 5;
pub const JOB_OBJECT_CPU_RATE_CONTROL_ENABLE = 1;
pub const DOCKINFO_DOCKED = 2;
pub const ExpandEnvironmentStrings = ExpandEnvironmentStringsA;
pub const AnsiNext = CharNextA;
pub const JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096;
pub const ICM_DONE_OUTSIDEDC = 4;
pub const CS_NOCLOSE = 512;
pub const ERROR_MUI_INVALID_LOCALE_NAME = c_long(15103);
pub const SUBLANG_ENGLISH_NZ = 5;
pub const ERROR_DS_INVALID_SEARCH_FLAG_TUPLE = c_long(8627);
pub const SID_REVISION = 1;
pub const ERROR_EVENT_DONE = c_long(710);
pub const NULLREGION = 1;
pub const EVENT_CONSOLE_LAYOUT = 16389;
pub const EXCEPTION_CONTINUE_EXECUTION = -1;
pub const ERROR_UNEXP_NET_ERR = c_long(59);
pub const MAX_PROFILE_LEN = 80;
pub const DI_MASK = 1;
pub const ERROR_PAGEFILE_CREATE_FAILED = c_long(576);
pub const IO_REPARSE_TAG_HSM = c_long(3221225476);
pub const ERROR_PLATFORM_MANIFEST_INVALID = c_long(4571);
pub const NMPWAIT_NOWAIT = 1;
pub const WNetOpenEnum = WNetOpenEnumA;
pub const GetKeyboardLayoutName = GetKeyboardLayoutNameA;
pub const IMAGE_SCN_LNK_INFO = 512;
pub const FRS_ERR_CHILD_TO_PARENT_COMM = c_long(8011);
pub const SERVICE_STOP_REASON_MINOR_DISK = 8;
pub const EnumICMProfiles = EnumICMProfilesA;
pub const NTM_BOLD = c_long(32);
pub const ERROR_IPSEC_IKE_INNER_IP_ASSIGNMENT_FAILURE = c_long(13899);
pub const EMR_MAX = 122;
pub const IGIMII_OTHER = 32;
pub const IMAGE_REL_ARM_ABSOLUTE = 0;
pub const IMAGE_REL_AMD64_INDIR_BR = 23;
pub const TAPE_QUERY_DRIVE_PARAMETERS = c_long(0);
pub const DNS_ERROR_ZONE_REQUIRES_MASTER_IP = c_long(9620);
pub const ERROR_INVALID_MSGBOX_STYLE = c_long(1438);
pub const DNS_ERROR_RRL_INVALID_LEAK_RATE = c_long(9916);
pub const ERROR_CTX_ENCRYPTION_LEVEL_REQUIRED = c_long(7061);
pub const ERROR_REDIRECTOR_HAS_OPEN_HANDLES = c_long(1794);
pub const IO_REPARSE_TAG_FILE_PLACEHOLDER = c_long(2147483669);
pub const ERROR_DS_NO_NTDSA_OBJECT = c_long(8623);
pub const RTS_CONTROL_TOGGLE = 3;
pub const PAN_BENT_ARMS_WEDGE = 8;
pub const ACCESS_REASON_STAGING_MASK = 2147483648;
pub const RTL_CRITICAL_SECTION_DEBUG_FLAG_STATIC_INIT = 1;
pub const NORMAL_PRIORITY_CLASS = 32;
pub const HCF_HOTKEYSOUND = 16;
pub const DNS_ERROR_DS_UNAVAILABLE = c_long(9717);
pub const SERVICE_NOTIFY_PAUSED = 64;
pub const __sdv_retrieve_request = r;
pub const IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;
pub const ERROR_NO_SECURITY_ON_OBJECT = c_long(1350);
pub const RDW_UPDATENOW = 256;
pub const DMBIN_SMALLFMT = 9;
pub const IMAGE_ORDINAL_FLAG = IMAGE_ORDINAL_FLAG64;
pub const VP_TV_STANDARD_SECAM_K1 = 8192;
pub const GETVECTORPENSIZE = 26;
pub const LOCALE_ALTERNATE_SORTS = 4;
pub const OUT_DEFAULT_PRECIS = 0;
pub const SIF_DISABLENOSCROLL = 8;
pub const IMAGE_GUARD_PROTECT_DELAYLOAD_IAT = 4096;
pub const CLIP_EMBEDDED = 8 << 4;
pub const X3_P_INST_WORD_X = 3;
pub const LB_GETSELCOUNT = 400;
pub const DC_MINEXTENT = 4;
pub const ERROR_CTX_SHADOW_DISABLED = c_long(7051);
pub const FILE_CURRENT = 1;
pub const _WIN32_WINNT_NT4 = 1024;
pub const FindResourceEx = FindResourceExA;
pub const ERROR_TRANSACTION_RECORD_TOO_LONG = c_long(6724);
pub const X3_IMM39_1_INST_WORD_X = 2;
pub const TAPE_SELECT_PARTITIONS = c_long(1);
pub const CTRY_URUGUAY = 598;
pub const SUBLANG_ENGLISH_CARIBBEAN = 9;
pub const IMAGE_REL_CEE_ABSOLUTE = 0;
pub const DMCOLOR_MONOCHROME = 1;
pub const IMAGE_DEBUG_TYPE_COFF = 1;
pub const C3_IDEOGRAPH = 256;
pub const PROC_THREAD_ATTRIBUTE_INPUT = 131072;
pub const DMPAPER_12X11 = 90;
pub const DOMAIN_ALIAS_RID_PRINT_OPS = c_long(550);
pub const IMAGE_FILE_MACHINE_POWERPCFP = 497;
pub const ERROR_SXS_XML_E_MISSINGWHITESPACE = c_long(14037);
pub const SECURITY_MAX_ALWAYS_FILTERED = c_long(999);
pub const ERROR_FT_WRITE_FAILURE = c_long(338);
pub const __MPX__ = 1;
pub const ERROR_DS_HAVE_PRIMARY_MEMBERS = c_long(8521);
pub const ERROR_SUBST_TO_JOIN = c_long(141);
pub const CONVERT10_S_FIRST = c_long(262592);
pub const EXCEPTION_STACK_OVERFLOW = STATUS_STACK_OVERFLOW;
pub const ILLUMINANT_F2 = 8;
pub const MDM_X75_DATA_DEFAULT = 0;
pub const ERROR_EVT_EVENT_TEMPLATE_NOT_FOUND = c_long(15003);
pub const DMPAPER_PENV_3_ROTATED = 111;
pub const EWX_ARSO = 67108864;
pub const SE_SIGNING_LEVEL_WINDOWS = 12;
pub const SHUTDOWN_SKIP_SVC_PRESHUTDOWN = 256;
pub const C3_HALFWIDTH = 64;
pub const ERROR_HOST_NODE_NOT_RESOURCE_OWNER = c_long(5015);
pub const __UINT32_MAX__ = c_uint(4294967295);
pub const X3_TMPLT_INST_WORD_POS_X = 0;
pub const IMAGE_REL_ARM64_SECTION = 13;
pub const WM_GETOBJECT = 61;
pub const SECURITY_USERMANAGER_ID_RID_COUNT = c_long(6);
pub const PROCESS_HEAP_REGION = 1;
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_DISABLE_PROCESS_TREE = 2;
pub const SHTDN_REASON_MAJOR_SYSTEM = 327680;
pub const DC_PRINTERMEM = 28;
pub const __CLRCALL_PURE_OR_CDECL = __cdecl;
pub const CP_SUPPORTED = 2;
pub const DMPAPER_LETTER = 1;
pub const SERVICE_STOP_REASON_MINOR_WMI = 18;
pub const ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = c_long(4330);
pub const SPI_GETMENUDROPALIGNMENT = 27;
pub const CONTEXT_AMD64 = c_long(1048576);
pub const IDTIMEOUT = 32000;
pub const ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = c_long(8493);
pub const ERROR_DOMAIN_CTRLR_CONFIG_ERROR = c_long(581);
pub const BATTERY_FLAG_HIGH = 1;
pub const POSTSCRIPT_PASSTHROUGH = 4115;
pub const THREAD_BASE_PRIORITY_MAX = 2;
pub const PRODUCT_DATACENTER_SERVER = 8;
pub const ERROR_STATE_COMPOSITE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = c_long(15815);
pub const ENOBUFS = 119;
pub const LOCALE_SPM = 41;
pub const LOCALE_ALL = 0;
pub const WS_SIZEBOX = WS_THICKFRAME;
pub const VK_NONAME = 252;
pub const ERROR_DUPLICATE_PRIVILEGES = c_long(311);
pub const ERROR_GROUPSET_CANT_PROVIDE = c_long(5993);
pub const RPC_S_NAME_SERVICE_UNAVAILABLE = c_long(1762);
pub const ERROR_CLUSTER_SHUTTING_DOWN = c_long(5022);
pub const STATE_SYSTEM_ALERT_MEDIUM = 134217728;
pub const SUBLANG_SPANISH_EL_SALVADOR = 17;
pub const ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = c_long(8205);
pub const DMICMMETHOD_DEVICE = 4;
pub const IMAGE_REL_IA64_PCREL60X = 21;
pub const ERROR_SERVICE_REQUEST_TIMEOUT = c_long(1053);
pub const XSTATE_LEGACY_FLOATING_POINT = 0;
pub const LANG_SLOVENIAN = 36;
pub const SDC_TOPOLOGY_INTERNAL = 1;
pub const TKF_CONFIRMHOTKEY = 8;
pub const CB_GETITEMHEIGHT = 340;
pub const OBJ_BITMAP = 7;
pub const SE_DACL_PROTECTED = 4096;
pub const ERROR_APP_DATA_LIMIT_EXCEEDED = c_long(4403);
pub const ERROR_FILE_METADATA_OPTIMIZATION_IN_PROGRESS = c_long(809);
pub const JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;
pub const DFCS_MENUCHECK = 1;
pub const ERROR_SPECIAL_ACCOUNT = c_long(1371);
pub const FILE_FILE_COMPRESSION = 16;
pub const IMAGE_POLICY_METADATA_VERSION = 1;
pub const ISMEX_SEND = 1;
pub const PAN_PROP_CONDENSED = 6;
pub const ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = c_long(8559);
pub const SERVICE_ERROR_SEVERE = 2;
pub const DMPAPER_A3_TRANSVERSE = 67;
pub const CTRY_BELGIUM = 32;
pub const SUBLANG_ARABIC_SYRIA = 10;
pub const TKF_AVAILABLE = 2;
pub const DNS_ERROR_RCODE_NOT_IMPLEMENTED = c_long(9004);
pub const ERROR_DRIVE_MEDIA_MISMATCH = c_long(4303);
pub const EXCEPTION_READ_FAULT = 0;
pub const PROCESSOR_ARM720 = 1824;
pub const TRANSACTION_NOTIFY_ROLLBACK = 8;
pub const WM_DWMSENDICONICTHUMBNAIL = 803;
pub const ERROR_IPSEC_IKE_RATELIMIT_DROP = c_long(13903);
pub const ERROR_ALREADY_ASSIGNED = c_long(85);
pub const FILE_SHARE_READ = 1;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_DISCONNECTED = c_long(788);
pub const ERROR_FT_DI_SCAN_REQUIRED = c_long(339);
pub const IMAGE_REL_ALPHA_BRADDR = 7;
pub const SW_NORMAL = 1;
pub const PRODUCT_BUSINESS = 6;
pub const SSTF_NONE = 0;
pub const CAPSLOCK_ON = 128;
pub const ERROR_IPSEC_MM_POLICY_IN_USE = c_long(13005);
pub const ERROR_SXS_VERSION_CONFLICT = c_long(14008);
pub const MK_E_LAST = c_long(2147746287);
pub const VER_NT_DOMAIN_CONTROLLER = 2;
pub const ERROR_FILE_READ_ONLY = c_long(6009);
pub const ERROR_INSUFFICIENT_BUFFER = c_long(122);
pub const IMAGE_REL_M32R_TOKEN = 14;
pub const STATUS_FLOAT_STACK_CHECK = if (@typeInfo(@TypeOf(c_long(3221225618))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225618)) else if (@typeInfo(@TypeOf(c_long(3221225618))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225618)) else @as(DWORD, c_long(3221225618));
pub const DEVICEFAMILYINFOENUM_TEAM = 6;
pub const PRODUCT_DATACENTER_EVALUATION_SERVER = 80;
pub const VK_NAVIGATION_UP = 138;
pub const IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;
pub const CF_DSPTEXT = 129;
pub const PO_THROTTLE_MAXIMUM = 4;
pub const DESKTOP_SWITCHDESKTOP = c_long(256);
pub const LookupAccountSid = LookupAccountSidA;
pub const QDC_DATABASE_CURRENT = 4;
pub const PROCESSOR_ARCHITECTURE_ARM = 5;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_A = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A;
pub const WH_MAXHOOK = WH_MAX;
pub const DOMAIN_ALIAS_RID_TS_LICENSE_SERVERS = c_long(561);
pub const CB_GETLOCALE = 346;
pub const GETDEVICEUNITS = 42;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_W_A = "GetSystemWow64DirectoryW";
pub const ERROR_SUBST_TO_SUBST = c_long(139);
pub const EM_EMPTYUNDOBUFFER = 205;
pub const IMN_SETCOMPOSITIONWINDOW = 11;
pub const ERROR_DEPENDENCY_TREE_TOO_COMPLEX = c_long(5929);
pub const GUI_CARETBLINKING = 1;
pub const PRODUCT_ONECOREUPDATEOS = 182;
pub const FACILITY_DXGI_DDI = 2171;
pub const ERROR_NODE_NOT_ACTIVE_CLUSTER_MEMBER = c_long(5980);
pub const THREAD_MODE_BACKGROUND_END = 131072;
pub const CONTEXT_EXCEPTION_ACTIVE = c_long(134217728);
pub const OBJID_CARET = if (@typeInfo(@TypeOf(4294967288)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967288) else if (@typeInfo(@TypeOf(4294967288)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967288) else @as(LONG, 4294967288);
pub const SM_CXVSCROLL = 2;
pub const ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = c_long(5032);
pub const RegDeleteKey = RegDeleteKeyA;
pub const __WCHAR_MAX__ = 65535;
pub const DEVICEFAMILYDEVICEFORM_PUCK = 9;
pub const VK_OEM_PLUS = 187;
pub const NORM_IGNOREWIDTH = 131072;
pub const VIF_OUTOFMEMORY = c_long(32768);
pub const InterlockedExchangeAddNoFence64 = _InterlockedExchangeAdd64;
pub const DNS_ERROR_RCODE_BADSIG = c_long(9016);
pub const POWER_ACTION_QUERY_ALLOWED = 1;
pub const ERROR_DISK_REPAIR_DISABLED = c_long(780);
pub const ERROR_EVT_VERSION_TOO_NEW = c_long(15035);
pub const SPI_GETHUNGAPPTIMEOUT = 120;
pub const IMAGE_REL_PPC_SECREL16 = 15;
pub const DMICM_SATURATE = 1;
pub const _Deref2_post1_impl_ = p1;
pub const ERROR_GROUP_EXISTS = c_long(1318);
pub const CTRY_KUWAIT = 965;
pub const ERROR_CLUSTER_NODE_EXISTS = c_long(5040);
pub const LOCALE_SABBREVMONTHNAME8 = 75;
pub const EXDEV = 18;
pub const PRODUCT_UNDEFINED = 0;
pub const CONSOLE_CARET_VISIBLE = 2;
pub const ERROR_DS_CANT_DELETE = c_long(8398);
pub const MDM_PROTOCOLID_V120 = 5;
pub const DEVICEFAMILYDEVICEFORM_DESKTOP = 3;
pub const ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = c_long(5063);
pub const RC_BIGFONT = 1024;
pub const THREAD_QUERY_LIMITED_INFORMATION = 2048;
pub const SUBLANG_ICELANDIC_ICELAND = 1;
pub const BSM_NETDRIVER = 2;
pub const ERROR_CALLBACK_POP_STACK = c_long(768);
pub const ERROR_TXF_DIR_NOT_EMPTY = c_long(6826);
pub const OUT_STRING_PRECIS = 1;
pub const MKF_RIGHTBUTTONDOWN = 33554432;
pub const CFS_RECT = 1;
pub const WGL_SWAP_OVERLAY2 = 4;
pub const RPC_S_UNKNOWN_IF = c_long(1717);
pub const IMAGE_SCN_ALIGN_8BYTES = 4194304;
pub const DT_NOPREFIX = 2048;
pub const CopyFileTransacted = CopyFileTransactedA;
pub const WARNING_IPSEC_MM_POLICY_PRUNED = c_long(13024);
pub const ERROR_PACKAGE_STAGING_ONHOLD = c_long(15638);
pub const DC_MEDIATYPENAMES = 34;
pub const LBS_OWNERDRAWVARIABLE = c_long(32);
pub const SetConsoleNumberOfCommands = SetConsoleNumberOfCommandsA;
pub const DATEFMT_ENUMPROC = DATEFMT_ENUMPROCA;
pub const LOCALE_IMEASURE = 13;
pub const GetConsoleOriginalTitle = GetConsoleOriginalTitleA;
pub const InterlockedAnd16 = _InterlockedAnd16;
pub const ERROR_HANDLE_REVOKED = c_long(811);
pub const ERROR_NETWORK_UNREACHABLE = c_long(1231);
pub const PAN_LETT_OBLIQUE_SQUARE = 15;
pub const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE = 64;
pub const _WIN32_IE_IE70 = 1792;
pub const TME_HOVER = 1;
pub const NID_MULTI_INPUT = 64;
pub const SEC_IMAGE = 16777216;
pub const PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 24) else if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 24) else c_uint(1)(i64 << 24);
pub const IMAGE_REL_SH3_TOKEN = 18;
pub const LCID_ALTERNATE_SORTS = 4;
pub const DNS_ERROR_UNSECURE_PACKET = c_long(9505);
pub const SE_SIGNING_LEVEL_DYNAMIC_CODEGEN = 11;
pub const CE_RXPARITY = 4;
pub const ERROR_INVALID_COMBOBOX_MESSAGE = c_long(1422);
pub const BACKUP_SPARSE_BLOCK = 9;
pub const CRM_PROTOCOL_MAXIMUM_OPTION = 3;
pub const GL_ID_NOMODULE = 1;
pub const VER_SUITE_EMBEDDEDNT = 64;
pub const ENABLERELATIVEWIDTHS = 768;
pub const ERROR_VDM_DISALLOWED = c_long(1286);
pub const EVENT_OBJECT_DRAGDROPPED = 32806;
pub const ERROR_DEVICE_IN_USE = c_long(2404);
pub const EXCEPTION_FLT_STACK_CHECK = STATUS_FLOAT_STACK_CHECK;
pub const CallMsgFilter = CallMsgFilterA;
pub const ERROR_SERVICE_START_HANG = c_long(1070);
pub const __CONSTANT_CFSTRINGS__ = 1;
pub const PF_ARM_V8_CRC32_INSTRUCTIONS_AVAILABLE = 31;
pub const STATUS_ORDINAL_NOT_FOUND = if (@typeInfo(@TypeOf(c_long(3221225784))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225784)) else if (@typeInfo(@TypeOf(c_long(3221225784))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225784)) else @as(DWORD, c_long(3221225784));
pub const IMAGE_ORDINAL_FLAG64 = 9223372036854775808;
pub const ERROR_PRINT_CANCELLED = c_long(63);
pub const EVENT_OBJECT_DESCRIPTIONCHANGE = 32781;
pub const IMAGE_FILE_BYTES_REVERSED_HI = 32768;
pub const MEM_RESERVE_PLACEHOLDER = 262144;
pub const CREATE_PROTECTED_PROCESS = 262144;
pub const ERROR_DS_DST_NC_MISMATCH = c_long(8486);
pub const ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT = c_long(2109);
pub const AccessCheckByTypeResultListAndAuditAlarm = AccessCheckByTypeResultListAndAuditAlarmA;
pub const EMR_EOF = 14;
pub const PENARBITRATIONTYPE_MAX = 4;
pub const SUBLANG_SLOVAK_SLOVAKIA = 1;
pub const GWL_HWNDPARENT = -8;
pub const ERROR_NOT_A_CLOUD_FILE = c_long(376);
pub const APPCOMMAND_SAVE = 32;
pub const SID_MAX_SUB_AUTHORITIES = 15;
pub const ERROR_EXCEPTION_IN_RESOURCE_CALL = c_long(5930);
pub const DMPAPER_PENV_10 = 105;
pub const PAN_STROKE_RAPID_VERT = 6;
pub const SERVICE_STOP_REASON_MINOR_UNSTABLE = 7;
pub const ERROR_DS_CANT_REPLACE_HIDDEN_REC = c_long(8424);
pub const ERROR_RESOURCE_TYPE_NOT_FOUND = c_long(1813);
pub const FW_REGULAR = FW_NORMAL;
pub const MDM_SHIFT_EXTENDEDINFO = MDM_SHIFT_BEARERMODE;
pub const ERROR_INVALID_ACCEL_HANDLE = c_long(1403);
pub const INPLACE_E_FIRST = c_long(2147746208);
pub const WM_ENTERSIZEMOVE = 561;
pub const RPC_S_NOT_CANCELLED = c_long(1826);
pub const POINTER_FLAG_CANCELED = 32768;
pub const DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT = c_long(9124);
pub const IMAGE_FILE_BYTES_REVERSED_LO = 128;
pub const EVENT_SYSTEM_CAPTUREEND = 9;
pub const SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 7;
pub const CTRY_IRAN = 981;
pub const MEM_EXTENDED_PARAMETER_NONPAGED = 2;
pub const MoveFileEx = MoveFileExA;
pub const RI_MOUSE_BUTTON_1_UP = RI_MOUSE_LEFT_BUTTON_UP;
pub const ERROR_REMOTE_FILE_VERSION_MISMATCH = c_long(6814);
pub const ILLUMINANT_DAYLIGHT = ILLUMINANT_C;
pub const SKF_HOTKEYSOUND = 16;
pub const FRAME_NONFPO = 3;
pub const ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = c_long(5064);
pub const ERROR_FILE_SYSTEM_LIMITATION = c_long(665);
pub const GR_GLOBAL = if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Pointer) @ptrCast(HANDLE, -2) else if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Int) @intToPtr(HANDLE, -2) else @as(HANDLE, -2);
pub const IMAGE_NT_SIGNATURE = 17744;
pub const ERROR_CTX_MODEM_RESPONSE_TIMEOUT = c_long(7012);
pub const GCPGLYPH_LINKBEFORE = 32768;
pub const ERROR_EXTENDED_ERROR = c_long(1208);
pub const PS_NULL = 5;
pub const StartService = StartServiceA;
pub const __UINT_LEAST8_MAX__ = 255;
pub const SECURITY_SERVER_LOGON_RID = SECURITY_ENTERPRISE_CONTROLLERS_RID;
pub const WINSTA_ACCESSGLOBALATOMS = c_long(32);
pub const TC_CP_STROKE = 4;
pub const DT_SINGLELINE = 32;
pub const IO_REPARSE_TAG_UNHANDLED = c_long(2147483680);
pub const WM_HOTKEY = 786;
pub const DC_SMALLCAP = 2;
pub const ERROR_GENERIC_COMMAND_FAILED = c_long(14109);
pub const CFG_CALL_TARGET_CONVERT_EXPORT_SUPPRESSED_TO_VALID = 4;
pub const FILE_ATTRIBUTE_REPARSE_POINT = 1024;
pub const PRODUCT_EMBEDDED = 65;
pub const DMMEDIA_STANDARD = 1;
pub const LOGON_NETCREDENTIALS_ONLY = 2;
pub const SECURITY_WINDOW_MANAGER_BASE_RID = c_long(90);
pub const DETACHED_PROCESS = 8;
pub const PFD_DOUBLEBUFFER_DONTCARE = 1073741824;
pub const PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_DEFER = if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 48) else if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 48) else c_uint(0)(i64 << 48);
pub const WM_PAINT = 15;
pub const ERROR_CANCEL_VIOLATION = c_long(173);
pub const WNetEnumResource = WNetEnumResourceA;
pub const ERROR_MEMORY_HARDWARE = c_long(779);
pub const ERROR_DS_CONFIDENTIALITY_REQUIRED = c_long(8237);
pub const ERROR_DS_DIFFERENT_REPL_EPOCHS = c_long(8593);
pub const ENOSYS = 40;
pub const MDMSPKRFLAG_DIAL = 2;
pub const __PTRDIFF_MAX__ = c_longlong(9223372036854775807);
pub const GENERIC_READ = c_long(2147483648);
pub const ERROR_EDP_DPL_POLICY_CANT_BE_SATISFIED = c_long(357);
pub const ERROR_INSTALL_SOURCE_ABSENT = c_long(1612);
pub const ImmEscape = ImmEscapeA;
pub const WM_TOUCHHITTESTING = 589;
pub const SHTDN_REASON_MINOR_HUNG = 5;
pub const IMAGE_VXD_SIGNATURE = 17740;
pub const SERVICE_KERNEL_DRIVER = 1;
pub const ERROR_TIME_SKEW = c_long(1398);
pub const SPI_SETMOUSESIDEMOVETHRESHOLD = 137;
pub const LOCALE_IDIALINGCODE = 5;
pub const ERROR_DS_DUP_LDAP_DISPLAY_NAME = c_long(8382);
pub const ERROR_OUT_OF_STRUCTURES = c_long(84);
pub const REGISTERWORDENUMPROC = REGISTERWORDENUMPROCA;
pub const IO_REPARSE_TAG_WIM = c_long(2147483656);
pub const TA_LEFT = 0;
pub const ERROR_CLOUD_FILE_REQUEST_ABORTED = c_long(393);
pub const MF_ENABLED = c_long(0);
pub const SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY = 20;
pub const BS_TOP = c_long(1024);
pub const FILE_RENAME_FLAG_POSIX_SEMANTICS = 2;
pub const BS_AUTORADIOBUTTON = c_long(9);
pub const LGRPID_TRADITIONAL_CHINESE = 9;
pub const SHTDN_REASON_FLAG_DIRTY_PROBLEM_ID_REQUIRED = 33554432;
pub const ERROR_RANGE_NOT_FOUND = c_long(644);
pub const ISMEX_NOSEND = 0;
pub const DNS_ERROR_NOT_ALLOWED_ON_RODC = c_long(9569);
pub const DMPAPER_STATEMENT = 6;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_DEFER = 0 << 28;
pub const EMR_ARC = 45;
pub const RIDI_PREPARSEDDATA = 536870917;
pub const LMEM_DISCARDABLE = 3840;
pub const LOCALE_SABBREVMONTHNAME9 = 76;
pub const __UINTMAX_WIDTH__ = 64;
pub const STREAM_MODIFIED_WHEN_READ = 1;
pub const DS_ABSALIGN = c_long(1);
pub const WHITE_BRUSH = 0;
pub const SUBLANG_FINNISH_FINLAND = 1;
pub const PST_TCPIP_TELNET = if (@typeInfo(@TypeOf(258)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 258) else if (@typeInfo(@TypeOf(258)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 258) else @as(DWORD, 258);
pub const ERROR_CLUSTER_RESOURCES_MUST_BE_ONLINE_ON_THE_SAME_NODE = c_long(5933);
pub const IME_ITHOTKEY_RESEND_RESULTSTR = 512;
pub const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9;
pub const CreateDirectoryEx = CreateDirectoryExA;
pub const ERROR_BAD_DEVICE_PATH = c_long(330);
pub const EMR_CREATEBRUSHINDIRECT = 39;
pub const ERROR_BADDB = c_long(1009);
pub const WGL_SWAP_OVERLAY3 = 8;
pub const WINAPI_INLINE = WINAPI;
pub const ERROR_PARTITION_FAILURE = c_long(1105);
pub const ERROR_REGISTRY_CORRUPT = c_long(1015);
pub const ERROR_DS_RIDMGR_DISABLED = c_long(8263);
pub const ERROR_DEVICE_REMOVED = c_long(1617);
pub const EnumResourceLanguages = EnumResourceLanguagesA;
pub const LPD_TYPE_RGBA = 0;
pub const SUBLANG_ENGLISH_JAMAICA = 8;
pub const DNS_ERROR_DWORD_VALUE_TOO_SMALL = c_long(9566);
pub const SM_CYMAXIMIZED = 62;
pub const LANG_TURKMEN = 66;
pub const GetNamedPipeHandleState = GetNamedPipeHandleStateA;
pub const ERROR_SXS_ASSEMBLY_IS_NOT_A_DEPLOYMENT = c_long(14103);
pub const GCLP_MENUNAME = -8;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT_REQ = c_long(13836);
pub const TRANSACTIONMANAGER_BIND_TRANSACTION = 32;
pub const ERROR_CANT_DELETE_LAST_ITEM = c_long(4335);
pub const DNS_ERROR_NO_DNS_SERVERS = c_long(9852);
pub const ERROR_INFLOOP_IN_RELOC_CHAIN = c_long(202);
pub const IO_REPARSE_TAG_HSM2 = c_long(2147483654);
pub const SERVICE_TRIGGER_TYPE_DOMAIN_JOIN = 3;
pub const ERROR_DS_OID_MAPPED_GROUP_CANT_HAVE_MEMBERS = c_long(8637);
pub const BitScanReverse = _BitScanReverse;
pub const ERROR_JOURNAL_NOT_ACTIVE = c_long(1179);
pub const ERROR_FILE_CORRUPT = c_long(1392);
pub const WHITEONBLACK = 2;
pub const PRODUCT_ENTERPRISE_N = 27;
pub const SECTION_MAP_WRITE = 2;
pub const VK_KANJI = 25;
pub const _HAS_CXX17 = 0;
pub const INDEXID_OBJECT = 0;
pub const KEY_QUERY_VALUE = 1;
pub const DOMAIN_ALIAS_RID_BACKUP_OPS = c_long(551);
pub const ERROR_INVALID_ADDRESS = c_long(487);
pub const HC_GETNEXT = 1;
pub const PAN_PROP_VERY_EXPANDED = 7;
pub const SPI_GETUIEFFECTS = 4158;
pub const MNGOF_BOTTOMGAP = 2;
pub const SECURITY_WINRM_ID_BASE_RID = c_long(94);
pub const IMAGE_REL_AMD64_EHANDLER = 17;
pub const ERROR_LOG_BLOCKS_EXHAUSTED = c_long(6605);
pub const RegisterServiceCtrlHandlerEx = RegisterServiceCtrlHandlerExA;
pub const MUI_FORMAT_REG_COMPAT = 1;
pub const EMR_POLYBEZIER = 2;
pub const REG_START_JOURNAL = c_long(64);
pub const SCS_64BIT_BINARY = 6;
pub const PAGE_READWRITE = 4;
pub const ERROR_CLUSTER_RESOURCE_NOT_MONITORED = c_long(5981);
pub const CreateWindowEx = CreateWindowExA;
pub const HANDLE_FLAG_INHERIT = 1;
pub const CAL_TAIWAN = 4;
pub const LOCALE_SSCRIPTS = 108;
pub const REG_BOOT_HIVE = c_long(1024);
pub const ERROR_LOG_GROWTH_FAILED = c_long(6833);
pub const IMAGE_DIRECTORY_ENTRY_TLS = 9;
pub const IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
pub const PrivateExtractIcons = PrivateExtractIconsA;
pub const WNNC_NET_HOB_NFS = 3276800;
pub const SUBLANG_ARABIC_TUNISIA = 7;
pub const MOUSE_MOVE_ABSOLUTE = 1;
pub const VK_CONVERT = 28;
pub const ERROR_EVT_CONFIGURATION_ERROR = c_long(15010);
pub const ERROR_STATE_DELETE_CONTAINER_FAILED = c_long(15806);
pub const STREAM_CONTAINS_SECURITY = 2;
pub const RPC_X_SS_CONTEXT_DAMAGED = c_long(1777);
pub const ERROR_SXS_MANIFEST_TOO_BIG = c_long(14105);
pub const DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION = c_long(9108);
pub const ERROR_VOLUME_CONTAINS_SYS_FILES = c_long(4337);
pub const GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT = 2;
pub const FACILITY_USER_MODE_SECURITY_CORE = 232;
pub const DISPLAY_DEVICE_TS_COMPATIBLE = 2097152;
pub const COLOR_DESKTOP = COLOR_BACKGROUND;
pub const MSGFLTINFO_NONE = 0;
pub const ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = c_long(8556);
pub const GMEM_DISCARDED = 16384;
pub const SERVICE_TRIGGER_TYPE_NETWORK_ENDPOINT = 6;
pub const RC_PALETTE = 256;
pub const SPI_GETMOUSEHOVERHEIGHT = 100;
pub const IMAGE_REL_I386_TOKEN = 12;
pub const EV_CTS = 8;
pub const ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = c_long(8377);
pub const CF_GDIOBJLAST = 1023;
pub const LBS_WANTKEYBOARDINPUT = c_long(1024);
pub const RESOURCEDISPLAYTYPE_ROOT = 7;
pub const PEERDIST_ERROR_MISSING_DATA = c_long(4052);
pub const ERROR_CLUSTER_NO_SECURITY_CONTEXT = c_long(5059);
pub const JOB_OBJECT_LIMIT_VALID_FLAGS = 524287;
pub const ERROR_PRIVILEGE_NOT_HELD = c_long(1314);
pub const ERROR_FT_READ_FAILURE = c_long(415);
pub const ERROR_CLUSTER_NODE_NOT_FOUND = c_long(5042);
pub const __SIZE_FMTo__ = "llo";
pub const ERROR_DOMAIN_CONTROLLER_EXISTS = c_long(1250);
pub const DCB_ACCUMULATE = 2;
pub const ERROR_IPSEC_IKE_INVALID_AUTH_PAYLOAD = c_long(13889);
pub const CreateJobObject = CreateJobObjectA;
pub const VK_NAVIGATION_LEFT = 140;
pub const LoadLibrary = LoadLibraryA;
pub const GL_ID_NOCONVERT = 32;
pub const MIM_MAXHEIGHT = 1;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = 213;
pub const RI_MOUSE_BUTTON_5_UP = 512;
pub const CreateSymbolicLinkTransacted = CreateSymbolicLinkTransactedA;
pub const SORT_JAPANESE_XJIS = 0;
pub const EXCEPTION_FLT_DENORMAL_OPERAND = STATUS_FLOAT_DENORMAL_OPERAND;
pub const PROCESS_POWER_THROTTLING_CURRENT_VERSION = 1;
pub const SHOW_FULLSCREEN = 3;
pub const WSA_QOS_EFLOWDESC = c_long(11026);
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET = c_long(9990);
pub const STATE_SYSTEM_HOTTRACKED = 128;
pub const WS_TILED = WS_OVERLAPPED;
pub const RegLoadKey = RegLoadKeyA;
pub const ERROR_SXS_COMPONENT_STORE_CORRUPT = c_long(14098);
pub const FindWindow = FindWindowA;
pub const DBG_TERMINATE_THREAD = if (@typeInfo(@TypeOf(c_long(1073807363))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807363)) else if (@typeInfo(@TypeOf(c_long(1073807363))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807363)) else @as(DWORD, c_long(1073807363));
pub const PAN_CONTRAST_VERY_HIGH = 9;
pub const ReadConsoleOutputCharacter = ReadConsoleOutputCharacterA;
pub const ERROR_IPSEC_MM_POLICY_NOT_FOUND = c_long(13004);
pub const WM_PASTE = 770;
pub const SSF_SOUNDSENTRYON = 1;
pub const PFD_NEED_PALETTE = 128;
pub const ERROR_SAME_DRIVE = c_long(143);
pub const EMARCH_ENC_I17_IMM7B_INST_WORD_POS_X = 4;
pub const X3_TMPLT_SIZE_X = 4;
pub const EXCEPTION_NESTED_CALL = 16;
pub const IMAGE_REL_PPC_NEG = 256;
pub const SERVICE_INTERROGATE = 128;
pub const WGL_SWAPMULTIPLE_MAX = 16;
pub const __INT_MAX__ = 2147483647;
pub const OF_PARSE = 256;
pub const PST_SCANNER = if (@typeInfo(@TypeOf(34)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 34) else if (@typeInfo(@TypeOf(34)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 34) else @as(DWORD, 34);
pub const DM_SCALE = c_long(16);
pub const APPCOMMAND_MICROPHONE_VOLUME_UP = 26;
pub const GCPCLASS_POSTBOUNDRTL = 16;
pub const WM_HANDHELDLAST = 863;
pub const WM_NCHITTEST = 132;
pub const MS_RLSD_ON = if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 128) else if (@typeInfo(@TypeOf(128)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 128) else @as(DWORD, 128);
pub const PROCESSOR_PPC_601 = 601;
pub const ERROR_DBG_TERMINATE_PROCESS = c_long(692);
pub const DNS_ERROR_NO_CREATE_CACHE_DATA = c_long(9713);
pub const AccessCheckByTypeResultListAndAuditAlarmByHandle = AccessCheckByTypeResultListAndAuditAlarmByHandleA;
pub const USER_TIMER_MAXIMUM = 2147483647;
pub const InterlockedOrAffinity = InterlockedOr64;
pub const GCL_HICONSM = -34;
pub const InterlockedAnd64 = _InterlockedAnd64;
pub const TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576;
pub const PF_RDWRFSGSBASE_AVAILABLE = 22;
pub const LOCALE_ILANGUAGE = 1;
pub const DM_PELSWIDTH = c_long(524288);
pub const EVENT_OBJECT_DESTROY = 32769;
pub const __XSAVES__ = 1;
pub const ERROR_PRINT_MONITOR_ALREADY_INSTALLED = c_long(3006);
pub const ERROR_INVALID_PIXEL_FORMAT = c_long(2000);
pub const DDD_RAW_TARGET_PATH = 1;
pub const ERROR_SYSTEM_INTEGRITY_INVALID_POLICY = c_long(4552);
pub const FSHIFT = 4;
pub const CF_PENDATA = 10;
pub const ERROR_SERVICE_NOTIFICATION = c_long(716);
pub const MB_RETRYCANCEL = c_long(5);
pub const ERROR_MUI_INTLSETTINGS_UILANG_NOT_INSTALLED = c_long(15107);
pub const XSTATE_MASK_AVX = XSTATE_MASK_GSSE;
pub const HCF_HOTKEYACTIVE = 4;
pub const BM_SETSTYLE = 244;
pub const ERROR_RING2_STACK_IN_USE = c_long(207);
pub const DEBUG_ONLY_THIS_PROCESS = 2;
pub const FILE_ACTION_RENAMED_NEW_NAME = 5;
pub const SM_MOUSEHORIZONTALWHEELPRESENT = 91;
pub const ERROR_DBG_CONTROL_C = c_long(693);
pub const MFT_MENUBREAK = MF_MENUBREAK;
pub const APPCOMMAND_TREBLE_UP = 23;
pub const HELP_CONTEXTPOPUP = c_long(8);
pub const FACILITY_NULL = 0;
pub const SM_CYVSCROLL = 20;
pub const CreateScalableFontResource = CreateScalableFontResourceA;
pub const ERROR_SXS_XML_E_XMLDECLSYNTAX = c_long(14035);
pub const PAN_CONTRAST_MEDIUM_LOW = 5;
pub const COPY_FILE_DONT_REQUEST_DEST_WRITE_DAC = 33554432;
pub const GMEM_FIXED = 0;
pub const ERROR_DUP_DOMAINNAME = c_long(1221);
pub const GetCharABCWidthsFloat = GetCharABCWidthsFloatA;
pub const SEC_PROTECTED_IMAGE = 33554432;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_RESERVED = if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 52) else if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 52) else c_uint(3)(i64 << 52);
pub const ERROR_SXS_XML_E_BADCHARDATA = c_long(14036);
pub const EVENT_UIA_EVENTID_END = 20223;
pub const WM_COMMAND = 273;
pub const CREATE_FORCEDOS = 8192;
pub const ERROR_MEMBER_IN_GROUP = c_long(1320);
pub const LANG_URDU = 32;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 60) else if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 60) else c_uint(1)(i64 << 60);
pub const OSVERSION_MASK = 4294901760;
pub const GC_PAN_WITH_GUTTER = 8;
pub const ERROR_DS_MASTERDSA_REQUIRED = c_long(8314);
pub const POINTER_MESSAGE_FLAG_NEW = 1;
pub const REG_MULTI_SZ = c_ulong(7);
pub const SECURITY_PROCESS_PROTECTION_TYPE_FULL_RID = c_long(1024);
pub const SE_GROUP_OWNER = c_long(8);
pub const ERROR_SMB1_NOT_AVAILABLE = c_long(384);
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILERANGE = c_long(412);
pub const RTL_CRITICAL_SECTION_FLAG_STATIC_INIT = 67108864;
pub const DEVICEFAMILYINFOENUM_XBOXSRA = 11;
pub const FRAME_TRAP = 1;
pub const IMAGE_REL_CEF_ADDR64 = 2;
pub const FOREGROUND_INTENSITY = 8;
pub const __INT_LEAST16_TYPE__ = short;
pub const VK_BACK = 8;
pub const ERROR_PARTITION_TERMINATING = c_long(1184);
pub const SUBLANG_WOLOF_SENEGAL = 1;
pub const SLE_MINORERROR = 2;
pub const SECURITY_LOCAL_RID = c_long(0);
pub const STATE_SYSTEM_COLLAPSED = 1024;
pub const SE_SACL_AUTO_INHERIT_REQ = 512;
pub const __SIZEOF_INT__ = 4;
pub const ERROR_SXS_INVALID_ACTCTXDATA_FORMAT = c_long(14002);
pub const EVENT_SYSTEM_ARRANGMENTPREVIEW = 32790;
pub const OWNER_SECURITY_INFORMATION = c_long(1);
pub const LoadImage = LoadImageA;
pub const PSINJECT_PAGETRAILER = 103;
pub const HWND_BOTTOM = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(HWND, 1) else @as(HWND, 1);
pub const LOCALE_ICURRENCY = 27;
pub const JOB_OBJECT_UILIMIT_READCLIPBOARD = 2;
pub const GL_ID_INPUTRADICAL = 37;
pub const ERROR_FAIL_SHUTDOWN = c_long(351);
pub const SUBLANG_TAMAZIGHT_ALGERIA_LATIN = 2;
pub const ERROR_STATE_WRITE_SETTING_FAILED = c_long(15808);
pub const STD_ERROR_HANDLE = if (@typeInfo(@TypeOf(-12)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -12) else if (@typeInfo(@TypeOf(-12)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -12) else @as(DWORD, -12);
pub const BS_TEXT = c_long(0);
pub const SS_ETCHEDFRAME = c_long(18);
pub const SM_CYMIN = 29;
pub const ERROR_CRM_PROTOCOL_NOT_FOUND = c_long(6712);
pub const EVENT_MAX = 2147483647;
pub const DMPAPER_9X11 = 44;
pub const IMAGE_REL_AMD64_INDIR_BR_SWITCHTABLE_LAST = 47;
pub const C3_NOTAPPLICABLE = 0;
pub const EVENT_SYSTEM_MINIMIZESTART = 22;
pub const PC_POLYPOLYGON = 256;
pub const EnumCalendarInfo = EnumCalendarInfoA;
pub const POWER_LEVEL_USER_NOTIFY_EXEC = 4;
pub const MM_TWIPS = 6;
pub const ERROR_BAD_FILE_TYPE = c_long(222);
pub const __ATOMIC_ACQ_REL = 4;
pub const SECURITY_CRED_TYPE_THIS_ORG_CERT_RID = c_long(1);
pub const CTRY_PANAMA = 507;
pub const PRODUCT_IOTENTERPRISES = 191;
pub const CTRY_LIECHTENSTEIN = 41;
pub const DOMAIN_ALIAS_RID_ACCESS_CONTROL_ASSISTANCE_OPS = c_long(579);
pub const SEC_E_OK = if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(0)) else if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(0)) else @as(HRESULT, c_long(0));
pub const ERROR_CANNOT_SWITCH_RUNLEVEL = c_long(15400);
pub const SPI_SETKEYBOARDSPEED = 11;
pub const CopyMemory = RtlCopyMemory;
pub const VIF_CANNOTDELETE = c_long(4096);
pub const PROCESSOR_ARCHITECTURE_IA64 = 6;
pub const IMAGE_REL_ALPHA_HINT = 8;
pub const ERROR_DS_AUX_CLS_TEST_FAIL = c_long(8389);
pub const ERROR_DEVICE_DOOR_OPEN = c_long(1166);
pub const DCX_INTERSECTUPDATE = c_long(512);
pub const IMAGE_SCN_ALIGN_64BYTES = 7340032;
pub const MB_YESNO = c_long(4);
pub const DNS_ERROR_NODE_CREATION_FAILED = c_long(9703);
pub const ERROR_SECUREBOOT_NOT_BASE_POLICY = c_long(4434);
pub const FACILITY_SCARD = 16;
pub const APPCOMMAND_DELETE = 53;
pub const PROCESSOR_ARCHITECTURE_MSIL = 8;
pub const IO_COMPLETION_MODIFY_STATE = 2;
pub const MKF_LEFTBUTTONSEL = 268435456;
pub const ERROR_XMLDSIG_ERROR = c_long(1466);
pub const EMR_RECTANGLE = 43;
pub const FACILITY_STORAGE = 3;
pub const PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 36) else if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 36) else c_uint(1)(i64 << 36);
pub const ERROR_DS_DRA_REF_ALREADY_EXISTS = c_long(8448);
pub const EM_LINEFROMCHAR = 201;
pub const IDN_EMAIL_ADDRESS = 4;
pub const NI_CHANGECANDIDATELIST = 19;
pub const CTRY_SLOVENIA = 386;
pub const CTRY_SWEDEN = 46;
pub const IMAGE_GUARD_CF_LONGJUMP_TABLE_PRESENT = 65536;
pub const XSTATE_LEGACY_SSE = 1;
pub const RPI_SMB2_FLAG_SERVERCAP_MULTICHANNEL = 8;
pub const RRF_RT_REG_MULTI_SZ = 32;
pub const ERROR_INVALID_SUB_AUTHORITY = c_long(1335);
pub const DEACTIVATE_ACTCTX_FLAG_FORCE_EARLY_DEACTIVATION = 1;
pub const _Analysis_assume_ = expr;
pub const VK_NAVIGATION_RIGHT = 141;
pub const IMAGE_REL_MIPS_SECRELLO = 12;
pub const ERROR_DS_LDAP_SEND_QUEUE_FULL = c_long(8616);
pub const MOUSEWHEEL_ROUTING_HYBRID = 1;
pub const __GNUC_VA_LIST = 1;
pub const PARITY_NONE = if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 256) else if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 256) else @as(WORD, 256);
pub const ERROR_DRIVER_BLOCKED = c_long(1275);
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_ALWAYS_OFF = 2 << 20;
pub const SUBLANG_LATVIAN_LATVIA = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 8) else if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 8) else c_uint(1)(i64 << 8);
pub const ERROR_EVT_QUERY_RESULT_INVALID_POSITION = c_long(15012);
pub const LCMAP_KATAKANA = 2097152;
pub const LANG_TAMAZIGHT = 95;
pub const ERROR_DS_LOOP_DETECT = c_long(8246);
pub const ERROR_EXTERNAL_SYSKEY_NOT_SUPPORTED = c_long(399);
pub const FACILITY_CONTROL = 10;
pub const WM_INITDIALOG = 272;
pub const FACILITY_SETUPAPI = 15;
pub const ERROR_NO_SUCH_MEMBER = c_long(1387);
pub const STATUS_INTEGER_OVERFLOW = if (@typeInfo(@TypeOf(c_long(3221225621))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225621)) else if (@typeInfo(@TypeOf(c_long(3221225621))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225621)) else @as(DWORD, c_long(3221225621));
pub const PSIDENT_PSCENTRIC = 1;
pub const IO_REPARSE_TAG_DEDUP = c_long(2147483667);
pub const FACILITY_PARSE = 113;
pub const POINTER_MESSAGE_FLAG_INCONTACT = 4;
pub const SM_CYHSCROLL = 3;
pub const IMAGE_REL_ARM64_BRANCH19 = 15;
pub const SCOPE_SECURITY_INFORMATION = c_long(64);
pub const IMAGE_DLLCHARACTERISTICS_NX_COMPAT = 256;
pub const ERROR_LOGON_TYPE_NOT_GRANTED = c_long(1385);
pub const EM_LINELENGTH = 193;
pub const STATE_SYSTEM_SELFVOICING = 524288;
pub const ERROR_INVALID_IMAGE_HASH = c_long(577);
pub const EnumPropsEx = EnumPropsExA;
pub const MAX_TRANSACTION_DESCRIPTION_LENGTH = 64;
pub const HINSTANCE_ERROR = 32;
pub const PRODUCT_CLOUD_STORAGE_SERVER = 110;
pub const LoadKeyboardLayout = LoadKeyboardLayoutA;
pub const RC_GDI20_OUTPUT = 16;
pub const GETPAIRKERNTABLE = 258;
pub const __byte_readableTo = size;
pub const ImmGetImeMenuItems = ImmGetImeMenuItemsA;
pub const IMAGE_REL_MIPS_REFWORDNB = 34;
pub const _WIN32_IE_WIN98 = _WIN32_IE_IE401;
pub const WDA_NONE = 0;
pub const EPROTONOSUPPORT = 135;
pub const WNNC_NET_AVID1 = 3801088;
pub const MDM_MASK_HDLCPPP_ML = 3 << 6;
pub const POWERBUTTON_ACTION_INDEX_SLEEP = 1;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED_TO_TARGET_PROCESS = 4;
pub const PDC_MODE_DEFAULT = 64;
pub const ERROR_DS_DRA_REPL_PENDING = c_long(8477);
pub const SUBLANG_MAPUDUNGUN_CHILE = 1;
pub const WN_ACCESS_DENIED = ERROR_ACCESS_DENIED;
pub const ERROR_DS_DRA_DN_EXISTS = c_long(8441);
pub const INITIAL_MXCSR = 8064;
pub const PRODUCT_CORE = 101;
pub const JOB_OBJECT_MSG_NOTIFICATION_LIMIT = 11;
pub const TRANSFORM_CTM = 4107;
pub const __SIZEOF_SHORT__ = 2;
pub const HEAP_TAIL_CHECKING_ENABLED = 32;
pub const PRODUCT_DATACENTER_NANO_SERVER = 143;
pub const IMAGE_REL_CEE_ADDR64 = 2;
pub const BASE_SEARCH_PATH_DISABLE_SAFE_SEARCHMODE = 65536;
pub const PRODUCT_ULTIMATE_N = 28;
pub const DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82;
pub const MB_USEGLYPHCHARS = 4;
pub const RPC_S_UNSUPPORTED_TRANS_SYN = c_long(1730);
pub const STDAPIVCALLTYPE = __cdecl;
pub const DEVICEFAMILYINFOENUM_XBOXERA = 12;
pub const END_PATH = 4098;
pub const PAN_SERIF_PERP_SANS = 13;
pub const ERROR_CANT_BREAK_TRANSACTIONAL_DEPENDENCY = c_long(6824);
pub const MAXDWORD = 4294967295;
pub const LB_SELITEMRANGEEX = 387;
pub const VS_FF_PRIVATEBUILD = c_long(8);
pub const PSINJECT_PAGENUMBER = 100;
pub const InterlockedIncrement16 = _InterlockedIncrement16;
pub const VK_OEM_MINUS = 189;
pub const ERROR_REMOVE_FAILED = c_long(15610);
pub const VP_CP_TYPE_MACROVISION = 2;
pub const ERROR_IPSEC_IKE_INVALID_HASH = c_long(13870);
pub const FILE_ATTRIBUTE_EA = 262144;
pub const RESOURCEMANAGER_RECOVER = 4;
pub const EWX_LOGOFF = 0;
pub const SECURITY_NETWORK_SERVICE_RID = c_long(20);
pub const WNetCancelConnection = WNetCancelConnectionA;
pub const DSS_PREFIXONLY = 1024;
pub const ERROR_MEMBER_IN_ALIAS = c_long(1378);
pub const ERROR_LOG_CORRUPTION_DETECTED = c_long(6817);
pub const SPI_SETMOUSEVANISH = 4129;
pub const ERROR_RM_NOT_ACTIVE = c_long(6801);
pub const DST_COMPLEX = 0;
pub const EVENTLOG_PAIRED_EVENT_INACTIVE = 16;
pub const WRITE_NV_MEMORY_FLAG_NO_DRAIN = 256;
pub const DMPAPER_ENV_14 = 23;
pub const RTL_CRITICAL_SECTION_FLAG_DYNAMIC_SPIN = 33554432;
pub const ERROR_SXS_DUPLICATE_ACTIVATABLE_CLASS = c_long(14111);
pub const AW_HIDE = 65536;
pub const EVENT_OBJECT_IME_SHOW = 32807;
pub const InterlockedXorNoFence = _InterlockedXor;
pub const POWER_USER_NOTIFY_BUTTON = 8;
pub const ERROR_PROCESS_MODE_NOT_BACKGROUND = c_long(403);
pub const IGIMIF_RIGHTMENU = 1;
pub const WGL_SWAP_OVERLAY1 = 2;
pub const SERVICE_START = 16;
pub const R2_MERGENOTPEN = 12;
pub const ALERT_SYSTEM_INFORMATIONAL = 1;
pub const InterlockedExchangeAddAcquire64 = _InterlockedExchangeAdd64;
pub const VRL_ENABLE_KERNEL_BREAKS = 1 << 31;
pub const IO_REPARSE_TAG_SIS = c_long(2147483655);
pub const CONNDLG_RO_PATH = 1;
pub const GetLogColorSpace = GetLogColorSpaceA;
pub const X3_EMPTY_INST_VAL_POS_X = 0;
pub const GETSETPRINTORIENT = 30;
pub const SHUTDOWN_HYBRID = 512;
pub const ERROR_ADDRESS_NOT_ASSOCIATED = c_long(1228);
pub const FAST_FAIL_APCS_DISABLED = 32;
pub const EncryptFile = EncryptFileA;
pub const OUT_RASTER_PRECIS = 6;
pub const ERROR_NO_RECOVERY_PROGRAM = c_long(1082);
pub const SERVICE_CONFIG_REQUIRED_PRIVILEGES_INFO = 6;
pub const BroadcastSystemMessageEx = BroadcastSystemMessageExA;
pub const COLOR_3DSHADOW = COLOR_BTNSHADOW;
pub const MAPVK_VSC_TO_VK = 1;
pub const ERROR_SXS_FILE_HASH_MISMATCH = c_long(14028);
pub const SUBLANG_SAMI_SOUTHERN_NORWAY = 6;
pub const XSTATE_MASK_USER_VISIBLE_SUPERVISOR = XSTATE_MASK_CET_U;
pub const ERROR_DS_RESERVED_LINK_ID = c_long(8576);
pub const DMPAPER_NOTE = 18;
pub const IMAGE_SCN_ALIGN_128BYTES = 8388608;
pub const ERROR_IPSEC_DEFAULT_MM_AUTH_NOT_FOUND = c_long(13014);
pub const WINSWDEVICEAPI = DECLSPEC_IMPORT;
pub const ERROR_DS_THREAD_LIMIT_EXCEEDED = c_long(8587);
pub const ACTCTX_FLAG_RESOURCE_NAME_VALID = 8;
pub const ERROR_DS_MAPI_ID_NOT_AVAILABLE = c_long(8632);
pub const _Deref_ret1_impl_ = p1;
pub const BACKUP_OBJECT_ID = 7;
pub const ERROR_CTX_NO_OUTBUF = c_long(7008);
pub const PROCESSOR_PERF_BOOST_MODE_ENABLED = 1;
pub const RESOURCE_ENUM_MUI = 2;
pub const DEVICEFAMILYDEVICEFORM_DIGITAL_SIGNAGE = 16;
pub const PRODUCT_HOME_SERVER = 19;
pub const DDL_EXCLUSIVE = 32768;
pub const PRODUCT_HOME_BASIC = 2;
pub const DOMAIN_ALIAS_RID_DEFAULT_ACCOUNT = c_long(581);
pub const MDM_HDLCPPP_ML_2 = 2;
pub const RI_MOUSE_BUTTON_4_DOWN = 64;
pub const __code_model_small_ = 1;
pub const SECURITY_VIRTUALACCOUNT_ID_RID_COUNT = c_long(6);
pub const FAST_FAIL_DEPRECATED_SERVICE_INVOKED = 27;
pub const SUBVERSION_MASK = 255;
pub const DSS_RIGHT = 32768;
pub const WM_QUEUESYNC = 35;
pub const GGL_LEVEL = 1;
pub const __inout_ecount_nz_opt = size;
pub const ERROR_LOG_START_OF_LOG = c_long(6618);
pub const ERROR_IPSEC_IKE_NEG_STATUS_EXTENDED_END = c_long(13909);
pub const SHTDN_REASON_MINOR_POWER_SUPPLY = 10;
pub const IMC_SETCANDIDATEPOS = 8;
pub const STATUS_ARRAY_BOUNDS_EXCEEDED = if (@typeInfo(@TypeOf(c_long(3221225612))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225612)) else if (@typeInfo(@TypeOf(c_long(3221225612))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225612)) else @as(DWORD, c_long(3221225612));
pub const ERROR_FILE_NOT_FOUND = c_long(2);
pub const OBJ_REGION = 8;
pub const EnumDateFormats = EnumDateFormatsA;
pub const ERROR_CAPAUTHZ_CHANGE_TYPE = c_long(451);
pub const STATUS_INTERRUPTED = if (@typeInfo(@TypeOf(c_long(3221226773))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226773)) else if (@typeInfo(@TypeOf(c_long(3221226773))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226773)) else @as(DWORD, c_long(3221226773));
pub const DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = c_long(9606);
pub const ERROR_SECUREBOOT_REQUIRED_POLICY_FILE_MISSING = c_long(4433);
pub const IMAGE_HOT_PATCH_ABSOLUTE = 180224;
pub const MSGF_SCROLLBAR = 5;
pub const WM_MOUSELAST = 526;
pub const __INT_FAST32_TYPE__ = int;
pub const IMAGE_REL_I386_REL16 = 2;
pub const PSPROTOCOL_BINARY = 3;
pub const DrawText = DrawTextA;
pub const FILE_READ_DATA = 1;
pub const JOB_OBJECT_LIMIT_NET_RATE_CONTROL = 1048576;
pub const SYSTEM_MANDATORY_LABEL_NO_READ_UP = 2;
pub const PAN_LETT_NORMAL_FLATTENED = 5;
pub const FILE_NOTIFY_CHANGE_DIR_NAME = 2;
pub const SM_CARETBLINKINGENABLED = 8194;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_HASH = c_long(13837);
pub const RPC_S_UUID_LOCAL_ONLY = c_long(1824);
pub const PAN_XHEIGHT_DUCKING_LARGE = 7;
pub const IMAGE_ARCHIVE_LINKER_MEMBER = "/               ";
pub const VK_CONTROL = 17;
pub const ERROR_SEVERITY_INFORMATIONAL = 1073741824;
pub const WRITE_OWNER = c_long(524288);
pub const ERROR_SHUTDOWN_IN_PROGRESS = c_long(1115);
pub const InterlockedOr8 = _InterlockedOr8;
pub const ERROR_RANGE_LIST_CONFLICT = c_long(627);
pub const FIND_RESOURCE_DIRECTORY_NAMES = 512;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MANAGEMENT = 30;
pub const ERROR_NOT_SUBSTED = c_long(137);
pub const DNS_ERROR_POLICY_MISSING_CRITERIA = c_long(9983);
pub const ERROR_IPSEC_IKE_CGA_AUTH_FAILED = c_long(13892);
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_FAILURE = c_long(13906);
pub const GetCurrentDirectory = GetCurrentDirectoryA;
pub const COMMON_LVB_GRID_HORIZONTAL = 1024;
pub const PIPE_READMODE_BYTE = 0;
pub const CBR_9600 = 9600;
pub const XSTATE_AVX = XSTATE_GSSE;
pub const CP_NONE = 0;
pub const MB_OK = c_long(0);
pub const CTRY_FRANCE = 33;
pub const PROTECTION_LEVEL_PPL_APP = 8;
pub const CTRY_JAPAN = 81;
pub const NEWFRAME = 1;
pub const DNS_ERROR_INVALID_CLIENT_SUBNET_NAME = c_long(9984);
pub const ERROR_CLUSTERLOG_CORRUPT = c_long(5029);
pub const __XSAVE__ = 1;
pub const RI_MOUSE_HWHEEL = 2048;
pub const IME_CMODE_ALPHANUMERIC = 0;
pub const ReadLongPtrAcquire = ReadAcquire64;
pub const IMAGE_REL_ARM_SECTION = 14;
pub const WH_SHELL = 10;
pub const MDM_MASK_PROTOCOLID = 983040;
pub const ua_tcscpy_s = strcpy_s;
pub const ERROR_CLUSTER_MEMBERSHIP_HALT = c_long(5892);
pub const APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;
pub const CBS_DROPDOWNLIST = c_long(3);
pub const WOW64_CONTEXT_i386 = 65536;
pub const LANG_MARATHI = 78;
pub const IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;
pub const ERROR_EAS_DIDNT_FIT = c_long(275);
pub const PRODUCT_HOME_PREMIUM_SERVER = 34;
pub const SEF_AI_USE_EXTRA_PARAMS = 2048;
pub const SPI_SETACTIVEWNDTRKZORDER = 4109;
pub const ERROR_DS_MISSING_SUPREF = c_long(8406);
pub const PROCESSOR_PPC_603 = 603;
pub const DMORIENT_LANDSCAPE = 2;
pub const MFS_ENABLED = MF_ENABLED;
pub const COPY_FILE_IGNORE_EDP_BLOCK = 4194304;
pub const ERROR_MRM_PACKAGE_NOT_FOUND = c_long(15159);
pub const ACCESS_ALLOWED_CALLBACK_OBJECT_ACE_TYPE = 11;
pub const EVENT_OBJECT_CREATE = 32768;
pub const RemoveProp = RemovePropA;
pub const FALT = 16;
pub const ERROR_SXS_INVALID_XML_NAMESPACE_URI = c_long(14014);
pub const GMEM_LOCKCOUNT = 255;
pub const ERROR_LUIDS_EXHAUSTED = c_long(1334);
pub const SUBLANG_ENGLISH_INDIA = 16;
pub const SERVICE_STOP_REASON_MINOR_ENVIRONMENT = 10;
pub const ULW_OPAQUE = 4;
pub const FAST_FAIL_CONTROL_INVALID_RETURN_ADDRESS = 57;
pub const WNNC_NET_KNOWARE = 3080192;
pub const PS_DOT = 2;
pub const ERROR_INVALID_THREAD_ID = c_long(1444);
pub const __analysis_assume = expr;
pub const VK_GAMEPAD_LEFT_TRIGGER = 201;
pub const LANG_FINNISH = 11;
pub const ERROR_DS_CANT_CREATE_UNDER_SCHEMA = c_long(8510);
pub const FACILITY_RESTORE = 256;
pub const MDM_HDLCPPP_AUTH_DEFAULT = 0;
pub const SE_OWNER_DEFAULTED = 1;
pub const ERROR_NO_SAVEPOINT_WITH_OPEN_FILES = c_long(6842);
pub const ERROR_DS_COMPARE_FALSE = c_long(8229);
pub const SM_CXFOCUSBORDER = 83;
pub const STATUS_ASSERTION_FAILURE = if (@typeInfo(@TypeOf(c_long(3221226528))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226528)) else if (@typeInfo(@TypeOf(c_long(3221226528))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226528)) else @as(DWORD, c_long(3221226528));
pub const __UINT32_FMTX__ = "X";
pub const ERROR_DOMAIN_SID_SAME_AS_LOCAL_WORKSTATION = c_long(8644);
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_LATIN = 6;
pub const UNW_FLAG_EHANDLER = 1;
pub const ERROR_IPSEC_IKE_STRONG_CRED_AUTHORIZATION_AND_CERTMAP_FAILURE = c_long(13908);
pub const SetVolumeMountPoint = SetVolumeMountPointA;
pub const VTA_BOTTOM = TA_RIGHT;
pub const VFT_DRV = c_long(3);
pub const ERROR_DS_NO_SUCH_OBJECT = c_long(8240);
pub const CB_DELETESTRING = 324;
pub const IMAGE_REL_MIPS_ABSOLUTE = 0;
pub const PDCAP_D3_SUPPORTED = 8;
pub const FILE_ACTION_RENAMED_OLD_NAME = 4;
pub const IDCONTINUE = 11;
pub const IMN_SETCOMPOSITIONFONT = 10;
pub const DUPLICATE_CLOSE_SOURCE = 1;
pub const BM_GETCHECK = 240;
pub const POINTER_MESSAGE_FLAG_FOURTHBUTTON = 128;
pub const IMAGE_SYM_TYPE_FLOAT = 6;
pub const RES_ICON = 1;
pub const WGL_SWAP_OVERLAY6 = 64;
pub const NETINFO_PRINTERRED = 8;
pub const SERVICE_TRIGGER_TYPE_GROUP_POLICY = 5;
pub const SYMBOL_CHARSET = 2;
pub const STATUS_STACK_BUFFER_OVERRUN = if (@typeInfo(@TypeOf(c_long(3221226505))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226505)) else if (@typeInfo(@TypeOf(c_long(3221226505))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226505)) else @as(DWORD, c_long(3221226505));
pub const IMAGE_REL_MIPS_SECRELHI = 13;
pub const STRETCH_ORSCANS = WHITEONBLACK;
pub const DDD_NO_BROADCAST_SYSTEM = 8;
pub const PBT_APMQUERYSUSPEND = 0;
pub const CB_FINDSTRINGEXACT = 344;
pub const EVENT_OBJECT_LIVEREGIONCHANGED = 32793;
pub const FKF_HOTKEYACTIVE = 4;
pub const IMAGE_REL_AM_REL32_1 = 5;
pub const VOLUME_NAME_GUID = 1;
pub const VIEW_E_FIRST = c_long(2147746112);
pub const DialogBoxIndirectParam = DialogBoxIndirectParamA;
pub const ERROR_INSUFFICIENT_LOGON_INFO = c_long(608);
pub const ERROR_CANNOT_ABORT_TRANSACTIONS = c_long(6848);
pub const LOAD_LIBRARY_REQUIRE_SIGNED_TARGET = 128;
pub const EXTENDED_STARTUPINFO_PRESENT = 524288;
pub const DC_ACTIVE = 1;
pub const MKF_HOTKEYSOUND = 16;
pub const IMAGE_REL_CEF_SECREL = 5;
pub const ODS_INACTIVE = 128;
pub const X3_IMM39_1_INST_WORD_POS_X = 0;
pub const LANG_SAKHA = 133;
pub const GWL_USERDATA = -21;
pub const WM_ERASEBKGND = 20;
pub const MARSHAL_S_FIRST = c_long(262432);
pub const SERVICE_LAUNCH_PROTECTED_NONE = 0;
pub const STATUS_UNWIND_CONSOLIDATE = if (@typeInfo(@TypeOf(c_long(2147483689))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483689)) else if (@typeInfo(@TypeOf(c_long(2147483689))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483689)) else @as(DWORD, c_long(2147483689));
pub const WSASYSCALLFAILURE = c_long(10107);
pub const KEYBOARD_OVERRUN_MAKE_CODE = 255;
pub const GCPCLASS_HEBREW = 2;
pub const SHOW_OPENNOACTIVATE = 4;
pub const IMAGE_FILE_MACHINE_POWERPC = 496;
pub const XACT_E_LAST = 2147799083;
pub const ERROR_WMI_ITEMID_NOT_FOUND = c_long(4202);
pub const PROCESS_CREATION_DESKTOP_APP_BREAKAWAY_OVERRIDE = 4;
pub const LOCALE_SINTLSYMBOL = 21;
pub const GL_ID_INPUTREADING = 36;
pub const GID_BEGIN = 1;
pub const ERROR_LAST_ADMIN = c_long(1322);
pub const DFCS_INACTIVE = 256;
pub const STATE_SYSTEM_TRAVERSED = 8388608;
pub const PEERDIST_ERROR_ALREADY_INITIALIZED = c_long(4055);
pub const DISPLAYCONFIG_TARGET_FORCIBLE = 2;
pub const LANG_TIBETAN = 81;
pub const OpenSCManager = OpenSCManagerA;
pub const VS_FFI_SIGNATURE = c_long(4277077181);
pub const ERROR_DS_INVALID_DN_SYNTAX = c_long(8242);
pub const X3_EMPTY_INST_WORD_POS_X = 14;
pub const SUBLANG_FULAH_SENEGAL = 2;
pub const WriteConsoleOutput = WriteConsoleOutputA;
pub const ERROR_TOO_MANY_MODULES = c_long(214);
pub const DNS_ERROR_RCODE_NOTAUTH = c_long(9009);
pub const ERROR_INSTALL_PACKAGE_REJECTED = c_long(1625);
pub const LOCALE_IINTLCURRDIGITS = 26;
pub const PAN_PROP_MONOSPACED = 9;
pub const SECTION_MAP_EXECUTE_EXPLICIT = 32;
pub const ERROR_DS_DRA_SINK_DISABLED = c_long(8457);
pub const RGN_ERROR = ERROR;
pub const WM_GETDPISCALEDSIZE = 740;
pub const CBS_LOWERCASE = c_long(16384);
pub const IE_HARDWARE = -10;
pub const HS_HORIZONTAL = 0;
pub const UNW_FLAG_NO_EPILOGUE = c_ulong(2147483648);
pub const SECURITY_CAPABILITY_SHARED_USER_CERTIFICATES = c_long(9);
pub const ERROR_NOT_READY = c_long(21);
pub const LOCALE_UNASSIGNED_LCID = LOCALE_CUSTOM_UNSPECIFIED;
pub const SCRUB_DATA_INPUT_FLAG_RESUME = 1;
pub const IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;
pub const ERROR_RUNLEVEL_SWITCH_AGENT_TIMEOUT = c_long(15403);
pub const ERROR_INSTALL_PACKAGE_INVALID = c_long(1620);
pub const CONSOLE_REAL_INPUT_HANDLE = if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Pointer) @ptrCast(LongToHandle, -3) else if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Int) @intToPtr(LongToHandle, -3) else LongToHandle(-3);
pub const ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = c_long(8517);
pub const SUBLANG_ARABIC_QATAR = 16;
pub const VK_CLEAR = 12;
pub const IMAGE_BITMAP = 0;
pub const SUBLANG_SAMI_SOUTHERN_SWEDEN = 7;
pub const TOKEN_QUERY_SOURCE = 16;
pub const DMDO_DEFAULT = 0;
pub const ERROR_MCA_OCCURED = c_long(651);
pub const MKF_HOTKEYACTIVE = 4;
pub const RPC_S_INVALID_RPC_PROTSEQ = c_long(1704);
pub const IMFS_GRAYED = MFS_GRAYED;
pub const IMAGE_SYM_CLASS_REGISTER_PARAM = 17;
pub const QueryFullProcessImageName = QueryFullProcessImageNameA;
pub const JOB_OBJECT_LIMIT_SUBSET_AFFINITY = 16384;
pub const ERROR_REGISTRY_IO_FAILED = c_long(1016);
pub const ERROR_CTX_MODEM_INF_NOT_FOUND = c_long(7009);
pub const FILE_RENAME_FLAG_SUPPRESS_PIN_STATE_INHERITANCE = 4;
pub const SPI_SETCLIENTAREAANIMATION = 4163;
pub const __INT_LEAST16_FMTd__ = "hd";
pub const DMPAPER_TABLOID_EXTRA = 52;
pub const DFCS_MENUBULLET = 2;
pub const OBJECT_INHERIT_ACE = 1;
pub const ERROR_IPSEC_IKE_GETSPIFAIL = c_long(13857);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const STREAM_NORMAL_ATTRIBUTE = 0;
pub const WSAENETUNREACH = c_long(10051);
pub const SUBLANG_DARI_AFGHANISTAN = 1;
pub const WH_MOUSE = 7;
pub const PRODUCT_ESSENTIALBUSINESS_SERVER_MGMT = 59;
pub const PROCESS_CREATION_MITIGATION_POLICY_DEP_ATL_THUNK_ENABLE = 2;
pub const FAST_FAIL_INVALID_IMAGE_BASE = 24;
pub const SOUND_SYSTEM_WARNING = 6;
pub const IMAGE_REL_M32R_ABSOLUTE = 0;
pub const MAXIMUM_SUSPEND_COUNT = MAXCHAR;
pub const PRODUCT_SERVER_FOR_SB_SOLUTIONS_EM = 55;
pub const IMAGE_SCN_MEM_READ = 1073741824;
pub const OEM_CHARSET = 255;
pub const ERROR_DS_DSA_MUST_BE_INT_MASTER = c_long(8342);
pub const WM_SYSDEADCHAR = 263;
pub const VK_DECIMAL = 110;
pub const VerLanguageName = VerLanguageNameA;
pub const GL_ID_PRIVATE_LAST = 65535;
pub const WH_CALLWNDPROCRET = 12;
pub const ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = c_long(5053);
pub const BS_BOTTOM = c_long(2048);
pub const TRANSACTION_NOTIFY_RECOVER_QUERY = 2048;
pub const PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_DEFER = if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 40) else if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 40) else c_uint(0)(i64 << 40);
pub const FOREGROUND_GREEN = 2;
pub const PEN_FLAG_INVERTED = 2;
pub const PURGE_TXABORT = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY2_SPECULATIVE_STORE_BYPASS_DISABLE_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 24) else if (@typeInfo(@TypeOf(i64 << 24)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 24) else c_uint(2)(i64 << 24);
pub const EOWNERDEAD = 133;
pub const ERROR_IPSEC_IKE_INVALID_SIGNATURE = c_long(13826);
pub const WNCON_SLOWLINK = 4;
pub const ERROR_INVALID_SERVICE_LOCK = c_long(1071);
pub const ERROR_IPSEC_IKE_FAILQUERYSSP = c_long(13854);
pub const PSINJECT_BOUNDINGBOX = 9;
pub const SPI_SETMENUUNDERLINES = SPI_SETKEYBOARDCUES;
pub const _Requires_lock_not_held_ = lock;
pub const __amd64__ = 1;
pub const VK_HANJA = 25;
pub const ERROR_SXS_UNKNOWN_ENCODING_GROUP = c_long(14012);
pub const LBS_HASSTRINGS = c_long(64);
pub const __PTRDIFF_FMTi__ = "lli";
pub const SECURITY_MANDATORY_MEDIUM_RID = c_long(8192);
pub const SECURITY_PROCESS_TRUST_AUTHORITY_RID_COUNT = c_long(2);
pub const GCP_USEKERNING = 8;
pub const SECURITY_INSTALLER_GROUP_CAPABILITY_RID_COUNT = 9;
pub const IMAGE_FILE_MACHINE_TRICORE = 1312;
pub const ARW_HIDE = c_long(8);
pub const ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = c_long(8492);
pub const SM_CXMINIMIZED = 57;
pub const SM_CYSIZEFRAME = SM_CYFRAME;
pub const FAST_FAIL_INVALID_FILE_OPERATION = 42;
pub const MUI_QUERY_LANGUAGE_NAME = 4;
pub const RESOURCE_ENUM_MODULE_EXACT = 16;
pub const SCS_POSIX_BINARY = 4;
pub const SE_GROUP_DEFAULTED = 2;
pub const PFD_STEREO = 2;
pub const S_SERDSR = -15;
pub const _WIN32_WINNT_LONGHORN = 1536;
pub const VOS_OS232_PM32 = c_long(196611);
pub const ERROR_IPSEC_IKE_NO_PUBLIC_KEY = c_long(13828);
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_TABLET = 13;
pub const ERROR_NT_CROSS_ENCRYPTION_REQUIRED = c_long(1386);
pub const _WIN32_IE_IE60SP2 = 1539;
pub const X3_IMM20_INST_WORD_POS_X = 4;
pub const _CRT_FUNCTIONS_REQUIRED = 1;
pub const TA_UPDATECP = 1;
pub const EFS_DROP_ALTERNATE_STREAMS = 16;
pub const ETIMEDOUT = 138;
pub const GCP_GLYPHSHAPE = 16;
pub const InterlockedDecrementRelease64 = _InterlockedDecrement64;
pub const DMBIN_ONLYONE = 1;
pub const IMAGE_DIRECTORY_ENTRY_EXPORT = 0;
pub const REG_HIVE_NO_RM = c_long(256);
pub const ARW_LEFT = c_long(0);
pub const ERROR_INVALID_DLL = c_long(1154);
pub const LC_INTERIORS = 128;
pub const SBS_BOTTOMALIGN = c_long(4);
pub const GL_ID_NODICTIONARY = 16;
pub const WN_CONNECTED_OTHER_PASSWORD_DEFAULT = ERROR_CONNECTED_OTHER_PASSWORD_DEFAULT;
pub const GetFinalPathNameByHandle = GetFinalPathNameByHandleA;
pub const STATUS_NO_MEMORY = if (@typeInfo(@TypeOf(c_long(3221225495))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225495)) else if (@typeInfo(@TypeOf(c_long(3221225495))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225495)) else @as(DWORD, c_long(3221225495));
pub const R2_MASKNOTPEN = 3;
pub const WGL_SWAP_OVERLAY7 = 128;
pub const ERROR_CLOUD_FILE_CONNECTED_PROVIDER_ONLY = c_long(382);
pub const ERROR_OPLOCK_NOT_GRANTED = c_long(300);
pub const BSF_IGNORECURRENTTASK = 2;
pub const DMDO_90 = 1;
pub const EN_AFTER_PASTE = 2049;
pub const SPI_SETGRADIENTCAPTIONS = 4105;
pub const CM_SERVICE_RAM_DISK_BOOT_LOAD = 256;
pub const DC_ORIENTATION = 17;
pub const LBS_NOINTEGRALHEIGHT = c_long(256);
pub const FAST_FAIL_GUARD_ICALL_CHECK_FAILURE = 10;
pub const InterlockedExchangeAdd8 = _InterlockedExchangeAdd8;
pub const IME_CAND_CODE = 2;
pub const CB_GETEXTENDEDUI = 342;
pub const FS_GREEK = c_long(8);
pub const CLIP_MASK = 15;
pub const SECURITY_PROCESS_PROTECTION_LEVEL_WINTCB_RID = c_long(8192);
pub const ERROR_INCORRECT_SIZE = c_long(1462);
pub const ERROR_DS_DRA_INTERNAL_ERROR = c_long(8442);
pub const MA_NOACTIVATEANDEAT = 4;
pub const EnumFontFamilies = EnumFontFamiliesA;
pub const DMPAPER_A5_EXTRA = 64;
pub const ERROR_WRONG_PASSWORD = c_long(1323);
pub const VK_GAMEPAD_LEFT_THUMBSTICK_UP = 211;
pub const SPI_GETMESSAGEDURATION = 8214;
pub const GA_ROOT = 2;
pub const ERROR_INVALID_PRINTER_DRIVER_MANIFEST = c_long(3021);
pub const ERROR_LOG_FULL_HANDLER_IN_PROGRESS = c_long(6638);
pub const SUBLANG_URDU_PAKISTAN = 1;
pub const SORT_INVARIANT_MATH = 1;
pub const MessageBoxIndirect = MessageBoxIndirectA;
pub const RTL_CORRELATION_VECTOR_VERSION_1 = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(CHAR, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(CHAR, 1) else @as(CHAR, 1);
pub const DEVICEFAMILYDEVICEFORM_INDUSTRY_HANDHELD = 12;
pub const ERROR_DS_NON_ASQ_SEARCH = c_long(8624);
pub const R2_MASKPEN = 9;
pub const PS_STYLE_MASK = 15;
pub const ERROR_INCOMPATIBLE_WITH_GLOBAL_SHORT_NAME_REGISTRY_SETTING = c_long(304);
pub const ERROR_DRIVER_FAILED_SLEEP = c_long(633);
pub const ERROR_PACKAGE_REPOSITORY_CORRUPTED = c_long(15614);
pub const ERROR_EVT_UNRESOLVED_PARAMETER_INSERT = c_long(15030);
pub const WSAENOPROTOOPT = c_long(10042);
pub const FILE_ATTRIBUTE_RECALL_ON_DATA_ACCESS = 4194304;
pub const VK_ZOOM = 251;
pub const ERROR_UNWIND_CONSOLIDATE = c_long(684);
pub const ERROR_WMI_READ_ONLY = c_long(4213);
pub const MUI_MERGE_SYSTEM_FALLBACK = 16;
pub const THAI_CHARSET = 222;
pub const IMAGE_REL_MIPS_REFLO = 5;
pub const MEM_PHYSICAL = 4194304;
pub const ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = c_long(8553);
pub const ERROR_TOO_MANY_SEMAPHORES = c_long(100);
pub const WSANOTINITIALISED = c_long(10093);
pub const STATUS_FLOAT_DIVIDE_BY_ZERO = if (@typeInfo(@TypeOf(c_long(3221225614))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225614)) else if (@typeInfo(@TypeOf(c_long(3221225614))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225614)) else @as(DWORD, c_long(3221225614));
pub const FACILITY_PIX = 2748;
pub const ERROR_SHARING_BUFFER_EXCEEDED = c_long(36);
pub const ERROR_EVT_NON_VALIDATING_MSXML = c_long(15013);
pub const ERROR_BUS_RESET = c_long(1111);
pub const SOUND_SYSTEM_MENUPOPUP = 16;
pub const PRODUCT_STORAGE_WORKGROUP_SERVER_CORE = 45;
pub const WNetUseConnection = WNetUseConnectionA;
pub const META_ANIMATEPALETTE = 1078;
pub const PROCESSOR_INTEL_486 = 486;
pub const SHTDN_REASON_MAJOR_HARDWARE = 65536;
pub const WTS_SESSION_UNLOCK = 8;
pub const REG_NOTIFY_THREAD_AGNOSTIC = c_long(268435456);
pub const GUI_16BITTASK = 0;
pub const ERROR_DIRECTORY_NOT_RM = c_long(6803);
pub const DOMAIN_GROUP_RID_ENTERPRISE_KEY_ADMINS = c_long(527);
pub const JOB_OBJECT_LIMIT_KILL_ON_JOB_CLOSE = 8192;
pub const ERROR_EFS_NOT_ALLOWED_IN_TRANSACTION = c_long(6831);
pub const INHERIT_ONLY_ACE = 8;
pub const IMAGE_REL_SH3_DIRECT8_WORD = 4;
pub const ERROR_DS_NAME_TOO_LONG = c_long(8348);
pub const C2_EUROPESEPARATOR = 4;
pub const ENABLE_WINDOW_INPUT = 8;
pub const ERROR_FILE_OFFLINE = c_long(4350);
pub const EVENT_SYSTEM_CAPTURESTART = 8;
pub const _Analysis_assume_lock_acquired_ = lock;
pub const SUBLANG_SANSKRIT_INDIA = 1;
pub const FindFirstVolumeMountPoint = FindFirstVolumeMountPointA;
pub const C1_XDIGIT = 128;
pub const SELECTPAPERSOURCE = 18;
pub const IMAGE_REL_I386_REL32 = 20;
pub const DNS_ERROR_RCODE_NAME_ERROR = c_long(9003);
pub const POWER_DISCONNECTED_STANDBY_MODE_AGGRESSIVE = 1;
pub const COLORRES = 108;
pub const SERVICE_TRIGGER_TYPE_CUSTOM = 20;
pub const NORM_LINGUISTIC_CASING = 134217728;
pub const FACILITY_SECURITY = 9;
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __INTPTR_FMTi__ = "lli";
pub const ERROR_INVALID_CURSOR_HANDLE = c_long(1402);
pub const ERROR_TOO_MANY_POSTS = c_long(298);
pub const ERROR_INVALID_KEYBOARD_HANDLE = c_long(1457);
pub const UpdateResource = UpdateResourceA;
pub const ERROR_IPSEC_IKE_AUTH_FAIL = c_long(13801);
pub const NID_READY = 128;
pub const POWER_USER_NOTIFY_SHUTDOWN = 16;
pub const WM_QUERYNEWPALETTE = 783;
pub const CONNECT_LOCALDRIVE = 256;
pub const CONTEXT_EXCEPTION_REPORTING = c_long(2147483648);
pub const NETINFO_DISKRED = 4;
pub const ERROR_MENU_ITEM_NOT_FOUND = c_long(1456);
pub const ERROR_INVALID_SHOWWIN_COMMAND = c_long(1449);
pub const DNS_STATUS_DOTTED_NAME = c_long(9558);
pub const __fallthrough = __inner_fallthrough;
pub const POWER_DISCONNECTED_STANDBY_MODE_NORMAL = 0;
pub const __drv_releasesExclusiveResource = kind;
pub const SECURITY_AUTHENTICATION_SERVICE_ASSERTED_RID = c_long(2);
pub const TAPE_DRIVE_TENSION_IMMED = 2147483712;
pub const DOMAIN_GROUP_RID_CONTROLLERS = c_long(516);
pub const ERROR_PACKAGE_NOT_SUPPORTED_ON_FILESYSTEM = c_long(15635);
pub const PAN_MIDLINE_CONSTANT_POINTED = 9;
pub const PEN_MASK_NONE = 0;
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const SERVICE_CONTROL_POWEREVENT = 13;
pub const IMAGE_REL_IA64_DIR32NB = 16;
pub const REG_FLUSH_HIVE_FILE_GROWTH = c_long(4096);
pub const RegCreateKeyEx = RegCreateKeyExA;
pub const _WIN32_IE_WIN10 = _WIN32_IE_IE110;
pub const ERROR_PROFILING_NOT_STOPPED = c_long(551);
pub const MDM_HDLCPPP_AUTH_PAP = 2;
pub const POWER_LEVEL_USER_NOTIFY_SOUND = 2;
pub const PT_BEZIERTO = 4;
pub const ACTIVATIONCONTEXTINFOCLASS = ACTIVATION_CONTEXT_INFO_CLASS;
pub const EMR_SETWORLDTRANSFORM = 35;
pub const BuildCommDCBAndTimeouts = BuildCommDCBAndTimeoutsA;
pub const RRF_SUBKEY_WOW6464KEY = 65536;
pub const WNCON_DYNAMIC = 8;
pub const DEVICE_DEFAULT_FONT = 14;
pub const APPCOMMAND_DWM_FLIP3D = 54;
pub const SYSTEM_CPU_SET_INFORMATION_REALTIME = 8;
pub const FILE_FLAG_BACKUP_SEMANTICS = 33554432;
pub const JOB_OBJECT_CPU_RATE_CONTROL_VALID_FLAGS = 31;
pub const __crt_typefix = ctype;
pub const ERROR_IS_SUBST_TARGET = c_long(149);
pub const SECURITY_THIS_ORGANIZATION_RID = c_long(15);
pub const POSTSCRIPT_INJECTION = 4118;
pub const CTRL_BREAK_EVENT = 1;
pub const DMPAPER_B5 = 13;
pub const SEF_SACL_AUTO_INHERIT = 2;
pub const ERROR_RESOURCEMANAGER_READ_ONLY = c_long(6707);
pub const DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1 = c_long(9130);
pub const ERROR_INVALID_REPARSE_DATA = c_long(4392);
pub const LANG_SINHALESE = 91;
pub const S_LEGATO = 1;
pub const MAXDWORD32 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, 0) else DWORD32(0))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, 0) else DWORD32(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, 0) else DWORD32(0))) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, 0) else DWORD32(0)) else DWORD32(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(DWORD32, 0) else DWORD32(0));
pub const ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = c_long(8204);
pub const MIIM_ID = 2;
pub const ERROR_DS_SEMANTIC_ATT_TEST = c_long(8383);
pub const ERROR_DS_DS_REQUIRED = c_long(8478);
pub const ERROR_DS_ROOT_CANT_BE_SUBREF = c_long(8326);
pub const EMR_STRETCHDIBITS = 81;
pub const SMTO_NORMAL = 0;
pub const LANG_MALAY = 62;
pub const CS_E_FIRST = c_long(2147746148);
pub const WM_UNICHAR = 265;
pub const CREATE_NEW_PROCESS_GROUP = 512;
pub const SERVICE_AUTO_START = 2;
pub const IME_ESC_HANJA_MODE = 4104;
pub const PRODUCT_IOTENTERPRISE = 188;
pub const WGL_SWAP_OVERLAY4 = 16;
pub const LOCALE_IFIRSTDAYOFWEEK = 4108;
pub const SECURITY_CRED_TYPE_BASE_RID = c_long(65);
pub const PPM_PERFORMANCE_IMPLEMENTATION_NONE = 0;
pub const SECURITY_PACKAGE_RID_COUNT = c_long(2);
pub const ERROR_APPEXEC_UNEXPECTED_PROCESS_REGISTRATION = c_long(3063);
pub const GMEM_VALID_FLAGS = 32626;
pub const RECOVERY_DEFAULT_PING_INTERVAL = 5000;
pub const IME_SMODE_SINGLECONVERT = 2;
pub const PAN_CONTRAST_HIGH = 8;
pub const IMAGE_REL_M32R_PCREL8 = 7;
pub const ERROR_IPSEC_DEFAULT_MM_POLICY_NOT_FOUND = c_long(13013);
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_DESTINATION = c_long(5957);
pub const IME_ESC_QUERY_SUPPORT = 3;
pub const TRANSACTION_NOTIFY_COMMIT_COMPLETE = 64;
pub const ERROR_SECUREBOOT_POLICY_MISSING_ANTIROLLBACKVERSION = c_long(4429);
pub const COMMON_LVB_UNDERSCORE = 32768;
pub const __DBL_MAX_10_EXP__ = 308;
pub const ERROR_INVALID_AT_INTERRUPT_TIME = c_long(104);
pub const WC_DEFAULTCHAR = 64;
pub const GW_HWNDFIRST = 0;
pub const GetLongPathNameTransacted = GetLongPathNameTransactedA;
pub const NTDDI_WIN10 = 167772160;
pub const GWLP_USERDATA = -21;
pub const WM_COPY = 769;
pub const _WIN32_WINNT_WIN2K = 1280;
pub const DBG_CONTINUE = if (@typeInfo(@TypeOf(c_long(65538))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(65538)) else if (@typeInfo(@TypeOf(c_long(65538))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(65538)) else @as(DWORD, c_long(65538));
pub const DMRES_HIGH = -4;
pub const NTE_OP_OK = 0;
pub const LOCALE_SYEARMONTH = 4102;
pub const ERROR_THREAD_MODE_NOT_BACKGROUND = c_long(401);
pub const ENDSESSION_CRITICAL = 1073741824;
pub const __has_lock_level = level;
pub const SUBLANG_PUNJABI_PAKISTAN = 2;
pub const IO_REPARSE_TAG_PROJFS_TOMBSTONE = c_long(2684354594);
pub const RTL_CORRELATION_VECTOR_VERSION_2 = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(CHAR, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(CHAR, 2) else @as(CHAR, 2);
pub const CBR_4800 = 4800;
pub const LOGON32_LOGON_UNLOCK = 7;
pub const PSPROTOCOL_BCP = 1;
pub const EVENT_SYSTEM_MOVESIZESTART = 10;
pub const LANG_PORTUGUESE = 22;
pub const WM_THEMECHANGED = 794;
pub const APPMODEL_ERROR_DYNAMIC_PROPERTY_INVALID = c_long(15705);
pub const __deref_opt_out_ecount_nz_opt = size;
pub const GCP_JUSTIFY = c_long(65536);
pub const SPI_GETBEEP = 1;
pub const REMOTE_PROTOCOL_INFO_FLAG_PERSISTENT_HANDLE = 4;
pub const POINTER_FLAG_CAPTURECHANGED = 2097152;
pub const PRINTRATEUNIT_LPM = 3;
pub const DLGC_WANTARROWS = 1;
pub const SM_CYMINTRACK = 35;
pub const SM_CYSMICON = 50;
pub const ACCESS_ALLOWED_ACE_TYPE = 0;
pub const MNC_SELECT = 3;
pub const DNS_ERROR_NSEC3_NAME_COLLISION = c_long(9129);
pub const ua_tcscpy = strcpy;
pub const ERROR_SXS_XML_E_INVALIDATROOTLEVEL = c_long(14055);
pub const DFCS_SCROLLDOWN = 1;
pub const LANG_YAKUT = 133;
pub const WSA_QOS_EFILTERTYPE = c_long(11020);
pub const IMAGE_REL_M32R_ADDR32NB = 2;
pub const SPI_GETCURSORSHADOW = 4122;
pub const EXCEPTION_EXECUTE_FAULT = 8;
pub const _UNALIGNED = __unaligned;
pub const _Has_lock_kind_ = kind;
pub const JOB_OBJECT_UILIMIT_NONE = 0;
pub const ERROR_CPU_SET_INVALID = c_long(813);
pub const FACILITY_EAS = 85;
pub const META_STRETCHDIB = 3907;
pub const ERROR_DS_NAME_UNPARSEABLE = c_long(8350);
pub const PENARBITRATIONTYPE_WIN8 = 1;
pub const DFCS_BUTTONRADIOIMAGE = 1;
pub const _Post_ = _Post_impl_;
pub const ERROR_SEEK = c_long(25);
pub const ERROR_LM_CROSS_ENCRYPTION_REQUIRED = c_long(1390);
pub const VP_COMMAND_GET = 1;
pub const DMICMMETHOD_DRIVER = 3;
pub const CBR_38400 = 38400;
pub const LOCALE_RETURN_NUMBER = 536870912;
pub const WNFMT_CONNECTION = 32;
pub const SUBLANG_ARABIC_UAE = 14;
pub const EAGAIN = 11;
pub const ATTR_INPUT = 0;
pub const MDM_V110_SPEED_4DOT8K = 3;
pub const InterlockedExchangeAcquire64 = InterlockedExchange64;
pub const APC_LEVEL = 1;
pub const GetFileVersionInfoSize = GetFileVersionInfoSizeA;
pub const MINSHORT = 32768;
pub const ERROR_TOO_MANY_CONTEXT_IDS = c_long(1384);
pub const DNS_ERROR_BAD_KEYMASTER = c_long(9122);
pub const ERROR_BAD_UNIT = c_long(20);
pub const RPC_X_SS_IN_NULL_CONTEXT = c_long(1775);
pub const PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_DEFER = if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 4) else if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 4) else c_uint(0)(i64 << 4);
pub const ERROR_STATE_SETTING_NAME_SIZE_LIMIT_EXCEEDED = c_long(15817);
pub const WriteULongPtrNoFence = WriteULong64NoFence;
pub const ACCESS_MIN_MS_OBJECT_ACE_TYPE = 5;
pub const BAUD_4800 = if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 512) else if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 512) else @as(DWORD, 512);
pub const PF_RDTSC_INSTRUCTION_AVAILABLE = 8;
pub const DNS_ERROR_INVALID_IP_ADDRESS = c_long(9552);
pub const GetProfileString = GetProfileStringA;
pub const DLGC_WANTCHARS = 128;
pub const __SAL_H_FULL_VER = 140050727;
pub const VREFRESH = 116;
pub const CTRY_DENMARK = 45;
pub const FAST_FAIL_GUARD_EXPORT_SUPPRESSION_FAILURE = 46;
pub const IMAGE_FILE_DEBUG_STRIPPED = 512;
pub const ERROR_NTLM_BLOCKED = c_long(1937);
pub const DM_MODIFY = 8;
pub const ERROR_MRM_DUPLICATE_ENTRY = c_long(15119);
pub const FACILITY_CMI = 54;
pub const ERROR_TRANSACTION_NOT_REQUESTED = c_long(6703);
pub const __INT_FAST16_MAX__ = 32767;
pub const ERROR_EVT_PUBLISHER_DISABLED = c_long(15037);
pub const ImmGetDescription = ImmGetDescriptionA;
pub const ERROR_DLL_INIT_FAILED_LOGOFF = c_long(624);
pub const MDM_ANALOG_RLP_OFF = 1;
pub const ERROR_NON_ACCOUNT_SID = c_long(1257);
pub const MIN_LOGICALDPIOVERRIDE = -2;
pub const IMAGE_HOT_PATCH_DYNAMIC_VALUE = 491520;
pub const FILE_MAP_COPY = 1;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST = c_long(9922);
pub const MILCORE_TS_QUERYVER_RESULT_TRUE = 2147483647;
pub const __analysis_suppress_lock_checking = lock;
pub const ERROR_CRASH_DUMP = c_long(753);
pub const DM_SPECVERSION = 1025;
pub const MDM_V110_SPEED_12DOT0K = 5;
pub const ERROR_EA_FILE_CORRUPT = c_long(276);
pub const BackupEventLog = BackupEventLogA;
pub const IMAGE_REL_SH3_PCREL8_LONG = 10;
pub const __FLT_DENORM_MIN__ = 0.000000;
pub const SPI_SETDROPSHADOW = 4133;
pub const SERVICE_CONTINUE_PENDING = 5;
pub const ERROR_DS_NOT_CLOSEST = c_long(8588);
pub const RESOURCE_ENUM_VALIDATE = 8;
pub const UNICODE_NOCHAR = 65535;
pub const TLS_MINIMUM_AVAILABLE = 64;
pub const THREAD_POWER_THROTTLING_EXECUTION_SPEED = 1;
pub const FACILITY_UI = 42;
pub const SC_SEPARATOR = 61455;
pub const ACTCTX_FLAG_HMODULE_VALID = 128;
pub const ERROR_CHECKING_FILE_SYSTEM = c_long(712);
pub const CF_SYLK = 4;
pub const DNS_ERROR_STANDBY_KEY_NOT_PRESENT = c_long(9117);
pub const InterlockedExchange8 = _InterlockedExchange8;
pub const GGO_BEZIER = 3;
pub const GW_MAX = 6;
pub const __UINT16_FMTu__ = "hu";
pub const EVENT_OBJECT_SELECTIONADD = 32775;
pub const SOFTKEYBOARD_TYPE_T1 = 1;
pub const EMR_FLATTENPATH = 65;
pub const DMPAPER_B4 = 12;
pub const InterlockedBitTestAndReset64NoFence = _interlockedbittestandreset64;
pub const SYNCHRONIZATION_BARRIER_FLAGS_BLOCK_ONLY = 2;
pub const __clang_patchlevel__ = 0;
pub const ERROR_APPX_FILE_NOT_ENCRYPTED = c_long(409);
pub const FLASHW_TIMERNOFG = 12;
pub const IE_DEFAULT = -5;
pub const GGL_INDEX = 2;
pub const ETO_NUMERICSLATIN = 2048;
pub const OBJ_BRUSH = 2;
pub const DC_PRINTRATEPPM = 31;
pub const SUBLANG_SERBIAN_CYRILLIC = 3;
pub const WT_EXECUTEINIOTHREAD = 1;
pub const ERROR_CTX_NO_FORCE_LOGOFF = c_long(7063);
pub const ERROR_CTX_INVALID_MODEMNAME = c_long(7010);
pub const MAX_NUM_REASONS = 256;
pub const ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = c_long(8465);
pub const DNS_ERROR_DP_ALREADY_ENLISTED = c_long(9904);
pub const DT_PLOTTER = 0;
pub const ERROR_NESTING_NOT_ALLOWED = c_long(215);
pub const SECURITY_NULL_RID = c_long(0);
pub const STATE_SYSTEM_ALERT_LOW = 67108864;
pub const ES_NUMBER = c_long(8192);
pub const ERROR_CAPAUTHZ_NO_POLICY = c_long(454);
pub const IMAGE_DIRECTORY_ENTRY_SECURITY = 4;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_MESSAGING = 32;
pub const WMSZ_TOPLEFT = 4;
pub const ERROR_APPEXEC_HOST_ID_MISMATCH = c_long(3066);
pub const APPCOMMAND_MEDIA_PLAY_PAUSE = 14;
pub const DMPAPER_ENV_10 = 20;
pub const SOUND_SYSTEM_FAULT = 13;
pub const GL_ID_INPUTCODE = 38;
pub const WGL_SWAP_OVERLAY5 = 32;
pub const WS_EX_NOINHERITLAYOUT = c_long(1048576);
pub const JOB_OBJECT_UILIMIT_ALL = 255;
pub const FILE_READ_ATTRIBUTES = 128;
pub const ERROR_INVALID_TRANSACTION = c_long(6700);
pub const HELPINFO_MENUITEM = 2;
pub const ACTCTX_FLAG_SOURCE_IS_ASSEMBLYREF = 64;
pub const SECURITY_DASHOST_ID_BASE_RID = c_long(92);
pub const PROCESS_CREATION_MITIGATION_POLICY2_LOADER_INTEGRITY_CONTINUITY_AUDIT = if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 4) else if (@typeInfo(@TypeOf(i64 << 4)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 4) else c_uint(3)(i64 << 4);
pub const ERROR_IO_DEVICE = c_long(1117);
pub const SYSRGN = 4;
pub const LANG_MOHAWK = 124;
pub const S_NORMAL = 0;
pub const SM_CYMINIMIZED = 58;
pub const CopyEnhMetaFile = CopyEnhMetaFileA;
pub const DST_PREFIXTEXT = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_MASK = 3 << 16;
pub const IME_CMODE_SYMBOL = 1024;
pub const PROCESSOR_ARCHITECTURE_SHX = 4;
pub const TRANSACTION_MANAGER_VOLATILE = 1;
pub const IMAGE_REL_AM_REL32_2 = 6;
pub const __UINTMAX_FMTx__ = "llx";
pub const ERROR_FAIL_RESTART = c_long(352);
pub const CAL_SABBREVMONTHNAME8 = 41;
pub const ERROR_CHILD_PROCESS_BLOCKED = c_long(367);
pub const CBS_AUTOHSCROLL = c_long(64);
pub const WM_DPICHANGED_AFTERPARENT = 739;
pub const BATTERY_FLAG_NO_BATTERY = 128;
pub const HCF_INDICATOR = 32;
pub const IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;
pub const TAPE_CHECK_FOR_DRIVE_PROBLEM = c_long(2);
pub const LOAD_LIBRARY_SEARCH_SYSTEM32_NO_FORWARDER = 16384;
pub const DNS_INFO_NO_RECORDS = c_long(9501);
pub const SPI_SETMOUSEKEYS = 55;
pub const ERROR_TIMER_RESOLUTION_NOT_SET = c_long(607);
pub const WS_EX_STATICEDGE = c_long(131072);
pub const WM_PAINTICON = 38;
pub const SERVICE_MAIN_FUNCTION = SERVICE_MAIN_FUNCTIONA;
pub const _WIN32_IE_IE100 = 2560;
pub const IME_SMODE_PHRASEPREDICT = 8;
pub const ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = c_long(1795);
pub const ERROR_NOT_SAME_OBJECT = c_long(1656);
pub const InterlockedAddRelease64 = _InlineInterlockedAdd64;
pub const ERROR_DS_PROTOCOL_ERROR = c_long(8225);
pub const PROCESSOR_ARCHITECTURE_MIPS = 1;
pub const IMAGE_REL_AM_ADDR32NB = 2;
pub const LMEM_VALID_FLAGS = 3954;
pub const STATUS_THREAD_NOT_RUNNING = if (@typeInfo(@TypeOf(c_long(3221226774))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226774)) else if (@typeInfo(@TypeOf(c_long(3221226774))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226774)) else @as(DWORD, c_long(3221226774));
pub const SYSTEM_FIXED_FONT = 16;
pub const DISPLAYCONFIG_PATH_PREFERRED_UNSCALED = 4;
pub const FACILITY_CONFIGURATION = 33;
pub const SM_CXSIZEFRAME = SM_CXFRAME;
pub const ERROR_RXACT_COMMIT_NECESSARY = c_long(678);
pub const ERROR_DS_ATT_SCHEMA_REQ_ID = c_long(8399);
pub const TAPE_DRIVE_WRITE_PROTECT = 4096;
pub const ReadConsoleInput = ReadConsoleInputA;
pub const PPM_FIRMWARE_ACPI1C2 = 1;
pub const FILE_MAP_READ = SECTION_MAP_READ;
pub const ERROR_SYSTEM_INTEGRITY_ROLLBACK_DETECTED = c_long(4550);
pub const JOB_OBJECT_SECURITY_VALID_FLAGS = 15;
pub const CF_GDIOBJFIRST = 768;
pub const ERROR_NOT_OWNER = c_long(288);
pub const CF_DSPBITMAP = 130;
pub const WSA_E_NO_MORE = c_long(10110);
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_PROLOGUE = 1;
pub const ERROR_CLUSTER_INVALID_STRING_TERMINATION = c_long(5916);
pub const ERROR_DS_SRC_AND_DST_NC_IDENTICAL = c_long(8485);
pub const SUBLANG_SERBIAN_BOSNIA_HERZEGOVINA_CYRILLIC = 7;
pub const ERROR_MRM_INVALID_QUALIFIER_VALUE = c_long(15114);
pub const IMAGE_SCN_ALIGN_4096BYTES = 13631488;
pub const SUBLANG_HUNGARIAN_HUNGARY = 1;
pub const PRODUCT_ULTIMATE = 1;
pub const _Analysis_assume_lock_held_ = lock;
pub const SEF_DEFAULT_OWNER_FROM_PARENT = 32;
pub const SET_POLY_MODE = 4104;
pub const PSINJECT_PAGEBBOX = 106;
pub const SERVICE_ACCEPT_STOP = 1;
pub const IMAGE_FILE_MACHINE_ARMNT = 452;
pub const SERVICE_RECOGNIZER_DRIVER = 8;
pub const DOMAIN_ALIAS_RID_RAS_SERVERS = c_long(553);
pub const MONO_FONT = 8;
pub const CLIP_DEFAULT_PRECIS = 0;
pub const ERROR_OBJECT_NO_LONGER_EXISTS = c_long(6807);
pub const HBMMENU_MBAR_RESTORE = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 2) else @as(HBITMAP, 2);
pub const WriteProfileString = WriteProfileStringA;
pub const STATUS_FLOAT_OVERFLOW = if (@typeInfo(@TypeOf(c_long(3221225617))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225617)) else if (@typeInfo(@TypeOf(c_long(3221225617))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225617)) else @as(DWORD, c_long(3221225617));
pub const HTTRANSPARENT = -1;
pub const SHTDN_REASON_MINOR_OTHER = 0;
pub const SM_DBCSENABLED = 42;
pub const _WIN32_IE_XPSP2 = _WIN32_IE_IE60SP2;
pub const SPI_SETPENDOCKTHRESHOLD = 129;
pub const ERROR_FULL_BACKUP = c_long(4004);
pub const IME_ESC_MAX_KEY = 4101;
pub const DATA_E_FIRST = c_long(2147746096);
pub const ua_lstrcmpi = lstrcmpiA;
pub const CHECKJPEGFORMAT = 4119;
pub const DT_WORD_ELLIPSIS = 262144;
pub const THREAD_BASE_PRIORITY_MIN = -2;
pub const InterlockedCompareExchangePointerNoFence = _InterlockedCompareExchangePointer;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const FAST_FAIL_UNEXPECTED_CALL = 56;
pub const ERROR_CLUSTER_GUM_NOT_LOCKER = c_long(5085);
pub const CTRY_IRAQ = 964;
pub const ERROR_CLUSTER_NODE_NOT_MEMBER = c_long(5052);
pub const CAL_THAI = 7;
pub const COLOR_3DFACE = COLOR_BTNFACE;
pub const SE_SIGNING_LEVEL_ANTIMALWARE = SE_SIGNING_LEVEL_CUSTOM_3;
pub const SECURITY_IMPERSONATION = SecurityImpersonation << 16;
pub const PANOSE_COUNT = 10;
pub const SWP_NOMOVE = 2;
pub const CONNDLG_NOT_PERSIST = 32;
pub const EMARCH_ENC_I17_IMM41a_VAL_POS_X = 22;
pub const MEM_FREE = 65536;
pub const DNS_ERROR_RCODE = c_long(9504);
pub const __DBL_HAS_INFINITY__ = 1;
pub const DCX_NORESETATTRS = c_long(4);
pub const LookupAccountName = LookupAccountNameA;
pub const PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 40) else if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 40) else c_uint(2)(i64 << 40);
pub const PSINJECT_ENDSTREAM = 20;
pub const __deref_out_ecount_nz = size;
pub const ERROR_TRANSACTION_ALREADY_ABORTED = c_long(6704);
pub const CC_ELLIPSES = 8;
pub const TRANSPARENT = 1;
pub const ERROR_RING2SEG_MUST_BE_MOVABLE = c_long(200);
pub const SUBLANG_DUTCH = 1;
pub const DATE_LTRREADING = 16;
pub const EMR_LINETO = 54;
pub const MFT_OWNERDRAW = MF_OWNERDRAW;
pub const DM_FORMNAME = c_long(65536);
pub const VK_SHIFT = 16;
pub const PPM_FIRMWARE_PPC = 256;
pub const DRIVE_REMOTE = 4;
pub const VK_LSHIFT = 160;
pub const TOKEN_ADJUST_SESSIONID = 256;
pub const ERROR_SXS_PROCESS_DEFAULT_ALREADY_SET = c_long(14011);
pub const BDR_SUNKENOUTER = 2;
pub const ERROR_EVT_INVALID_EVENT_DATA = c_long(15005);
pub const WSAECANCELLED = c_long(10103);
pub const PDC_ORIENTATION_270 = 32;
pub const FILE_NAME_NORMALIZED = 0;
pub const ERROR_BACKUP_CONTROLLER = c_long(586);
pub const BACKGROUND_RED = 64;
pub const ERROR_ACTIVATION_COUNT_EXCEEDED = c_long(7059);
pub const ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = c_long(5049);
pub const SM_CMETRICS = 97;
pub const SECURITY_MANDATORY_SYSTEM_RID = c_long(16384);
pub const FACILITY_MOBILE = 1793;
pub const GetPrivateProfileString = GetPrivateProfileStringA;
pub const GC_ZOOM = 1;
pub const VS_FF_DEBUG = c_long(1);
pub const SM_CXSIZE = 30;
pub const ERROR_CANNOT_GRANT_REQUESTED_OPLOCK = c_long(801);
pub const WM_IME_ENDCOMPOSITION = 270;
pub const DI_APPBANDING = 1;
pub const SHUTDOWN_FORCE_OTHERS = 1;
pub const ERROR_CANNOT_DETECT_PROCESS_ABORT = c_long(1081);
pub const PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = c_long(1177);
pub const STATUS_ENTRYPOINT_NOT_FOUND = if (@typeInfo(@TypeOf(c_long(3221225785))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225785)) else if (@typeInfo(@TypeOf(c_long(3221225785))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225785)) else @as(DWORD, c_long(3221225785));
pub const RGN_DIFF = 4;
pub const LCMAP_FULLWIDTH = 8388608;
pub const ChangeServiceConfig = ChangeServiceConfigA;
pub const FILE_DISPOSITION_FLAG_IGNORE_READONLY_ATTRIBUTE = 16;
pub const REG_REFRESH_HIVE = c_long(2);
pub const IME_CONFIG_SELECTDICTIONARY = 3;
pub const InterlockedCompareExchangePointer = _InterlockedCompareExchangePointer;
pub const SS_LEFT = c_long(0);
pub const ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = c_long(8372);
pub const ERROR_DS_INSTALL_SCHEMA_MISMATCH = c_long(8467);
pub const ERROR_INVALID_BLOCK_LENGTH = c_long(1106);
pub const EVENT_OBJECT_END = 33023;
pub const _PUNCT = 16;
pub const DISC_UPDATE_PROFILE = 1;
pub const CTRY_ZIMBABWE = 263;
pub const _WIN32_IE_IE60SP1 = 1537;
pub const DMPAPER_15X11 = 46;
pub const RPC_S_CALL_FAILED = c_long(1726);
pub const ERROR_DS_CANT_RETRIEVE_SD = c_long(8526);
pub const __STDC_HOSTED__ = 1;
pub const ERROR_DS_AFFECTS_MULTIPLE_DSAS = c_long(8249);
pub const BACKUP_TXFS_DATA = 10;
pub const DNS_ERROR_POLICY_LOCKED = c_long(9980);
pub const DMPAPER_ENV_11 = 21;
pub const ERROR_DIRECTORY = c_long(267);
pub const ERROR_CANT_RECOVER_WITH_HANDLE_OPEN = c_long(6818);
pub const SERVICE_PAUSED = 7;
pub const EnumResourceTypesEx = EnumResourceTypesExA;
pub const MINLONG = 2147483648;
pub const EXCEPTION_INT_DIVIDE_BY_ZERO = STATUS_INTEGER_DIVIDE_BY_ZERO;
pub const SKF_LWINLATCHED = 1073741824;
pub const SS_BITMAP = c_long(14);
pub const FORMAT_MESSAGE_FROM_SYSTEM = 4096;
pub const ERROR_INVALID_FLAG_NUMBER = c_long(186);
pub const ERROR_BAD_NET_NAME = c_long(67);
pub const CAL_SABBREVMONTHNAME9 = 42;
pub const DNS_ERROR_INVALID_ZONE_OPERATION = c_long(9603);
pub const VK_GAMEPAD_RIGHT_SHOULDER = 199;
pub const STARTF_FORCEONFEEDBACK = 64;
pub const CLIP_DFA_DISABLE = 4 << 4;
pub const TRANSACTION_NOTIFY_COMMIT = 4;
pub const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION = 512;
pub const FILE_DIR_DISALLOWED = 9;
pub const CTRY_HONDURAS = 504;
pub const _WIN32_IE_IE501 = 1281;
pub const SECURITY_INSTALLER_CAPABILITY_RID_COUNT = 10;
pub const SECURITY_MAX_IMPERSONATION_LEVEL = SecurityDelegation;
pub const GCS_RESULTCLAUSE = 4096;
pub const MDM_SHIFT_V120_ML = 6;
pub const ERROR_DS_OUT_OF_SCOPE = c_long(8338);
pub const IMAGE_REL_I386_SECTION = 10;
pub const GetConsoleAliasExesLength = GetConsoleAliasExesLengthA;
pub const WNNC_NET_QUINCY = 3670016;
pub const ERROR_RXACT_COMMITTED = c_long(744);
pub const SPI_GETPENARBITRATIONTYPE = 8224;
pub const PPM_FIRMWARE_ACPI1C3 = 2;
pub const N_BTMASK = 15;
pub const RGN_COPY = 5;
pub const ERROR_PROCESS_IS_PROTECTED = c_long(1293);
pub const VK_DOWN = 40;
pub const JOB_OBJECT_LIMIT_JOB_WRITE_BYTES = 131072;
pub const SECURITY_DESCRIPTOR_REVISION = 1;
pub const SERVICE_NOTIFY_STOP_PENDING = 4;
pub const CTRY_PERU = 51;
pub const __FLT_DIG__ = 6;
pub const SUBLANG_CHINESE_HONGKONG = 3;
pub const WMSZ_BOTTOM = 6;
pub const DFCS_TRANSPARENT = 2048;
pub const ERROR_DS_BAD_HIERARCHY_FILE = c_long(8425);
pub const DM_PAPERLENGTH = c_long(4);
pub const HSHELL_WINDOWREPLACING = 14;
pub const ERROR_DS_EXISTS_IN_RDNATTID = c_long(8598);
pub const IMAGE_DEBUG_MISC_EXENAME = 1;
pub const MB_TASKMODAL = c_long(8192);
pub const WS_EX_NOPARENTNOTIFY = c_long(4);
pub const WT_EXECUTEINPERSISTENTTHREAD = 128;
pub const ResetDC = ResetDCA;
pub const LANG_SOTHO = 108;
pub const ERROR_ILLEGAL_FLOAT_CONTEXT = c_long(579);
pub const DMPAPER_A3_ROTATED = 76;
pub const DRAWPATTERNRECT = 25;
pub const NEAR = near;
pub const MDM_ANALOG_V34 = 2;
pub const ERROR_IPSEC_IKE_DROP_NO_RESPONSE = c_long(13813);
pub const STATUS_GUARD_PAGE_VIOLATION = if (@typeInfo(@TypeOf(c_long(2147483649))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483649)) else if (@typeInfo(@TypeOf(c_long(2147483649))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483649)) else @as(DWORD, c_long(2147483649));
pub const RegSaveKeyEx = RegSaveKeyExA;
pub const NTAPI_INLINE = NTAPI;
pub const POINTER_MESSAGE_FLAG_FIFTHBUTTON = 256;
pub const ERROR_NOT_EXPORT_FORMAT = c_long(6008);
pub const RTL_RUN_ONCE_INIT_FAILED = c_ulong(4);
pub const IMAGE_REL_BASED_HIGH = 1;
pub const IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;
pub const ERROR_TRANSPORT_FULL = c_long(4328);
pub const SWP_FRAMECHANGED = 32;
pub const SECURITY_BUILTIN_APP_PACKAGE_RID_COUNT = c_long(2);
pub const APPCOMMAND_BROWSER_HOME = 7;
pub const BACKUP_LINK = 5;
pub const LBN_SELCHANGE = 1;
pub const PO_THROTTLE_NONE = 0;
pub const INVALID_SET_FILE_POINTER = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const SPI_SETWAITTOKILLTIMEOUT = 123;
pub const GetNumberFormat = GetNumberFormatA;
pub const ERROR_CLUSTER_RESOURCE_VETOED_CALL = c_long(5955);
pub const MF_DEFAULT = c_long(4096);
pub const ERROR_PRI_MERGE_MAIN_PACKAGE_REQUIRED = c_long(15156);
pub const SB_VERT = 1;
pub const ERROR_NEEDS_REGISTRATION = c_long(15631);
pub const BF_RIGHT = 4;
pub const ANSI_VAR_FONT = 12;
pub const WTS_SESSION_REMOTE_CONTROL = 9;
pub const TPM_RECURSE = c_long(1);
pub const VP_TV_STANDARD_PAL_60 = 262144;
pub const RPC_X_SS_CANNOT_GET_CALL_HANDLE = c_long(1779);
pub const SC_ICON = SC_MINIMIZE;
pub const TRUST_PROTECTED_FILTER_ACE_FLAG = 64;
pub const CBS_OWNERDRAWVARIABLE = c_long(32);
pub const WM_LBUTTONDBLCLK = 515;
pub const CTLCOLOR_MAX = 7;
pub const META_DIBCREATEPATTERNBRUSH = 322;
pub const IMAGE_REL_SH3_DIRECT4 = 6;
pub const DNS_ERROR_ROLLOVER_NOT_POKEABLE = c_long(9128);
pub const TAPE_DRIVE_EOT_WZ_SIZE = 8192;
pub const PEERDIST_ERROR_CONTENTINFO_VERSION_UNSUPPORTED = c_long(4050);
pub const IMAGE_SCN_ALIGN_1024BYTES = 11534336;
pub const ERROR_INSTALL_NOTUSED = c_long(1634);
pub const PF_NON_TEMPORAL_LEVEL_ALL = _MM_HINT_NTA;
pub const _MSC_BUILD = 1;
pub const CREATE_FOR_DIR = 2;
pub const IMAGE_SUBSYSTEM_EFI_ROM = 13;
pub const GETPHYSPAGESIZE = 12;
pub const IMAGE_SYM_CLASS_AUTOMATIC = 1;
pub const MB_MISCMASK = c_long(49152);
pub const EVENT_UIA_PROPID_END = 30207;
pub const ERROR_TOO_MANY_SIDS = c_long(1389);
pub const ERROR_INSTALL_CANCEL = c_long(15608);
pub const FILE_CACHE_MAX_HARD_DISABLE = 2;
pub const SERVICE_NOTIFY_STATUS_CHANGE = SERVICE_NOTIFY_STATUS_CHANGE_2;
pub const PPM_FIRMWARE_TPC = 4096;
pub const SECURITY_USERMODEDRIVERHOST_ID_RID_COUNT = c_long(6);
pub const PERFORMANCE_DATA_VERSION = 1;
pub const WM_KEYDOWN = 256;
pub const STATE_SYSTEM_UNAVAILABLE = 1;
pub const SECURITY_SQOS_PRESENT = 1048576;
pub const TOUCHEVENTF_PEN = 64;
pub const MFT_RADIOCHECK = c_long(512);
pub const ERROR_SERVICES_FAILED_AUTOSTART = c_long(15405);
pub const ERROR_INVALID_UNWIND_TARGET = c_long(544);
pub const PRF_CHECKVISIBLE = c_long(1);
pub const FILL_NV_MEMORY_FLAG_FLUSH = 1;
pub const SPI_GETKEYBOARDPREF = 68;
pub const IMC_GETCOMPOSITIONFONT = 9;
pub const SORT_JAPANESE_RADICALSTROKE = 4;
pub const wvsprintf = wvsprintfA;
pub const REG_NO_LAZY_FLUSH = c_long(4);
pub const LANG_INUKTITUT = 93;
pub const ERROR_CLUSTER_DATABASE_TRANSACTION_NOT_IN_PROGRESS = c_long(5919);
pub const SECURITY_VIRTUALSERVER_ID_BASE_RID = c_long(83);
pub const STATE_SYSTEM_SELECTED = 2;
pub const IME_THOTKEY_IME_NONIME_TOGGLE = 112;
pub const SUBLANG_TSWANA_BOTSWANA = 2;
pub const WN_BAD_VALUE = ERROR_INVALID_PARAMETER;
pub const ERROR_NETWORK_ACCESS_DENIED_EDP = c_long(354);
pub const ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = c_long(1809);
pub const CREATE_SEPARATE_WOW_VDM = 2048;
pub const IMAGE_HOT_PATCH_CHUNK_INVERSE = 2147483648;
pub const VK_NUMPAD8 = 104;
pub const CP_THREAD_ACP = 3;
pub const MUI_LANGUAGE_INSTALLED = 32;
pub const EVENT_OBJECT_TEXTSELECTIONCHANGED = 32788;
pub const WT_EXECUTEINWAITTHREAD = 4;
pub const SERVICE_ACCEPT_USER_LOGOFF = 2048;
pub const GC_PAN = 1;
pub const C3_ALPHA = 32768;
pub const GF_INERTIA = 2;
pub const SUBLANG_PORTUGUESE_BRAZILIAN = 1;
pub const __UINT32_C_SUFFIX__ = U;
pub const DMPAPER_ENV_12 = 22;
pub const ERROR_RESOURCE_ENUM_USER_STOP = c_long(15106);
pub const DT_RASPRINTER = 2;
pub const VP_FLAGS_TV_STANDARD = 2;
pub const WNNC_NET_DECORB = 2097152;
pub const OBJ_FONT = 6;
pub const OBJID_SYSMENU = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967295) else @as(LONG, 4294967295);
pub const FindNextVolumeMountPoint = FindNextVolumeMountPointA;
pub const IMAGE_DIRECTORY_ENTRY_DEBUG = 6;
pub const BAUD_7200 = if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1024) else if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1024) else @as(DWORD, 1024);
pub const ERROR_HOST_UNREACHABLE = c_long(1232);
pub const CreateFontIndirect = CreateFontIndirectA;
pub const EVENT_CONSOLE_END_APPLICATION = 16391;
pub const QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS = 16;
pub const MNGOF_TOPGAP = 1;
pub const SHTDN_REASON_FLAG_MOBILE_UI_RESERVED = 268435456;
pub const ERROR_GPIO_CLIENT_INFORMATION_INVALID = c_long(15322);
pub const ERROR_LOG_SECTOR_PARITY_INVALID = c_long(6601);
pub const __STDC_UTF_16__ = 1;
pub const ERROR_DEVICE_HARDWARE_ERROR = c_long(483);
pub const __UINTMAX_C_SUFFIX__ = ULL;
pub const ERROR_NOT_CHILD_WINDOW = c_long(1442);
pub const VER_SUITE_COMMUNICATIONS = 8;
pub const SM_MEDIACENTER = 87;
pub const _ACRTIMP_ALT = _ACRTIMP;
pub const SUBLANG_CHEROKEE_CHEROKEE = 1;
pub const GetProfileInt = GetProfileIntA;
pub const EMR_PLGBLT = 79;
pub const MK_S_FIRST = c_long(262624);
pub const EWX_FORCE = 4;
pub const VK_OEM_FJ_JISHO = 146;
pub const SUBLANG_KOREAN = 1;
pub const ERROR_INVALID_SERVICE_ACCOUNT = c_long(1057);
pub const LB_ERRSPACE = -2;
pub const DMPAPER_ENV_PERSONAL = 38;
pub const HSHELL_WINDOWCREATED = 1;
pub const VK_BROWSER_STOP = 169;
pub const APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;
pub const ERROR_BAD_ARGUMENTS = c_long(160);
pub const DM_POINTERHITTEST = 592;
pub const DMDITHER_GRAYSCALE = 10;
pub const SB_PAGELEFT = 2;
pub const MINCHAR = 128;
pub const LB_GETSELITEMS = 401;
pub const TRANSACTION_RIGHT_RESERVED1 = 64;
pub const TRANSACTION_NOTIFY_PROMOTE = 134217728;
pub const ERROR_INVALID_CMM = c_long(2010);
pub const EnumTimeFormats = EnumTimeFormatsA;
pub const ERROR_PLATFORM_MANIFEST_NOT_ACTIVE = c_long(4575);
pub const OBJ_MEMDC = 10;
pub const DT_RIGHT = 2;
pub const ENETUNREACH = 118;
pub const LOCALE_RETURN_GENITIVE_NAMES = 268435456;
pub const _SA_annotes0 = n;
pub const IDYES = 6;
pub const ERROR_MCA_UNSUPPORTED_COLOR_TEMPERATURE = c_long(15207);
pub const ERROR_CLUSTER_NODE_IN_GRACE_PERIOD = c_long(5978);
pub const ERROR_MRM_DUPLICATE_MAP_NAME = c_long(15118);
pub const SPI_GETHOTTRACKING = 4110;
pub const RESOURCEUSAGE_RESERVED = 2147483648;
pub const HTHELP = 21;
pub const BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE = 1;
pub const SERVICE_CONTROL_DEVICEEVENT = 11;
pub const APIENTRY = WINAPI;
pub const YieldProcessor = _mm_pause;
pub const DISPLAYCONFIG_SOURCE_IN_USE = 1;
pub const WM_IME_REQUEST = 648;
pub const ERROR_CONVERT_TO_LARGE = c_long(600);
pub const IMFS_DISABLED = MFS_DISABLED;
pub const DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES = c_long(9955);
pub const DISP_CHANGE_BADFLAGS = -4;
pub const IMAGE_REL_M32R_SECREL32 = 13;
pub const FACILITY_EAP = 66;
pub const LANG_HAUSA = 104;
pub const SM_CONVERTIBLESLATEMODE = 8195;
pub const DMPAPER_LETTER_EXTRA = 50;
pub const PRODUCT_STARTER_N = 47;
pub const WM_CHILDACTIVATE = 34;
pub const RPC_S_NOT_RPC_ERROR = c_long(1823);
pub const COLOR_INFOBK = 24;
pub const SUBLANG_CHINESE_SINGAPORE = 4;
pub const SUBLANG_UZBEK_CYRILLIC = 2;
pub const RPC_S_INVALID_NET_ADDR = c_long(1707);
pub const ERROR_TM_INITIALIZATION_FAILED = c_long(6706);
pub const FACILITY_URT = 19;
pub const PAGE_GRAPHICS_NOACCESS = 2048;
pub const RI_KEY_TERMSRV_SET_LED = 8;
pub const SPI_GETPENVISUALIZATION = 8222;
pub const REG_OPTION_RESERVED = c_long(0);
pub const _Analysis_assume_lock_not_held_ = lock;
pub const EM_SETREADONLY = 207;
pub const ERROR_DS_OPERATIONS_ERROR = c_long(8224);
pub const MAX_LOGICALDPIOVERRIDE = 2;
pub const IMAGE_REL_AMD64_SECTION = 10;
pub const LGRPID_BALTIC = 3;
pub const THREAD_PRIORITY_TIME_CRITICAL = THREAD_BASE_PRIORITY_LOWRT;
pub const CTRY_MONACO = 33;
pub const IME_PROP_CANDLIST_START_FROM_1 = 262144;
pub const ERROR_EA_ACCESS_DENIED = c_long(994);
pub const ERROR_MR_MID_NOT_FOUND = c_long(317);
pub const WSA_QOS_SENDERS = c_long(11006);
pub const META_INVERTREGION = 298;
pub const ERROR_NO_SIGNAL_SENT = c_long(205);
pub const ERROR_MRM_INDETERMINATE_QUALIFIER_VALUE = c_long(15138);
pub const InterlockedBitTestAndResetAcquire = _interlockedbittestandreset;
pub const __INT_FAST16_FMTd__ = "hd";
pub const VK_VOLUME_UP = 175;
pub const FindWindowEx = FindWindowExA;
pub const ERROR_EXTERNAL_BACKING_PROVIDER_UNKNOWN = c_long(343);
pub const MDM_SHIFT_HDLCPPP_SPEED = 0;
pub const IMAGE_REL_IA64_SREL14 = 17;
pub const DNS_ERROR_VIRTUALIZATION_TREE_LOCKED = c_long(9923);
pub const VP_CP_CMD_DEACTIVATE = 2;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_ID = c_long(13834);
pub const WM_NOTIFYFORMAT = 85;
pub const VER_PLATFORM_WIN32s = 0;
pub const PRODUCT_DATACENTER_WS_SERVER_CORE = 147;
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_RESERVED = 3 << 28;
pub const IMAGE_HOT_PATCH_INDIRECT = 376832;
pub const EINPROGRESS = 112;
pub const EnumFontFamiliesEx = EnumFontFamiliesExA;
pub const DC_DATATYPE_PRODUCED = 21;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_X = 3;
pub const WN_NOT_AUTHENTICATED = ERROR_NOT_AUTHENTICATED;
pub const DNS_ERROR_INCONSISTENT_ROOT_HINTS = c_long(9565);
pub const WS_CHILDWINDOW = WS_CHILD;
pub const DeleteFile = DeleteFileA;
pub const VS_ALLOW_LATIN = 1;
pub const ERROR_INVALID_TOKEN = c_long(315);
pub const GCPCLASS_LOCALNUMBER = 4;
pub const LANG_CHEROKEE = 92;
pub const NID_INTEGRATED_PEN = 4;
pub const RotateRight32 = _rotr;
pub const _WIN32_IE = 2560;
pub const SERVICE_ERROR_NORMAL = 1;
pub const ARW_STARTRIGHT = c_long(1);
pub const MM_LOENGLISH = 4;
pub const ERROR_STOPPED_ON_SYMLINK = c_long(681);
pub const SMTO_NOTIMEOUTIFNOTHUNG = 8;
pub const ERROR_ALIAS_EXISTS = c_long(1379);
pub const WINDOW_BUFFER_SIZE_EVENT = 4;
pub const ERROR_FUNCTION_FAILED = c_long(1627);
pub const ERROR_UNKNOWN_PRINTER_DRIVER = c_long(1797);
pub const CONNECT_REQUIRE_PRIVACY = 32768;
pub const ERROR_PRI_MERGE_RESOURCE_PACKAGE_REQUIRED = c_long(15157);
pub const TAPE_TENSION = c_long(2);
pub const InterlockedCompareExchangeRelease64 = InterlockedCompareExchange64;
pub const SUBLANG_PERSIAN_IRAN = 1;
pub const ERROR_RESOURCE_REQUIREMENTS_CHANGED = c_long(756);
pub const ERROR_INSTALL_SERVICE_FAILURE = c_long(1601);
pub const GMEM_MODIFY = 128;
pub const ERROR_STATE_LOAD_STORE_FAILED = c_long(15800);
pub const PROCESS_CREATION_MITIGATION_POLICY_AUDIT_NONSYSTEM_FONTS = if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 48) else if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 48) else c_uint(3)(i64 << 48);
pub const IMAGE_SCN_LNK_OTHER = 256;
pub const ERROR_ALL_USER_TRUST_QUOTA_EXCEEDED = c_long(1933);
pub const ERROR_CLOUD_FILE_VALIDATION_FAILED = c_long(383);
pub const ERROR_NOT_ENOUGH_MEMORY = c_long(8);
pub const InterlockedDecrementAcquire = _InterlockedDecrement;
pub const __UINT16_FMTx__ = "hx";
pub const IMAGE_REL_MIPS_SECREL = 11;
pub const WM_MOUSELEAVE = 675;
pub const UNWIND_HISTORY_TABLE_SIZE = 12;
pub const VBS_BASIC_PAGE_THREAD_DESCRIPTOR = 4;
pub const ERROR_CTX_CONSOLE_CONNECT = c_long(7042);
pub const WNNC_NET_DOCUSPACE = 1769472;
pub const ODA_DRAWENTIRE = 1;
pub const RRF_NOEXPAND = 268435456;
pub const NID_EXTERNAL_TOUCH = 2;
pub const SIF_RANGE = 1;
pub const BitTestAndComplement64 = _bittestandcomplement64;
pub const DEVICEFAMILYINFOENUM_IOT_HEADLESS = 8;
pub const VK_NUMPAD9 = 105;
pub const MDM_HDLCPPP_AUTH_NONE = 1;
pub const _WConst_return = _CONST_RETURN;
pub const __LONG_LONG_MAX__ = c_longlong(9223372036854775807);
pub const PWR_FAIL = -1;
pub const EMR_GDICOMMENT = 70;
pub const ERROR_INSTALL_PACKAGE_DOWNGRADE = c_long(15622);
pub const STD_INPUT_HANDLE = if (@typeInfo(@TypeOf(-10)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -10) else if (@typeInfo(@TypeOf(-10)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -10) else @as(DWORD, -10);
pub const ERROR_SHARED_POLICY = c_long(8218);
pub const ERROR_CLUSTER_FAULT_DOMAIN_FAILED_S2D_VALIDATION = c_long(5996);
pub const ERROR_UNABLE_TO_INVENTORY_DRIVE = c_long(4325);
pub const ERROR_NEGATIVE_SEEK = c_long(131);
pub const GetDlgItemText = GetDlgItemTextA;
pub const HIGH_PRIORITY_CLASS = 128;
pub const RI_MOUSE_BUTTON_2_DOWN = RI_MOUSE_RIGHT_BUTTON_DOWN;
pub const SUBLANG_SERBIAN_SERBIA_CYRILLIC = 10;
pub const EFSRPC_SECURE_ONLY = 8;
pub const STM_SETICON = 368;
pub const ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = c_long(5043);
pub const SUBLANG_ALSATIAN_FRANCE = 1;
pub const ERROR_PORT_MESSAGE_TOO_LONG = c_long(546);
pub const DM_ICMMETHOD = c_long(8388608);
pub const CB_SETDROPPEDWIDTH = 352;
pub const CTRY_TUNISIA = 216;
pub const ERROR_DS_HIGH_DSA_VERSION = c_long(8642);
pub const CACHE_E_FIRST = c_long(2147746160);
pub const GetLocaleInfo = GetLocaleInfoA;
pub const SECURITY_MAX_BASE_RID = c_long(111);
pub const InterlockedAddAcquire = _InlineInterlockedAdd;
pub const DCX_LOCKWINDOWUPDATE = c_long(1024);
pub const DFCS_BUTTONRADIOMASK = 2;
pub const CODEPAGE_ENUMPROC = CODEPAGE_ENUMPROCA;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;
pub const CLIP_STROKE_PRECIS = 2;
pub const VIF_CANNOTREADDST = c_long(131072);
pub const IMAGE_REL_MIPS_SECTION = 10;
pub const ETO_PDY = 8192;
pub const LANG_GALICIAN = 86;
pub const GM_COMPATIBLE = 1;
pub const FRS_ERR_PARENT_TO_CHILD_COMM = c_long(8012);
pub const NI_SELECTCANDIDATESTR = 18;
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const CBR_56000 = 56000;
pub const ERROR_DS_DECODING_ERROR = c_long(8253);
pub const EMR_SETTEXTALIGN = 22;
pub const CONNECT_NEED_DRIVE = 32;
pub const FILE_INVALID_FILE_ID = if (@typeInfo(@TypeOf(-c_longlong(1))) == @import("builtin").TypeId.Pointer) @ptrCast(LONGLONG, -c_longlong(1)) else if (@typeInfo(@TypeOf(-c_longlong(1))) == @import("builtin").TypeId.Int) @intToPtr(LONGLONG, -c_longlong(1)) else @as(LONGLONG, -c_longlong(1));
pub const ERROR_DS_OBJ_CLASS_VIOLATION = c_long(8212);
pub const ReadLongPtrRaw = ReadRaw64;
pub const DNS_WARNING_PTR_CREATE_FAILED = c_long(9715);
pub const __INVPCID__ = 1;
pub const ERROR_GRACEFUL_DISCONNECT = c_long(1226);
pub const TC_SO_ABLE = 4096;
pub const DMPAPER_JAPANESE_POSTCARD_ROTATED = 81;
pub const META_FLOODFILL = 1049;
pub const ERROR_DS_OFFSET_RANGE_ERROR = c_long(8262);
pub const VER_SUITE_COMPUTE_SERVER = 16384;
pub const IO_REPARSE_TAG_RESERVED_ONE = 1;
pub const CONTEXT_E_FIRST = c_long(2147803136);
pub const ERROR_ACCOUNT_LOCKED_OUT = c_long(1909);
pub const COLOR_BTNTEXT = 18;
pub const PEERDIST_ERROR_CANNOT_PARSE_CONTENTINFO = c_long(4051);
pub const CAL_HIJRI = 6;
pub const ERROR_TRANSACTION_REQUEST_NOT_VALID = c_long(6702);
pub const CBN_EDITCHANGE = 5;
pub const ERROR_INVALID_EA_NAME = c_long(254);
pub const SPI_GETCOMBOBOXANIMATION = 4100;
pub const PRODUCT_CORE_SINGLELANGUAGE = 100;
pub const WM_ASKCBFORMATNAME = 780;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_MASK = 3 << 24;
pub const PBT_APMSUSPEND = 4;
pub const FAST_FAIL_GUARD_WRITE_CHECK_FAILURE = 11;
pub const MIM_HELPID = 4;
pub const VK_PAUSE = 19;
pub const _Deref_post1_impl_ = p1;
pub const __PTRDIFF_FMTd__ = "lld";
pub const COLOR_MENUHILIGHT = 29;
pub const ERROR_SERVICE_NOTIFY_CLIENT_LAGGING = c_long(1294);
pub const ERROR_DS_DRA_OBJ_IS_REP_SOURCE = c_long(8450);
pub const VK_NAVIGATION_DOWN = 139;
pub const ERROR_CLOUD_FILE_INVALID_REQUEST = c_long(380);
pub const BSM_ALLDESKTOPS = 16;
pub const WDK_NTDDI_VERSION = NTDDI_WIN10_19H1;
pub const DnsHostnameToComputerName = DnsHostnameToComputerNameA;
pub const COLOR_HIGHLIGHT = 13;
pub const SPI_SETDESKPATTERN = 21;
pub const DC_COPIES = 18;
pub const PROCESSOR_INTEL_386 = 386;
pub const GCS_COMPSTR = 8;
pub const MUTEX_ALL_ACCESS = MUTANT_ALL_ACCESS;
pub const RPC_X_NO_MORE_ENTRIES = c_long(1772);
pub const MUI_QUERY_TYPE = 1;
pub const ERROR_SPL_NO_ADDJOB = c_long(3004);
pub const DS_LOCALEDIT = c_long(32);
pub const _WIN32_IE_XPSP1 = _WIN32_IE_IE60SP1;
pub const ERROR_NOT_AUTHENTICATED = c_long(1244);
pub const ENUMPAPERBINS = 31;
pub const WriteConsoleOutputCharacter = WriteConsoleOutputCharacterA;
pub const _LEADBYTE = 32768;
pub const WM_MBUTTONDOWN = 519;
pub const SIF_TRACKPOS = 16;
pub const POWER_CONNECTIVITY_IN_STANDBY_ENABLED = 1;
pub const DEVICEFAMILYINFOENUM_IOT = 7;
pub const INIT_ONCE_CHECK_ONLY = RTL_RUN_ONCE_CHECK_ONLY;
pub const MAXUINT16 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT16, 0) else UINT16(0))) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT16, 0) else UINT16(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT16, 0) else UINT16(0))) == @import("builtin").TypeId.Int) @intToPtr(UINT16, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT16, 0) else UINT16(0)) else UINT16(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(UINT16, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(UINT16, 0) else UINT16(0));
pub const STATUS_HEAP_CORRUPTION = if (@typeInfo(@TypeOf(c_long(3221226356))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226356)) else if (@typeInfo(@TypeOf(c_long(3221226356))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226356)) else @as(DWORD, c_long(3221226356));
pub const STATUS_FATAL_APP_EXIT = if (@typeInfo(@TypeOf(c_long(1073741845))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073741845)) else if (@typeInfo(@TypeOf(c_long(1073741845))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073741845)) else @as(DWORD, c_long(1073741845));
pub const ERROR_INVALID_SERVICE_CONTROL = c_long(1052);
pub const ERROR_ALREADY_INITIALIZED = c_long(1247);
pub const PST_LAT = if (@typeInfo(@TypeOf(257)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 257) else if (@typeInfo(@TypeOf(257)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 257) else @as(DWORD, 257);
pub const FastFence = __faststorefence;
pub const LOGON32_PROVIDER_DEFAULT = 0;
pub const DNS_ERROR_DNAME_COLLISION = c_long(9721);
pub const CMAPI = DECLSPEC_IMPORT;
pub const ERROR_NOT_CONNECTED = c_long(2250);
pub const ERROR_EVT_CHANNEL_NOT_FOUND = c_long(15007);
pub const IMAGE_REL_I386_DIR32NB = 7;
pub const ERROR_CLUSTER_RESOURCE_IS_REPLICA_VIRTUAL_MACHINE = c_long(5972);
pub const ERROR_DIRECTORY_NOT_SUPPORTED = c_long(336);
pub const IMAGE_FILE_MACHINE_IA64 = 512;
pub const GetSystemWow64Directory2 = GetSystemWow64Directory2A;
pub const REPLACEFILE_WRITE_THROUGH = 1;
pub const ISMEX_NOTIFY = 2;
pub const SUBLANG_GERMAN_AUSTRIAN = 3;
pub const IMAGE_SEPARATE_DEBUG_MISMATCH = 32768;
pub const SPI_SETWHEELSCROLLCHARS = 109;
pub const __deref_inout_bcount_nz_opt = size;
pub const DNS_ERROR_NO_VALID_TRUST_ANCHORS = c_long(9127);
pub const ERROR_DBG_TERMINATE_THREAD = c_long(691);
pub const DESKTOP_ENUMERATE = c_long(64);
pub const POWERBUTTON_ACTION_INDEX_SHUTDOWN = 3;
pub const EXCEPTION_WRITE_FAULT = 1;
pub const EXCEPTION_STACK_INVALID = 8;
pub const GCS_COMPATTR = 16;
pub const SPI_SETGRIDGRANULARITY = 19;
pub const PSINJECT_VMRESTORE = 201;
pub const HTSIZELAST = HTBOTTOMRIGHT;
pub const WM_NCPAINT = 133;
pub const IS_TEXT_UNICODE_REVERSE_MASK = 240;
pub const REG_NOTIFY_CHANGE_LAST_SET = c_long(4);
pub const WM_COPYDATA = 74;
pub const ERROR_CTX_LICENSE_NOT_AVAILABLE = c_long(7054);
pub const ERROR_IPSEC_THROTTLE_DROP = c_long(13918);
pub const WNNC_CRED_MANAGER = 4294901760;
pub const PROCESSOR_ARCHITECTURE_ALPHA64 = 7;
pub const CreatePrivateNamespace = CreatePrivateNamespaceA;
pub const _WIN32_WINNT_WIN7 = 1537;
pub const VARIABLE_PITCH = 2;
pub const ERROR_EVT_CHANNEL_CANNOT_ACTIVATE = c_long(15025);
pub const ERROR_CLUSTER_INVALID_STRING_FORMAT = c_long(5917);
pub const TEXTCAPS = 34;
pub const MOUSEEVENTF_HWHEEL = 4096;
pub const VK_JUNJA = 23;
pub const STATE_SYSTEM_INDETERMINATE = STATE_SYSTEM_MIXED;
pub const FACILITY_WINRM = 51;
pub const ERROR_FORMS_AUTH_REQUIRED = c_long(224);
pub const __UINT16_MAX__ = 65535;
pub const ERROR_IPSEC_IKE_PEER_CRL_FAILED = c_long(13848);
pub const ShiftRight128 = __shiftright128;
pub const IE_NOPEN = -3;
pub const PENARBITRATIONTYPE_FIS = 2;
pub const RPC_S_PROTOCOL_ERROR = c_long(1728);
pub const SERVICE_RUNNING = 4;
pub const __WINT_UNSIGNED__ = 1;
pub const ERROR_VERIFIER_STOP = c_long(537);
pub const IMAGE_REL_ALPHA_REFHI = 10;
pub const ERROR_DISK_RECALIBRATE_FAILED = c_long(1126);
pub const S_SERDST = -16;
pub const DNS_ERROR_INVALID_PROPERTY = c_long(9553);
pub const ERROR_DS_DATABASE_ERROR = c_long(8409);
pub const CBN_ERRSPACE = -1;
pub const CTRY_INDIA = 91;
pub const DMPAPER_B5_EXTRA = 65;
pub const ERROR_NOT_LOGGED_ON = c_long(1245);
pub const LOGON32_LOGON_INTERACTIVE = 2;
pub const VK_NUMPAD6 = 102;
pub const STATE_SYSTEM_FOCUSABLE = 1048576;
pub const ERROR_CLEANER_SLOT_NOT_SET = c_long(4332);
pub const CE_PTO = 512;
pub const OFS_MAXPATHNAME = 128;
pub const LOCALE_SMONTHDAY = 120;
pub const _CRT_INT_MAX = 2147483647;
pub const EnumProps = EnumPropsA;
pub const CTRY_COLOMBIA = 57;
pub const IMAGE_SYM_TYPE_CHAR = 2;
pub const ERROR_EVT_FILTER_OUT_OF_RANGE = c_long(15038);
pub const APPCOMMAND_SEND_MAIL = 41;
pub const GetWindowTextLength = GetWindowTextLengthA;
pub const DISPLAY_DEVICE_ACC_DRIVER = 64;
pub const IME_PROP_AT_CARET = 65536;
pub const EMR_ABORTPATH = 68;
pub const WM_CLOSE = 16;
pub const VP_TV_STANDARD_WIN_VGA = 32768;
pub const ImmIsUIMessage = ImmIsUIMessageA;
pub const SEVERITY_SUCCESS = 0;
pub const RPI_FLAG_SMB2_SHARECAP_CLUSTER = 64;
pub const PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_RESERVED = if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 32) else if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 32) else c_uint(3)(i64 << 32);
pub const PSINJECT_PAGESATEND = 3;
pub const ERROR_SXS_DUPLICATE_IID = c_long(14024);
pub const WS_EX_LEFT = c_long(0);
pub const LANG_CATALAN = 3;
pub const EVENT_OBJECT_DRAGENTER = 32804;
pub const ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = c_long(8530);
pub const TAPE_UNLOAD = c_long(1);
pub const ERROR_CTX_BAD_VIDEO_MODE = c_long(7025);
pub const WM_NCCALCSIZE = 131;
pub const LOCALE_SCURRENCY = 20;
pub const ERROR_PROFILE_NOT_FOUND = c_long(2016);
pub const GM_ADVANCED = 2;
pub const SUBLANG_CHINESE_TRADITIONAL = 1;
pub const FILE_NOTIFY_CHANGE_FILE_NAME = 1;
pub const FILE_SUPPORTS_USN_JOURNAL = 33554432;
pub const ERROR_UNKNOWN_PRODUCT = c_long(1605);
pub const ERROR_AUTHIP_FAILURE = c_long(1469);
pub const ERROR_IMPLICIT_TRANSACTION_NOT_SUPPORTED = c_long(6725);
pub const ERROR_DS_OBJ_CLASS_NOT_DEFINED = c_long(8371);
pub const GETSETSCREENPARAMS = 3072;
pub const POINTER_MESSAGE_FLAG_FIRSTBUTTON = 16;
pub const EVENT_OBJECT_UNCLOAKED = 32792;
pub const PRODUCT_PROFESSIONAL_S_N = 128;
pub const FORMAT_MESSAGE_FROM_STRING = 1024;
pub const VER_SERVICEPACKMINOR = 16;
pub const EMARCH_ENC_I17_IMM41a_INST_WORD_POS_X = 14;
pub const IMAGE_OS2_SIGNATURE_LE = 17740;
pub const __LDBL_DECIMAL_DIG__ = 17;
pub const LANG_FAEROESE = 56;
pub const DMPAPER_ENV_9 = 19;
pub const FACILITY_DIRECT2D = 2201;
pub const IMAGE_COMDAT_SELECT_ANY = 2;
pub const POWER_ACTION_ACPI_CRITICAL = 16777216;
pub const ATTR_CONVERTED = 2;
pub const RPC_S_SYSTEM_HANDLE_COUNT_EXCEEDED = c_long(1835);
pub const SPI_SETWORKAREA = 47;
pub const IMAGE_REL_SH3_SECREL = 15;
pub const FILE_MAP_WRITE = SECTION_MAP_WRITE;
pub const EMR_POLYTEXTOUTA = 96;
pub const RIM_TYPEMOUSE = 0;
pub const OF_SHARE_COMPAT = 0;
pub const EVENTLOG_SEQUENTIAL_READ = 1;
pub const __out_ecount_nz = size;
pub const LOCALE_SKEYBOARDSTOINSTALL = 94;
pub const EMR_MOVETOEX = 27;
pub const MOUSE_ATTRIBUTES_CHANGED = 4;
pub const GID_ROTATE = 5;
pub const DDD_EXACT_MATCH_ON_REMOVE = 4;
pub const SPI_SETSCREENREADER = 71;
pub const ERROR_INCORRECT_ACCOUNT_TYPE = c_long(8646);
pub const FACILITY_ITF = 4;
pub const WSA_IPSEC_NAME_POLICY_ERROR = c_long(11033);
pub const WriteMxCsr = _mm_setcsr;
pub const APPMODEL_ERROR_PACKAGE_IDENTITY_CORRUPT = c_long(15702);
pub const LoadEnclaveImage = LoadEnclaveImageA;
pub const PERFSTATE_POLICY_CHANGE_SINGLE = 1;
pub const TKF_INDICATOR = 32;
pub const ERROR_NONCORE_GROUPS_FOUND = c_long(5937);
pub const MAPVK_VK_TO_CHAR = 2;
pub const INDEXID_CONTAINER = 0;
pub const CharLowerBuff = CharLowerBuffA;
pub const CBS_OWNERDRAWFIXED = c_long(16);
pub const ERROR_INVALID_RUNLEVEL_SETTING = c_long(15401);
pub const LOCALE_IDEFAULTANSICODEPAGE = 4100;
pub const SYSTEM_ALARM_CALLBACK_OBJECT_ACE_TYPE = 16;
pub const ERROR_CLUSTER_BACKUP_IN_PROGRESS = c_long(5949);
pub const LCMapString = LCMapStringA;
pub const ERROR_QUORUM_OWNER_ALIVE = c_long(5034);
pub const TAPE_DRIVE_EJECT_MEDIA = 16777216;
pub const SHOW_ICONWINDOW = 2;
pub const DISPLAYCONFIG_PATH_CLONE_GROUP_INVALID = 65535;
pub const ES_MULTILINE = c_long(4);
pub const ERROR_COLORSPACE_MISMATCH = c_long(2021);
pub const VIF_CANNOTLOADLZ32 = c_long(524288);
pub const IO_REPARSE_TAG_CLOUD_8 = c_long(2415951898);
pub const SW_SHOWNA = 8;
pub const TIME_ZONE_ID_DAYLIGHT = 2;
pub const ERROR_SXS_MANIFEST_INVALID_REQUIRED_DEFAULT_NAMESPACE = c_long(14019);
pub const MUI_COMPLEX_SCRIPT_FILTER = 512;
pub const ERROR_CLUSTER_NO_NET_ADAPTERS = c_long(5906);
pub const ERROR_TRANSACTION_ALREADY_COMMITTED = c_long(6705);
pub const JOB_OBJECT_QUERY = 4;
pub const ERROR_DS_DRA_SECRETS_DENIED = c_long(8630);
pub const ERROR_CLUSTER_RESOURCE_DOES_NOT_SUPPORT_UNMONITORED = c_long(5982);
pub const WM_TOUCH = 576;
pub const ERROR_DBG_RIPEXCEPTION = c_long(695);
pub const EMARCH_ENC_I17_IMM41b_SIZE_X = 8;
pub const RPC_S_NO_MORE_MEMBERS = c_long(1757);
pub const IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;
pub const LGRPID_SUPPORTED = 2;
pub const VS_FF_SPECIALBUILD = c_long(32);
pub const ERROR_NOT_LOGON_PROCESS = c_long(1362);
pub const SERVICE_NOTIFY_CREATED = 128;
pub const ATOM_FLAG_GLOBAL = 2;
pub const ERROR_EVT_MESSAGE_ID_NOT_FOUND = c_long(15028);
pub const SERVICE_STOP_REASON_MAJOR_APPLICATION = 327680;
pub const DS_NOFAILCREATE = c_long(16);
pub const DMDFO_STRETCH = 1;
pub const WINBASEAPI = DECLSPEC_IMPORT;
pub const ERROR_SXS_POLICY_PARSE_ERROR = c_long(14029);
pub const C1_SPACE = 8;
pub const CFG_CALL_TARGET_PROCESSED = 2;
pub const ERROR_POLICY_ONLY_IN_DS = c_long(8220);
pub const SETCOPYCOUNT = 17;
pub const ERROR_BEGINNING_OF_MEDIA = c_long(1102);
pub const ERROR_INVALID_STACKSEG = c_long(189);
pub const CACHE_S_LAST = c_long(262527);
pub const LGRPID_GREEK = 4;
pub const FAPPCOMMAND_OEM = 4096;
pub const ERROR_ENCLAVE_VIOLATION = c_long(815);
pub const WNNC_NET_POWERLAN = 983040;
pub const INPUTLANGCHANGE_FORWARD = 2;
pub const ACL_REVISION = 2;
pub const MoveFileTransacted = MoveFileTransactedA;
pub const EMARCH_ENC_I17_IMM41c_INST_WORD_POS_X = 0;
pub const ERROR_DELETING_ICM_XFORM = c_long(2019);
pub const SECURITY_PROCESS_PROTECTION_TYPE_NONE_RID = c_long(0);
pub const STATUS_INVALID_HANDLE = if (@typeInfo(@TypeOf(c_long(3221225480))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225480)) else if (@typeInfo(@TypeOf(c_long(3221225480))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225480)) else @as(DWORD, c_long(3221225480));
pub const LANG_MAORI = 129;
pub const DDL_DRIVES = 16384;
pub const BS_ICON = c_long(64);
pub const ERROR_INSTALL_REMOTE_PROHIBITED = c_long(1645);
pub const OR_INVALID_OID = c_long(1911);
pub const IDH_NO_HELP = 28440;
pub const PROCESSOR_INTEL_IA64 = 2200;
pub const GetConsoleAliasesLength = GetConsoleAliasesLengthA;
pub const ERROR_DS_UNWILLING_TO_PERFORM = c_long(8245);
pub const DNS_ERROR_DWORD_VALUE_TOO_LARGE = c_long(9567);
pub const SPI_SETHIGHCONTRAST = 67;
pub const _WIN32_WINNT_WIN6 = 1536;
pub const SCRUB_DATA_INPUT_FLAG_SCRUB_BY_OBJECT_ID = 32;
pub const PRODUCT_HOME_BASIC_N = 5;
pub const PDCAP_WAKE_FROM_D3_SUPPORTED = 128;
pub const GCP_DBCS = 1;
pub const ERROR_SXS_XML_E_INVALID_DECIMAL = c_long(14047);
pub const ERROR_PRIMARY_TRANSPORT_CONNECT_FAILED = c_long(746);
pub const PRODUCT_ULTIMATE_E = 71;
pub const IMAGE_REL_ARM_TOKEN = 5;
pub const NTAPI = __stdcall;
pub const _CRT_INSECURE_DEPRECATE_MEMORY = _Replacement;
pub const CSTR_GREATER_THAN = 3;
pub const SERVICE_STOP_REASON_MAJOR_OPERATINGSYSTEM = 196608;
pub const IS_TEXT_UNICODE_ODD_LENGTH = 512;
pub const LANG_TAJIK = 40;
pub const REG_APP_HIVE = c_long(16);
pub const SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;
pub const __LDBL_HAS_DENORM__ = 1;
pub const LOCALE_REPLACEMENT = 8;
pub const SPI_SETCURSORSHADOW = 4123;
pub const WM_NCPOINTERDOWN = 578;
pub const iscsymf = __iscsymf;
pub const PAN_MIDLINE_HIGH_POINTED = 6;
pub const FACILITY_TPM_SERVICES = 40;
pub const LoadAccelerators = LoadAcceleratorsA;
pub const SERVICE_ACCEPT_PAUSE_CONTINUE = 2;
pub const VK_NUMPAD7 = 103;
pub const PURGE_RXABORT = 2;
pub const ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = c_long(8429);
pub const CTRY_ISRAEL = 972;
pub const MDITILE_SKIPDISABLED = 2;
pub const PDCAP_WAKE_FROM_D2_SUPPORTED = 64;
pub const AddConsoleAlias = AddConsoleAliasA;
pub const WOW64_MAXIMUM_SUPPORTED_EXTENSION = 512;
pub const REG_RESOURCE_REQUIREMENTS_LIST = c_ulong(10);
pub const BitScanForward64 = _BitScanForward64;
pub const ERROR_DRIVE_LOCKED = c_long(108);
pub const TOKEN_MANDATORY_POLICY_OFF = 0;
pub const WM_TCARD = 82;
pub const IMAGE_REL_M32R_ADDR32 = 1;
pub const ERROR_DISK_REPAIR_UNSUCCESSFUL = c_long(793);
pub const SUBLANG_SAMI_NORTHERN_SWEDEN = 2;
pub const BATTERY_LIFE_UNKNOWN = 4294967295;
pub const FW_LIGHT = 300;
pub const LOAD_LIBRARY_SEARCH_USER_DIRS = 1024;
pub const ERROR_SIGNAL_PENDING = c_long(162);
pub const DATE_SHORTDATE = 1;
pub const NETINFO_DLL16 = 1;
pub const LINGUISTIC_IGNOREDIACRITIC = 32;
pub const APPCOMMAND_MEDIA_CHANNEL_UP = 51;
pub const GetSegmentLimit = __segmentlimit;
pub const VFT2_DRV_SYSTEM = c_long(7);
pub const IMAGE_REL_MIPS_PAIR = 37;
pub const WC_NO_BEST_FIT_CHARS = 1024;
pub const LMEM_FIXED = 0;
pub const FILE_ATTRIBUTE_TEMPORARY = 256;
pub const IMAGE_SYM_CLASS_SECTION = 104;
pub const XSTATE_AVX512_ZMM = 7;
pub const POINTER_32 = __ptr32;
pub const WM_KILLFOCUS = 8;
pub const TAPE_DRIVE_COMPRESSION = 131072;
pub const __x86_64__ = 1;
pub const COLORONCOLOR = 3;
pub const SHADEBLENDCAPS = 120;
pub const WNNC_NET_DRIVEONWEB = 4063232;
pub const ERROR_IPSEC_QM_POLICY_NOT_FOUND = c_long(13001);
pub const SPI_GETFONTSMOOTHINGTYPE = 8202;
pub const LOCALE_SSHORTESTDAYNAME4 = 99;
pub const META_CREATEBRUSHINDIRECT = 764;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_ALWAYS_ON = 1 << 24;
pub const PAN_SERIF_FLARED = 14;
pub const GetGlyphOutline = GetGlyphOutlineA;
pub const EAFNOSUPPORT = 102;
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const FRS_ERR_INVALID_API_SEQUENCE = c_long(8001);
pub const ERROR_ILLEGAL_DLL_RELOCATION = c_long(623);
pub const ERROR_MRM_UNKNOWN_QUALIFIER = c_long(15113);
pub const PS_ENDCAP_SQUARE = 256;
pub const HCF_HOTKEYAVAILABLE = 64;
pub const IGP_SETCOMPSTR = 20;
pub const DPI_AWARENESS_CONTEXT_UNAWARE_GDISCALED = if (@typeInfo(@TypeOf(-5)) == @import("builtin").TypeId.Pointer) @ptrCast(DPI_AWARENESS_CONTEXT, -5) else if (@typeInfo(@TypeOf(-5)) == @import("builtin").TypeId.Int) @intToPtr(DPI_AWARENESS_CONTEXT, -5) else @as(DPI_AWARENESS_CONTEXT, -5);
pub const DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = c_long(9651);
pub const ControlServiceEx = ControlServiceExA;
pub const REG_DWORD_BIG_ENDIAN = c_ulong(5);
pub const ERROR_DIR_EFS_DISALLOWED = c_long(6010);
pub const GETSETPAPERBINS = 29;
pub const DM_DISPLAYORIENTATION = c_long(128);
pub const EV_RX80FULL = 1024;
pub const LB_SETTOPINDEX = 407;
pub const DOMAIN_ALIAS_RID_POWER_USERS = c_long(547);
pub const SUBLANG_SINHALESE_SRI_LANKA = 1;
pub const BS_PUSHLIKE = c_long(4096);
pub const IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;
pub const IACE_DEFAULT = 16;
pub const RPI_SMB2_FLAG_SERVERCAP_LEASING = 2;
pub const SECURITY_WMIHOST_ID_RID_COUNT = c_long(6);
pub const DS_CENTERMOUSE = c_long(4096);
pub const FACILITY_DAF = 100;
pub const KLF_REORDER = 8;
pub const PST_MODEM = if (@typeInfo(@TypeOf(6)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 6) else if (@typeInfo(@TypeOf(6)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 6) else @as(DWORD, 6);
pub const BI_RGB = c_long(0);
pub const NMPWAIT_WAIT_FOREVER = 4294967295;
pub const CLSID_NULL = GUID_NULL;
pub const TRANSACTION_NOTIFY_RM_DISCONNECTED = 16777216;
pub const _WIN32_IE_WIN2KSP1 = _WIN32_IE_IE501;
pub const PASSTHROUGH = 19;
pub const WNFMT_INENUM = 16;
pub const HBMMENU_POPUP_MAXIMIZE = if (@typeInfo(@TypeOf(10)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 10) else if (@typeInfo(@TypeOf(10)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 10) else @as(HBITMAP, 10);
pub const ERROR_IPSEC_IKE_NO_PRIVATE_KEY = c_long(13820);
pub const RPC_S_INVALID_ENDPOINT_FORMAT = c_long(1706);
pub const ERROR_HEURISTIC_DAMAGE_POSSIBLE = c_long(6731);
pub const SE_GROUP_RESOURCE = c_long(536870912);
pub const GF_END = 4;
pub const VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = 212;
pub const DMPAPER_JENV_KAKU3 = 72;
pub const ERROR_DS_ALIAS_PROBLEM = c_long(8241);
pub const DMDUP_SIMPLEX = 1;
pub const IO_REPARSE_TAG_CLOUD_9 = c_long(2415955994);
pub const RPC_S_GROUP_MEMBER_NOT_FOUND = c_long(1898);
pub const _UPPER = 1;
pub const X3_I_SIZE_X = 1;
pub const CDS_TEST = 2;
pub const IMAGE_POLICY_METADATA_NAME = __ImagePolicyMetadata;
pub const MUI_LANGUAGE_LICENSED = 64;
pub const WSAEISCONN = c_long(10056);
pub const SUBLANG_YAKUT_RUSSIA = 1;
pub const ACTIVATION_CONTEXT_SECTION_COM_INTERFACE_REDIRECTION = 5;
pub const SORT_GEORGIAN_MODERN = 1;
pub const ERROR_INVALID_COMMAND_LINE = c_long(1639);
pub const SPI_SETMOUSEWHEELROUTING = 8221;
pub const CAL_GREGORIAN_ARABIC = 10;
pub const FOREGROUND_BLUE = 1;
pub const SNAPSHOT_POLICY_NEVER = 0;
pub const SIZEPALETTE = 104;
pub const DNS_ERROR_INVALID_NAME = ERROR_INVALID_NAME;
pub const RPC_S_INVALID_ASYNC_CALL = c_long(1915);
pub const FILE_ATTRIBUTE_VIRTUAL = 65536;
pub const ERROR_LOG_EPHEMERAL = c_long(6634);
pub const EM_GETTHUMB = 190;
pub const BF_TOP = 2;
pub const RESOURCEDISPLAYTYPE_DOMAIN = 1;
pub const SECURITY_LOCAL_ACCOUNT_AND_ADMIN_RID = c_long(114);
pub const ELOOP = 114;
pub const __inner_out_validated = typ_raw;
pub const LANG_WOLOF = 136;
pub const DMICMMETHOD_USER = 256;
pub const PEERDIST_ERROR_OPERATION_NOTFOUND = c_long(4059);
pub const WM_POINTERWHEEL = 590;
pub const PSEUDOCONSOLE_INHERIT_CURSOR = 1;
pub const ERROR_IPSEC_SA_LIFETIME_EXPIRED = c_long(13911);
pub const TAPE_DRIVE_LOCK_UNLK_IMMED = 2147483776;
pub const ODS_DISABLED = 4;
pub const PRODUCT_HYPERV = 42;
pub const MFS_DEFAULT = MF_DEFAULT;
pub const SP_OUTOFMEMORY = -5;
pub const ERROR_VSM_NOT_INITIALIZED = c_long(4560);
pub const UnregisterClass = UnregisterClassA;
pub const __function_ignore_lock_checking = lock;
pub const __LDBL_EPSILON__ = 0.000000;
pub const ERROR_EVT_CANNOT_OPEN_CHANNEL_OF_QUERY = c_long(15036);
pub const FE_FONTSMOOTHINGORIENTATIONRGB = 1;
pub const ERROR_PNP_QUERY_REMOVE_RELATED_DEVICE_TIMEOUT = c_long(481);
pub const PPM_FIRMWARE_PCCH = 16384;
pub const FACILITY_WEB_SOCKET = 886;
pub const SERVICE_STOP_REASON_MINOR_NETWORKCARD = 9;
pub const ERROR_REMOTE_PRINT_CONNECTIONS_BLOCKED = c_long(1936);
pub const SECURITY_TASK_ID_BASE_RID = c_long(87);
pub const ERROR_DS_ATT_IS_NOT_ON_OBJ = c_long(8310);
pub const __SIZE_FMTX__ = "llX";
pub const InterlockedOr = _InterlockedOr;
pub const PAN_LETT_NORMAL_CONTACT = 2;
pub const CFS_FORCE_POSITION = 32;
pub const ERROR_INVALID_TRANSFORM = c_long(2020);
pub const FILE_WRITE_EA = 16;
pub const BS_PATTERN = 3;
pub const SEF_DEFAULT_GROUP_FROM_PARENT = 64;
pub const MF_USECHECKBITMAPS = c_long(512);
pub const PopulationCount64 = __popcnt64;
pub const PRIVILEGE_SET_ALL_NECESSARY = 1;
pub const ERROR_SEM_IS_SET = c_long(102);
pub const TRUETYPE_FONTTYPE = 4;
pub const ERROR_DEVICE_HINT_NAME_BUFFER_TOO_SMALL = c_long(355);
pub const IMAGE_SYM_TYPE_PCODE = 32768;
pub const VK_LAUNCH_APP1 = 182;
pub const ERROR_CAN_NOT_COMPLETE = c_long(1003);
pub const EVENT_SYSTEM_DIALOGEND = 17;
pub const ERROR_INSTALL_VOLUME_NOT_EMPTY = c_long(15628);
pub const _Readable_bytes_impl_ = size;
pub const ERROR_DS_LINK_ID_NOT_AVAILABLE = c_long(8577);
pub const VP_TV_STANDARD_NTSC_M = 1;
pub const WTS_REMOTE_DISCONNECT = 4;
pub const TIME_NOSECONDS = 2;
pub const ERROR_CLUSTER_RESOURCE_PROVIDER_FAILED = c_long(5942);
pub const ERROR_TOO_MANY_SEM_REQUESTS = c_long(103);
pub const VK_NUMPAD4 = 100;
pub const ERROR_IPSEC_IKE_MM_DELAY_DROP = c_long(13814);
pub const SendMessageCallback = SendMessageCallbackA;
pub const WM_UPDATEUISTATE = 296;
pub const GCPGLYPH_LINKAFTER = 16384;
pub const SPI_GETANIMATION = 72;
pub const FLUSH_NV_MEMORY_IN_FLAG_NO_DRAIN = 1;
pub const MDM_MASK_V110_SPEED = 15;
pub const SECURITY_CREATOR_OWNER_SERVER_RID = c_long(2);
pub const TRANSACTION_QUERY_INFORMATION = 1;
pub const EPT_S_NOT_REGISTERED = c_long(1753);
pub const IGP_PROPERTY = 4;
pub const DNS_ERROR_DATAFILE_PARSING = c_long(9655);
pub const LOCALE_SOPENTYPELANGUAGETAG = 122;
pub const ERROR_DATABASE_FAILURE = c_long(4313);
pub const __SCHAR_MAX__ = 127;
pub const InterlockedDecrementNoFence16 = _InterlockedDecrement16;
pub const FILL_NV_MEMORY_FLAG_NON_TEMPORAL = 2;
pub const SUBLANG_CENTRAL_KURDISH_IRAQ = 1;
pub const LOCALE_SISO3166CTRYNAME2 = 104;
pub const VK_OEM_FINISH = 241;
pub const IMAGE_GUARD_SECURITY_COOKIE_UNUSED = 2048;
pub const MoveFile = MoveFileA;
pub const FillMemory = RtlFillMemory;
pub const ERROR_NO_QUOTAS_FOR_ACCOUNT = c_long(1302);
pub const ERROR_CANNOT_FIND_WND_CLASS = c_long(1407);
pub const ERROR_IPSEC_IKE_ATTRIB_FAIL = c_long(13802);
pub const DFC_MENU = 2;
pub const CAL_SABBREVMONTHNAME2 = 35;
pub const X3_IMM39_2_INST_WORD_X = 1;
pub const GWLP_HWNDPARENT = -8;
pub const PAN_WEIGHT_BLACK = 10;
pub const __UINT64_FMTX__ = "llX";
pub const ERROR_DS_NAME_ERROR_RESOLVING = c_long(8469);
pub const WSA_QOS_ESERVICETYPE = c_long(11016);
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_AGGRESSIVE_AT_GUARANTEED = 6;
pub const ERROR_ROWSNOTRELEASED = c_long(772);
pub const SYSTEM_PROCESS_TRUST_LABEL_ACE_TYPE = 20;
pub const STOPBITS_20 = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 4) else @as(WORD, 4);
pub const PRF_CLIENT = c_long(4);
pub const GCS_COMPREADCLAUSE = 4;
pub const LOCALE_SSHORTESTDAYNAME5 = 100;
pub const ERROR_DS_EXISTING_AD_CHILD_NC = c_long(8613);
pub const PROCESS_HEAP_SEG_ALLOC = 8;
pub const CONTEXT_E_LAST = c_long(2147803183);
pub const ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = c_long(8503);
pub const ERROR_QUOTA_ACTIVITY = c_long(810);
pub const InterlockedIncrementAcquire16 = _InterlockedIncrement16;
pub const PRODUCT_AZURE_SERVER_CORE = 168;
pub const GID_PRESSANDTAP = 7;
pub const PRODUCT_DATACENTER_SERVER_CORE_V = 39;
pub const WS_SYSMENU = c_long(524288);
pub const MDM_BEARERMODE_ANALOG = 0;
pub const MDM_V120_ML_DEFAULT = 0;
pub const VIF_DIFFLANG = c_long(8);
pub const PENVISUALIZATION_DOUBLETAP = 2;
pub const DC_TRUETYPE = 15;
pub const PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_RESERVED = if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 16) else if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 16) else c_uint(3)(i64 << 16);
pub const _MSC_FULL_VER = 192227905;
pub const IMAGE_REL_M32R_REFLO = 10;
pub const MUI_QUERY_RESOURCE_TYPES = 8;
pub const SE_LEARNING_MODE_FLAG_PERMISSIVE = 1;
pub const PBT_APMQUERYSTANDBYFAILED = 3;
pub const IMAGE_SCN_MEM_WRITE = 2147483648;
pub const ERROR_PATCH_PACKAGE_INVALID = c_long(1636);
pub const C2_WHITESPACE = 10;
pub const SERVICE_USER_DEFINED_CONTROL = 256;
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_UNAVAILABLE = c_long(369);
pub const __int3264 = __int64;
pub const TAPE_SHORT_FILEMARKS = c_long(2);
pub const ERROR_CORRUPT_LOG_UNAVAILABLE = c_long(796);
pub const RPC_S_UNSUPPORTED_TYPE = c_long(1732);
pub const SM_STARTER = 88;
pub const InterlockedDecrement = _InterlockedDecrement;
pub const MWMO_ALERTABLE = 2;
pub const ERROR_STREAM_MINIVERSION_NOT_FOUND = c_long(6808);
pub const ERROR_SET_POWER_STATE_FAILED = c_long(1141);
pub const _Analysis_assume_section_unlocked_ = name;
pub const SetVolumeLabel = SetVolumeLabelA;
pub const IMAGE_SYM_CLASS_FILE = 103;
pub const ERROR_ELEVATION_REQUIRED = c_long(740);
pub const WM_DWMNCRENDERINGCHANGED = 799;
pub const KEY_SET_VALUE = 2;
pub const BS_INDEXED = 4;
pub const _CRT_PACKING = 8;
pub const ERROR_INVALID_PORT_ATTRIBUTES = c_long(545);
pub const ERROR_OFFLOAD_WRITE_FILE_NOT_SUPPORTED = c_long(4443);
pub const MB_NOFOCUS = c_long(32768);
pub const IMAGE_ARCHIVE_HYBRIDMAP_MEMBER = "/<HYBRIDMAP>/   ";
pub const DMPAPER_JENV_KAKU2 = 71;
pub const WN_WINDOWS_ERROR = ERROR_UNEXP_NET_ERR;
pub const __guarded_by = lock;
pub const GCPCLASS_NEUTRAL = 3;
pub const IMC_SETCOMPOSITIONFONT = 10;
pub const PAN_PROP_EXPANDED = 5;
pub const WM_GESTURE = 281;
pub const ATTR_FIXEDCONVERTED = 5;
pub const FACILITY_BCD = 57;
pub const THREAD_SET_INFORMATION = 32;
pub const ERROR_DS_NOT_SUPPORTED_SORT_ORDER = c_long(8570);
pub const GETVECTORBRUSHSIZE = 27;
pub const LB_FINDSTRINGEXACT = 418;
pub const JOB_OBJECT_CPU_RATE_CONTROL_NOTIFY = 8;
pub const FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;
pub const ERROR_RESOURCE_PROPERTIES_STORED = c_long(5024);
pub const ERROR_CONTROL_C_EXIT = c_long(572);
pub const ERROR_DS_ROOT_MUST_BE_NC = c_long(8301);
pub const DMBIN_LARGEFMT = 10;
pub const RegConnectRegistry = RegConnectRegistryA;
pub const ERROR_DS_NO_REQUESTED_ATTS_FOUND = c_long(8308);
pub const VP_FLAGS_OVERSCAN = 8;
pub const EVENTLOG_PAIRED_EVENT_ACTIVE = 8;
pub const FACILITY_HTTP = 25;
pub const IMAGE_GUARD_CFW_INSTRUMENTED = 512;
pub const ERROR_SXS_DUPLICATE_CLSID = c_long(14023);
pub const ERROR_UNKNOWN_COMPONENT = c_long(1607);
pub const APPCOMMAND_LAUNCH_MAIL = 15;
pub const ERROR_DS_NAME_ERROR_NOT_UNIQUE = c_long(8471);
pub const WSAEINVALIDPROCTABLE = c_long(10104);
pub const TAPE_DRIVE_PADDING = 262144;
pub const SWP_NOCOPYBITS = 256;
pub const JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256;
pub const ERROR_LIBRARY_OFFLINE = c_long(4305);
pub const SLE_WARNING = 3;
pub const EXCEPTION_ARRAY_BOUNDS_EXCEEDED = STATUS_ARRAY_BOUNDS_EXCEEDED;
pub const IMAGE_REL_EBC_ADDR32NB = 1;
pub const GetClassInfoEx = GetClassInfoExA;
pub const PF_ARM_VFP_32_REGISTERS_AVAILABLE = 18;
pub const __readableTo = extent;
pub const VOID = void;
pub const CONSOLE_SELECTION_IN_PROGRESS = 1;
pub const FACILITY_CERT = 11;
pub const ERROR_DS_EXISTS_IN_MUST_HAVE = c_long(8385);
pub const RegQueryMultipleValues = RegQueryMultipleValuesA;
pub const PWR_SUSPENDREQUEST = 1;
pub const WNNC_NET_NETWARE = 196608;
pub const IMAGE_REL_CEF_TOKEN = 6;
pub const __useHeader = _Use_decl_anno_impl_;
pub const __releases_shared_lock = lock;
pub const __inner_adt_transfer_prop = arg;
pub const ERROR_SXS_INVALID_ASSEMBLY_IDENTITY_ATTRIBUTE = c_long(14017);
pub const LANG_KONKANI = 87;
pub const POWER_DEVICE_IDLE_POLICY_CONSERVATIVE = 1;
pub const FACILITY_USERMODE_LICENSING = 234;
pub const DCBA_FACEDOWNRIGHT = 259;
pub const SPI_GETFOCUSBORDERHEIGHT = 8208;
pub const PAN_LETT_OBLIQUE_CONTACT = 9;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const _Memory_origin_ = context;
pub const ERROR_TS_VIDEO_SUBSYSTEM_ERROR = c_long(7070);
pub const ERROR_MARSHALL_OVERFLOW = c_long(603);
pub const DNS_ERROR_NEED_SECONDARY_ADDRESSES = c_long(9614);
pub const PFD_DIRECT3D_ACCELERATED = 16384;
pub const CP_MACCP = 2;
pub const MEM_EXTENDED_PARAMETER_NONPAGED_HUGE = 16;
pub const _Acquires_lock_ = lock;
pub const SERVICE_LAUNCH_PROTECTED_WINDOWS_LIGHT = 2;
pub const DNS_ERROR_UNKNOWN_RECORD_TYPE = c_long(9704);
pub const DM_DUPLEX = c_long(4096);
pub const ENABLE_ECHO_INPUT = 4;
pub const WM_SETFOCUS = 7;
pub const NO_PROPAGATE_INHERIT_ACE = 4;
pub const ERROR_LOST_WRITEBEHIND_DATA_NETWORK_SERVER_ERROR = c_long(789);
pub const UNW_FLAG_NHANDLER = 0;
pub const LOCALE_SCOUNTRY = LOCALE_SLOCALIZEDCOUNTRYNAME;
pub const EMR_SETWINDOWEXTEX = 9;
pub const __SIZE_FMTx__ = "llx";
pub const EMR_SETSTRETCHBLTMODE = 21;
pub const TAPE_DRIVE_TAPE_REMAINING = 512;
pub const ERROR_MCA_INVALID_CAPABILITIES_STRING = c_long(15200);
pub const EM_SETTABSTOPS = 203;
pub const PAN_ARMSTYLE_INDEX = 6;
pub const VK_LAUNCH_APP2 = 183;
pub const EM_SETIMESTATUS = 216;
pub const EM_ENABLEFEATURE = 218;
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = c_long(8495);
pub const EMR_EXTCREATEFONTINDIRECTW = 82;
pub const ERROR_NO_IMPERSONATION_TOKEN = c_long(1309);
pub const PROCESSOR_ARCHITECTURE_ARM32_ON_WIN64 = 13;
pub const POINTER_SIGNED = __sptr;
pub const ERROR_FIRMWARE_UPDATED = c_long(728);
pub const META_PAINTREGION = 299;
pub const DT_LEFT = 0;
pub const ERROR_DS_DRA_DB_ERROR = c_long(8451);
pub const VK_NUMPAD5 = 101;
pub const GCF_INCLUDE_ANCESTORS = 1;
pub const HS_API_MAX = 12;
pub const CB_SETEDITSEL = 322;
pub const PDC_MAPPING_CHANGE = 256;
pub const _Guarded_by_ = lock;
pub const WM_TIMER = 275;
pub const __llvm__ = 1;
pub const WNNC_NET_AURISTOR_FS = 4587520;
pub const __UINT_FAST64_MAX__ = c_ulonglong(18446744073709551615);
pub const ERROR_EVENT_PENDING = c_long(711);
pub const FILE_ENCRYPTABLE = 0;
pub const SC_GROUP_IDENTIFIERA = 43;
pub const CBS_SIMPLE = c_long(1);
pub const ERROR_NO_PROC_SLOTS = c_long(89);
pub const SECURITY_DYNAMIC_TRACKING = TRUE;
pub const SendDlgItemMessage = SendDlgItemMessageA;
pub const FILE_FLAG_RANDOM_ACCESS = 268435456;
pub const INVALID_ATOM = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ATOM, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ATOM, 0) else @as(ATOM, 0);
pub const SDC_VIRTUAL_MODE_AWARE = 32768;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;
pub const LB_SETITEMDATA = 410;
pub const ERROR_LOG_CLIENT_NOT_REGISTERED = c_long(6637);
pub const ERROR_SXS_MANIFEST_FORMAT_ERROR = c_long(14004);
pub const WM_MDISETMENU = 560;
pub const HBMMENU_POPUP_MINIMIZE = if (@typeInfo(@TypeOf(11)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 11) else if (@typeInfo(@TypeOf(11)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 11) else @as(HBITMAP, 11);
pub const RESOURCETYPE_RESERVED = 8;
pub const __INT32_MAX__ = 2147483647;
pub const PFD_UNDERLAY_PLANE = -1;
pub const __source_code_content = typ;
pub const ERROR_NO_SECRETS = c_long(8620);
pub const STATUS_TIMEOUT = if (@typeInfo(@TypeOf(c_long(258))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(258)) else if (@typeInfo(@TypeOf(c_long(258))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(258)) else @as(DWORD, c_long(258));
pub const ERROR_DS_SEC_DESC_TOO_SHORT = c_long(8353);
pub const CS_E_LAST = c_long(2147746159);
pub const HC_SKIP = 2;
pub const RPC_S_INTERFACE_NOT_FOUND = c_long(1759);
pub const MIIM_STATE = 1;
pub const DMPAPER_FANFOLD_STD_GERMAN = 40;
pub const InterlockedCompareExchangeAcquire64 = InterlockedCompareExchange64;
pub const WM_NCPOINTERUPDATE = 577;
pub const CAL_SABBREVMONTHNAME3 = 36;
pub const IMAGE_REL_ALPHA_ABSOLUTE = 0;
pub const CREATE_BREAKAWAY_FROM_JOB = 16777216;
pub const LB_GETCURSEL = 392;
pub const ERROR_GUID_SUBSTITUTION_MADE = c_long(680);
pub const SUBLANG_SPANISH_MODERN = 3;
pub const EMR_WIDENPATH = 66;
pub const DNS_ERROR_RESPONSE_CODES_BASE = 9000;
pub const IDH_GENERIC_HELP_BUTTON = 28442;
pub const PRODUCT_CORE_CONNECTED_COUNTRYSPECIFIC = 116;
pub const SPI_SETDRAGWIDTH = 76;
pub const REG_QWORD = c_ulong(11);
pub const ERROR_OFFLOAD_READ_FILE_NOT_SUPPORTED = c_long(4442);
pub const CLOSECHANNEL = 4112;
pub const LOCALE_SSHORTESTDAYNAME6 = 101;
pub const TOUCH_MASK_CONTACTAREA = 1;
pub const SERVICE_PAUSE_CONTINUE = 64;
pub const FACILITY_USERMODE_VOLSNAP = 130;
pub const LCMAP_HIRAGANA = 1048576;
pub const EVENT_UIA_PROPID_START = 29952;
pub const ERROR_BAD_REM_ADAP = c_long(60);
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_ON = 1 << 16;
pub const SBM_GETSCROLLINFO = 234;
pub const FILE_FLAG_DELETE_ON_CLOSE = 67108864;
pub const EMARCH_ENC_I17_IMM41c_SIZE_X = 23;
pub const EMR_POLYBEZIERTO16 = 88;
pub const GR_GDIOBJECTS = 0;
pub const LOCALE_ITIME = 35;
pub const SYNCHRONIZE = c_long(1048576);
pub const RTL_CORRELATION_VECTOR_V1_LENGTH = 64;
pub const DDL_SYSTEM = 4;
pub const NUMMARKERS = 20;
pub const SUBLANG_MALAYALAM_INDIA = 1;
pub const DIALOPTION_QUIET = 128;
pub const CBS_DROPDOWN = c_long(2);
pub const STRICT = 1;
pub const JOB_OBJECT_LIMIT_JOB_MEMORY_HIGH = JOB_OBJECT_LIMIT_JOB_MEMORY;
pub const DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE = c_long(9121);
pub const SC_CLOSE = 61536;
pub const PAN_LETT_NORMAL_SQUARE = 8;
pub const MB_ICONSTOP = MB_ICONHAND;
pub const S_SERDCC = -7;
pub const PF_SSE_DAZ_MODE_AVAILABLE = 11;
pub const ERROR_DATABASE_FULL = c_long(4314);
pub const PPM_FIRMWARE_TSD = 8192;
pub const DIALOPTION_BILLING = 64;
pub const MARKPARITY = 3;
pub const _WIN32_IE_WIN2KSP3 = _WIN32_IE_IE501;
pub const __FLT16_MIN_10_EXP__ = -13;
pub const PIPE_CLIENT_END = 0;
pub const TMPF_TRUETYPE = 4;
pub const VIF_CANNOTRENAME = c_long(8192);
pub const RPC_S_SERVER_TOO_BUSY = c_long(1723);
pub const FILE_FLAG_SESSION_AWARE = 8388608;
pub const SM_CYCURSOR = 14;
pub const SECURITY_MIN_NEVER_FILTERED = c_long(1000);
pub const IMAGE_FILE_MACHINE_UNKNOWN = 0;
pub const ERROR_CTX_CLIENT_LICENSE_NOT_SET = c_long(7053);
pub const MSGF_USER = 4096;
pub const RDW_NOINTERNALPAINT = 16;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_NOT_ENOUGH_RESOURCES_ON_SOURCE = c_long(5958);
pub const ENABLE_QUICK_EDIT_MODE = 64;
pub const RPC_S_INVALID_OBJECT = c_long(1900);
pub const EV_PERR = 512;
pub const ERROR_PROCESS_MODE_ALREADY_BACKGROUND = c_long(402);
pub const CC_WIDESTYLED = 64;
pub const CM_SERVICE_WINPE_BOOT_LOAD = 128;
pub const VK_RWIN = 92;
pub const BitTestAndComplement = _bittestandcomplement;
pub const EXCEPTION_FLT_DIVIDE_BY_ZERO = STATUS_FLOAT_DIVIDE_BY_ZERO;
pub const GetFullPathNameTransacted = GetFullPathNameTransactedA;
pub const LB_GETTOPINDEX = 398;
pub const IMR_RECONVERTSTRING = 4;
pub const MB_DEFMASK = c_long(3840);
pub const ILLUMINANT_TUNGSTEN = ILLUMINANT_A;
pub const MFT_RIGHTJUSTIFY = MF_RIGHTJUSTIFY;
pub const QDI_STRETCHDIB = 8;
pub const ERROR_DS_ADMIN_LIMIT_EXCEEDED = c_long(8228);
pub const _Readable_elements_impl_ = size;
pub const MOUSEEVENTF_MIDDLEDOWN = 32;
pub const PBT_APMRESUMESUSPEND = 7;
pub const QDC_VIRTUAL_MODE_AWARE = 16;
pub const IMAGE_FILE_MACHINE_TARGET_HOST = 1;
pub const IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;
pub const COPY_FILE_RESUME_FROM_PAUSE = 16384;
pub const __UINT16_FMTo__ = "ho";
pub const HCF_CONFIRMHOTKEY = 8;
pub const ClearEventLog = ClearEventLogA;
pub const VK_ICO_00 = 228;
pub const _Notvalid_ = _Notvalid_impl_;
pub const COLOR_MENU = 4;
pub const PF_FLOATING_POINT_EMULATED = 1;
pub const WM_POINTERLEAVE = 586;
pub const VK_BROWSER_FAVORITES = 171;
pub const IME_ESC_IME_NAME = 4102;
pub const HC_NOREM = HC_NOREMOVE;
pub const WN_NOT_SUPPORTED = ERROR_NOT_SUPPORTED;
pub const CFS_DEFAULT = 0;
pub const OBJID_VSCROLL = if (@typeInfo(@TypeOf(4294967291)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967291) else if (@typeInfo(@TypeOf(4294967291)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967291) else @as(LONG, 4294967291);
pub const HELP_PARTIALKEY = c_long(261);
pub const WM_KEYFIRST = 256;
pub const SERVICE_CONTROL_TIMECHANGE = 16;
pub const __UINTPTR_FMTx__ = "llx";
pub const PROCESSOR_MOTOROLA_821 = 821;
pub const IME_CMODE_HANJACONVERT = 64;
pub const IsBadStringPtr = IsBadStringPtrA;
pub const SMB_CCF_APP_INSTANCE_EA_NAME = "ClusteredApplicationInstance";
pub const VFFF_ISSHAREDFILE = 1;
pub const EROFS = 30;
pub const LANG_BENGALI = 69;
pub const PROCESSOR_OPTIL = 18767;
pub const RotateLeft16 = _rotl16;
pub const DISPLAYCONFIG_MAXPATH = 1024;
pub const ERROR_DS_DRA_REF_NOT_FOUND = c_long(8449);
pub const SETDIBSCALING = 32;
pub const OpenEventLog = OpenEventLogA;
pub const ERROR_CTX_LICENSE_CLIENT_INVALID = c_long(7055);
pub const MDM_PROTOCOLID_GPRS = 8;
pub const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY = 128;
pub const COPY_FILE_NO_OFFLOAD = 262144;
pub const ENOTTY = 25;
pub const MUI_LIP_LANGUAGE = 4;
pub const VFT2_DRV_DISPLAY = c_long(4);
pub const VK_OEM_PA1 = 235;
pub const EMARCH_ENC_I17_IMM41c_VAL_POS_X = 40;
pub const __analysis_assert = e;
pub const FAST_FAIL_GUARD_SS_FAILURE = 44;
pub const LOGON_ZERO_PASSWORD_BUFFER = 2147483648;
pub const SPI_SETSCREENSAVESECURE = 119;
pub const FE_FONTSMOOTHINGCLEARTYPE = 2;
pub const __inexpressible_readableTo = size;
pub const VK_NUMPAD2 = 98;
pub const WM_ENTERIDLE = 289;
pub const PBT_APMRESUMESTANDBY = 8;
pub const ERROR_PRI_MERGE_BUNDLE_PACKAGES_NOT_ALLOWED = c_long(15155);
pub const ERROR_EVT_FILTER_PARSEERR = c_long(15019);
pub const __UINT_FAST32_FMTo__ = "o";
pub const QS_POSTMESSAGE = 8;
pub const ERROR_DS_SOURCE_DOMAIN_IN_FOREST = c_long(8534);
pub const GW_CHILD = 5;
pub const EXCEPTION_COLLIDED_UNWIND = 64;
pub const VK_LAUNCH_MEDIA_SELECT = 181;
pub const TAPE_DRIVE_ERASE_LONG = 32;
pub const __out_ecount_nz_opt = size;
pub const EMR_SETMAPMODE = 17;
pub const ERROR_IPSEC_IKE_INVALID_CERT_TYPE = c_long(13819);
pub const PAN_MIDLINE_LOW_TRIMMED = 11;
pub const RPC_S_INVALID_STRING_UUID = c_long(1705);
pub const ERROR_IPSEC_DEFAULT_QM_POLICY_NOT_FOUND = c_long(13015);
pub const GW_HWNDNEXT = 2;
pub const SPI_GETBLOCKSENDINPUTRESETS = 4134;
pub const ERROR_PARTIAL_COPY = c_long(299);
pub const InterlockedIncrementRelease64 = _InterlockedIncrement64;
pub const PRF_CHILDREN = c_long(16);
pub const CLASSFACTORY_S_FIRST = c_long(262416);
pub const CF_BITMAP = 2;
pub const DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE = c_long(9993);
pub const EndUpdateResource = EndUpdateResourceA;
pub const ENOTCONN = 126;
pub const POINTER_FLAG_INCONTACT = 4;
pub const ERROR_DS_NC_STILL_HAS_DSAS = c_long(8546);
pub const DNS_ERROR_RRL_NOT_ENABLED = c_long(9911);
pub const CBR_1200 = 1200;
pub const DMTT_BITMAP = 1;
pub const OBJ_DC = 3;
pub const ERROR_SXS_IDENTITIES_DIFFERENT = c_long(14102);
pub const DCX_EXCLUDEUPDATE = c_long(256);
pub const DM_UPDATE = 1;
pub const SM_CXDLGFRAME = 7;
pub const APPCOMMAND_LAUNCH_APP1 = 17;
pub const DC_MEDIAREADY = 29;
pub const ChangeMenu = ChangeMenuA;
pub const PFD_DRAW_TO_WINDOW = 4;
pub const VK_GAMEPAD_DPAD_RIGHT = 206;
pub const ERROR_DS_INVALID_GROUP_TYPE = c_long(8513);
pub const LOCALE_SSHORTESTDAYNAME7 = 102;
pub const SC_MANAGER_MODIFY_BOOT_CONFIG = 32;
pub const ERROR_IPSEC_MM_FILTER_NOT_FOUND = c_long(13007);
pub const SM_CXDRAG = 68;
pub const GetCharABCWidths = GetCharABCWidthsA;
pub const OLE_S_FIRST = if (@typeInfo(@TypeOf(c_long(262144))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(262144)) else if (@typeInfo(@TypeOf(c_long(262144))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(262144)) else @as(HRESULT, c_long(262144));
pub const DMTT_DOWNLOAD = 2;
pub const VK_PROCESSKEY = 229;
pub const ERROR_EFS_DISABLED = c_long(6015);
pub const WM_MDIGETACTIVE = 553;
pub const NONZEROLPTR = LMEM_FIXED;
pub const GetTextExtentExPoint = GetTextExtentExPointA;
pub const IMAGE_REL_ALPHA_LITERAL = 4;
pub const EMR_CREATEDIBPATTERNBRUSHPT = 94;
pub const BS_LEFT = c_long(256);
pub const BLACK_PEN = 7;
pub const DRAGDROP_S_LAST = c_long(262415);
pub const STATUS_FLOAT_UNDERFLOW = if (@typeInfo(@TypeOf(c_long(3221225619))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225619)) else if (@typeInfo(@TypeOf(c_long(3221225619))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225619)) else @as(DWORD, c_long(3221225619));
pub const DNS_ERROR_NOT_ALLOWED_ON_ZSK = c_long(9118);
pub const IMAGE_FILE_32BIT_MACHINE = 256;
pub const TAPE_QUERY_DEVICE_ERROR_DATA = c_long(4);
pub const MEM_PRIVATE = 131072;
pub const LOCALE_SLOCALIZEDDISPLAYNAME = 2;
pub const MF_REMOVE = c_long(4096);
pub const __failureDefault = x;
pub const WM_SETREDRAW = 11;
pub const IDN_USE_STD3_ASCII_RULES = 2;
pub const EVENT_AIA_START = 40960;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_LABEL_ACE = 2;
pub const RESOURCEDISPLAYTYPE_GENERIC = 0;
pub const DC_PEN = 19;
pub const PSINJECT_SHOWPAGE = 105;
pub const NI_SETCANDIDATE_PAGESTART = 22;
pub const RPI_FLAG_SMB2_SHARECAP_TIMEWARP = 2;
pub const WMSZ_TOP = 3;
pub const EMR_SETPALETTEENTRIES = 50;
pub const _WIN32_IE_WIN2KSP2 = _WIN32_IE_IE501;
pub const LANG_NORWEGIAN = 20;
pub const FILE_WRITE_DATA = 2;
pub const MB_SERVICE_NOTIFICATION = c_long(2097152);
pub const ERROR_DS_DOMAIN_RENAME_IN_PROGRESS = c_long(8612);
pub const IMAGE_REL_SH3_DIRECT32 = 2;
pub const ERROR_DS_ENCODING_ERROR = c_long(8252);
pub const ERROR_BAD_COMMAND = c_long(22);
pub const LC_MARKER = 4;
pub const ERROR_SET_CONTEXT_DENIED = c_long(1660);
pub const IO_REPARSE_TAG_CLOUD_4 = c_long(2415935514);
pub const WM_IME_CHAR = 646;
pub const SHTDN_REASON_MINOR_BLUESCREEN = 15;
pub const InterlockedIncrement64 = _InterlockedIncrement64;
pub const ERROR_QUORUM_RESOURCE = c_long(5020);
pub const FAST_FAIL_INVALID_JUMP_BUFFER = 18;
pub const DMPAPER_A2 = 66;
pub const SUBLANG_PORTUGUESE = 2;
pub const INHERIT_CALLER_PRIORITY = 131072;
pub const ERROR_INVALID_PASSWORD = c_long(86);
pub const SECURITY_VALID_SQOS_FLAGS = 2031616;
pub const THREAD_MODE_BACKGROUND_BEGIN = 65536;
pub const CTRY_LIBYA = 218;
pub const EMARCH_ENC_I17_IMM41b_INST_WORD_X = 1;
pub const LOCALE_SUPPLEMENTAL = 2;
pub const STM_GETIMAGE = 371;
pub const ENDSESSION_CLOSEAPP = 1;
pub const EASTEUROPE_CHARSET = 238;
pub const APPCOMMAND_FIND = 28;
pub const MDM_V120_SPEED_DEFAULT = 0;
pub const LOCALE_SSHORTESTPM = 127;
pub const SERVICE_PAUSE_PENDING = 6;
pub const FAST_FAIL_INVALID_CONTROL_STACK = 47;
pub const PRODUCT_PRO_FOR_EDUCATION = 164;
pub const MOUSEEVENTF_RIGHTUP = 16;
pub const META_POLYLINE = 805;
pub const SECURITY_RDV_GFX_BASE_RID = c_long(91);
pub const EMR_GLSRECORD = 102;
pub const WM_ACTIVATEAPP = 28;
pub const __FLT16_HAS_DENORM__ = 1;
pub const ERROR_GEN_FAILURE = c_long(31);
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const DFCS_SCROLLUP = 0;
pub const PRODUCT_HOLOGRAPHIC = 135;
pub const RPC_S_NOT_ALL_OBJS_UNEXPORTED = c_long(1758);
pub const SM_CYDRAG = 69;
pub const ERROR_EVT_MAX_INSERTS_REACHED = c_long(15031);
pub const PROCESSOR_PERF_PERFORMANCE_PREFERENCE = 255;
pub const RPC_S_ADDRESS_ERROR = c_long(1768);
pub const ERROR_HANDLES_CLOSED = c_long(676);
pub const DNS_ERROR_RECORD_DOES_NOT_EXIST = c_long(9701);
pub const ACCESS_MAX_LEVEL = 4;
pub const MEM_EXTENDED_PARAMETER_ZERO_PAGES_OPTIONAL = 4;
pub const EMSGSIZE = 115;
pub const RID_INPUT = 268435459;
pub const CTRY_BULGARIA = 359;
pub const VK_OEM_PA2 = 236;
pub const WM_XBUTTONDBLCLK = 525;
pub const ACTCTX_FLAG_APPLICATION_NAME_VALID = 32;
pub const PRODUCT_ENTERPRISEGN = 172;
pub const SUBLANG_HINDI_INDIA = 1;
pub const CDS_NORESET = 268435456;
pub const CLIPCAPS = 36;
pub const DC_HASDEFID = 21323;
pub const EnumSystemLanguageGroups = EnumSystemLanguageGroupsA;
pub const FormatMessage = FormatMessageA;
pub const MSGFLT_DISALLOW = 2;
pub const NLS_DBCSCHAR = 65536;
pub const JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128;
pub const WSA_SECURE_HOST_NOT_FOUND = c_long(11032);
pub const SS_GRAYFRAME = c_long(8);
pub const SERVICE_STOP_REASON_MINOR_NETWORK_CONNECTIVITY = 17;
pub const ERROR_DS_SHUTTING_DOWN = c_long(8364);
pub const HCBT_SYSCOMMAND = 8;
pub const VK_NUMPAD3 = 99;
pub const IME_CMODE_NOCONVERSION = 256;
pub const DEVICEFAMILYDEVICEFORM_ALLINONE = 7;
pub const PERFSTATE_POLICY_CHANGE_INCREASE_MAX = PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE;
pub const MB_ICONEXCLAMATION = c_long(48);
pub const MDM_V110_SPEED_38DOT4K = 9;
pub const IMAGE_REL_AMD64_CFG_BR_REX = 21;
pub const ERROR_IPSEC_IKE_UNEXPECTED_MESSAGE_ID = c_long(13888);
pub const IMAGE_SIZEOF_SECTION_HEADER = 40;
pub const WNFMT_MULTILINE = 1;
pub const ERROR_USER_EXISTS = c_long(1316);
pub const RESOURCE_MANAGER_VOLATILE = 1;
pub const ERROR_STORAGE_LOST_DATA_PERSISTENCE = c_long(368);
pub const DNS_WARNING_DOMAIN_UNDELETED = c_long(9716);
pub const RPC_X_WRONG_PIPE_VERSION = c_long(1832);
pub const MAX_DEFAULTCHAR = 2;
pub const ERROR_BIOS_FAILED_TO_CONNECT_INTERRUPT = c_long(585);
pub const HIBERFILE_TYPE_FULL = 2;
pub const CB_ERRSPACE = -2;
pub const X3_D_WH_INST_WORD_POS_X = 24;
pub const SERVICE_CONTROL_PAUSE = 2;
pub const ACCESS_SYSTEM_SECURITY = c_long(16777216);
pub const XSTATE_ALIGN_MASK = if (@typeInfo(@TypeOf(i64 << XSTATE_ALIGN_BIT)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_ALIGN_BIT) else if (@typeInfo(@TypeOf(i64 << XSTATE_ALIGN_BIT)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_ALIGN_BIT) else c_uint(1)(i64 << XSTATE_ALIGN_BIT);
pub const RI_KEY_BREAK = 1;
pub const FACILITY_DIRECTORYSERVICE = 37;
pub const EDS_ROTATEDMODE = 4;
pub const FACILITY_SSPI = 9;
pub const CE_OVERRUN = 2;
pub const ERROR_PATCH_PACKAGE_UNSUPPORTED = c_long(1637);
pub const SM_NETWORK = 63;
pub const PAN_CONTRAST_VERY_LOW = 3;
pub const __FLT_RADIX__ = 2;
pub const TAPE_DRIVE_WRITE_LONG_FMKS = 2281701376;
pub const CAL_SABBREVMONTHNAME1 = 34;
pub const VK_VOLUME_DOWN = 174;
pub const KLF_REPLACELANG = 16;
pub const IMAGE_REL_EBC_SECREL = 4;
pub const WM_EXITMENULOOP = 530;
pub const GCS_COMPREADATTR = 2;
pub const GA_PARENT = 1;
pub const VFT_VXD = c_long(5);
pub const DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE = c_long(9102);
pub const PC_POLYGON = 1;
pub const DPI_AWARENESS_CONTEXT_UNAWARE = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DPI_AWARENESS_CONTEXT, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DPI_AWARENESS_CONTEXT, -1) else @as(DPI_AWARENESS_CONTEXT, -1);
pub const PRODUCT_PRO_FOR_EDUCATION_N = 165;
pub const ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = c_long(8529);
pub const SW_SHOWNOACTIVATE = 4;
pub const SYSTEM_CPU_SET_INFORMATION_ALLOCATED = 2;
pub const WSANO_DATA = c_long(11004);
pub const VK_OEM_NEC_EQUAL = 146;
pub const NLS_ROMAN = 4194304;
pub const ERROR_INVALID_LEVEL = c_long(124);
pub const DNS_ERROR_KSP_NOT_ACCESSIBLE = c_long(9112);
pub const LOCALE_SNAN = 105;
pub const DESKTOP_JOURNALRECORD = c_long(16);
pub const OPEN_EXISTING = 3;
pub const VIF_SHARINGVIOLATION = c_long(1024);
pub const ERROR_DS_DRA_BAD_INSTANCE_TYPE = c_long(8445);
pub const THREAD_PRIORITY_HIGHEST = THREAD_BASE_PRIORITY_MAX;
pub const S_OK = if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(0)) else if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(0)) else @as(HRESULT, c_long(0));
pub const MOD_CONTROL = 2;
pub const DMPAPER_ENV_C65 = 32;
pub const FILE_SUPPORTS_TRANSACTIONS = 2097152;
pub const _CRT_SIZE_MAX = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(size_t, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(size_t, -1) else size_t(-1);
pub const DFCS_FLAT = 16384;
pub const GetLogicalDriveStrings = GetLogicalDriveStringsA;
pub const FACILITY_NAP = 39;
pub const CAL_USE_CP_ACP = LOCALE_USE_CP_ACP;
pub const MDM_SHIFT_PROTOCOLID = 16;
pub const ERROR_CLUSTER_NETWORK_NOT_INTERNAL = c_long(5060);
pub const ERROR_CLUSTER_NODE_ISOLATED = c_long(5984);
pub const IMAGE_ENCLAVE_FLAG_PRIMARY_IMAGE = 1;
pub const SE_SECURITY_DESCRIPTOR_FLAG_NO_ACCESS_FILTER_ACE = 4;
pub const ERROR_DLL_INIT_FAILED = c_long(1114);
pub const SUBLANG_MARATHI_INDIA = 1;
pub const ERROR_IPSEC_BAD_SPI = c_long(13910);
pub const SECURITY_WINRM_ID_RID_COUNT = c_long(6);
pub const PRODUCT_EMBEDDED_E_EVAL = 108;
pub const PRODUCT_CLOUDN = 179;
pub const InterlockedExchangeNoFence = _InterlockedExchange;
pub const WM_INPUT = 255;
pub const WN_NOT_INITIALIZING = ERROR_ALREADY_INITIALIZED;
pub const PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
pub const WM_MOUSEHOVER = 673;
pub const MDMVOL_MEDIUM = 1;
pub const X3_BTYPE_QP_INST_WORD_POS_X = 23;
pub const HSHELL_HIGHBIT = 32768;
pub const WM_HELP = 83;
pub const THREAD_BASE_PRIORITY_LOWRT = 15;
pub const DMPAPER_PENV_5_ROTATED = 113;
pub const ERROR_DYNLINK_FROM_INVALID_RING = c_long(196);
pub const DMPAPER_JENV_CHOU3_ROTATED = 86;
pub const ERROR_ACCOUNT_DISABLED = c_long(1331);
pub const VER_LESS = 4;
pub const ERROR_WAS_LOCKED = c_long(717);
pub const WS_EX_NOREDIRECTIONBITMAP = c_long(2097152);
pub const WRITE_WATCH_FLAG_RESET = 1;
pub const SERVICE_PKG_SERVICE = 512;
pub const ENABLE_INSERT_MODE = 32;
pub const ERROR_DS_PARENT_IS_AN_ALIAS = c_long(8330);
pub const BF_FLAT = 16384;
pub const RPC_S_SEND_INCOMPLETE = c_long(1913);
pub const COLOR_3DLIGHT = 22;
pub const OBJID_SOUND = if (@typeInfo(@TypeOf(4294967285)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967285) else if (@typeInfo(@TypeOf(4294967285)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967285) else @as(LONG, 4294967285);
pub const HCF_AVAILABLE = 2;
pub const CreateFileMapping = CreateFileMappingA;
pub const GetUserName = GetUserNameA;
pub const ERROR_IPSEC_IKE_TOO_MANY_FILTERS = c_long(13896);
pub const EVENT_CONSOLE_START_APPLICATION = 16390;
pub const CTRY_MEXICO = 52;
pub const DC_STAPLE = 30;
pub const PSINJECT_DOCNEEDEDRES = 5;
pub const DMDO_270 = 3;
pub const IMAGE_REL_IA64_PCREL21F = 8;
pub const SPI_GETSERIALKEYS = 62;
pub const SetDefaultCommConfig = SetDefaultCommConfigA;
pub const IO_REPARSE_TAG_CLOUD_5 = c_long(2415939610);
pub const __byte_writableTo = size;
pub const OF_SHARE_DENY_READ = 48;
pub const LCMAP_TITLECASE = 768;
pub const FACILITY_DXGI = 2170;
pub const SPI_SETSHOWSOUNDS = 57;
pub const ERROR_SXS_TRANSACTION_CLOSURE_INCOMPLETE = c_long(14107);
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_ALWAYS_OFF = 2 << 16;
pub const SC_MAXIMIZE = 61488;
pub const ERROR_DELETING_EXISTING_APPLICATIONDATA_STORE_FAILED = c_long(15621);
pub const ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = c_long(1435);
pub const FILE_ATTRIBUTE_ARCHIVE = 32;
pub const PAN_STROKE_GRADUAL_HORZ = 5;
pub const DMPAPER_A3 = 8;
pub const ERROR_EAS_NOT_SUPPORTED = c_long(282);
pub const ERROR_NO_LOG_SPACE = c_long(1019);
pub const BF_SOFT = 4096;
pub const INVALID_FILE_ATTRIBUTES = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const VK_BROWSER_FORWARD = 167;
pub const ERROR_PROFILE_DOES_NOT_MATCH_DEVICE = c_long(2023);
pub const ESB_DISABLE_LTUP = ESB_DISABLE_LEFT;
pub const DEVICEFAMILYINFOENUM_7067329 = 15;
pub const AW_SLIDE = 262144;
pub const ERROR_WAIT_FOR_OPLOCK = c_long(765);
pub const RPC_X_PIPE_EMPTY = c_long(1918);
pub const ERROR_NO_WORK_DONE = c_long(235);
pub const META_SELECTPALETTE = 564;
pub const PROTECTION_LEVEL_AUTHENTICODE = 7;
pub const DOMAIN_ALIAS_RID_RDS_ENDPOINT_SERVERS = c_long(576);
pub const DMPAPER_FANFOLD_US = 39;
pub const SUBLANG_SPANISH_PUERTO_RICO = 20;
pub const SHTDN_REASON_MINOR_NETWORKCARD = 9;
pub const VK_PLAY = 250;
pub const DMPAPER_A4_ROTATED = 77;
pub const TOUCH_MASK_NONE = 0;
pub const DISPLAYCONFIG_PATH_ACTIVE = 1;
pub const MAPVK_VK_TO_VSC = 0;
pub const SM_ARRANGE = 56;
pub const ERROR_CTX_CONSOLE_DISCONNECT = c_long(7041);
pub const FACILITY_USERMODE_SDBUS = 2305;
pub const VIFF_FORCEINSTALL = 1;
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub const ERROR_DIR_NOT_ROOT = c_long(144);
pub const VK_F7 = 118;
pub const __acquires_exclusive_lock = lock;
pub const WINAPI_PARTITION_PHONE = WINAPI_PARTITION_PHONE_APP;
pub const STATE_SYSTEM_READONLY = 64;
pub const WM_UNINITMENUPOPUP = 293;
pub const ERROR_FAIL_REBOOT_REQUIRED = c_long(3017);
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_SID = 5;
pub const RDW_NOERASE = 32;
pub const __AVX__ = 1;
pub const SPI_GETMOUSEDRAGOUTTHRESHOLD = 132;
pub const SW_OTHERUNZOOM = 4;
pub const IMAGE_SCN_ALIGN_2BYTES = 2097152;
pub const ERROR_DISCARDED = c_long(157);
pub const VK_OEM_PA3 = 237;
pub const EWOULDBLOCK = 140;
pub const NI_OPENCANDIDATE = 16;
pub const ReadPMC = __readpmc;
pub const ERROR_DELETE_PENDING = c_long(303);
pub const MA_ACTIVATEANDEAT = 2;
pub const SECURITY_BUILTIN_CAPABILITY_RID_COUNT = c_long(2);
pub const CURRENT_IMPORT_REDIRECTION_VERSION = 1;
pub const SHTDN_REASON_MINOR_ENVIRONMENT = 12;
pub const ERROR_VOLUME_DIRTY = c_long(6851);
pub const ERROR_MRM_NO_MATCH_OR_DEFAULT_CANDIDATE = c_long(15116);
pub const RESOURCEMANAGER_REGISTER_PROTOCOL = 32;
pub const ERROR_SXS_RELEASE_ACTIVATION_CONTEXT = c_long(14088);
pub const VK_NUMPAD0 = 96;
pub const ALERT_SYSTEM_ERROR = 3;
pub const RPC_X_SS_HANDLES_MISMATCH = c_long(1778);
pub const WM_POINTERDEVICEINRANGE = 569;
pub const RegReplaceKey = RegReplaceKeyA;
pub const StartDoc = StartDocA;
pub const EN_ERRSPACE = 1280;
pub const EVENT_E_LAST = c_long(2147746335);
pub const SUBLANG_AFRIKAANS_SOUTH_AFRICA = 1;
pub const CTLCOLOR_STATIC = 6;
pub const VOS__PM16 = c_long(2);
pub const AccessCheckAndAuditAlarm = AccessCheckAndAuditAlarmA;
pub const ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = c_long(5067);
pub const BS_DIBPATTERNPT = 6;
pub const PRODUCT_STANDARD_SERVER_SOLUTIONS_CORE = 53;
pub const EnumDisplayDevices = EnumDisplayDevicesA;
pub const WM_MENUDRAG = 291;
pub const ERROR_NOT_A_REPARSE_POINT = c_long(4390);
pub const DCB_DISABLE = 8;
pub const SPI_SETFONTSMOOTHINGCONTRAST = 8205;
pub const SPI_SETSYSTEMLANGUAGEBAR = 4177;
pub const IMAGE_REL_BASED_HIGHLOW = 3;
pub const CBN_SELENDCANCEL = 10;
pub const ERROR_TRUSTED_RELATIONSHIP_FAILURE = c_long(1789);
pub const __SSE3__ = 1;
pub const VP_CP_CMD_CHANGE = 4;
pub const BACKUP_EA_DATA = 2;
pub const ERROR_ALL_NODES_NOT_AVAILABLE = c_long(5037);
pub const __UINT_FAST32_FMTu__ = "u";
pub const ERROR_TAG_NOT_PRESENT = c_long(2013);
pub const FILE_SYSTEM_DIR = 4;
pub const EV_RLSD = 32;
pub const ObjectCloseAuditAlarm = ObjectCloseAuditAlarmA;
pub const CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 33554432;
pub const WM_GETDLGCODE = 135;
pub const CALLBACK_CHUNK_FINISHED = 0;
pub const MK_XBUTTON2 = 64;
pub const CLRBREAK = 9;
pub const BROADCAST_QUERY_DENY = 1112363332;
pub const SPI_SETCONTACTVISUALIZATION = 8217;
pub const HTMINBUTTON = 8;
pub const WSA_QOS_EFLOWCOUNT = c_long(11023);
pub const ERROR_WRITE_FAULT = c_long(29);
pub const ERROR_NO_EVENT_PAIR = c_long(580);
pub const SECURITY_MANDATORY_MAXIMUM_USER_RID = SECURITY_MANDATORY_SYSTEM_RID;
pub const CAL_SABBREVMONTHNAME6 = 39;
pub const SUBLANG_KONKANI_INDIA = 1;
pub const POWER_REQUEST_CONTEXT_VERSION = DIAGNOSTIC_REASON_VERSION;
pub const ERROR_DS_EXISTS_IN_SUB_CLS = c_long(8394);
pub const WNNC_NET_DCE = 1638400;
pub const MDMVOLFLAG_LOW = 1;
pub const __WCHAR_UNSIGNED__ = 1;
pub const HELP_SETPOPUP_POS = 13;
pub const STATUS_FLOAT_DENORMAL_OPERAND = if (@typeInfo(@TypeOf(c_long(3221225613))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225613)) else if (@typeInfo(@TypeOf(c_long(3221225613))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225613)) else @as(DWORD, c_long(3221225613));
pub const SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;
pub const HCBT_DESTROYWND = 4;
pub const DMPAPER_10X11 = 45;
pub const POINTER_FLAG_SECONDBUTTON = 32;
pub const GCLP_HICON = -14;
pub const ERROR_STATE_SET_VERSION_FAILED = c_long(15802);
pub const LOCALE_SSHORTESTDAYNAME1 = 96;
pub const LBN_SETFOCUS = 4;
pub const IS_TEXT_UNICODE_STATISTICS = 2;
pub const ERROR_SXS_XML_E_BADXMLCASE = c_long(14069);
pub const CF_MAX = 18;
pub const NLS_IME_DISABLE = 536870912;
pub const PC_WIDESTYLED = 64;
pub const OF_DELETE = 512;
pub const DNS_ERROR_INVALID_ZONESCOPE_NAME = c_long(9954);
pub const DMPAPER_PENV_4_ROTATED = 112;
pub const LANG_MALAYALAM = 76;
pub const CreateDialog = CreateDialogA;
pub const __UINT64_C_SUFFIX__ = ULL;
pub const EM_SETPASSWORDCHAR = 204;
pub const ERROR_CLUSTER_JOIN_IN_PROGRESS = c_long(5041);
pub const PAN_XHEIGHT_DUCKING_STD = 6;
pub const LANG_SYRIAC = 90;
pub const IDH_OK = 28443;
pub const ERROR_CTX_TD_ERROR = c_long(7017);
pub const HELP_TCARD = 32768;
pub const ERROR_CLASS_DOES_NOT_EXIST = c_long(1411);
pub const ERROR_CTX_WINSTATION_ACCESS_DENIED = c_long(7045);
pub const PRODUCT_ENTERPRISE = 4;
pub const CTRY_ALBANIA = 355;
pub const ERROR_REPARSE_TAG_MISMATCH = c_long(4394);
pub const TOUCHEVENTF_UP = 4;
pub const TOKEN_ASSIGN_PRIMARY = 1;
pub const ACCESS_REASON_EXDATA_MASK = 2130706432;
pub const WM_COMPACTING = 65;
pub const STANDARD_RIGHTS_REQUIRED = c_long(983040);
pub const DATE_RTLREADING = 32;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_CERT = c_long(13835);
pub const IME_PROP_SPECIAL_UI = 131072;
pub const _WIN32_IE_WIN2KSP4 = _WIN32_IE_IE501;
pub const SYNCHRONIZATION_BARRIER_FLAGS_NO_DELETE = 4;
pub const IMAGE_REL_M32R_PAIR = 11;
pub const LANG_YI = 120;
pub const EPSPRINTING = 33;
pub const LOCALE_SPECIFICDATA = 32;
pub const WriteLongPtrRaw = WriteRaw64;
pub const SWP_NOSENDCHANGING = 1024;
pub const ERROR_LOG_METADATA_INCONSISTENT = c_long(6614);
pub const ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = c_long(5078);
pub const ERROR_INVALID_OPERATION = c_long(4317);
pub const SPI_GETSYSTEMLANGUAGEBAR = 4176;
pub const MAXSIZE_T = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, 0) else @as(SIZE_T, 0))) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, 0) else @as(SIZE_T, 0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, 0) else @as(SIZE_T, 0))) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, 0) else @as(SIZE_T, 0)) else @as(SIZE_T, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(SIZE_T, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(SIZE_T, 0) else @as(SIZE_T, 0));
pub const IMAGE_SCN_GPREL = 32768;
pub const TRANSACTION_DO_NOT_PROMOTE = 1;
pub const SORT_HUNGARIAN_DEFAULT = 0;
pub const SP_SERIALCOMM = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const IO_REPARSE_TAG_CLOUD_6 = c_long(2415943706);
pub const WS_EX_CONTEXTHELP = c_long(1024);
pub const HKL_PREV = 0;
pub const FILE_ATTRIBUTE_INTEGRITY_STREAM = 32768;
pub const SPI_SETMOUSEHOVERWIDTH = 99;
pub const VK_RETURN = 13;
pub const TRANSACTIONMANAGER_RECOVER = 4;
pub const LB_GETTEXTLEN = 394;
pub const SW_MINIMIZE = 6;
pub const REG_STANDARD_FORMAT = 1;
pub const __INT_FAST32_FMTd__ = "d";
pub const DMPAPER_A4 = 9;
pub const ERROR_WMI_INVALID_REGINFO = c_long(4211);
pub const PRODUCT_STORAGE_WORKGROUP_SERVER = 22;
pub const WSA_QOS_BAD_OBJECT = c_long(11013);
pub const ERROR_CLUSTER_INVALID_NODE_WEIGHT = c_long(5954);
pub const RPC_S_NOTHING_TO_EXPORT = c_long(1754);
pub const GWLP_ID = -12;
pub const RI_KEY_TERMSRV_SHADOW = 16;
pub const FAST_FAIL_INVALID_FIBER_SWITCH = 12;
pub const SEVERITY_ERROR = 1;
pub const BS_RADIOBUTTON = c_long(4);
pub const ERROR_DS_UPN_VALUE_NOT_UNIQUE_IN_FOREST = c_long(8648);
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_MERGE = c_long(15141);
pub const PRODUCT_CLUSTER_SERVER = 18;
pub const STATUS_INTEGER_DIVIDE_BY_ZERO = if (@typeInfo(@TypeOf(c_long(3221225620))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225620)) else if (@typeInfo(@TypeOf(c_long(3221225620))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225620)) else @as(DWORD, c_long(3221225620));
pub const __INT_LEAST64_MAX__ = c_longlong(9223372036854775807);
pub const FreeEnvironmentStrings = FreeEnvironmentStringsA;
pub const PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_MASK = if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 44) else if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 44) else c_uint(3)(i64 << 44);
pub const FACILITY_STATEREPOSITORY = 103;
pub const MemoryFence = _mm_mfence;
pub const WN_NOT_LOGGED_ON = ERROR_NOT_LOGGED_ON;
pub const SUBLANG_BRETON_FRANCE = 1;
pub const WM_GETTEXTLENGTH = 14;
pub const InterlockedXor = _InterlockedXor;
pub const RPC_S_INVALID_STRING_BINDING = c_long(1700);
pub const ERROR_DS_NAME_ERROR_TRUST_REFERRAL = c_long(8583);
pub const ERROR_IPSEC_IKE_SRVACQFAIL = c_long(13855);
pub const VK_F6 = 117;
pub const JOB_OBJECT_ASSIGN_PROCESS = 1;
pub const IMAGE_REL_AM_SECTION = 8;
pub const NFR_ANSI = 1;
pub const SERVICE_BOOT_START = 0;
pub const SUBLANG_SPANISH_US = 21;
pub const PIPE_SERVER_END = 1;
pub const IMAGE_REL_IA64_SREL32 = 19;
pub const _WIN32_WINNT_WIN8 = 1538;
pub const SB_NONE = 0;
pub const SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY = 2;
pub const OBJ_ENHMETADC = 12;
pub const ERROR_DISK_NOT_CSV_CAPABLE = c_long(5964);
pub const ERROR_DS_RECALCSCHEMA_FAILED = c_long(8396);
pub const ERROR_DS_NO_OBJECT_MOVE_IN_SCHEMA_NC = c_long(8580);
pub const LB_GETCARETINDEX = 415;
pub const LOCALE_SNATIVECOUNTRYNAME = 8;
pub const SYSTEM_ACCESS_FILTER_ACE_TYPE = 21;
pub const CFS_CANDIDATEPOS = 64;
pub const IMAGE_REL_ALPHA_REFQ2 = 20;
pub const VOS_DOS = c_long(65536);
pub const IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;
pub const DC_MAXEXTENT = 5;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_8 = 8;
pub const DM_BITSPERPEL = c_long(262144);
pub const EMR_ALPHABLEND = 114;
pub const CTRL_CLOSE_EVENT = 2;
pub const WNNC_NET_YAHOO = 2883584;
pub const PROGRESS_CANCEL = 1;
pub const OpenPrivateNamespace = OpenPrivateNamespaceA;
pub const MM_MAX_FIXEDSCALE = MM_TWIPS;
pub const DDL_HIDDEN = 2;
pub const SHUTDOWN_ARSO = 8192;
pub const SM_CXFRAME = 32;
pub const ESB_ENABLE_BOTH = 0;
pub const ERROR_PRINTER_DRIVER_WARNED = c_long(3013);
pub const ERROR_WINS_INTERNAL = c_long(4000);
pub const VK_NUMPAD1 = 97;
pub const WNNC_NET_MFILES = 4259840;
pub const BATTERY_FLAG_CHARGING = 8;
pub const MDM_PIAFS_INCOMING = 0;
pub const SUBLANG_SINDHI_PAKISTAN = 2;
pub const WSAEDQUOT = c_long(10069);
pub const SERVICE_NOTIFY_RUNNING = 8;
pub const CTRY_ALGERIA = 213;
pub const PPM_FIRMWARE_PDC = 131072;
pub const CTRY_VIET_NAM = 84;
pub const TOUCH_MASK_ORIENTATION = 2;
pub const WM_APPCOMMAND = 793;
pub const WS_DISABLED = c_long(134217728);
pub const __override = __inner_override;
pub const BAUD_9600 = if (@typeInfo(@TypeOf(2048)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2048) else if (@typeInfo(@TypeOf(2048)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2048) else @as(DWORD, 2048);
pub const EPERM = 1;
pub const InterlockedBitTestAndResetRelease = _interlockedbittestandreset;
pub const __AVX2__ = 1;
pub const POWER_ACTION_DISABLE_WAKES = 1073741824;
pub const ERROR_EVENTLOG_FILE_CORRUPT = c_long(1500);
pub const WriteSizeTNoFence = WriteULongPtrNoFence;
pub const SC_MOVE = 61456;
pub const CAL_SABBREVMONTHNAME7 = 40;
pub const SDC_ALLOW_CHANGES = 1024;
pub const MB_SETFOREGROUND = c_long(65536);
pub const _HAS_EXCEPTIONS = 1;
pub const SCROLLLOCK_ON = 64;
pub const ERROR_SXS_XML_E_INVALIDSWITCH = c_long(14068);
pub const MAX_REASON_NAME_LEN = 64;
pub const APPCOMMAND_LAUNCH_APP2 = 18;
pub const OPERATION_START_TRACE_CURRENT_THREAD = 1;
pub const SPI_SETSHOWIMEUI = 111;
pub const __deref_opt_inout_bcount_nz = size;
pub const SUBLANG_SERBIAN_MONTENEGRO_LATIN = 11;
pub const INHERITED_ACE = 16;
pub const LOCALE_SSHORTESTDAYNAME2 = 97;
pub const PROCESSOR_ARM920 = 2336;
pub const LOCALE_SDECIMAL = 14;
pub const MDMVOLFLAG_HIGH = 4;
pub const MK_E_FIRST = c_long(2147746272);
pub const DM_COPY = 2;
pub const ERROR_KEY_HAS_CHILDREN = c_long(1020);
pub const ERROR_NON_CSV_PATH = c_long(5950);
pub const InterlockedAndAffinity = InterlockedAnd64;
pub const CACHE_S_FIRST = c_long(262512);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub const ERROR_MALFORMED_SUBSTITUTION_STRING = c_long(14094);
pub const ERROR_DS_CANT_REMOVE_ATT_CACHE = c_long(8403);
pub const WINEVENT_INCONTEXT = 4;
pub const RTL_CORRELATION_VECTOR_VERSION_CURRENT = RTL_CORRELATION_VECTOR_VERSION_2;
pub const ERROR_DS_OID_NOT_FOUND = c_long(8638);
pub const PFORCEINLINE = FORCEINLINE;
pub const SHTDN_REASON_MINOR_DC_DEMOTION = 34;
pub const WM_XBUTTONDOWN = 523;
pub const WINNORMALIZEAPI = DECLSPEC_IMPORT;
pub const MEHC_PATROL_SCRUBBER_PRESENT = 1;
pub const ERROR_CORRUPT_LOG_CLEARED = c_long(798);
pub const ERROR_UNSUPPORTED_TYPE = c_long(1630);
pub const SW_SHOWNORMAL = 1;
pub const __RETURN_POLICY_DST = _FunctionCall;
pub const DOMAIN_ALIAS_RID_REMOTE_MANAGEMENT_USERS = c_long(580);
pub const LB_INITSTORAGE = 424;
pub const ERROR_NONPAGED_SYSTEM_RESOURCES = c_long(1451);
pub const STACK_SIZE_PARAM_IS_A_RESERVATION = 65536;
pub const SS_WHITERECT = c_long(6);
pub const PROCESS_VM_OPERATION = 8;
pub const IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;
pub const SUBLANG_PULAR_SENEGAL = 2;
pub const PBT_APMRESUMEAUTOMATIC = 18;
pub const ERROR_PRI_MERGE_VERSION_MISMATCH = c_long(15148);
pub const TOUCHINPUTMASKF_CONTACTAREA = 4;
pub const ERROR_CLIPPING_NOT_SUPPORTED = c_long(2005);
pub const ERROR_CLUSTER_OBJECT_ALREADY_USED = c_long(5936);
pub const LAYOUT_VBH = 4;
pub const ERROR_CLOUD_FILE_UNSUCCESSFUL = c_long(389);
pub const SPI_SETLANGTOGGLE = 91;
pub const TREE_CONNECT_ATTRIBUTE_GLOBAL = 4;
pub const DMMEDIA_USER = 256;
pub const LOCALE_IDEFAULTLANGUAGE = 9;
pub const ERROR_DS_CROSS_NC_DN_RENAME = c_long(8368);
pub const DIAGNOSTIC_REASON_SIMPLE_STRING = 1;
pub const IMAGE_REL_SH3_DIRECT4_WORD = 7;
pub const __FLT_MAX_10_EXP__ = 38;
pub const EMR_SETPOLYFILLMODE = 19;
pub const READ_THREAD_PROFILING_FLAG_DISPATCHING = 1;
pub const STM_GETICON = 369;
pub const IO_REPARSE_TAG_CLOUD_7 = c_long(2415947802);
pub const XSTATE_MASK_IPT = if (@typeInfo(@TypeOf(i64 << XSTATE_IPT)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_IPT) else if (@typeInfo(@TypeOf(i64 << XSTATE_IPT)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_IPT) else c_uint(1)(i64 << XSTATE_IPT);
pub const SM_CYMENU = 15;
pub const JOB_OBJECT_SET_ATTRIBUTES = 2;
pub const ERROR_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE = c_long(6834);
pub const SIZEOF_RFPO_DATA = 16;
pub const FILE_CACHE_MAX_HARD_ENABLE = 1;
pub const PFD_GENERIC_FORMAT = 64;
pub const DEVICEFAMILYINFOENUM_WINDOWS_CORE_HEADLESS = 17;
pub const EMR_SETCOLORADJUSTMENT = 23;
pub const DT_TABSTOP = 128;
pub const SP_HANDSHAKING = if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 16) else if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 16) else @as(DWORD, 16);
pub const GC_ROTATE = 1;
pub const DMPAPER_A5 = 11;
pub const REMOTE_PROTOCOL_INFO_FLAG_OFFLINE = 2;
pub const _STL_LANG = __cplusplus;
pub const ERROR_MP_PROCESSOR_MISMATCH = c_long(725);
pub const ERROR_CONTROLLING_IEPORT = c_long(4329);
pub const MessageBox = MessageBoxA;
pub const IMAGE_REL_SH3_DIRECT32_NB = 16;
pub const ERROR_FILE_CHECKED_OUT = c_long(220);
pub const MB_OKCANCEL = c_long(1);
pub const LOCALE_INEGSYMPRECEDES = 86;
pub const GWFS_INCLUDE_ANCESTORS = 1;
pub const PAGE_WRITECOMBINE = 1024;
pub const IMAGE_REL_SHM_REFHALF = 21;
pub const GetWindowModuleFileName = GetWindowModuleFileNameA;
pub const PAN_CULTURE_LATIN = 0;
pub const InterlockedIncrementNoFence16 = _InterlockedIncrement16;
pub const _WIN32_IE_NT4 = _WIN32_IE_IE20;
pub const EVENT_OBJECT_IME_HIDE = 32808;
pub const FACILITY_BLBUI = 128;
pub const PFD_SWAP_EXCHANGE = 512;
pub const MONITOR_DEFAULTTONEAREST = 2;
pub const X3_OPCODE_INST_WORD_X = 3;
pub const ACCESS_PROPERTY_GUID = 2;
pub const ERROR_INVALID_USER_BUFFER = c_long(1784);
pub const ERROR_PAGE_FAULT_TRANSITION = c_long(747);
pub const LCS_GM_ABS_COLORIMETRIC = c_long(8);
pub const WN_BAD_PROFILE = ERROR_BAD_PROFILE;
pub const ERROR_IPSEC_QM_POLICY_EXISTS = c_long(13000);
pub const IO_QOS_MAX_RESERVATION = c_ulonglong(1000000000);
pub const IMAGE_HOT_PATCH_CHUNK_SOURCE_RVA = 32768;
pub const ERROR_IS_SUBSTED = c_long(135);
pub const ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = c_long(8514);
pub const FS_THAI = c_long(65536);
pub const PROTECTION_LEVEL_CODEGEN_LIGHT = 6;
pub const PFD_MAIN_PLANE = 0;
pub const LB_SETHORIZONTALEXTENT = 404;
pub const VK_F5 = 116;
pub const ERROR_CS_ENCRYPTION_EXISTING_ENCRYPTED_FILE = c_long(6019);
pub const SUBLANG_FILIPINO_PHILIPPINES = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;
pub const IMAGE_FILE_MACHINE_ARM64 = 43620;
pub const PRODUCT_HOME_BASIC_E = 67;
pub const ERROR_MAX_THRDS_REACHED = c_long(164);
pub const __INT_FAST64_FMTi__ = "lli";
pub const ERROR_BAD_IMPERSONATION_LEVEL = c_long(1346);
pub const ERROR_DS_DISALLOWED_NC_REDIRECT = c_long(8640);
pub const BAUD_134_5 = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4) else @as(DWORD, 4);
pub const WNNC_NET_BMC = 1572864;
pub const IMAGE_FILE_MACHINE_WCEMIPSV2 = 361;
pub const PROCESS_CREATION_MITIGATION_POLICY_CONTROL_FLOW_GUARD_EXPORT_SUPPRESSION = if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 40) else if (@typeInfo(@TypeOf(i64 << 40)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 40) else c_uint(3)(i64 << 40);
pub const IMAGE_REL_ALPHA_REFQ3 = 19;
pub const RegisterEventSource = RegisterEventSourceA;
pub const ERROR_DS_NON_BASE_SEARCH = c_long(8480);
pub const VFT_UNKNOWN = c_long(0);
pub const IMAGE_ENCLAVE_LONG_ID_LENGTH = ENCLAVE_LONG_ID_LENGTH;
pub const LGRPID_ARABIC = 13;
pub const SERVICE_TRIGGER_TYPE_FIREWALL_PORT_EVENT = 4;
pub const CDS_VIDEOPARAMETERS = 32;
pub const ERROR_REVISION_MISMATCH = c_long(1306);
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_9 = 9;
pub const HCBT_ACTIVATE = 5;
pub const ReadEventLog = ReadEventLogA;
pub const AW_HOR_POSITIVE = 1;
pub const SM_CLEANBOOT = 67;
pub const PROCESSOR_PERF_BOOST_MODE_AGGRESSIVE = 2;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = 216;
pub const CTRY_ARGENTINA = 54;
pub const EMR_SETBKCOLOR = 25;
pub const TOKEN_QUERY = 8;
pub const UISF_ACTIVE = 4;
pub const LANG_CENTRAL_KURDISH = 146;
pub const WM_GETICON = 127;
pub const HSHELL_MONITORCHANGED = 16;
pub const EM_UNDO = 199;
pub const PAN_MIDLINE_CONSTANT_SERIFED = 10;
pub const __inner_blocksOn = resource;
pub const ERROR_MCA_EXCEPTION = c_long(784);
pub const ERROR_DS_CROSS_REF_EXISTS = c_long(8374);
pub const ERROR_DS_REPLICATOR_ONLY = c_long(8370);
pub const ERROR_DS_DRA_EXTN_CONNECTION_FAILED = c_long(8466);
pub const ERROR_REGISTRY_RECOVERED = c_long(1014);
pub const NTDDI_WS03SP3 = 84017920;
pub const ERROR_FILE_EXISTS = c_long(80);
pub const COMMON_LVB_LEADING_BYTE = 256;
pub const DFCS_CAPTIONMAX = 2;
pub const DC_INBUTTON = 16;
pub const ERROR_INCOMPATIBLE_SERVICE_PRIVILEGE = c_long(1297);
pub const ERROR_CLUSTER_RESOURCE_LOCKED_STATUS = c_long(5960);
pub const ERROR_SMI_PRIMITIVE_INSTALLER_FAILED = c_long(14108);
pub const IDCLOSE = 8;
pub const __FLT_EPSILON__ = 0.000000;
pub const SPI_SETWINARRANGING = 131;
pub const _SAL_VERSION_SAL2 = _A;
pub const PROCESS_CREATION_MITIGATION_POLICY_HIGH_ENTROPY_ASLR_DEFER = 0 << 20;
pub const GetDiskFreeSpaceEx = GetDiskFreeSpaceExA;
pub const PrivilegedServiceAuditAlarm = PrivilegedServiceAuditAlarmA;
pub const ERROR_CANNOT_DETECT_DRIVER_FAILURE = c_long(1080);
pub const SM_CXMAXIMIZED = 61;
pub const IME_KHOTKEY_ENGLISH = 82;
pub const DRAGDROP_E_FIRST = c_long(2147746048);
pub const VK_OEM_FJ_LOYA = 149;
pub const SUBLANG_TAMIL_INDIA = 1;
pub const FILE_ATTRIBUTE_OFFLINE = 4096;
pub const EMARCH_ENC_I17_IMM5C_INST_WORD_X = 3;
pub const TC_RA_ABLE = 8192;
pub const NULL = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast([*c]void, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr([*c]void, 0) else ([*c]void)(0);
pub const EnumLanguageGroupLocales = EnumLanguageGroupLocalesA;
pub const NTDDI_WIN10_19H1 = 167772167;
pub const CAL_SABBREVMONTHNAME4 = 37;
pub const LookupPrivilegeDisplayName = LookupPrivilegeDisplayNameA;
pub const ERROR_ALLOCATE_BUCKET = c_long(602);
pub const REG_LOAD_HIVE_OPEN_HANDLE = c_long(2048);
pub const SetMenuItemInfo = SetMenuItemInfoA;
pub const STOCK_LAST = 19;
pub const WH_JOURNALPLAYBACK = 1;
pub const DMPAPER_ENV_MONARCH = 37;
pub const SERVICE_USERSERVICE_INSTANCE = 128;
pub const UNLOAD_DLL_DEBUG_EVENT = 7;
pub const WS_BORDER = c_long(8388608);
pub const MDM_MASK_HDLCPPP_SPEED = 7;
pub const PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;
pub const SE_ACCESS_CHECK_FLAG_NO_LEARNING_MODE_LOGGING = 8;
pub const WSAEINVALIDPROVIDER = c_long(10105);
pub const ERROR_DS_SUB_CLS_TEST_FAIL = c_long(8391);
pub const VK_NAVIGATION_CANCEL = 143;
pub const __deref_opt_inout_ecount_nz = size;
pub const LOCALE_SSHORTESTDAYNAME3 = 98;
pub const ERROR_NETWORK_NOT_AVAILABLE = c_long(5035);
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const ERROR_DS_GROUP_CONVERSION_ERROR = c_long(8607);
pub const RESOURCEDISPLAYTYPE_SERVER = 2;
pub const MK_LBUTTON = 1;
pub const MF_OWNERDRAW = c_long(256);
pub const EPS_SIGNATURE = 1179865157;
pub const APPMODEL_ERROR_PACKAGE_RUNTIME_CORRUPT = c_long(15701);
pub const X3_D_WH_INST_WORD_X = 3;
pub const ENCLAVE_TYPE_SGX2 = 2;
pub const FS_SYMBOL = c_long(2147483648);
pub const SPI_GETACTIVEWNDTRKZORDER = 4108;
pub const ERROR_DISK_RESOURCES_EXHAUSTED = c_long(314);
pub const ERROR_SECUREBOOT_POLICY_ROLLBACK_DETECTED = c_long(4431);
pub const PROCESSOR_PERF_BOOST_POLICY_MAX = 100;
pub const LANG_MACEDONIAN = 47;
pub const FLASHW_CAPTION = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON = 1 << 8;
pub const ERROR_IPSEC_IKE_DH_FAIL = c_long(13822);
pub const PRODUCT_MULTIPOINT_STANDARD_SERVER = 76;
pub const DMDITHER_LINEART = 4;
pub const SECURITY_BUILTIN_PACKAGE_ANY_PACKAGE = c_long(1);
pub const DNS_ERROR_DP_ALREADY_EXISTS = c_long(9902);
pub const OBJID_WINDOW = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 0) else @as(LONG, 0);
pub const IMAGE_REL_PPC_REFHI = 16;
pub const ERROR_IPSEC_DOSP_RECEIVED_MULTICAST = c_long(13926);
pub const ERROR_SWAPERROR = c_long(999);
pub const ERROR_WORKING_SET_QUOTA = c_long(1453);
pub const LB_SETLOCALE = 421;
pub const SW_SHOWMINIMIZED = 2;
pub const DOMAIN_GROUP_RID_READONLY_CONTROLLERS = c_long(521);
pub const REG_NOTIFY_CHANGE_SECURITY = c_long(8);
pub const IMAGE_REL_IA64_SECREL64I = 13;
pub const ERROR_BROKEN_PIPE = c_long(109);
pub const ALERT_SYSTEM_WARNING = 2;
pub const SPI_SETFOREGROUNDFLASHCOUNT = 8197;
pub const IMN_GUIDELINE = 13;
pub const SERVICE_STOP_REASON_MINOR_HARDWARE_DRIVER = 11;
pub const GetFileAttributes = GetFileAttributesA;
pub const ERROR_READ_FAULT = c_long(30);
pub const IMAGE_SCN_ALIGN_2048BYTES = 12582912;
pub const LANG_TSWANA = 50;
pub const LGRPID_TURKISH = 6;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_A_A = "GetSystemWow64DirectoryA";
pub const SPI_SETMOUSECLICKLOCK = 4127;
pub const IME_SMODE_RESERVED = 61440;
pub const __INT8_FMTi__ = "hhi";
pub const SW_SHOWMAXIMIZED = 3;
pub const ERROR_CLUSTER_PARTIAL_READ = c_long(5921);
pub const ERROR_ENCLAVE_FAILURE = c_long(349);
pub const MDM_SHIFT_AUTO_SPEED = 0;
pub const ERROR_DS_AUTHORIZATION_FAILED = c_long(8599);
pub const RegDeleteKeyEx = RegDeleteKeyExA;
pub const MEM_LARGE_PAGES = 536870912;
pub const WM_MOUSEHWHEEL = 526;
pub const SUBLANG_CUSTOM_DEFAULT = 3;
pub const ERROR_MCA_INVALID_VCP_VERSION = c_long(15201);
pub const SCS_CAP_MAKEREAD = 2;
pub const PAGE_EXECUTE_READ = 32;
pub const DMPAPER_A6 = 70;
pub const CREATE_WAITABLE_TIMER_HIGH_RESOLUTION = 2;
pub const ERROR_UNABLE_TO_REMOVE_REPLACED = c_long(1175);
pub const MAXIMUM_REPARSE_DATA_BUFFER_SIZE = if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Pointer) @ptrCast([*c]16, 1024) else if (@typeInfo(@TypeOf(1024)) == @import("builtin").TypeId.Int) @intToPtr([*c]16, 1024) else ([*c]16)(1024);
pub const PF_ARM_V8_INSTRUCTIONS_AVAILABLE = 29;
pub const CF_WAVE = 12;
pub const __INT_FAST64_MAX__ = c_longlong(9223372036854775807);
pub const ERROR_IPSEC_IKE_INVALID_SITUATION = c_long(13863);
pub const EMR_CREATEMONOBRUSH = 93;
pub const PAN_WEIGHT_MEDIUM = 6;
pub const CallWindowProc = CallWindowProcA;
pub const ERROR_DS_GOVERNSID_MISSING = c_long(8410);
pub const InterlockedExchange = _InterlockedExchange;
pub const GMEM_INVALID_HANDLE = 32768;
pub const __analysis_assume_lock_released = lock;
pub const VER_PLATFORM_WIN32_WINDOWS = 1;
pub const MUI_LANGUAGE_ID = 4;
pub const ERROR_UNKNOWN_PRINT_MONITOR = c_long(3000);
pub const ERROR_APP_WRONG_OS = c_long(1151);
pub const DEVICEFAMILYDEVICEFORM_BUILDING_AUTOMATION = 15;
pub const MK_RBUTTON = 2;
pub const WM_POINTERDEVICEOUTOFRANGE = 570;
pub const FACILITY_DMSERVER = 256;
pub const STORE_ERROR_LICENSE_REVOKED = c_long(15864);
pub const IO_REPARSE_TAG_RESERVED_TWO = 2;
pub const FILE_ATTRIBUTE_SYSTEM = 4;
pub const MDM_ERROR_CONTROL = 2;
pub const LoadFence = _mm_lfence;
pub const ERROR_TXF_ATTRIBUTE_CORRUPT = c_long(6830);
pub const ERROR_DS_ALIAS_POINTS_TO_ALIAS = c_long(8336);
pub const DFCS_BUTTON3STATE = 8;
pub const __SIZEOF_POINTER__ = 8;
pub const ERROR_INVALID_DOMAINNAME = c_long(1212);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NOTIFY = c_long(13840);
pub const CC_STYLED = 32;
pub const IMAGE_REL_PPC_BRTAKEN = 512;
pub const APPLICATION_ERROR_MASK = 536870912;
pub const VK_NONCONVERT = 29;
pub const VK_F4 = 115;
pub const OF_CANCEL = 2048;
pub const BN_PUSHED = BN_HILITE;
pub const FAST_FAIL_INVALID_SYSCALL_NUMBER = 41;
pub const IMAGE_DIRECTORY_ENTRY_IMPORT = 1;
pub const WS_CLIPSIBLINGS = c_long(67108864);
pub const MOUSE_MOVE_NOCOALESCE = 8;
pub const PRODUCT_PROFESSIONAL_WMC = 103;
pub const STANDARD_RIGHTS_WRITE = READ_CONTROL;
pub const ERROR_IPSEC_IKE_BENIGN_REINIT = c_long(13878);
pub const ERROR_CSCSHARE_OFFLINE = c_long(1262);
pub const ERROR_IPSEC_IKE_DH_FAILURE = c_long(13864);
pub const FILE_ACTION_ADDED = 1;
pub const MARSHAL_E_FIRST = c_long(2147746080);
pub const RTS_CONTROL_HANDSHAKE = 2;
pub const JOB_OBJECT_LIMIT_CPU_RATE_CONTROL = JOB_OBJECT_LIMIT_RATE_CONTROL;
pub const MDM_PROTOCOLID_DEFAULT = 0;
pub const ERROR_UNKNOWN_PRINTPROCESSOR = c_long(1798);
pub const PAN_SERIF_NORMAL_SANS = 11;
pub const MOVEFILE_REPLACE_EXISTING = 1;
pub const PAN_XHEIGHT_INDEX = 9;
pub const EMR_SELECTOBJECT = 37;
pub const ACTCTX_FLAG_PROCESSOR_ARCHITECTURE_VALID = 1;
pub const WC_COMPOSITECHECK = 512;
pub const ENOSTR = 125;
pub const DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = 4;
pub const ERROR_NO_MORE_ITEMS = c_long(259);
pub const ERROR_PRI_MERGE_MULTIPLE_MAIN_PACKAGES_NOT_ALLOWED = c_long(15154);
pub const DOMAIN_ALIAS_RID_SYSTEM_OPS = c_long(549);
pub const SP_ERROR = -1;
pub const IGIMII_HELP = 16;
pub const EMR_POLYLINETO16 = 89;
pub const SBS_SIZEBOXTOPLEFTALIGN = c_long(2);
pub const CONNECT_COMMANDLINE = 2048;
pub const ERROR_CTX_SHADOW_ENDED_BY_MODE_CHANGE = c_long(7058);
pub const GetGeoInfo = GetGeoInfoA;
pub const ERROR_INSTALL_TRANSFORM_REJECTED = c_long(1644);
pub const NTDDI_WS03SP2 = 84017664;
pub const EMR_EXTFLOODFILL = 53;
pub const CF_RIFF = 11;
pub const WVR_ALIGNTOP = 16;
pub const lstrcmp = lstrcmpA;
pub const VK_GAMEPAD_MENU = 207;
pub const SIZEFULLSCREEN = SIZE_MAXIMIZED;
pub const CreateEvent = CreateEventA;
pub const IMAGE_DEBUG_TYPE_MISC = 4;
pub const DMBIN_AUTO = 7;
pub const DEVICE_NOTIFY_SERVICE_HANDLE = 1;
pub const SE_SIGNING_LEVEL_DEVELOPER = SE_SIGNING_LEVEL_CUSTOM_1;
pub const ERROR_SXS_MANIFEST_PARSE_ERROR = c_long(14005);
pub const TOUCH_HIT_TESTING_NONE = 2;
pub const MK_XBUTTON1 = 32;
pub const ERROR_SXS_MANIFEST_MISSING_REQUIRED_DEFAULT_NAMESPACE = c_long(14018);
pub const PSINJECT_BEGINPAGESETUP = 101;
pub const WM_AFXLAST = 895;
pub const WM_WINDOWPOSCHANGED = 71;
pub const VER_WORKSTATION_NT = 1073741824;
pub const WN_BAD_LOCALNAME = ERROR_BAD_DEVICE;
pub const CAL_SABBREVMONTHNAME5 = 38;
pub const TRANSACTION_COMMIT = 8;
pub const POWERBUTTON_ACTION_VALUE_HIBERNATE = 3;
pub const IMAGE_REL_SHM_PAIR = 24;
pub const SERVICE_CONFIG_FAILURE_ACTIONS_FLAG = 4;
pub const _WIN32_IE_WIN2K = _WIN32_IE_IE501;
pub const TRANSACTION_NOTIFY_PROPAGATE_PUSH = 65536;
pub const InterlockedAnd64Acquire = _InterlockedAnd64;
pub const __deref_out_bcount_nz = size;
pub const InterlockedExchangePointer = _InterlockedExchangePointer;
pub const CommConfigDialog = CommConfigDialogA;
pub const ERROR_NO_SUCH_SITE = c_long(1249);
pub const WM_NCMBUTTONUP = 168;
pub const FS_FILE_COMPRESSION = FILE_FILE_COMPRESSION;
pub const ERROR_NO_TRUST_SAM_ACCOUNT = c_long(1787);
pub const RTL_RUN_ONCE_CHECK_ONLY = c_ulong(1);
pub const __UINTMAX_FMTX__ = "llX";
pub const SERVICE_CONTROL_CONTINUE = 3;
pub const STATUS_BREAKPOINT = if (@typeInfo(@TypeOf(c_long(2147483651))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483651)) else if (@typeInfo(@TypeOf(c_long(2147483651))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483651)) else @as(DWORD, c_long(2147483651));
pub const ERROR_MUTANT_LIMIT_EXCEEDED = c_long(587);
pub const IMAGE_REL_SH3_DIRECT8_LONG = 5;
pub const BATTERY_FLAG_LOW = 2;
pub const WM_MDIACTIVATE = 546;
pub const IMAGE_SUBSYSTEM_XBOX = 14;
pub const ERROR_RESOURCE_CALL_TIMED_OUT = c_long(5910);
pub const LOCALE_SLIST = 12;
pub const ERROR_STATE_QUERY_SETTING_FAILED = c_long(15810);
pub const META_ROUNDRECT = 1564;
pub const RI_KEY_E0 = 2;
pub const FACILITY_RPC = 1;
pub const EVENTLOG_END_PAIRED_EVENT = 2;
pub const ERROR_RXACT_STATE_CREATED = c_long(701);
pub const WriteULongPtrRelease = WriteULong64Release;
pub const MIN_ACL_REVISION = ACL_REVISION2;
pub const ERROR_DS_NAME_REFERENCE_INVALID = c_long(8373);
pub const CreateBoundaryDescriptor = CreateBoundaryDescriptorA;
pub const SB_BOTTOM = 7;
pub const CLIP_TO_PATH = 4097;
pub const RIDEV_CAPTUREMOUSE = 512;
pub const REG_BINARY = c_ulong(3);
pub const LANG_TIGRIGNA = 115;
pub const ERROR_CLUSTER_UPGRADE_RESTART_REQUIRED = c_long(5975);
pub const ERROR_NO_ACE_CONDITION = c_long(804);
pub const SETBREAK = 8;
pub const ERROR_BAD_PROFILE = c_long(1206);
pub const ISC_SHOWUIGUIDELINE = 1073741824;
pub const SECTION_QUERY = 1;
pub const LANG_SCOTTISH_GAELIC = 145;
pub const PAN_ANY = 0;
pub const WSA_QOS_EPSFLOWSPEC = c_long(11027);
pub const SECURITY_CAPABILITY_INTERNET_CLIENT = c_long(1);
pub const POINTER_FLAG_NONE = 0;
pub const SECURITY_TRUSTED_INSTALLER_RID1 = 956008885;
pub const SECURITY_CAPABILITY_PICTURES_LIBRARY = c_long(4);
pub const IMAGE_REL_IA64_PCREL21B = 6;
pub const IO_REPARSE_TAG_CLOUD_1 = c_long(2415923226);
pub const DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE = c_long(9925);
pub const DMPAPER_ENV_DL = 27;
pub const VOLUME_NAME_NT = 2;
pub const ERROR_DS_USER_BUFFER_TO_SMALL = c_long(8309);
pub const PROCESSOR_SHx_SH3 = 103;
pub const VK_SEPARATOR = 108;
pub const RESOURCE_REMEMBERED = 3;
pub const IME_ESC_SYNC_HOTKEY = 4103;
pub const HIDE_WINDOW = 0;
pub const FILE_VOLUME_IS_COMPRESSED = 32768;
pub const CB_SETCURSEL = 334;
pub const POINTER_DEVICE_PRODUCT_STRING_MAX = 520;
pub const SECURITY_WORLD_RID = c_long(0);
pub const LOCALE_SPOSINFINITY = 106;
pub const IDH_CANCEL = 28444;
pub const EN_MAXTEXT = 1281;
pub const WN_DEVICE_ERROR = ERROR_GEN_FAILURE;
pub const XSTATE_MASK_LWP = if (@typeInfo(@TypeOf(i64 << XSTATE_LWP)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_LWP) else if (@typeInfo(@TypeOf(i64 << XSTATE_LWP)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_LWP) else c_uint(1)(i64 << XSTATE_LWP);
pub const ERROR_CLUSTER_INSTANCE_ID_MISMATCH = c_long(5893);
pub const SM_REMOTESESSION = 4096;
pub const TAPE_DRIVE_FIXED = 1;
pub const DM_OUT_BUFFER = DM_COPY;
pub const EMR_SETTEXTCOLOR = 24;
pub const EVENT_SYSTEM_SWITCHSTART = 20;
pub const ERROR_HOST_NODE_NOT_AVAILABLE = c_long(5005);
pub const CS_DISABLE = c_long(2);
pub const WNNC_NET_SUN_PC_NFS = 458752;
pub const DT_HIDEPREFIX = 1048576;
pub const GGI_MARK_NONEXISTING_GLYPHS = 1;
pub const ERROR_POINT_NOT_FOUND = c_long(1171);
pub const META_SETSTRETCHBLTMODE = 263;
pub const NUMPENS = 18;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_T = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_T;
pub const ERROR_PATH_NOT_FOUND = c_long(3);
pub const PROVIDER_KEEPS_VALUE_LENGTH = 1;
pub const SECURITY_RESTRICTED_CODE_RID = c_long(12);
pub const TAPE_DRIVE_SET_REPORT_SMKS = 2147485696;
pub const POINTER_FLAG_FIFTHBUTTON = 256;
pub const FLUSH_FLAGS_NO_SYNC = 2;
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const WSAETIMEDOUT = c_long(10060);
pub const VK_F3 = 114;
pub const IMAGE_REL_SH3_PCREL8_WORD = 9;
pub const ERROR_BADKEY = c_long(1010);
pub const ISC_SHOWUICANDIDATEWINDOW = 1;
pub const IMAGE_REL_ALPHA_LITUSE = 5;
pub const UOI_HEAPSIZE = 5;
pub const AnsiUpperBuff = CharUpperBuffA;
pub const JOB_OBJECT_MSG_MAXIMUM = 13;
pub const MUI_MACHINE_LANGUAGE_SETTINGS = 1024;
pub const KEYEVENTF_UNICODE = 4;
pub const ES_LEFT = c_long(0);
pub const ERROR_NO_MATCH = c_long(1169);
pub const DFCS_PUSHED = 512;
pub const VER_SUITE_EMBEDDED_RESTRICTED = 2048;
pub const ERROR_IO_PRIVILEGE_FAILED = c_long(571);
pub const SM_YVIRTUALSCREEN = 77;
pub const IMAGE_REL_ALPHA_REFQ1 = 21;
pub const PF_ARM_DIVIDE_INSTRUCTION_AVAILABLE = 24;
pub const MDM_COMPRESSION = 1;
pub const JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 32767;
pub const ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = c_long(1063);
pub const MOUSEEVENTF_MOVE = 1;
pub const ERROR_SERVER_SHUTDOWN_IN_PROGRESS = c_long(1255);
pub const LOCALE_SDATE = 29;
pub const LOCALE_NAME_USER_DEFAULT = NULL;
pub const ERROR_CLUSTER_NODE_NOT_READY = c_long(5072);
pub const SUBLANG_KHMER_CAMBODIA = 1;
pub const MNC_CLOSE = 1;
pub const DMPAPER_P32KBIG_ROTATED = 108;
pub const IMFS_CHECKED = MFS_CHECKED;
pub const ERROR_COULD_NOT_INTERPRET = c_long(552);
pub const ERROR_HANDLE_EOF = c_long(38);
pub const ERROR_DIFFERENT_PROFILE_RESOURCE_MANAGER_EXIST = c_long(15144);
pub const DLGC_STATIC = 256;
pub const MDM_BLIND_DIAL = 512;
pub const JOB_OBJECT_UILIMIT_HANDLES = 1;
pub const TA_NOUPDATECP = 0;
pub const ERROR_HOST_NODE_NOT_GROUP_OWNER = c_long(5016);
pub const ERROR_DESTINATION_ELEMENT_FULL = c_long(1161);
pub const IO_REPARSE_TAG_RESERVED_ZERO = 0;
pub const EMR_PIXELFORMAT = 104;
pub const WINCFGMGR32API = DECLSPEC_IMPORT;
pub const ERROR_DS_ALIASED_OBJ_MISSING = c_long(8334);
pub const ERROR_CLUSTER_WATCHDOG_TERMINATING = c_long(5952);
pub const _WIN32_IE_IE110 = 2560;
pub const ERROR_DEVICE_REINITIALIZATION_NEEDED = c_long(1164);
pub const RESOURCE_MANAGER_COMMUNICATION = 2;
pub const NTDDI_WS03SP1 = 84017408;
pub const ERROR_RESMON_CREATE_FAILED = c_long(5017);
pub const FindActCtxSectionString = FindActCtxSectionStringA;
pub const IME_CMODE_EUDC = 512;
pub const EVENT_OBJECT_PARENTCHANGE = 32783;
pub const IME_CONFIG_REGISTERWORD = 2;
pub const HIBERFILE_TYPE_MAX = 3;
pub const BSF_FORCEIFHUNG = 32;
pub const ERROR_IPSEC_QM_POLICY_IN_USE = c_long(13002);
pub const SUBLANG_CUSTOM_UNSPECIFIED = 4;
pub const TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = 0;
pub const _MSC_EXTENSIONS = 1;
pub const ERROR_DS_INVALID_DMD = c_long(8360);
pub const WSA_QOS_EFLOWSPEC = c_long(11017);
pub const WritePrivateProfileSection = WritePrivateProfileSectionA;
pub const ERROR_DS_MODIFYDN_DISALLOWED_BY_INSTANCE_TYPE = c_long(8579);
pub const LB_GETCOUNT = 395;
pub const DMPAPER_FIRST = DMPAPER_LETTER;
pub const SC_MANAGER_ENUMERATE_SERVICE = 4;
pub const TAPE_DRIVE_WRITE_MARK_IMMED = 2415919104;
pub const FOREGROUND_RED = 4;
pub const EACCES = 13;
pub const META_EXTTEXTOUT = 2610;
pub const CTRY_TURKEY = 90;
pub const SERVICE_ACCEPT_SESSIONCHANGE = 128;
pub const S_SERDPT = -12;
pub const WM_CUT = 768;
pub const ERROR_DS_RIDMGR_INIT_ERROR = c_long(8211);
pub const PROCESS_TRUST_LABEL_SECURITY_INFORMATION = c_long(128);
pub const _WIN32_IE_NT4SP6 = _WIN32_IE_IE50;
pub const MEM_RELEASE = 32768;
pub const DrawTextEx = DrawTextExA;
pub const PRODUCT_IOTUAP = 123;
pub const SNAPSHOT_POLICY_ALWAYS = 1;
pub const CAT_E_FIRST = c_long(2147746144);
pub const ERROR_SHUTDOWN_CLUSTER = c_long(5008);
pub const ERROR_CLUSTER_NETWORK_EXISTS = c_long(5044);
pub const EVENT_E_FIRST = c_long(2147746304);
pub const DNS_ERROR_ZONE_IS_SHUTDOWN = c_long(9621);
pub const ERROR_LOG_STATE_INVALID = c_long(6643);
pub const PROCESSOR_ARCHITECTURE_PPC = 3;
pub const EXCEPTION_EXIT_UNWIND = 4;
pub const ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = c_long(8535);
pub const ERROR_CLOUD_FILE_INCOMPATIBLE_HARDLINKS = c_long(396);
pub const SWP_SHOWWINDOW = 64;
pub const SERVICE_START_REASON_TRIGGER = 4;
pub const DNS_ERROR_ZONE_BASE = 9600;
pub const ERROR_UNKNOWN_FEATURE = c_long(1606);
pub const RIGHTMOST_BUTTON_PRESSED = 2;
pub const SUBLANG_SPANISH_ARGENTINA = 11;
pub const GetAltTabInfo = GetAltTabInfoA;
pub const INIT_ONCE_INIT_FAILED = RTL_RUN_ONCE_INIT_FAILED;
pub const RI_KEY_E1 = 4;
pub const ERROR_PRODUCT_UNINSTALLED = c_long(1614);
pub const GetTextMetrics = GetTextMetricsA;
pub const ENCLAVE_LONG_ID_LENGTH = 32;
pub const CTMF_INCLUDE_APPCONTAINER = c_ulong(1);
pub const SIZE_MAXIMIZED = 2;
pub const PF_ARM_FMAC_INSTRUCTIONS_AVAILABLE = 27;
pub const ERROR_NO_SPOOL_SPACE = c_long(62);
pub const SPI_SETWAITTOKILLSERVICETIMEOUT = 125;
pub const SPI_GETMENUUNDERLINES = SPI_GETKEYBOARDCUES;
pub const ERROR_CTX_CLIENT_LICENSE_IN_USE = c_long(7052);
pub const FW_NORMAL = 400;
pub const IMAGE_REL_AMD64_IMPORT_CALL = 19;
pub const ERROR_MEMBER_NOT_IN_GROUP = c_long(1321);
pub const SUBLANG_FRISIAN_NETHERLANDS = 1;
pub const HEAP_CREATE_HARDENED = 512;
pub const WSAESHUTDOWN = c_long(10058);
pub const IMAGE_SYM_TYPE_UINT = 14;
pub const PEN_MASK_TILT_X = 4;
pub const ES_CENTER = c_long(1);
pub const MND_CONTINUE = 0;
pub const SM_CXCURSOR = 13;
pub const MB_SERVICE_NOTIFICATION_NT3X = c_long(262144);
pub const VIEW_S_LAST = c_long(262479);
pub const ERROR_CONNECTION_UNAVAIL = c_long(1201);
pub const ERROR_CLUSTER_PARAMETER_MISMATCH = c_long(5897);
pub const SCRUB_DATA_OUTPUT_FLAG_PARITY_EXTENT_DATA_RETURNED = 131072;
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_ATTESTATION_RID = c_long(6);
pub const ERROR_PAGED_SYSTEM_RESOURCES = c_long(1452);
pub const IMAGE_REL_BASED_LOW = 2;
pub const SECURITY_TRUSTED_INSTALLER_RID2 = 3418522649;
pub const IMAGE_REL_IA64_PCREL21M = 7;
pub const POINTER_UNSIGNED = __uptr;
pub const DMPAPER_LEDGER = 4;
pub const SERVICE_CONFIG_SERVICE_SID_INFO = 5;
pub const IO_REPARSE_TAG_CLOUD_2 = c_long(2415927322);
pub const RPC_S_CALL_FAILED_DNE = c_long(1727);
pub const __out_bcount_nz_opt = size;
pub const SDC_USE_SUPPLIED_DISPLAY_CONFIG = 32;
pub const RI_KEY_MAKE = 0;
pub const MDM_SHIFT_HDLCPPP_AUTH = 3;
pub const SUBLANG_BANGLA_INDIA = 1;
pub const COLOR_WINDOW = 5;
pub const ATTRIBUTE_SECURITY_INFORMATION = c_long(32);
pub const DNS_ERROR_INVALID_KEY_SIZE = c_long(9106);
pub const EXCEPTION_MAXIMUM_PARAMETERS = 15;
pub const BST_INDETERMINATE = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY2_RESTRICT_INDIRECT_BRANCH_PREDICTION_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 16) else if (@typeInfo(@TypeOf(i64 << 16)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 16) else c_uint(1)(i64 << 16);
pub const LGRPID_HEBREW = 12;
pub const ERROR_IPSEC_IKE_KILL_DUMMY_NAP_TUNNEL = c_long(13898);
pub const SBM_GETPOS = 225;
pub const ERROR_IPSEC_IKE_LOAD_SOFT_SA = c_long(13844);
pub const ERROR_DOMAIN_EXISTS = c_long(1356);
pub const SB_GRAD_TRI = 32;
pub const TPM_CENTERALIGN = c_long(4);
pub const LC_STYLED = 32;
pub const GR_USEROBJECTS_PEAK = 4;
pub const MS_CTS_ON = if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 16) else if (@typeInfo(@TypeOf(16)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 16) else @as(DWORD, 16);
pub const DST_TEXT = 1;
pub const ERROR_MRM_RUNTIME_NO_DEFAULT_OR_NEUTRAL_RESOURCE = c_long(15110);
pub const EMR_MIN = 1;
pub const SE_DACL_AUTO_INHERITED = 1024;
pub const PFD_TYPE_COLORINDEX = 1;
pub const IMAGE_REL_PPC_REL14 = 7;
pub const SE_DACL_DEFAULTED = 8;
pub const ERROR_DS_DRA_INCONSISTENT_DIT = c_long(8443);
pub const PostMessage = PostMessageA;
pub const ERROR_PLATFORM_MANIFEST_NOT_AUTHORIZED = c_long(4570);
pub const PIPE_WAIT = 0;
pub const WM_SYSCHAR = 262;
pub const DBG_CONTROL_C = if (@typeInfo(@TypeOf(c_long(1073807365))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807365)) else if (@typeInfo(@TypeOf(c_long(1073807365))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807365)) else @as(DWORD, c_long(1073807365));
pub const TRANSACTION_ROLLBACK = 16;
pub const CF_ENHMETAFILE = 14;
pub const CM_SERVICE_VIRTUAL_DISK_BOOT_LOAD = 2;
pub const DM_IN_BUFFER = DM_MODIFY;
pub const ERROR_SXS_KEY_NOT_FOUND = c_long(14007);
pub const CONTACTVISUALIZATION_ON = 1;
pub const WM_POINTERCAPTURECHANGED = 588;
pub const CP_UTF7 = 65000;
pub const HEAP_REALLOC_IN_PLACE_ONLY = 16;
pub const GET_SYSTEM_WOW64_DIRECTORY_NAME_T_W = GET_SYSTEM_WOW64_DIRECTORY_NAME_A_W;
pub const GCP_SYMSWAPOFF = c_long(8388608);
pub const SECURITY_AUTHENTICATION_AUTHORITY_ASSERTED_RID = c_long(1);
pub const ERROR_THREAD_NOT_IN_PROCESS = c_long(566);
pub const ERROR_EA_LIST_INCONSISTENT = c_long(255);
pub const GetTextExtentPoint = GetTextExtentPointA;
pub const MDM_V110_SPEED_28DOT8K = 8;
pub const VK_F2 = 113;
pub const ERROR_KEY_DELETED = c_long(1018);
pub const SWP_NOREPOSITION = SWP_NOOWNERZORDER;
pub const LANG_ESTONIAN = 37;
pub const REG_MUI_STRING_TRUNCATE = 1;
pub const MWMO_WAITALL = 1;
pub const ERROR_CLOUD_FILE_ACCESS_DENIED = c_long(395);
pub const THREAD_RESUME = 4096;
pub const ERROR_BUSY_DRIVE = c_long(142);
pub const RDW_FRAME = 1024;
pub const ERROR_DS_CONTROL_NOT_FOUND = c_long(8258);
pub const ODT_COMBOBOX = 3;
pub const ARABIC_CHARSET = 178;
pub const VER_NUM_BITS_PER_CONDITION_MASK = 3;
pub const IMAGE_SCN_ALIGN_8192BYTES = 14680064;
pub const GetIconInfoEx = GetIconInfoExA;
pub const FACILITY_USERMODE_HYPERVISOR = 53;
pub const DUPLICATE_SAME_ACCESS = 2;
pub const COLOR_SCROLLBAR = 0;
pub const IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768;
pub const IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;
pub const WM_USER = 1024;
pub const __UINT_FAST64_FMTx__ = "llx";
pub const ICON_SMALL2 = 2;
pub const ERROR_VRF_CFG_ENABLED = c_long(1183);
pub const __out_bcount_nz = size;
pub const __SIZE_WIDTH__ = 64;
pub const SPI_SETMENUFADE = 4115;
pub const IME_ESC_RESERVED_FIRST = 4;
pub const ACCESS_ALLOWED_CALLBACK_ACE_TYPE = 9;
pub const PROTECTION_LEVEL_WINTCB = 5;
pub const ERROR_CTX_WINSTATION_NOT_FOUND = c_long(7022);
pub const SHTDN_REASON_MINOR_PROCESSOR = 8;
pub const MDMSPKRFLAG_OFF = 1;
pub const TAPE_QUERY_IO_ERROR_DATA = c_long(3);
pub const ERROR_BAD_ENVIRONMENT = c_long(10);
pub const SPI_SETSPEECHRECOGNITION = 4171;
pub const IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;
pub const FAIL_FAST_NO_HARD_ERROR_DLG = 2;
pub const ERROR_STATE_ENUMERATE_CONTAINER_FAILED = c_long(15813);
pub const ERROR_BAD_PATHNAME = c_long(161);
pub const ERROR_NOT_APPCONTAINER = c_long(4250);
pub const DISP_CHANGE_NOTUPDATED = -3;
pub const SORT_CHINESE_RADICALSTROKE = 4;
pub const ERROR_REQUEST_REFUSED = c_long(4320);
pub const ERROR_INVALID_SEPARATOR_FILE = c_long(1799);
pub const IMAGE_REL_M32R_PCREL24 = 5;
pub const CB_GETDROPPEDSTATE = 343;
pub const EMFILE = 24;
pub const EVENT_OBJECT_LOCATIONCHANGE = 32779;
pub const RotateLeft8 = _rotl8;
pub const ERROR_DS_EPOCH_MISMATCH = c_long(8483);
pub const IMAGE_REL_AM_CALL32 = 3;
pub const KTM_MARSHAL_BLOB_VERSION_MAJOR = 1;
pub const TPM_VERTICAL = c_long(64);
pub const LOCALE_SNATIVELANGNAME = LOCALE_SNATIVELANGUAGENAME;
pub const TRANSACTION_NOTIFY_PROPAGATE_PULL = 32768;
pub const HWND_TOPMOST = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(HWND, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(HWND, -1) else @as(HWND, -1);
pub const DATA_S_FIRST = c_long(262448);
pub const ERROR_SERVER_DISABLED = c_long(1341);
pub const LB_GETANCHORINDEX = 413;
pub const LTP_PC_SMT = 1;
pub const TIMERV_NO_COALESCING = 4294967295;
pub const FILE_END = 2;
pub const ERROR_NO_WRITABLE_DC_FOUND = c_long(8621);
pub const DMICM_ABS_COLORIMETRIC = 4;
pub const REG_OPTION_CREATE_LINK = c_long(2);
pub const FILE_SUPPORTS_OPEN_BY_FILE_ID = 16777216;
pub const LBN_SELCANCEL = 3;
pub const LANG_DIVEHI = 101;
pub const ERROR_DS_NO_RESULTS_RETURNED = c_long(8257);
pub const BS_3STATE = c_long(5);
pub const VK_TAB = 9;
pub const LOCALE_IDEFAULTCODEPAGE = 11;
pub const IMAGE_REL_THUMB_BLX23 = 21;
pub const ERROR_SXS_XML_E_INVALID_HEXIDECIMAL = c_long(14048);
pub const ERROR_PROCESS_NOT_IN_JOB = c_long(759);
pub const OR_INVALID_OXID = c_long(1910);
pub const CP_INSTALLED = 1;
pub const PS_JOIN_MASK = 61440;
pub const ES_PASSWORD = c_long(32);
pub const PCF_RLSD = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4) else @as(DWORD, 4);
pub const __has_lock_property = kind;
pub const DMPAPER_10X14 = 16;
pub const DOMAIN_ALIAS_RID_LOGGING_USERS = c_long(559);
pub const STRETCHBLT = 2048;
pub const CTRY_CARIBBEAN = 1;
pub const DS_SETFONT = c_long(64);
pub const IMFT_RADIOCHECK = 1;
pub const ERROR_INVALID_HANDLE = c_long(6);
pub const DATABITS_6 = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 2) else @as(WORD, 2);
pub const SS_NOTIFY = c_long(256);
pub const ERROR_SPARSE_NOT_ALLOWED_IN_TRANSACTION = c_long(6844);
pub const IMAGE_DLLCHARACTERISTICS_NO_SEH = 1024;
pub const __UINT32_FMTu__ = "u";
pub const ACCESS_MAX_MS_ACE_TYPE = 8;
pub const ERROR_DS_ALIAS_DEREF_PROBLEM = c_long(8244);
pub const SEM_NOALIGNMENTFAULTEXCEPT = 4;
pub const WN_CONNECTION_CLOSED = ERROR_CONNECTION_UNAVAIL;
pub const DM_IN_PROMPT = DM_PROMPT;
pub const ERROR_UNSUPPORTED_COMPRESSION = c_long(618);
pub const GMDI_USEDISABLED = c_long(1);
pub const SUBLANG_ORIYA_INDIA = 1;
pub const FACILITY_TPM_SOFTWARE = 41;
pub const SUBLANG_THAI_THAILAND = 1;
pub const ERROR_TOO_MANY_OPEN_FILES = c_long(4);
pub const ERROR_DS_SPN_VALUE_NOT_UNIQUE_IN_FOREST = c_long(8647);
pub const FEATURESETTING_PSLEVEL = 2;
pub const IME_CAND_MEANING = 3;
pub const DOF_SHELLDATA = 2;
pub const SECURITY_CAPABILITY_APP_RID = 1024;
pub const FAST_FAIL_LOADER_CONTINUITY_FAILURE = 45;
pub const BS_OWNERDRAW = c_long(11);
pub const IMAGE_DEBUG_TYPE_FIXUP = 6;
pub const IMAGE_REL_AMD64_SECREL7 = 12;
pub const IMAGE_SCN_MEM_FARDATA = 32768;
pub const PEN_MASK_TILT_Y = 8;
pub const GetEnhMetaFile = GetEnhMetaFileA;
pub const ERROR_REPARSE_POINT_ENCOUNTERED = c_long(4395);
pub const IMAGE_DLLCHARACTERISTICS_APPCONTAINER = 4096;
pub const KLF_SETFORPROCESS = 256;
pub const WSATRY_AGAIN = c_long(11002);
pub const POWER_ACTION_ACPI_USER_NOTIFY = 33554432;
pub const _Valid_ = _Valid_impl_;
pub const LOGPIXELSX = 88;
pub const TAPE_ABSOLUTE_POSITION = c_long(0);
pub const COMMON_LVB_SBCSDBCS = 768;
pub const MININT = if (@typeInfo(@TypeOf(~MAXINT)) == @import("builtin").TypeId.Pointer) @ptrCast(INT, ~MAXINT) else if (@typeInfo(@TypeOf(~MAXINT)) == @import("builtin").TypeId.Int) @intToPtr(INT, ~MAXINT) else @as(INT, ~MAXINT);
pub const SECURITY_TRUSTED_INSTALLER_RID3 = 1831038044;
pub const ERROR_CANT_CREATE_MORE_STREAM_MINIVERSIONS = c_long(6812);
pub const LOCKFILE_FAIL_IMMEDIATELY = 1;
pub const IO_REPARSE_TAG_CLOUD_3 = c_long(2415931418);
pub const BATTERY_PERCENTAGE_UNKNOWN = 255;
pub const LOCALE_SDURATION = 93;
pub const ERROR_DS_INVALID_SEARCH_FLAG = c_long(8500);
pub const DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = c_long(519);
pub const SS_BLACKRECT = c_long(4);
pub const APPCOMMAND_MEDIA_PAUSE = 47;
pub const DNS_ERROR_NO_TCPIP = c_long(9851);
pub const MB_ICONWARNING = MB_ICONEXCLAMATION;
pub const SPI_GETCONTACTVISUALIZATION = 8216;
pub const IMAGE_GUARD_RF_STRICT = 524288;
pub const WOW64_CONTEXT_SERVICE_ACTIVE = 268435456;
pub const DC_PAPERS = 2;
pub const DESKTOP_CREATEMENU = c_long(4);
pub const RESOURCEUSAGE_CONTAINER = 2;
pub const IMAGE_RESOURCE_DATA_IS_DIRECTORY = 2147483648;
pub const SPI_GETSCREENSAVESECURE = 118;
pub const KLF_SHIFTLOCK = 65536;
pub const ERROR_BAD_DESCRIPTOR_FORMAT = c_long(1361);
pub const STRUNCATE = 80;
pub const ERROR_INVALID_PRIMARY_GROUP = c_long(1308);
pub const CS_NOMOVECARET = 16384;
pub const ERROR_NOT_ENOUGH_QUOTA = c_long(1816);
pub const FILE_BEGIN = 0;
pub const DOMAIN_GROUP_RID_SCHEMA_ADMINS = c_long(518);
pub const ERROR_IP_ADDRESS_CONFLICT2 = c_long(612);
pub const JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2;
pub const HOLLOW_BRUSH = NULL_BRUSH;
pub const PBT_APMQUERYSUSPENDFAILED = 2;
pub const IMC_OPENSTATUSWINDOW = 34;
pub const __UINT64_FMTo__ = "llo";
pub const AD_CLOCKWISE = 2;
pub const SKF_RCTLLATCHED = 134217728;
pub const SPI_SETMOUSEDRAGOUTTHRESHOLD = 133;
pub const DDD_LUID_BROADCAST_DRIVE = 16;
pub const SUBLANG_SPANISH_COLOMBIA = 9;
pub const TOUCH_MASK_PRESSURE = 4;
pub const ReadULongPtrRaw = ReadULong64Raw;
pub const WINEVENT_OUTOFCONTEXT = 0;
pub const SDC_NO_OPTIMIZATION = 256;
pub const IO_REPARSE_TAG_PROJFS = c_long(2415919132);
pub const STATUS_WAIT_0 = if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(0)) else if (@typeInfo(@TypeOf(c_long(0))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(0)) else @as(DWORD, c_long(0));
pub const RIGHT_CTRL_PRESSED = 4;
pub const WM_POINTERENTER = 585;
pub const DIB_PAL_COLORS = 1;
pub const ERROR_DS_REPLICA_SET_CHANGE_NOT_ALLOWED_ON_DISABLED_CR = c_long(8595);
pub const GCP_REORDER = 2;
pub const INPUT_MOUSE = 0;
pub const LANG_VALENCIAN = 3;
pub const SECURITY_CONTEXT_TRACKING = 262144;
pub const VK_F1 = 112;
pub const SUBLANG_SERBIAN_LATIN = 2;
pub const PRODUCT_STORAGE_EXPRESS_SERVER = 20;
pub const STATE_SYSTEM_FLOATING = 4096;
pub const LB_ITEMFROMPOINT = 425;
pub const FACILITY_DPLAY = 21;
pub const DNS_ERROR_ZONESCOPE_IS_REFERENCED = c_long(9989);
pub const CPS_REVERT = 3;
pub const WM_ICONERASEBKGND = 39;
pub const ERROR_CLUSTER_SPACE_DEGRADED = c_long(5987);
pub const RPC_S_UNKNOWN_AUTHN_LEVEL = c_long(1748);
pub const SECURITY_CAPABILITY_REMOVABLE_STORAGE = c_long(10);
pub const CLAIM_SECURITY_ATTRIBUTE_CUSTOM_FLAGS = 4294901760;
pub const CE_BREAK = 16;
pub const ERROR_DS_CONSTRAINT_VIOLATION = c_long(8239);
pub const VER_MAJORVERSION = 2;
pub const ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = c_long(8304);
pub const ENOSR = 124;
pub const ERROR_SXS_PRIVATE_MANIFEST_CROSS_PATH_WITH_REPARSE_POINT = c_long(14020);
pub const DNS_ERROR_DP_BASE = 9900;
pub const ERROR_SUCCESS_RESTART_REQUIRED = c_long(3011);
pub const PAN_MIDLINE_STANDARD_SERIFED = 4;
pub const HISTORY_NO_DUP_FLAG = 1;
pub const FACILITY_DEBUGGERS = 176;
pub const WNNC_NET_DFS = 3866624;
pub const WM_GETTITLEBARINFOEX = 831;
pub const WNNC_NET_VMWARE = 4128768;
pub const RPC_X_WRONG_ES_VERSION = c_long(1828);
pub const LANG_KYRGYZ = 64;
pub const COLOR_INACTIVECAPTION = 3;
pub const __UINT_FAST64_FMTX__ = "llX";
pub const FAST_FAIL_UNSAFE_REGISTRY_ACCESS = 9;
pub const COLOR_ACTIVECAPTION = 2;
pub const ERROR_IPSEC_IKE_QM_EXPIRED = c_long(13895);
pub const SCRUB_DATA_OUTPUT_FLAG_INCOMPLETE = 1;
pub const DM_PANNINGWIDTH = c_long(134217728);
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_MASK = 3 << 8;
pub const ACCESS_DS_SOURCE_A = "DS";
pub const ES_DISPLAY_REQUIRED = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2) else @as(DWORD, 2);
pub const LR_COPYDELETEORG = 8;
pub const ERROR_CLUSTER_RESOURCE_VETOED_MOVE_INCOMPATIBLE_NODES = c_long(5953);
pub const InterlockedDecrement64 = _InterlockedDecrement64;
pub const toascii = __toascii;
pub const SEC_E_NO_SPM = SEC_E_INTERNAL_ERROR;
pub const LPD_SWAP_COPY = 1024;
pub const WM_MENUGETOBJECT = 292;
pub const ACTCTX_FLAG_ASSEMBLY_DIRECTORY_VALID = 4;
pub const COLOR_BTNHIGHLIGHT = 20;
pub const CPS_COMPLETE = 1;
pub const ERROR_THREAD_MODE_ALREADY_BACKGROUND = c_long(400);
pub const _BLANK = 64;
pub const WGL_SWAP_UNDERLAY8 = 8388608;
pub const PPM_IDLE_IMPLEMENTATION_MICROPEP = 3;
pub const SETCOLORTABLE = 4;
pub const S_PERIODVOICE = 3;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA = 0.990000;
pub const ERROR_CLUSTER_INVALID_REQUEST = c_long(5048);
pub const SERVICE_NOTIFY_STOPPED = 1;
pub const META_SETBKCOLOR = 513;
pub const ERROR_NETLOGON_NOT_STARTED = c_long(1792);
pub const IMAGE_REL_PPC_TYPEMASK = 255;
pub const ERROR_EVT_FILTER_TOO_COMPLEX = c_long(15026);
pub const PAN_SERIFSTYLE_INDEX = 1;
pub const HEAP_NO_SERIALIZE = 1;
pub const TRANSACTION_NOTIFY_MASK = 1073741823;
pub const DMDFO_DEFAULT = 0;
pub const GCPCLASS_LATIN = 1;
pub const ERROR_PLUGPLAY_QUERY_VETOED = c_long(683);
pub const EMR_POLYPOLYGON16 = 91;
pub const MF_MENUBREAK = c_long(64);
pub const WNNC_NET_VINES = 262144;
pub const STRETCH_ANDSCANS = BLACKONWHITE;
pub const IGP_SENTENCE = 12;
pub const ERROR_HIBERNATED = c_long(726);
pub const ERROR_FILE_INVALID = c_long(1006);
pub const META_DIBSTRETCHBLT = 2881;
pub const _WIN32_IE_NT4SP4 = _WIN32_IE_IE401;
pub const ERROR_LOG_CANT_DELETE = c_long(6616);
pub const ERROR_DS_ROLE_NOT_VERIFIED = c_long(8610);
pub const WN_BAD_PASSWORD = ERROR_INVALID_PASSWORD;
pub const SPI_SETMOUSEHOVERHEIGHT = 101;
pub const ERROR_REG_NAT_CONSUMPTION = c_long(1261);
pub const IMAGE_SCN_LNK_NRELOC_OVFL = 16777216;
pub const ERROR_INVALID_PASSWORDNAME = c_long(1216);
pub const ERROR_APPCONTAINER_REQUIRED = c_long(4251);
pub const SERVICE_CONTROL_SHUTDOWN = 5;
pub const HBMMENU_MBAR_CLOSE_D = if (@typeInfo(@TypeOf(6)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 6) else if (@typeInfo(@TypeOf(6)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 6) else @as(HBITMAP, 6);
pub const MDMSPKR_OFF = 0;
pub const DACL_SECURITY_INFORMATION = c_long(4);
pub const SE_SIGNING_LEVEL_AUTHENTICODE = 4;
pub const RRF_RT_REG_EXPAND_SZ = 4;
pub const DATABITS_7 = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 4) else @as(WORD, 4);
pub const PROCESS_CREATION_MITIGATION_POLICY_BLOCK_NON_MICROSOFT_BINARIES_DEFER = if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(0), i64 << 44) else if (@typeInfo(@TypeOf(i64 << 44)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(0), i64 << 44) else c_uint(0)(i64 << 44);
pub const PROCESSOR_ALPHA_21064 = 21064;
pub const InterlockedAddAcquire64 = _InlineInterlockedAdd64;
pub const SSTF_DISPLAY = 3;
pub const WM_QUERYENDSESSION = 17;
pub const IMAGE_REL_IA64_IMM14 = 1;
pub const ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = c_long(5033);
pub const ERROR_INSTALL_PREREQUISITE_FAILED = c_long(15613);
pub const PDC_MODE_ASPECTRATIOPRESERVED = 2048;
pub const ERROR_DS_CANT_MIX_MASTER_AND_REPS = c_long(8331);
pub const ERROR_SERVICE_LOGON_FAILED = c_long(1069);
pub const ERROR_INSTALL_REGISTRATION_FAILURE = c_long(15606);
pub const SPI_SETCOMBOBOXANIMATION = 4101;
pub const COLOR_MENUBAR = 30;
pub const VS_FF_PATCHED = c_long(4);
pub const ERROR_DS_NONEXISTENT_MAY_HAVE = c_long(8387);
pub const HTSIZE = HTGROWBOX;
pub const FAST_FAIL_LOW_LABEL_ACCESS_DENIED = 52;
pub const ERROR_STATE_WRITE_COMPOSITE_SETTING_FAILED = c_long(15812);
pub const ERROR_CLUSTER_CSV_IO_PAUSE_TIMEOUT = c_long(5979);
pub const DeviceCapabilities = DeviceCapabilitiesA;
pub const HORZSIZE = 4;
pub const WNetGetResourceParent = WNetGetResourceParentA;
pub const ERROR_NO_DATA_DETECTED = c_long(1104);
pub const FS_BALTIC = c_long(128);
pub const ERROR_NOTIFY_CLEANUP = c_long(745);
pub const MF_BYPOSITION = c_long(1024);
pub const SOUND_SYSTEM_MINIMIZE = 9;
pub const IMN_OPENSTATUSWINDOW = 2;
pub const IMAGE_SYM_TYPE_DWORD = 15;
pub const DMPAPER_A5_ROTATED = 78;
pub const IMAGE_SYM_DTYPE_POINTER = 1;
pub const IMAGE_REL_ARM64_SECREL_LOW12A = 9;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_MASK = if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 60) else if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 60) else c_uint(3)(i64 << 60);
pub const ERROR_CLUSTER_QUORUMLOG_NOT_FOUND = c_long(5891);
pub const GetTempFileName = GetTempFileNameA;
pub const VIF_DIFFTYPE = c_long(32);
pub const IE_BADID = -1;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8;
pub const CRITICAL_SECTION_NO_DEBUG_INFO = RTL_CRITICAL_SECTION_FLAG_NO_DEBUG_INFO;
pub const BAUD_1200 = if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 64) else if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 64) else @as(DWORD, 64);
pub const LOGPIXELSY = 90;
pub const PAN_CONTRAST_MEDIUM_HIGH = 7;
pub const ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = c_long(8416);
pub const DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS = c_long(9977);
pub const SECURITY_TRUSTED_INSTALLER_RID4 = 1853292631;
pub const MAX_COMPUTERNAME_LENGTH = 15;
pub const WINDING = 2;
pub const WMSZ_TOPRIGHT = 5;
pub const IMAGE_GUARD_DELAYLOAD_IAT_IN_ITS_OWN_SECTION = 8192;
pub const TAPE_DRIVE_GET_LOGICAL_BLK = 2097152;
pub const PROCESSOR_SHx_SH4 = 104;
pub const PST_NETWORK_BRIDGE = if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 256) else if (@typeInfo(@TypeOf(256)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 256) else @as(DWORD, 256);
pub const POWERBUTTON_ACTION_VALUE_TURN_OFF_THE_DISPLAY = 8;
pub const META_FRAMEREGION = 1065;
pub const BS_RIGHT = c_long(512);
pub const ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION = 2;
pub const SC_SCREENSAVE = 61760;
pub const LOCALE_ITLZERO = 37;
pub const ERROR_PATCH_NO_SEQUENCE = c_long(1648);
pub const IMAGE_REL_ALPHA_INLINE_REFLONG = 9;
pub const WM_FONTCHANGE = 29;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const ERROR_CANNOT_ACCEPT_TRANSACTED_WORK = c_long(6847);
pub const IMAGE_REL_BASED_RESERVED = 6;
pub const SPI_GETCARETBROWSING = 4172;
pub const PEERDIST_ERROR_ALREADY_COMPLETED = c_long(4060);
pub const ERROR_IP_ADDRESS_CONFLICT1 = c_long(611);
pub const PDC_RESOLUTION = 512;
pub const __INT32_FMTd__ = "d";
pub const SYSPAL_ERROR = 0;
pub const GetWindowsDirectory = GetWindowsDirectoryA;
pub const ERROR_CAPAUTHZ_SCCD_INVALID_CATALOG = c_long(456);
pub const ERROR_IPSEC_IKE_REQUIRE_CP_PAYLOAD_MISSING = c_long(13900);
pub const THREAD_POWER_THROTTLING_CURRENT_VERSION = 1;
pub const CharUpper = CharUpperA;
pub const MSGFLTINFO_ALREADYALLOWED_FORWND = 1;
pub const SPI_SETMOUSEBUTTONSWAP = 33;
pub const SERVICE_TRIGGER_ACTION_SERVICE_START = 1;
pub const _Post1_impl_ = p1;
pub const DFCS_HOT = 4096;
pub const DMDITHER_ERRORDIFFUSION = 5;
pub const PRODUCT_HOLOGRAPHIC_BUSINESS = 136;
pub const S_SERMACT = -3;
pub const ILLUMINANT_D50 = 4;
pub const LOCALE_SNATIVEDIGITS = 19;
pub const OLE_E_LAST = if (@typeInfo(@TypeOf(c_long(2147746047))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(2147746047)) else if (@typeInfo(@TypeOf(c_long(2147746047))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(2147746047)) else @as(HRESULT, c_long(2147746047));
pub const ERROR_DS_NO_ATTRIBUTE_OR_VALUE = c_long(8202);
pub const LOGON32_PROVIDER_WINNT50 = 3;
pub const SetDllDirectory = SetDllDirectoryA;
pub const ERROR_DS_INSUFF_ACCESS_RIGHTS = c_long(8344);
pub const ERROR_ACCESS_DISABLED_NO_SAFER_UI_BY_POLICY = c_long(786);
pub const CM_OUT_OF_GAMUT = 255;
pub const SECURITY_LOGON_IDS_RID_COUNT = c_long(3);
pub const DFCS_BUTTONCHECK = 0;
pub const FACILITY_SPP = 256;
pub const ERROR_DEPENDENT_SERVICES_RUNNING = c_long(1051);
pub const BS_HOLLOW = BS_NULL;
pub const CB_ERR = -1;
pub const ENUM_REGISTRY_SETTINGS = if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -2) else if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -2) else @as(DWORD, -2);
pub const SPI_GETSHOWSOUNDS = 56;
pub const MFT_STRING = MF_STRING;
pub const BAUD_075 = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 1) else @as(DWORD, 1);
pub const ERROR_EMPTY = c_long(4306);
pub const ERROR_SXS_XML_E_INVALID_UNICODE = c_long(14049);
pub const PPM_FIRMWARE_CPC = 262144;
pub const NI_FINALIZECONVERSIONRESULT = 20;
pub const SUBLANG_MAORI_NEW_ZEALAND = 1;
pub const IE_MEMORY = -4;
pub const MEMORY_PRIORITY_VERY_LOW = 1;
pub const ERROR_DS_MISSING_EXPECTED_ATT = c_long(8411);
pub const SPI_SETACTIVEWINDOWTRACKING = 4097;
pub const InsertMenu = InsertMenuA;
pub const VP_TV_STANDARD_PAL_I = 32;
pub const IMAGE_SYM_SECTION_MAX_EX = MAXLONG;
pub const RPC_S_UNSUPPORTED_AUTHN_LEVEL = c_long(1821);
pub const DMBIN_ENVELOPE = 5;
pub const GETTRACKKERNTABLE = 259;
pub const S_PERIOD512 = 0;
pub const PRODUCT_ENTERPRISE_SUBSCRIPTION_N = 141;
pub const CAL_ITWODIGITYEARMAX = 48;
pub const ACE_OBJECT_TYPE_PRESENT = 1;
pub const ERROR_LOG_METADATA_FLUSH_FAILED = c_long(6645);
pub const __UA_WCSLEN = ua_wcslen;
pub const EMARCH_ENC_I17_IMM41a_SIZE_X = 10;
pub const NTM_ITALIC = c_long(1);
pub const ERROR_INSTALL_REJECTED = c_long(1654);
pub const CFS_EXCLUDE = 128;
pub const NORM_IGNORESYMBOLS = 4;
pub const ERROR_CLUSTER_NODE_UNREACHABLE = c_long(5051);
pub const WSAECONNRESET = c_long(10054);
pub const PO_THROTTLE_ADAPTIVE = 3;
pub const FRS_ERR_SERVICE_COMM = c_long(8006);
pub const ReadULongPtrNoFence = ReadULong64NoFence;
pub const VER_PLATFORMID = 8;
pub const CCHILDREN_TITLEBAR = 5;
pub const RPC_S_INVALID_NAME_SYNTAX = c_long(1736);
pub const RPC_S_OBJECT_NOT_FOUND = c_long(1710);
pub const ERROR_FUNCTION_NOT_CALLED = c_long(1626);
pub const IMAGE_REL_ALPHA_SECTION = 14;
pub const FVIRTKEY = TRUE;
pub const JOB_OBJECT_UILIMIT_DESKTOP = 64;
pub const SPI_LANGDRIVER = 12;
pub const ERROR_IO_REISSUE_AS_CACHED = c_long(3950);
pub const ERROR_STACK_OVERFLOW_READ = c_long(599);
pub const ERROR_DS_GC_REQUIRED = c_long(8547);
pub const SUBLANG_LOWER_SORBIAN_GERMANY = 2;
pub const EMR_SETICMMODE = 98;
pub const EMR_RESERVED_110 = 110;
pub const BN_CLICKED = 0;
pub const ERROR_DS_SRC_SID_EXISTS_IN_FOREST = c_long(8539);
pub const ERROR_SYNC_FOREGROUND_REFRESH_REQUIRED = c_long(1274);
pub const RI_MOUSE_BUTTON_3_UP = RI_MOUSE_MIDDLE_BUTTON_UP;
pub const POINTER_FLAG_INRANGE = 2;
pub const PRODUCT_SB_SOLUTION_SERVER = 50;
pub const TranslateAccelerator = TranslateAcceleratorA;
pub const WGL_SWAP_UNDERLAY9 = 16777216;
pub const SERVICE_SID_TYPE_NONE = 0;
pub const WHEEL_DELTA = 120;
pub const SUBLANG_ROMANSH_SWITZERLAND = 1;
pub const ERROR_ACCESS_DENIED = c_long(5);
pub const FindFirstVolume = FindFirstVolumeA;
pub const SERVICE_CONTROL_PRESHUTDOWN = 15;
pub const ENABLE_PROCESSED_INPUT = 1;
pub const CreateSemaphoreEx = CreateSemaphoreExA;
pub const LOCALE_IPOSSEPBYSPACE = 85;
pub const STKFORCEINLINE = FORCEINLINE;
pub const ERROR_NO_ASSOCIATION = c_long(1155);
pub const FLASHW_STOP = 0;
pub const RIM_TYPEHID = 2;
pub const PSINJECT_VMSAVE = 200;
pub const ERROR_DS_CANT_CACHE_ATT = c_long(8401);
pub const IME_CMODE_RESERVED = 4026531840;
pub const VK_PRIOR = 33;
pub const SUBLANG_GREEK_GREECE = 1;
pub const IMAGE_SUBSYSTEM_POSIX_CUI = 7;
pub const DNS_ERROR_AUTOZONE_ALREADY_EXISTS = c_long(9610);
pub const ERROR_UNEXPECTED_OMID = c_long(4334);
pub const ERROR_SYSTEM_HIVE_TOO_LARGE = c_long(653);
pub const SECURITY_PROCESS_PROTECTION_LEVEL_ANTIMALWARE_RID = c_long(1536);
pub const PAN_STROKE_GRADUAL_TRAN = 3;
pub const _WIN32_IE_NT4SP5 = _WIN32_IE_IE401;
pub const PC_NOCOLLAPSE = 4;
pub const LBS_DISABLENOSCROLL = c_long(4096);
pub const ERROR_KERNEL_APC = c_long(738);
pub const IMAGE_REL_PPC_TOCREL16 = 8;
pub const PROCESS_MODE_BACKGROUND_BEGIN = 1048576;
pub const WSAENETRESET = c_long(10052);
pub const CTRY_COSTA_RICA = 506;
pub const SERVICE_STOP_REASON_MAJOR_MAX_CUSTOM = 16711680;
pub const ERROR_CLUSTERSET_MANAGEMENT_CLUSTER_UNREACHABLE = c_long(5999);
pub const SHUTDOWN_INSTALL_UPDATES = 64;
pub const SERVICE_START_PENDING = 2;
pub const QS_HOTKEY = 128;
pub const MND_ENDMENU = 1;
pub const WM_MOVING = 534;
pub const WS_MINIMIZE = c_long(536870912);
pub const REG_NOTIFY_CHANGE_NAME = c_long(1);
pub const FILE_NOTIFY_CHANGE_ATTRIBUTES = 4;
pub const MDM_FORCED_EC = 4;
pub const InterlockedIncrementNoFence = _InterlockedIncrement;
pub const FILE_DAX_VOLUME = 536870912;
pub const ERROR_IPSEC_IKE_INVALID_HASH_ALG = c_long(13871);
pub const SE_SELF_RELATIVE = 32768;
pub const RegQueryValue = RegQueryValueA;
pub const DNS_ERROR_NEED_WINS_SERVERS = c_long(9616);
pub const EVENT_MODIFY_STATE = 2;
pub const ERROR_RESOURCEMANAGER_NOT_FOUND = c_long(6716);
pub const ERROR_INVALID_OPLOCK_PROTOCOL = c_long(301);
pub const ERROR_RDP_PROTOCOL_ERROR = c_long(7065);
pub const DNS_ERROR_RRL_INVALID_TC_RATE = c_long(9915);
pub const PPM_FIRMWARE_XPSS = 128;
pub const LBS_SORT = c_long(2);
pub const ESB_DISABLE_DOWN = 2;
pub const ASFW_ANY = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, -1) else @as(DWORD, -1);
pub const MUI_CALLBACK_ALL_FLAGS = MUI_CALLBACK_FLAG_UPGRADED_INSTALLATION;
pub const ERROR_EXCL_SEM_ALREADY_OWNED = c_long(101);
pub const TC_SCROLLBLT = 65536;
pub const ERROR_LOG_NO_RESTART = c_long(6611);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_PROP = c_long(13831);
pub const OEM_FIXED_FONT = 10;
pub const WNNC_NET_SRT = 3604480;
pub const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;
pub const CBN_SETFOCUS = 3;
pub const ERROR_INVALID_PROFILE = c_long(2011);
pub const ERROR_DS_CANT_DERIVE_SPN_FOR_DELETED_DOMAIN = c_long(8603);
pub const DNS_ERROR_NOT_ALLOWED_UNDER_DNAME = c_long(9570);
pub const WSA_QOS_EUNKOWNPSOBJ = c_long(11024);
pub const ERROR_SECONDARY_IC_PROVIDER_NOT_REGISTERED = c_long(15321);
pub const WM_ACTIVATE = 6;
pub const WM_STYLECHANGED = 125;
pub const ERROR_EVT_INVALID_OPERATION_OVER_ENABLED_DIRECT_CHANNEL = c_long(15022);
pub const ERROR_CTX_WINSTATION_NAME_INVALID = c_long(7001);
pub const LLMHF_LOWER_IL_INJECTED = 2;
pub const STN_CLICKED = 0;
pub const FACILITY_DIRECT3D12_DEBUG = 2175;
pub const ERROR_GPIO_INVALID_REGISTRATION_PACKET = c_long(15324);
pub const TIME_NOTIMEMARKER = 4;
pub const RGN_XOR = 3;
pub const ERROR_PKINIT_FAILURE = c_long(1263);
pub const InterlockedDecrementAcquire64 = _InterlockedDecrement64;
pub const HTCLIENT = 1;
pub const ENLISTMENT_QUERY_INFORMATION = 1;
pub const WSA_QOS_NO_RECEIVERS = c_long(11008);
pub const NFR_UNICODE = 2;
pub const ACPI_PPM_SOFTWARE_ALL = 252;
pub const SECURITY_TRUSTED_INSTALLER_RID5 = 2271478464;
pub const ERROR_BAD_USER_PROFILE = c_long(1253);
pub const PASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = PASSEMBLY_FILE_DETAILED_INFORMATION;
pub const ERROR_REMOTE_STORAGE_NOT_ACTIVE = c_long(4351);
pub const PROCESSOR_ARCHITECTURE_ARM64 = 12;
pub const TOKEN_SOURCE_LENGTH = 8;
pub const UNIVERSAL_NAME_INFO_LEVEL = 1;
pub const PROC_IDLE_BUCKET_COUNT = 6;
pub const SECURITY_TERMINAL_SERVER_RID = c_long(13);
pub const SE_PRIVILEGE_USED_FOR_ACCESS = c_long(2147483648);
pub const WOW64_CONTEXT_i486 = 65536;
pub const SECURITY_ENTERPRISE_CONTROLLERS_RID = c_long(9);
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_RESERVED = if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 56) else if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 56) else c_uint(3)(i64 << 56);
pub const ERROR_STATIC_INIT = c_long(4002);
pub const SetLocaleInfo = SetLocaleInfoA;
pub const SERVICE_CONTROL_SESSIONCHANGE = 14;
pub const __DBL_MAX_EXP__ = 1024;
pub const DMDISPLAYFLAGS_TEXTMODE = 4;
pub const InterlockedOrNoFence = _InterlockedOr;
pub const FACILITY_MBN = 84;
pub const PDC_ORIENTATION_0 = 4;
pub const LOCALE_SABBREVLANGNAME = 3;
pub const STORAGE_INFO_FLAGS_ALIGNED_DEVICE = 1;
pub const InterlockedOr64 = _InterlockedOr64;
pub const ERROR_INTERRUPT_STILL_CONNECTED = c_long(764);
pub const WSA_QOS_EOBJLENGTH = c_long(11022);
pub const PCF_16BITMODE = if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 512) else if (@typeInfo(@TypeOf(512)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 512) else @as(DWORD, 512);
pub const SWP_ASYNCWINDOWPOS = 16384;
pub const ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = c_long(8201);
pub const PT_CLOSEFIGURE = 1;
pub const REG_SZ = c_ulong(1);
pub const PEERDIST_ERROR_SHUTDOWN_IN_PROGRESS = c_long(4056);
pub const SPVERSION_MASK = 65280;
pub const PBT_APMBATTERYLOW = 9;
pub const PROCESS_CREATION_MITIGATION_POLICY2_STRICT_CONTROL_FLOW_GUARD_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 8) else if (@typeInfo(@TypeOf(i64 << 8)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 8) else c_uint(2)(i64 << 8);
pub const PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION = 2;
pub const S_SERDTP = -8;
pub const ERROR_INVALID_GROUP_ATTRIBUTES = c_long(1345);
pub const ERROR_DS_NONSAFE_SCHEMA_CHANGE = c_long(8508);
pub const FAST_FAIL_STACK_COOKIE_CHECK_FAILURE = 2;
pub const WM_MOUSEMOVE = 512;
pub const PENVISUALIZATION_CURSOR = 32;
pub const ERROR_WAIT_NO_CHILDREN = c_long(128);
pub const ERROR_INVALID_EA_HANDLE = c_long(278);
pub const ERROR_IMAGE_MACHINE_TYPE_MISMATCH_EXE = c_long(720);
pub const PROGRESS_QUIET = 3;
pub const WM_MDIICONARRANGE = 552;
pub const STANDARD_RIGHTS_READ = READ_CONTROL;
pub const SUBLANG_NEPALI_NEPAL = 1;
pub const IMAGE_FILE_UP_SYSTEM_ONLY = 16384;
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = 217;
pub const SHUTDOWN_RESTART = 4;
pub const ERROR_DS_SENSITIVE_GROUP_VIOLATION = c_long(8505);
pub const EDEADLOCK = EDEADLK;
pub const WH_JOURNALRECORD = 0;
pub const VK_APPS = 93;
pub const ERROR_CURRENT_DOMAIN_NOT_ALLOWED = c_long(1399);
pub const POINTER_64 = __ptr64;
pub const SM_DEBUG = 22;
pub const IMAGE_REL_I386_ABSOLUTE = 0;
pub const VP_TV_STANDARD_PAL_H = 16;
pub const InterlockedCompareExchangePointerRelease = _InterlockedCompareExchangePointer;
pub const GEOID_NOT_AVAILABLE = -1;
pub const ERROR_ENCRYPTION_DISABLED = c_long(430);
pub const SPI_GETICONMETRICS = 45;
pub const SUBLANG_NORWEGIAN_BOKMAL = 1;
pub const SDC_VALIDATE = 64;
pub const C3_NONSPACING = 1;
pub const IMAGE_REL_CEE_SECTION = 4;
pub const WSA_QOS_ADMISSION_FAILURE = c_long(11010);
pub const DEVICE_FONTTYPE = 2;
pub const MSGF_DIALOGBOX = 0;
pub const __ATOMIC_CONSUME = 1;
pub const ENABLE_VIRTUAL_TERMINAL_INPUT = 512;
pub const CREATE_NO_WINDOW = 134217728;
pub const WS_EX_LAYERED = 524288;
pub const ERROR_DS_WRONG_LINKED_ATT_SYNTAX = c_long(8528);
pub const PIPE_ACCESS_DUPLEX = 3;
pub const DNS_ERROR_DATABASE_BASE = 9700;
pub const WSAEADDRINUSE = c_long(10048);
pub const CBR_2400 = 2400;
pub const WGL_SWAP_UNDERLAY15 = 1073741824;
pub const WN_BAD_DEV_TYPE = ERROR_BAD_DEV_TYPE;
pub const PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 12) else if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 12) else c_uint(1)(i64 << 12);
pub const NTDDI_VISTA = NTDDI_WIN6;
pub const WM_NCMOUSEMOVE = 160;
pub const EMR_RESERVED_117 = 117;
pub const SPI_SETFASTTASKSWITCH = 36;
pub const PDCAP_D1_SUPPORTED = 2;
pub const PROGRESS_CONTINUE = 0;
pub const FRS_ERR_SYSVOL_DEMOTE = c_long(8016);
pub const KEY_CREATE_SUB_KEY = 4;
pub const WOW64_CONTEXT_EXCEPTION_REPORTING = 2147483648;
pub const VOS_DOS_WINDOWS32 = c_long(65540);
pub const ENCLAVE_TYPE_VBS = 16;
pub const WGL_SWAP_UNDERLAY6 = 2097152;
pub const InterlockedCompareExchangeRelease = _InterlockedCompareExchange;
pub const SERKF_AVAILABLE = 2;
pub const SCS_CAP_COMPSTR = 1;
pub const RegCreateKey = RegCreateKeyA;
pub const FILE_ATTRIBUTE_HIDDEN = 2;
pub const UNICODE_STRING_MAX_CHARS = 32767;
pub const DISPLAYCONFIG_TARGET_IN_USE = 1;
pub const LOAD_LIBRARY_AS_DATAFILE_EXCLUSIVE = 64;
pub const SIZE_MAXHIDE = 4;
pub const GetCommandLine = GetCommandLineA;
pub const LPD_SUPPORT_GDI = 16;
pub const QUERYESCSUPPORT = 8;
pub const SPI_SETMOUSEHOVERTIME = 103;
pub const EVENT_MIN = 1;
pub const GetDateFormat = GetDateFormatA;
pub const RIDEV_APPKEYS = 1024;
pub const GlobalAddAtom = GlobalAddAtomA;
pub const TC_HARDERR = 1;
pub const ERROR_APPEXEC_INVALID_HOST_STATE = c_long(3064);
pub const DISPLAYCONFIG_PATH_MODE_IDX_INVALID = 4294967295;
pub const EMR_OFFSETCLIPRGN = 26;
pub const ERROR_INSTALL_PACKAGE_OPEN_FAILED = c_long(1619);
pub const ERROR_DLL_MIGHT_BE_INSECURE = c_long(686);
pub const SECURITY_SERVICE_RID = c_long(6);
pub const _WIN32_IE_NT4SP2 = _WIN32_IE_IE20;
pub const NORM_IGNORECASE = 1;
pub const PRODUCT_ENTERPRISE_SERVER_V = 38;
pub const TAPE_DRIVE_TENSION = 2147483650;
pub const RegOpenKeyEx = RegOpenKeyExA;
pub const _Has_lock_level_ = level;
pub const WC_DIALOG = if (@typeInfo(@TypeOf(32770)) == @import("builtin").TypeId.Pointer) @ptrCast(MAKEINTATOM, 32770) else if (@typeInfo(@TypeOf(32770)) == @import("builtin").TypeId.Int) @intToPtr(MAKEINTATOM, 32770) else @as(MAKEINTATOM, 32770);
pub const VK_FINAL = 24;
pub const SKF_CONFIRMHOTKEY = 8;
pub const SHTDN_REASON_MINOR_HOTFIX_UNINSTALL = 23;
pub const DATABITS_5 = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 1) else @as(WORD, 1);
pub const XACT_S_FIRST = 315392;
pub const VK_OEM_COMMA = 188;
pub const ERROR_MEMBER_NOT_IN_ALIAS = c_long(1377);
pub const ERROR_DS_POLICY_NOT_KNOWN = c_long(8618);
pub const BACKGROUND_GREEN = 32;
pub const PROCESSOR_DUTY_CYCLING_DISABLED = 0;
pub const SCALINGFACTORY = 115;
pub const __INTMAX_MAX__ = c_longlong(9223372036854775807);
pub const SEC_NOCACHE = 268435456;
pub const SECURITY_CAPABILITY_DOCUMENTS_LIBRARY = c_long(7);
pub const SORT_CHINESE_BIG5 = 0;
pub const DISPLAY_DEVICE_VGA_COMPATIBLE = 16;
pub const GetWindowText = GetWindowTextA;
pub const PPM_FIRMWARE_ACPI1TSTATES = 4;
pub const RESETDEV = 7;
pub const DEVICEFAMILYDEVICEFORM_HMD = 11;
pub const SS_WHITEFRAME = c_long(9);
pub const CreateFile = CreateFileA;
pub const RESOURCEDISPLAYTYPE_SHARE = 3;
pub const EISDIR = 21;
pub const DS_S_SUCCESS = NO_ERROR;
pub const ERROR_LOG_FULL = c_long(6628);
pub const ERROR_NO_SITE_SETTINGS_OBJECT = c_long(8619);
pub const PAGE_ENCLAVE_DECOMMIT = 268435456;
pub const WTS_SESSION_LOCK = 7;
pub const ERROR_TOO_MANY_LUIDS_REQUESTED = c_long(1333);
pub const SERVICE_NOTIFY_DELETE_PENDING = 512;
pub const ERROR_IPSEC_IKE_QUEUE_DROP_MM = c_long(13811);
pub const VFT_DLL = c_long(2);
pub const SECURITY_AUTHENTICATION_KEY_PROPERTY_MFA_RID = c_long(5);
pub const __INTMAX_FMTd__ = "lld";
pub const SECURITY_INTERACTIVE_RID = c_long(4);
pub const SB_GRAD_RECT = 16;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const MEMORY_PRIORITY_MEDIUM = 3;
pub const WNNC_NET_RIVERFRONT1 = 1966080;
pub const RIDEV_EXMODEMASK = 240;
pub const FILE_SUPPORTS_GHOSTING = 1073741824;
pub const GCL_HICON = -14;
pub const CO_S_LAST = c_long(262655);
pub const IMAGE_HOT_PATCH_CHUNK_SIZE = 4095;
pub const GGO_METRICS = 0;
pub const PROCESSOR_PPC_620 = 620;
pub const APPCOMMAND_BASS_DOWN = 19;
pub const WA_CLICKACTIVE = 2;
pub const DMPAPER_DSHEET = 25;
pub const IMAGE_FILE_MACHINE_I386 = 332;
pub const SS_ENDELLIPSIS = c_long(16384);
pub const JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024;
pub const DDL_ARCHIVE = 32;
pub const ERROR_DISK_QUOTA_EXCEEDED = c_long(1295);
pub const GetDriveType = GetDriveTypeA;
pub const OpenJobObject = OpenJobObjectA;
pub const CTRY_KAZAKSTAN = 7;
pub const PRODUCT_ENTERPRISEG = 171;
pub const _Releases_lock_ = lock;
pub const ERROR_JOIN_TO_JOIN = c_long(138);
pub const FACILITY_AUDIOSTREAMING = 1094;
pub const ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = c_long(8538);
pub const TOUCHEVENTF_DOWN = 2;
pub const _User_on_ = expr;
pub const _Requires_exclusive_lock_held_ = lock;
pub const TC_SA_CONTIN = 256;
pub const PAN_FAMILYTYPE_INDEX = 0;
pub const PRODUCT_MEDIUMBUSINESS_SERVER_SECURITY = 31;
pub const DST_ICON = 3;
pub const IMAGE_REL_IA64_DIR64 = 5;
pub const RGN_AND = 1;
pub const SHUTDOWN_GRACE_OVERRIDE = 32;
pub const ERROR_TOO_MANY_CMDS = c_long(56);
pub const ERROR_SYSTEM_DEVICE_NOT_FOUND = c_long(15299);
pub const FIND_ACTCTX_SECTION_KEY_RETURN_HACTCTX = 1;
pub const ERROR_CLOUD_FILE_REQUEST_TIMEOUT = c_long(426);
pub const __SSSE3__ = 1;
pub const WM_MOUSEFIRST = 512;
pub const VP_TV_STANDARD_NTSC_M_J = 2;
pub const WINAPIV = __cdecl;
pub const ERROR_OFFLOAD_WRITE_FLT_NOT_SUPPORTED = c_long(4441);
pub const ERROR_ERRORS_ENCOUNTERED = c_long(774);
pub const ERROR_CLUSTER_RHS_FAILED_INITIALIZATION = c_long(5931);
pub const ERROR_BAD_DRIVER = c_long(2001);
pub const WM_POINTERUP = 583;
pub const RPC_S_NO_MORE_BINDINGS = c_long(1806);
pub const SS_SIMPLE = c_long(11);
pub const WSAEREMOTE = c_long(10071);
pub const DM_DEFAULTSOURCE = c_long(512);
pub const SID_HASH_SIZE = 32;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_OFF = 2 << 8;
pub const WN_NO_MORE_ENTRIES = ERROR_NO_MORE_ITEMS;
pub const SW_OTHERZOOM = 2;
pub const SBM_GETSCROLLBARINFO = 235;
pub const CONNECT_REFCOUNT = 64;
pub const FILE_FLAG_POSIX_SEMANTICS = 16777216;
pub const ObjectPrivilegeAuditAlarm = ObjectPrivilegeAuditAlarmA;
pub const ERROR_DS_NO_RIDS_ALLOCATED = c_long(8208);
pub const SPI_SETNONCLIENTMETRICS = 42;
pub const WNNC_NET_RDR2SAMPLE = 2424832;
pub const IDN_RAW_PUNYCODE = 8;
pub const ERROR_DEVICE_NO_RESOURCES = c_long(322);
pub const MAPVK_VSC_TO_VK_EX = 3;
pub const IMAGE_REL_ARM_BLX23T = 21;
pub const PM_NOYIELD = 2;
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const DMNUP_SYSTEM = 1;
pub const EBADMSG = 104;
pub const MDM_SPEED_ADJUST = 128;
pub const __UINT64_MAX__ = c_ulonglong(18446744073709551615);
pub const SECURITY_OTHER_ORGANIZATION_RID = c_long(1000);
pub const IMAGE_REL_PPC_ADDR32NB = 10;
pub const DM_COPIES = c_long(256);
pub const CBR_110 = 110;
pub const DMPAPER_P32KBIG = 95;
pub const WM_MDITILE = 550;
pub const WSAETOOMANYREFS = c_long(10059);
pub const PRODUCT_STANDARD_EVALUATION_SERVER = 79;
pub const PROCESS_CREATE_THREAD = 2;
pub const IMAGE_FILE_MACHINE_MIPSFPU = 870;
pub const IMAGE_HOT_PATCH_CALL_TARGET = 278528;
pub const ERROR_DS_CANT_REM_MISSING_ATT = c_long(8324);
pub const CONNECT_CMD_SAVECRED = 4096;
pub const WGL_SWAP_UNDERLAY14 = 536870912;
pub const IME_CMODE_CHINESE = IME_CMODE_NATIVE;
pub const META_LINETO = 531;
pub const NTDDI_WS03SP4 = 84018176;
pub const ERROR_SXS_XML_E_EXPECTINGTAGEND = c_long(14038);
pub const SetConsoleTitle = SetConsoleTitleA;
pub const IMAGE_HOT_PATCH_FUNCTION = 114688;
pub const ERROR_INSTALL_FAILURE = c_long(1603);
pub const ERROR_NO_ADMIN_ACCESS_POINT = c_long(5090);
pub const ACTIVATION_CONTEXT_BASIC_INFORMATION_DEFINED = 1;
pub const MDM_TONE_DIAL = 256;
pub const META_SETROP2 = 260;
pub const WGL_SWAP_UNDERLAY7 = 4194304;
pub const KF_REPEAT = 16384;
pub const META_DIBBITBLT = 2368;
pub const LoadCursorFromFile = LoadCursorFromFileA;
pub const CB_OKAY = 0;
pub const exception_code = _exception_code;
pub const ERROR_HWNDS_HAVE_DIFF_PARENT = c_long(1441);
pub const ERROR_CLOUD_FILE_PROPERTY_CORRUPT = c_long(394);
pub const LMEM_MOVEABLE = 2;
pub const ERROR_EVT_FILTER_INVARG = c_long(15016);
pub const VFT2_DRV_PRINTER = c_long(1);
pub const EXCEPTION_CONTINUE_SEARCH = 0;
pub const OLEOBJ_E_LAST = c_long(2147746191);
pub const PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_MASK = if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 32) else if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 32) else c_uint(3)(i64 << 32);
pub const WAIT_IO_COMPLETION = STATUS_USER_APC;
pub const LookupPrivilegeName = LookupPrivilegeNameA;
pub const VK_INSERT = 45;
pub const PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
pub const EN_HSCROLL = 1537;
pub const TOUCHEVENTF_MOVE = 1;
pub const ERROR_CONNECTION_INVALID = c_long(1229);
pub const EVENT_OBJECT_REORDER = 32772;
pub const GGL_PRIVATE = 4;
pub const CAL_SDAYNAME2 = 8;
pub const PAGE_ENCLAVE_UNVALIDATED = 536870912;
pub const XSTATE_AVX512_KMASK = 5;
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_UINT64 = 2;
pub const ERROR_IPSEC_TRANSPORT_FILTER_EXISTS = c_long(13008);
pub const _WIN32_IE_NT4SP3 = _WIN32_IE_IE302;
pub const ACTIVATION_CONTEXT_PATH_TYPE_URL = 3;
pub const IMAGE_REL_PPC_TOCREL14 = 9;
pub const __tune_corei7__ = 1;
pub const IMAGE_HOT_PATCH_CHUNK_TARGET_RVA = 16384;
pub const PF_RDPID_INSTRUCTION_AVAILABLE = 33;
pub const GUI_SYSTEMMENUMODE = 8;
pub const EVENT_SYSTEM_DRAGDROPEND = 15;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_PARAMETER = c_long(413);
pub const FAST_FAIL_HEAP_METADATA_CORRUPTION = 50;
pub const ERROR_SCOPE_NOT_FOUND = c_long(318);
pub const CreateWaitableTimerEx = CreateWaitableTimerExA;
pub const ERROR_INVALID_LDT_OFFSET = c_long(563);
pub const REASON_UNKNOWN = SHTDN_REASON_UNKNOWN;
pub const ERROR_NOT_SAME_DEVICE = c_long(17);
pub const FORCEINLINE = __forceinline;
pub const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;
pub const WGL_FONT_LINES = 0;
pub const SECURITY_PACKAGE_BASE_RID = c_long(64);
pub const KEY_WOW64_64KEY = 256;
pub const LANG_ROMANSH = 23;
pub const WNetAddConnection = WNetAddConnectionA;
pub const ERROR_OBJECT_NOT_EXTERNALLY_BACKED = c_long(342);
pub const ua_CharUpper = CharUpperA;
pub const LPD_SWAP_EXCHANGE = 512;
pub const PSINJECT_ENDPAGECOMMENTS = 107;
pub const ERROR_NO_SUCH_LOGON_SESSION = c_long(1312);
pub const FILE_PERSISTENT_ACLS = 8;
pub const SCALINGFACTORX = 114;
pub const LMEM_DISCARDED = 16384;
pub const ERROR_SXS_UNTRANSLATABLE_HRESULT = c_long(14077);
pub const ERROR_UNABLE_TO_MOVE_REPLACEMENT = c_long(1176);
pub const SORT_CHINESE_BOPOMOFO = 3;
pub const DMBIN_CASSETTE = 14;
pub const DNS_ERROR_NODE_IS_CNAME = c_long(9708);
pub const IsCharAlphaNumeric = IsCharAlphaNumericA;
pub const ERROR_IPSEC_IKE_INVALID_KEY_USAGE = c_long(13818);
pub const QS_TIMER = 16;
pub const DMCOLOR_COLOR = 2;
pub const FACILITY_SXS = 23;
pub const DEFAULT_QUALITY = 0;
pub const IMAGE_SCN_CNT_INITIALIZED_DATA = 64;
pub const ULW_ALPHA = 2;
pub const ACTIVATION_CONTEXT_SECTION_APPLICATION_SETTINGS = 10;
pub const BKMODE_LAST = 2;
pub const LANG_RUSSIAN = 25;
pub const IMAGE_REL_PPC_ADDR64 = 1;
pub const ERROR_ALERTED = c_long(739);
pub const ERROR_INVALID_GW_COMMAND = c_long(1443);
pub const PROCESSOR_PERF_AUTONOMOUS_MODE_DISABLED = 0;
pub const MAC_CHARSET = 77;
pub const VS_FFI_STRUCVERSION = c_long(65536);
pub const MessageBoxEx = MessageBoxExA;
pub const EVENT_AIA_END = 45055;
pub const BN_PAINT = 1;
pub const DNS_INFO_AXFR_COMPLETE = c_long(9751);
pub const SPI_GETFLATMENU = 4130;
pub const RegSetValue = RegSetValueA;
pub const GetMenuString = GetMenuStringA;
pub const MOUSEEVENTF_RIGHTDOWN = 8;
pub const SPI_SETDISABLEOVERLAPPEDCONTENT = 4161;
pub const SB_HORZ = 0;
pub const OBJ_METAFILE = 9;
pub const ExtTextOut = ExtTextOutA;
pub const __PIC__ = 2;
pub const IMAGE_ARCHIVE_START_SIZE = 8;
pub const ERROR_DS_BACKLINK_WITHOUT_LINK = c_long(8482);
pub const SUBLANG_ITALIAN_SWISS = 2;
pub const QueryDosDevice = QueryDosDeviceA;
pub const CDS_SET_PRIMARY = 16;
pub const SPI_SETWHEELSCROLLLINES = 105;
pub const JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;
pub const ERROR_DBG_UNABLE_TO_PROVIDE_HANDLE = c_long(690);
pub const PERFSTATE_POLICY_CHANGE_IDEAL_AGGRESSIVE = 3;
pub const OPERATION_API_VERSION = 1;
pub const PF_COMPARE_EXCHANGE128 = 14;
pub const DBG_PRINTEXCEPTION_WIDE_C = if (@typeInfo(@TypeOf(c_long(1073807370))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(1073807370)) else if (@typeInfo(@TypeOf(c_long(1073807370))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(1073807370)) else @as(DWORD, c_long(1073807370));
pub const FEATURESETTING_NUP = 0;
pub const SS_SUNKEN = c_long(4096);
pub const QS_TOUCH = 2048;
pub const DNS_ERROR_TOO_MANY_SKDS = c_long(9113);
pub const LGRPID_SIMPLIFIED_CHINESE = 10;
pub const DMNUP_ONEUP = 2;
pub const BAUD_110 = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2) else @as(DWORD, 2);
pub const SM_CYMAXTRACK = 60;
pub const MF_HELP = c_long(16384);
pub const SECURITY_USERMODEDRIVERHOST_ID_BASE_RID = c_long(84);
pub const ERROR_SXS_PROTECTION_CATALOG_FILE_MISSING = c_long(14078);
pub const SUBLANG_SPANISH_BOLIVIA = 16;
pub const CORE_PARKING_POLICY_CHANGE_SINGLE = 1;
pub const DMPAPER_JAPANESE_POSTCARD = 43;
pub const EDEADLK = 36;
pub const ERROR_DS_DRA_SCHEMA_CONFLICT = c_long(8543);
pub const InterlockedXorAcquire = _InterlockedXor;
pub const LB_SETANCHORINDEX = 412;
pub const VFT2_DRV_LANGUAGE = c_long(3);
pub const ERROR_INVALID_ACCESS = c_long(12);
pub const ERROR_NO_NET_OR_BAD_PATH = c_long(1203);
pub const TOUCHEVENTF_INRANGE = 8;
pub const SERVICE_STOPPED = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 32) else if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 32) else c_uint(2)(i64 << 32);
pub const ERROR_SXS_XML_E_MISSING_PAREN = c_long(14044);
pub const ERROR_WOW_ASSERTION = c_long(670);
pub const PAN_MIDLINE_CONSTANT_TRIMMED = 8;
pub const SE_SIGNING_LEVEL_UNSIGNED = 1;
pub const SUBLANG_TIGRINYA_ETHIOPIA = 1;
pub const ERROR_IPSEC_IKE_NO_POLICY = c_long(13825);
pub const FILE_SUPPORTS_INTEGRITY_STREAMS = 67108864;
pub const DialogBox = DialogBoxA;
pub const IME_ESC_RESERVED_LAST = 2047;
pub const SUBLANG_SPANISH_NICARAGUA = 19;
pub const ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = c_long(8512);
pub const SP_RLSD = if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 64) else if (@typeInfo(@TypeOf(64)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 64) else @as(DWORD, 64);
pub const BI_RLE8 = c_long(1);
pub const MB_RTLREADING = c_long(1048576);
pub const MEM_COMMIT = 4096;
pub const ERROR_IPSEC_IKE_PROCESS_ERR = c_long(13829);
pub const POWER_ACTION_DOZE_TO_HIBERNATE = 32;
pub const ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = c_long(8511);
pub const BATTERY_FLAG_UNKNOWN = 255;
pub const HSHELL_WINDOWACTIVATED = 4;
pub const ERROR_MORE_WRITES = c_long(1120);
pub const IMAGE_WEAK_EXTERN_ANTI_DEPENDENCY = 4;
pub const CONNECT_REQUIRE_INTEGRITY = 16384;
pub const ERROR_CLUSTER_IPADDR_IN_USE = c_long(5057);
pub const FACILITY_WINDOWS_DEFENDER = 80;
pub const PRODUCT_STANDARD_SERVER_CORE_V = 40;
pub const _Writable_bytes_impl_ = size;
pub const SUBLANG_SAMI_INARI_FINLAND = 9;
pub const ERROR_FILE_HANDLE_REVOKED = c_long(806);
pub const CF_PRIVATEFIRST = 512;
pub const IMAGE_GUARD_FLAG_EXPORT_SUPPRESSED = 2;
pub const __INT_FAST8_FMTi__ = "hhi";
pub const BM_SETSTATE = 243;
pub const DOCKINFO_USER_SUPPLIED = 4;
pub const ETO_IGNORELANGUAGE = 4096;
pub const CB_GETEDITSEL = 320;
pub const DMPAPER_A3_EXTRA_TRANSVERSE = 68;
pub const ERROR_IPSEC_IKE_INVALID_GROUP = c_long(13865);
pub const PEN_FLAG_NONE = 0;
pub const ERROR_SERVICE_DEPENDENCY_FAIL = c_long(1068);
pub const ERROR_IPSEC_MM_AUTH_PENDING_DELETION = c_long(13022);
pub const ELF_VERSION = 0;
pub const __FLT_MANT_DIG__ = 24;
pub const GetShortPathName = GetShortPathNameA;
pub const CONTROL_C_EXIT = STATUS_CONTROL_C_EXIT;
pub const FAST_FAIL_GUARD_JUMPTABLE = 37;
pub const WM_NCMBUTTONDBLCLK = 169;
pub const EMARCH_ENC_I17_IMM9D_INST_WORD_POS_X = 18;
pub const ERROR_DS_CANT_MOD_OBJ_CLASS = c_long(8215);
pub const __INTPTR_FMTd__ = "lld";
pub const X3_TMPLT_SIGN_VAL_POS_X = 0;
pub const SECTION_MAP_READ = 4;
pub const SERVICE_CONTROL_INTERROGATE = 4;
pub const WTS_SESSION_CREATE = 10;
pub const DNS_STATUS_PACKET_UNSECURE = DNS_ERROR_UNSECURE_PACKET;
pub const BSF_ALLOWSFW = 128;
pub const ERROR_THREAD_WAS_SUSPENDED = c_long(699);
pub const PROCESS_CREATION_MITIGATION_POLICY_WIN32K_SYSTEM_CALL_DISABLE_MASK = 3 << 28;
pub const THREAD_QUERY_INFORMATION = 64;
pub const THREAD_PRIORITY_ABOVE_NORMAL = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(THREAD_PRIORITY_HIGHEST, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(THREAD_PRIORITY_HIGHEST, -1) else @as(THREAD_PRIORITY_HIGHEST, -1);
pub const WGL_SWAP_UNDERLAY4 = 524288;
pub const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 16;
pub const PS_SOLID = 0;
pub const DDL_POSTMSGS = 8192;
pub const HCBT_SETFOCUS = 9;
pub const GetTempPath = GetTempPathA;
pub const IMAGE_FILE_MACHINE_SH3E = 420;
pub const IMAGE_REL_AMD64_ADDR32 = 2;
pub const SERVICE_STOP_REASON_MINOR_MIN_CUSTOM = 256;
pub const ERROR_OUTOFMEMORY = c_long(14);
pub const GetDiskFreeSpace = GetDiskFreeSpaceA;
pub const TAPE_DRIVE_INITIATOR = 4;
pub const WNCON_FORNETCARD = 1;
pub const GCL_HBRBACKGROUND = -10;
pub const PERFSTATE_POLICY_CHANGE_IDEAL = 0;
pub const ERROR_CLOUD_FILE_PROPERTY_VERSION_NOT_SUPPORTED = c_long(375);
pub const InterlockedBitTestAndSetAcquire = _interlockedbittestandset;
pub const ALERT_SYSTEM_QUERY = 4;
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const MININT_PTR = ~MAXINT_PTR;
pub const CAL_SDAYNAME3 = 9;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_REMOTE_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 52) else if (@typeInfo(@TypeOf(i64 << 52)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 52) else c_uint(1)(i64 << 52);
pub const N_TMASK2 = 240;
pub const ERROR_ICM_NOT_ENABLED = c_long(2018);
pub const SPI_SETSCREENSAVEACTIVE = 17;
pub const ERROR_NOT_CAPABLE = c_long(775);
pub const GetCompressedFileSizeTransacted = GetCompressedFileSizeTransactedA;
pub const MOUSE_WHEELED = 4;
pub const SPI_SETGESTUREVISUALIZATION = 8219;
pub const PIPE_ACCEPT_REMOTE_CLIENTS = 0;
pub const ERROR_IPSEC_IKE_PEER_MM_ASSUMED_INVALID = c_long(13886);
pub const DT_WORDBREAK = 16;
pub const ESPIPE = 29;
pub const EVENT_UIA_EVENTID_START = 19968;
pub const CO_S_FIRST = c_long(262640);
pub const ERROR_TIME_SENSITIVE_THREAD = c_long(422);
pub const DEVICEFAMILYDEVICEFORM_CONVERTIBLE = 5;
pub const SERVICE_ACCEPT_SYSTEMLOWRESOURCES = 16384;
pub const WM_APP = 32768;
pub const STATUS_FLOAT_MULTIPLE_FAULTS = if (@typeInfo(@TypeOf(c_long(3221226164))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226164)) else if (@typeInfo(@TypeOf(c_long(3221226164))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226164)) else @as(DWORD, c_long(3221226164));
pub const OVERWRITE_HIDDEN = 4;
pub const PROCESSOR_THROTTLE_DISABLED = 0;
pub const PRODUCT_CLOUDE = 183;
pub const ERROR_FILE_SHARE_RESOURCE_CONFLICT = c_long(5938);
pub const WM_CTLCOLORSTATIC = 312;
pub const EVENT_SYSTEM_MENUEND = 5;
pub const ERROR_RECOVERY_FAILURE = c_long(1279);
pub const SB_TOP = 6;
pub const LOCALE_FONTSIGNATURE = 88;
pub const ERROR_CARDBUS_NOT_SUPPORTED = c_long(724);
pub const ERROR_DS_DRA_INVALID_PARAMETER = c_long(8437);
pub const LB_GETITEMRECT = 408;
pub const _SECURECRT_FILL_BUFFER_PATTERN = 254;
pub const ERROR_INVALID_MENU_HANDLE = c_long(1401);
pub const NTDDI_WIN10_RS1 = 167772162;
pub const ERROR_INVALID_LDT_DESCRIPTOR = c_long(564);
pub const LOCALE_IDEFAULTCOUNTRY = 10;
pub const IME_CAND_READ = 1;
pub const EVENT_SYSTEM_MENUSTART = 4;
pub const CB_GETLBTEXTLEN = 329;
pub const WSAEINTR = c_long(10004);
pub const SECURITY_CAPABILITY_CONTACTS = c_long(12);
pub const SPI_SETSELECTIONFADE = 4117;
pub const EVENT_SYSTEM_SCROLLINGSTART = 18;
pub const ERROR_CORRUPT_LOG_OVERFULL = c_long(794);
pub const ERROR_DS_CLASS_NOT_DSA = c_long(8343);
pub const EVENT_OBJECT_SHOW = 32770;
pub const ERROR_ITERATED_DATA_EXCEEDS_64k = c_long(194);
pub const VK_OEM_PERIOD = 190;
pub const WS_HSCROLL = c_long(1048576);
pub const DEVICEFAMILYDEVICEFORM_POINT_OF_SERVICE = 24;
pub const FACILITY_DEPLOYMENT_SERVICES_MANAGEMENT = 259;
pub const LOCALE_SRELATIVELONGDATE = 124;
pub const RegGetValue = RegGetValueA;
pub const VFT_STATIC_LIB = c_long(7);
pub const C3_SYMBOL = 8;
pub const POINTER_FLAG_WHEEL = 524288;
pub const SW_ERASE = 4;
pub const VK_LWIN = 91;
pub const ISC_SHOWUICOMPOSITIONWINDOW = 2147483648;
pub const IO_REPARSE_TAG_CSV = c_long(2147483657);
pub const WINSTA_ACCESSCLIPBOARD = c_long(4);
pub const IMAGE_REL_ARM_MOV32T = 17;
pub const SPI_GETSHOWIMEUI = 110;
pub const IME_CMODE_LANGUAGE = 3;
pub const SC_KEYMENU = 61696;
pub const WHITE_PEN = 6;
pub const LOCALE_SLANGDISPLAYNAME = LOCALE_SLOCALIZEDLANGUAGENAME;
pub const ERROR_DS_SIZELIMIT_EXCEEDED = c_long(8227);
pub const ERROR_TRUST_FAILURE = c_long(1790);
pub const VK_SCROLL = 145;
pub const ERROR_CLOUD_FILE_PINNED = c_long(392);
pub const ALL_PROCESSOR_GROUPS = 65535;
pub const SPI_SETMOUSECLICKLOCKTIME = 8201;
pub const ERROR_INDEX_ABSENT = c_long(1611);
pub const SUBLANG_AZERI_LATIN = 1;
pub const ERROR_DS_DRA_SOURCE_REINSTALLED = c_long(8459);
pub const EMR_SETBRUSHORGEX = 13;
pub const MB_APPLMODAL = c_long(0);
pub const STATE_SYSTEM_DEFAULT = 256;
pub const IMAGE_SYM_CLASS_LABEL = 6;
pub const META_EXCLUDECLIPRECT = 1045;
pub const CreateEventEx = CreateEventExA;
pub const __SSE4_1__ = 1;
pub const ERROR_INVALID_TABLE = c_long(1628);
pub const TAPE_SPACE_RELATIVE_BLOCKS = c_long(5);
pub const TAPE_DRIVE_FORMAT = 2684354560;
pub const PSINJECT_EOF = 19;
pub const ObjectDeleteAuditAlarm = ObjectDeleteAuditAlarmA;
pub const EnumDateFormatsEx = EnumDateFormatsExA;
pub const _Ret1_impl_ = p1;
pub const SWP_NOSIZE = 1;
pub const DRIVE_CDROM = 5;
pub const DEFAULT_IMPERSONATION_LEVEL = SecurityImpersonation;
pub const SHTDN_REASON_MINOR_UNSTABLE = 6;
pub const WM_IME_CONTROL = 643;
pub const N_TMASK = 48;
pub const DISPLAYCONFIG_TARGET_FORCED_AVAILABILITY_PATH = 8;
pub const FILE_WRITE_ATTRIBUTES = 256;
pub const JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;
pub const ERROR_CRC = c_long(23);
pub const WM_PARENTNOTIFY = 528;
pub const ERROR_EXE_CANNOT_MODIFY_STRONG_SIGNED_BINARY = c_long(218);
pub const ACCESS_PROPERTY_SET_GUID = 1;
pub const GET_TAPE_DRIVE_INFORMATION = 1;
pub const CBS_NOINTEGRALHEIGHT = c_long(1024);
pub const VP_TV_STANDARD_PAL_M = 64;
pub const OpenWaitableTimer = OpenWaitableTimerA;
pub const RESOURCEUSAGE_NOLOCALDEVICE = 4;
pub const ERROR_BAD_NETPATH = c_long(53);
pub const ERROR_BAD_COMPRESSION_BUFFER = c_long(605);
pub const IMAGE_DLLCHARACTERISTICS_NO_BIND = 2048;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const WS_EX_CONTROLPARENT = c_long(65536);
pub const GCPCLASS_ARABIC = 2;
pub const CS_SAVEBITS = 2048;
pub const STATUS_INVALID_PARAMETER = if (@typeInfo(@TypeOf(c_long(3221225485))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225485)) else if (@typeInfo(@TypeOf(c_long(3221225485))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225485)) else @as(DWORD, c_long(3221225485));
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_SHIFT = 28;
pub const __INT32_FMTi__ = "i";
pub const PPM_PERFORMANCE_IMPLEMENTATION_CPPC = 3;
pub const IMAGE_SYM_DTYPE_FUNCTION = 2;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_PREFER_SYSTEM32_RESERVED = if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 60) else if (@typeInfo(@TypeOf(i64 << 60)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 60) else c_uint(3)(i64 << 60);
pub const WNNC_NET_ZENWORKS = 3997696;
pub const SUBLANG_QUECHUA_PERU = 3;
pub const ERROR_IPSEC_IKE_MM_EXPIRED = c_long(13885);
pub const EV_RXFLAG = 2;
pub const IMAGE_REL_AMD64_ABSOLUTE = 0;
pub const SUBLANG_KINYARWANDA_RWANDA = 1;
pub const COLOR_APPWORKSPACE = 12;
pub const ERROR_CLASS_HAS_WINDOWS = c_long(1412);
pub const IMAGE_SIZEOF_SHORT_NAME = 8;
pub const LOCALE_IPOSITIVEPERCENT = 117;
pub const VK_OEM_BACKTAB = 245;
pub const IMAGE_SCN_MEM_PURGEABLE = 131072;
pub const LBS_NOREDRAW = c_long(4);
pub const ERROR_INTERNAL_DB_ERROR = c_long(1383);
pub const OpenService = OpenServiceA;
pub const ERROR_NO_VOLUME_LABEL = c_long(125);
pub const FACILITY_UTC = 1989;
pub const VIETNAMESE_CHARSET = 163;
pub const SPI_GETACTIVEWNDTRKTIMEOUT = 8194;
pub const PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 20) else if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 20) else c_uint(2)(i64 << 20);
pub const UCLEANUI = SHTDN_REASON_FLAG_CLEAN_UI;
pub const META_SETVIEWPORTEXT = 526;
pub const WSAEINPROGRESS = c_long(10036);
pub const DNS_ERROR_INVALID_TYPE = c_long(9551);
pub const TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864;
pub const WGL_SWAP_UNDERLAY5 = 1048576;
pub const POWER_DEVICE_IDLE_POLICY_PERFORMANCE = 0;
pub const RI_MOUSE_MIDDLE_BUTTON_DOWN = 16;
pub const SS_ETCHEDVERT = c_long(17);
pub const VP_COMMAND_SET = 2;
pub const FKF_FILTERKEYSON = 1;
pub const REG_HIVE_EXACT_FILE_GROWTH = c_long(128);
pub const IMN_SETCANDIDATEPOS = 9;
pub const IMAGE_SYM_CLASS_FUNCTION = 101;
pub const ERROR_LISTBOX_ID_NOT_FOUND = c_long(1416);
pub const ERROR_HASH_NOT_SUPPORTED = c_long(15300);
pub const IMR_COMPOSITIONFONT = 3;
pub const ERROR_INVALID_DATA = c_long(13);
pub const PS_JOIN_MITER = 8192;
pub const AnsiToOemBuff = CharToOemBuffA;
pub const QUERY_ACTCTX_FLAG_USE_ACTIVE_ACTCTX = 4;
pub const RRF_RT_ANY = 65535;
pub const PPM_FIRMWARE_PTC = 1024;
pub const ERROR_CLUSTER_NULL_DATA = c_long(5920);
pub const RPC_S_UNKNOWN_MGR_TYPE = c_long(1716);
pub const ERROR_RECEIVE_PARTIAL = c_long(707);
pub const SERVICE_NOTIFY_STATUS_CHANGE_1 = 1;
pub const ERROR_MUI_INVALID_ULTIMATEFALLBACK_NAME = c_long(15104);
pub const SS_CENTER = c_long(1);
pub const DEVICEFAMILYDEVICEFORM_DETACHABLE = 6;
pub const ERROR_AUTHENTICATION_FIREWALL_FAILED = c_long(1935);
pub const _WIN32_IE_NT4SP1 = _WIN32_IE_IE20;
pub const PRODUCT_LITE = 189;
pub const DCX_CACHE = c_long(2);
pub const GCL_MENUNAME = -8;
pub const ERROR_DLL_NOT_FOUND = c_long(1157);
pub const WM_GETHOTKEY = 51;
pub const DLL_PROCESS_ATTACH = 1;
pub const IMAGE_DEBUG_TYPE_FPO = 3;
pub const LB_GETHORIZONTALEXTENT = 403;
pub const NI_SETCANDIDATE_PAGESIZE = 23;
pub const IMAGE_ARCHIVE_LONGNAMES_MEMBER = "//              ";
pub const DATABITS_8 = if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 8) else if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 8) else @as(WORD, 8);
pub const REG_UNLOAD_LEGAL_FLAGS = REG_FORCE_UNLOAD;
pub const META_SELECTOBJECT = 301;
pub const IDOK = 1;
pub const ERROR_WMI_TRY_AGAIN = c_long(4203);
pub const SET_BOUNDS = 4109;
pub const C3_HIRAGANA = 32;
pub const ES_AUTOVSCROLL = c_long(64);
pub const ERROR_DS_MACHINE_ACCOUNT_CREATED_PRENT4 = c_long(8572);
pub const OUT_OUTLINE_PRECIS = 8;
pub const IMAGE_SCN_ALIGN_16BYTES = 5242880;
pub const VP_FLAGS_BRIGHTNESS = 64;
pub const __INT_LEAST32_TYPE__ = int;
pub const ENOTSUP = 129;
pub const ERROR_INTERNAL_ERROR = c_long(1359);
pub const MSGFLT_ALLOW = 1;
pub const WGL_SWAP_OVERLAY11 = 2048;
pub const DEFAULT_GUI_FONT = 17;
pub const IMAGE_SCN_LNK_COMDAT = 4096;
pub const PROCESS_HEAP_ENTRY_DDESHARE = 32;
pub const BS_VCENTER = c_long(3072);
pub const __inout_bcount_nz = size;
pub const C1_DEFINED = 512;
pub const ERROR_UNABLE_TO_INVENTORY_TRANSPORT = c_long(4327);
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE = 14;
pub const ERROR_BAD_DLL_ENTRYPOINT = c_long(609);
pub const DEVICE_NOTIFY_WINDOW_HANDLE = 0;
pub const FCONTROL = 8;
pub const EVENT_OBJECT_DRAGSTART = 32801;
pub const BeginUpdateResource = BeginUpdateResourceA;
pub const GetGlyphIndices = GetGlyphIndicesA;
pub const PFD_SUPPORT_OPENGL = 32;
pub const EMR_ROUNDRECT = 44;
pub const ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = c_long(8507);
pub const ODS_COMBOBOXEDIT = 4096;
pub const DC_COLORDEVICE = 32;
pub const SUBLANG_DUTCH_BELGIAN = 2;
pub const ReplaceFile = ReplaceFileA;
pub const SECURITY_LOCAL_SYSTEM_RID = c_long(18);
pub const RC_DI_BITMAP = 128;
pub const FIND_STARTSWITH = 1048576;
pub const ERROR_DS_WKO_CONTAINER_CANNOT_BE_SPECIAL = c_long(8611);
pub const WM_KEYLAST = 265;
pub const SWP_HIDEWINDOW = 128;
pub const SUBLANG_ODIA_INDIA = 1;
pub const DRAFTMODE = 7;
pub const NOP_FUNCTION = __noop;
pub const NUMCOLORS = 24;
pub const RESOURCEDISPLAYTYPE_NETWORK = 6;
pub const ACE_INHERITED_OBJECT_TYPE_PRESENT = 2;
pub const ERROR_IPSEC_IKE_INVALID_SIG = c_long(13875);
pub const NTDDI_WIN10_RS2 = 167772163;
pub const WM_RBUTTONDOWN = 516;
pub const IMAGE_SCN_NO_DEFER_SPEC_EXC = 16384;
pub const CLIPBRD_S_FIRST = c_long(262608);
pub const ERROR_DS_DUPLICATE_ID_FOUND = c_long(8605);
pub const WH_FOREGROUNDIDLE = 11;
pub const ERROR_INSTALL_REMOTE_DISALLOWED = c_long(1640);
pub const RTL_CRITICAL_SECTION_ALL_FLAG_BITS = 4278190080;
pub const ERROR_EC_SUBSCRIPTION_CANNOT_ACTIVATE = c_long(15080);
pub const MININT16 = if (@typeInfo(@TypeOf(~MAXINT16)) == @import("builtin").TypeId.Pointer) @ptrCast(INT16, ~MAXINT16) else if (@typeInfo(@TypeOf(~MAXINT16)) == @import("builtin").TypeId.Int) @intToPtr(INT16, ~MAXINT16) else INT16(~MAXINT16);
pub const __inner_typefix = ctype;
pub const DEVICEFAMILYINFOENUM_MAX = 17;
pub const WNNC_NET_RIVERFRONT2 = 2031616;
pub const SEM_NOOPENFILEERRORBOX = 32768;
pub const GlobalGetAtomName = GlobalGetAtomNameA;
pub const VER_SUITE_DATACENTER = 128;
pub const DOMAIN_GROUP_RID_CERT_ADMINS = c_long(517);
pub const LANG_ZULU = 53;
pub const DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE = if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Pointer) @ptrCast(DPI_AWARENESS_CONTEXT, -3) else if (@typeInfo(@TypeOf(-3)) == @import("builtin").TypeId.Int) @intToPtr(DPI_AWARENESS_CONTEXT, -3) else @as(DPI_AWARENESS_CONTEXT, -3);
pub const WPF_ASYNCWINDOWPLACEMENT = 4;
pub const CTRY_GERMANY = 49;
pub const ACPI_PPM_SOFTWARE_ANY = 253;
pub const LR_LOADTRANSPARENT = 32;
pub const MDITILE_ZORDER = 4;
pub const UI_CAP_2700 = 1;
pub const MAXULONG32 = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, 0) else ULONG32(0))) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, 0) else ULONG32(0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, 0) else ULONG32(0))) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, 0) else ULONG32(0)) else ULONG32(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONG32, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONG32, 0) else ULONG32(0));
pub const ERROR_HANDLE_NO_LONGER_VALID = c_long(6815);
pub const ERROR_MUI_FILE_NOT_LOADED = c_long(15105);
pub const WM_VSCROLLCLIPBOARD = 778;
pub const C2_LEFTTORIGHT = 1;
pub const IMR_CANDIDATEWINDOW = 2;
pub const TOUCH_FLAG_NONE = 0;
pub const ENOTEMPTY = 41;
pub const SECURITY_REMOTE_LOGON_RID = c_long(14);
pub const ERROR_DS_HIERARCHY_TABLE_TOO_DEEP = c_long(8628);
pub const LOCALE_SPERCENT = 118;
pub const MM_MAX = MM_ANISOTROPIC;
pub const WM_IME_STARTCOMPOSITION = 269;
pub const ERROR_CS_ENCRYPTION_UNSUPPORTED_SERVER = c_long(6018);
pub const CTRY_ROMANIA = 40;
pub const COMPRESSION_ENGINE_MAXIMUM = 256;
pub const WM_VSCROLL = 277;
pub const DOF_DOCUMENT = 32770;
pub const DFCS_CHECKED = 1024;
pub const DS_SYSMODAL = c_long(2);
pub const RPC_S_PROCNUM_OUT_OF_RANGE = c_long(1745);
pub const REG_HIVE_SINGLE_LOG = c_long(512);
pub const _WIN32_WINNT_WINXP = 1281;
pub const MOD_LEFT = 32768;
pub const SHTDN_REASON_MINOR_NONE = 255;
pub const DOMAIN_GROUP_RID_GUESTS = c_long(514);
pub const IMAGE_DEBUG_TYPE_UNKNOWN = 0;
pub const ERROR_CLUSTER_CSV_INVALID_HANDLE = c_long(5989);
pub const ILLUMINANT_D55 = 5;
pub const WNNC_NET_GOOGLE = 4390912;
pub const WM_MDICASCADE = 551;
pub const ERROR_FT_READ_RECOVERY_FROM_BACKUP = c_long(704);
pub const LB_SETITEMHEIGHT = 416;
pub const DEVICEFAMILYDEVICEFORM_NOTEBOOK = 4;
pub const WM_ENABLE = 10;
pub const ReadSizeTRaw = ReadULongPtrRaw;
pub const SUBLANG_ARABIC_LIBYA = 4;
pub const EVENTLOG_AUDIT_SUCCESS = 8;
pub const EM_SCROLLCARET = 183;
pub const MemoryBarrier = __faststorefence;
pub const EMR_EXTSELECTCLIPRGN = 75;
pub const LANG_TIGRINYA = 115;
pub const DOUBLE_CLICK = 2;
pub const SYSTEM_CPU_SET_INFORMATION_PARKED = 1;
pub const SHTDN_REASON_FLAG_COMMENT_REQUIRED = 16777216;
pub const LANG_FRENCH = 12;
pub const InterlockedExchangeAddRelease = _InterlockedExchangeAdd;
pub const DNS_ERROR_SECURE_BASE = 9800;
pub const TME_NONCLIENT = 16;
pub const SB_ENDSCROLL = 8;
pub const POLICY_SHOWREASONUI_SERVERONLY = 3;
pub const IMAGE_SYM_CLASS_END_OF_STRUCT = 102;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_NONE = 0;
pub const FE_FONTSMOOTHINGORIENTATIONBGR = 0;
pub const __in_bcount_nz_opt = size;
pub const CONTEXT_SERVICE_ACTIVE = c_long(268435456);
pub const WSAEHOSTDOWN = c_long(10064);
pub const PAN_FAMILY_PICTORIAL = 5;
pub const VIF_MISMATCH = c_long(2);
pub const REASON_PLANNED_FLAG = SHTDN_REASON_FLAG_PLANNED;
pub const ERROR_RWRAW_ENCRYPTED_INVALID_EDATAINFO_FILEOFFSET = c_long(411);
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_7 = 7;
pub const ERROR_PWD_TOO_LONG = c_long(657);
pub const ERROR_SXS_XML_E_INCOMPLETE_ENCODING = c_long(14043);
pub const PSINJECT_PAGEORDER = 7;
pub const PRODUCT_ENTERPRISE_S_EVALUATION = 129;
pub const __INT32_TYPE__ = int;
pub const CLIP_CHARACTER_PRECIS = 1;
pub const DMPAPER_PENV_10_ROTATED = 118;
pub const BitTest = _bittest;
pub const GL_ID_CHOOSECANDIDATE = 40;
pub const ERROR_SEM_USER_LIMIT = c_long(106);
pub const ImmGetConversionList = ImmGetConversionListA;
pub const RegisterWindowMessage = RegisterWindowMessageA;
pub const MF_CHANGE = c_long(128);
pub const ERROR_END_OF_MEDIA = c_long(1100);
pub const WGL_SWAP_UNDERLAY11 = 67108864;
pub const RPC_S_PRF_ELT_NOT_ADDED = c_long(1926);
pub const PF_XSAVE_ENABLED = 17;
pub const NTDDI_VISTASP3 = NTDDI_WIN6SP3;
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const PR_JOBSTATUS = 0;
pub const ERROR_LICENSE_QUOTA_EXCEEDED = c_long(1395);
pub const REG_FORCE_UNLOAD = 1;
pub const SPI_GETMENUFADE = 4114;
pub const C3_FULLWIDTH = 128;
pub const WGL_SWAP_UNDERLAY2 = 131072;
pub const LANG_BOSNIAN_NEUTRAL = 30746;
pub const SB_LINERIGHT = 1;
pub const ERROR_APPINSTALLER_ACTIVATION_BLOCKED = c_long(15646);
pub const ERROR_CLUSTER_NODE_NOT_PAUSED = c_long(5058);
pub const ERROR_APPX_RAW_DATA_WRITE_FAILED = c_long(15648);
pub const ERROR_MRM_NO_CANDIDATE = c_long(15115);
pub const EDD_GET_DEVICE_INTERFACE_NAME = 1;
pub const NF_REQUERY = 4;
pub const ERROR_IPSEC_IKE_NEG_STATUS_END = c_long(13897);
pub const MAXINTATOM = 49152;
pub const SC_VSCROLL = 61552;
pub const CAL_SDAYNAME1 = 7;
pub const ENOLINK = 121;
pub const DNS_ERROR_WINS_INIT_FAILED = c_long(9615);
pub const GCPCLASS_LATINNUMBER = 5;
pub const DMBIN_ENVMANUAL = 6;
pub const META_SETRELABS = 261;
pub const SM_MOUSEPRESENT = 19;
pub const TOKEN_ACCESS_PSEUDO_HANDLE = TOKEN_ACCESS_PSEUDO_HANDLE_WIN8;
pub const OR_INVALID_SET = c_long(1912);
pub const IMN_SETSENTENCEMODE = 7;
pub const FLUSHOUTPUT = 6;
pub const CLIP_TT_ALWAYS = 2 << 4;
pub const ACCESS_MAX_MS_V2_ACE_TYPE = 3;
pub const ERROR_INVALID_FLAGS = c_long(1004);
pub const SetCalendarInfo = SetCalendarInfoA;
pub const ERROR_CLOUD_FILE_METADATA_TOO_LARGE = c_long(364);
pub const ERROR_NO_SUCH_GROUP = c_long(1319);
pub const CAL_RETURN_GENITIVE_NAMES = LOCALE_RETURN_GENITIVE_NAMES;
pub const FACILITY_WMAAECMA = 1996;
pub const WINSTA_READSCREEN = c_long(512);
pub const BS_DIBPATTERN = 5;
pub const CF_PALETTE = 9;
pub const MDMVOL_LOW = 0;
pub const SETXOFF = 1;
pub const WM_NCRBUTTONDBLCLK = 166;
pub const IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;
pub const _Write_guarded_by_ = lock;
pub const __releases_exclusive_lock = lock;
pub const RC_BITBLT = 1;
pub const GetLongPathName = GetLongPathNameA;
pub const PAN_PROP_EVEN_WIDTH = 4;
pub const WGL_SWAP_OVERLAY10 = 1024;
pub const FILE_SYSTEM_ATTR = 2;
pub const DEVICEFAMILYDEVICEFORM_UNKNOWN = 0;
pub const IME_CMODE_HANGEUL = IME_CMODE_NATIVE;
pub const ENUMRESNAMEPROC = ENUMRESNAMEPROCA;
pub const MDMVOL_HIGH = 2;
pub const ERROR_INVALID_COLORSPACE = c_long(2017);
pub const LAYOUT_RTL = 1;
pub const SPI_GETWINDOWSEXTENSION = 92;
pub const SEF_FORCE_USER_MODE = 8192;
pub const DT_EDITCONTROL = 8192;
pub const LOCALE_SAM = 40;
pub const ERROR_GPIO_INCOMPATIBLE_CONNECT_MODE = c_long(15326);
pub const HBMMENU_POPUP_CLOSE = if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 8) else if (@typeInfo(@TypeOf(8)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 8) else @as(HBITMAP, 8);
pub const ERROR_MRM_UNSUPPORTED_PROFILE_TYPE = c_long(15136);
pub const HELP_FINDER = 11;
pub const ERROR_MRM_UNSUPPORTED_DIRECTORY_TYPE = c_long(15122);
pub const META_PIE = 2074;
pub const InterlockedCompareExchange16 = _InterlockedCompareExchange16;
pub const ES_AUTOHSCROLL = c_long(128);
pub const PRODUCT_UNLICENSED = 2882382797;
pub const ERROR_ABIOS_ERROR = c_long(538);
pub const GetWindowLong = GetWindowLongA;
pub const RealGetWindowClass = RealGetWindowClassA;
pub const KTM_MARSHAL_BLOB_VERSION_MINOR = 1;
pub const HFILE_ERROR = if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Pointer) @ptrCast(HFILE, -1) else if (@typeInfo(@TypeOf(-1)) == @import("builtin").TypeId.Int) @intToPtr(HFILE, -1) else @as(HFILE, -1);
pub const ERROR_PROFILING_NOT_STARTED = c_long(550);
pub const NTDDI_WIN10_RS3 = 167772164;
pub const ERROR_CAN_NOT_DEL_LOCAL_WINS = c_long(4001);
pub const InterlockedBitTestAndSetNoFence = _interlockedbittestandset;
pub const ONESTOPBIT = 0;
pub const CAL_GREGORIAN_ME_FRENCH = 9;
pub const PAN_LETT_OBLIQUE_WEIGHTED = 10;
pub const SE_PRIVILEGE_ENABLED = c_long(2);
pub const HTCAPTION = 2;
pub const GCLP_HBRBACKGROUND = -10;
pub const ERROR_VC_DISCONNECTED = c_long(240);
pub const MUI_LANGUAGE_NAME = 8;
pub const SPI_GETSELECTIONFADE = 4116;
pub const ERROR_EXPIRED_HANDLE = c_long(6854);
pub const ERROR_SECUREBOOT_POLICY_PUBLISHER_NOT_FOUND = c_long(4423);
pub const ERROR_HANDLE_DISK_FULL = c_long(39);
pub const NO_ERROR = c_long(0);
pub const COLOR_INACTIVECAPTIONTEXT = 19;
pub const SERVICE_STOP_REASON_MINOR_SOFTWARE_UPDATE_UNINSTALL = 20;
pub const FACILITY_NDIS = 52;
pub const ERROR_DS_CANT_REMOVE_CLASS_CACHE = c_long(8404);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const CC_WIDE = 16;
pub const ERROR_PRINTER_NOT_SHAREABLE = c_long(3022);
pub const SERVICE_STOP_PENDING = 3;
pub const VFT2_DRV_MOUSE = c_long(5);
pub const SNAPSHOT_POLICY_UNPLANNED = 2;
pub const ERROR_NO_LINK_TRACKING_IN_TRANSACTION = c_long(6852);
pub const ERROR_INVALID_QUOTA_LOWER = c_long(547);
pub const HELP_FORCEFILE = c_long(9);
pub const ERROR_INVALID_FUNCTION = c_long(1);
pub const MK_S_LAST = c_long(262639);
pub const SPI_GETTOGGLEKEYS = 52;
pub const DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS = c_long(9921);
pub const ERROR_UNRECOGNIZED_MEDIA = c_long(1785);
pub const LOAD_LIBRARY_SEARCH_APPLICATION_DIR = 512;
pub const WT_EXECUTEDEFAULT = 0;
pub const ERROR_IPSEC_TUNNEL_FILTER_EXISTS = c_long(13016);
pub const ERROR_REQUEST_PAUSED = c_long(3050);
pub const EVENT_OBJECT_ACCELERATORCHANGE = 32786;
pub const PAN_WEIGHT_HEAVY = 9;
pub const ReadSizeTNoFence = ReadULongPtrNoFence;
pub const FW_HEAVY = 900;
pub const AbortSystemShutdown = AbortSystemShutdownA;
pub const EMARCH_ENC_I17_IMM5C_SIZE_X = 5;
pub const EWX_POWEROFF = 8;
pub const MUI_LANG_NEUTRAL_PE_FILE = 256;
pub const DS_MODALFRAME = c_long(128);
pub const STARTF_USEHOTKEY = 512;
pub const ERROR_SUCCESS = c_long(0);
pub const C1_LOWER = 2;
pub const IMAGE_SYM_CLASS_ENUM_TAG = 15;
pub const CCHFORMNAME = 32;
pub const UOI_NAME = 2;
pub const ACL_REVISION_DS = 4;
pub const RegDeleteValue = RegDeleteValueA;
pub const WM_MBUTTONUP = 520;
pub const EXCEPTION_INVALID_DISPOSITION = STATUS_INVALID_DISPOSITION;
pub const ERROR_DELAY_LOAD_FAILED = c_long(1285);
pub const LF_FACESIZE = 32;
pub const SERVICE_NOTIFY_CONTINUE_PENDING = 16;
pub const BST_FOCUS = 8;
pub const DOMAIN_ALIAS_RID_INCOMING_FOREST_TRUST_BUILDERS = c_long(557);
pub const FW_EXTRABOLD = 800;
pub const XSTATE_COMPACTION_ENABLE_MASK = if (@typeInfo(@TypeOf(i64 << XSTATE_COMPACTION_ENABLE)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << XSTATE_COMPACTION_ENABLE) else if (@typeInfo(@TypeOf(i64 << XSTATE_COMPACTION_ENABLE)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << XSTATE_COMPACTION_ENABLE) else c_uint(1)(i64 << XSTATE_COMPACTION_ENABLE);
pub const FILE_NAME_OPENED = 8;
pub const LANG_AFRIKAANS = 54;
pub const QUOTA_LIMITS_HARDWS_MAX_ENABLE = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY_EXTENSION_POINT_DISABLE_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 32) else if (@typeInfo(@TypeOf(i64 << 32)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 32) else c_uint(1)(i64 << 32);
pub const IMAGE_SIZEOF_FILE_HEADER = 20;
pub const VP_FLAGS_CONTRAST = 128;
pub const BSF_RETURNHDESK = 512;
pub const ERROR_NO_CALLBACK_ACTIVE = c_long(614);
pub const JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;
pub const SB_LINEDOWN = 1;
pub const PPM_FIRMWARE_PCT = 32;
pub const IGIMII_CMODE = 1;
pub const HELP_SETWINPOS = c_long(515);
pub const GCPCLASS_PREBOUNDLTR = 128;
pub const MOVEFILE_CREATE_HARDLINK = 16;
pub const SUBLANG_GREENLANDIC_GREENLAND = 1;
pub const TAPE_DRIVE_ABS_BLK_IMMED = 2147491840;
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER_CORE = 46;
pub const WRITE_RESTRICTED = 8;
pub const GetComputerNameEx = GetComputerNameExA;
pub const MAXULONGLONG = if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, 0) else @as(ULONGLONG, 0))) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, 0) else @as(ULONGLONG, 0)) else if (@typeInfo(@TypeOf(~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, 0) else @as(ULONGLONG, 0))) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, 0) else @as(ULONGLONG, 0)) else @as(ULONGLONG, ~if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(ULONGLONG, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(ULONGLONG, 0) else @as(ULONGLONG, 0));
pub const AnsiToOem = CharToOemA;
pub const GL_LEVEL_NOGUIDELINE = 0;
pub const S_FALSE = if (@typeInfo(@TypeOf(c_long(1))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(1)) else if (@typeInfo(@TypeOf(c_long(1))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(1)) else @as(HRESULT, c_long(1));
pub const C1_ALPHA = 256;
pub const JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;
pub const CreateSymbolicLink = CreateSymbolicLinkA;
pub const QS_POINTER = 4096;
pub const ERROR_INVALID_PRINTER_COMMAND = c_long(1803);
pub const SM_CXICON = 11;
pub const NTSYSAPI = DECLSPEC_IMPORT;
pub const WM_PENWINFIRST = 896;
pub const ERROR_PAGE_FAULT_GUARD_PAGE = c_long(750);
pub const WGL_SWAP_UNDERLAY10 = 33554432;
pub const SM_CXVIRTUALSCREEN = 78;
pub const ERROR_GLOBAL_ONLY_HOOK = c_long(1429);
pub const GRAY_BRUSH = 2;
pub const IMAGE_REL_SHM_RELHALF = 23;
pub const ERROR_DATA_LOST_REPAIR = c_long(6843);
pub const NTDDI_VISTASP2 = NTDDI_WIN6SP2;
pub const SPI_GETCLEARTYPE = 4168;
pub const ERROR_UNDEFINED_SCOPE = c_long(319);
pub const GDICOMMENT_ENDGROUP = 3;
pub const _WIN32_WINNT_WS03 = 1282;
pub const FAST_FAIL_INVALID_SET_OF_CONTEXT = 13;
pub const PROCESS_CREATION_MITIGATION_POLICY_SEHOP_ENABLE = 4;
pub const IMC_GETCOMPOSITIONWINDOW = 11;
pub const MAXSHORT = 32767;
pub const POLICY_SHOWREASONUI_WORKSTATIONONLY = 2;
pub const ERROR_SERVICE_NOT_ACTIVE = c_long(1062);
pub const ERROR_INVALID_CATEGORY = c_long(117);
pub const CAL_SABBREVERASTRING = 57;
pub const ERROR_DS_NAME_ERROR_NO_MAPPING = c_long(8472);
pub const TRANSACTION_NOTIFY_DELEGATE_COMMIT = 1024;
pub const WGL_SWAP_UNDERLAY3 = 262144;
pub const PRODUCT_HUBOS = 180;
pub const PGET_MODULE_HANDLE_EX = PGET_MODULE_HANDLE_EXA;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_VOLUME_POLICY_PACKAGE = c_long(15649);
pub const PRODUCT_STANDARD_A_SERVER_CORE = 146;
pub const WNNC_NET_MS_NFS = 4325376;
pub const LOCALE_SGROUPING = 16;
pub const SCEX2_ALT_NETBIOS_NAME = 1;
pub const STARTF_FORCEOFFFEEDBACK = 128;
pub const MIIM_FTYPE = 256;
pub const CTRY_ESTONIA = 372;
pub const WN_FUNCTION_BUSY = ERROR_BUSY;
pub const PRODUCT_STORAGE_STANDARD_SERVER = 21;
pub const SHIFT_PRESSED = 16;
pub const IMAGE_REL_CEF_ADDR32NB = 3;
pub const PRODUCT_PROFESSIONAL_S = 127;
pub const TAPE_SETMARKS = c_long(0);
pub const STILL_ACTIVE = STATUS_PENDING;
pub const SECURITY_ANONYMOUS_LOGON_RID = c_long(7);
pub const ERROR_TIMER_NOT_CANCELED = c_long(541);
pub const CAL_SDAYNAME6 = 12;
pub const SOFTKEYBOARD_TYPE_C1 = 2;
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const N_TMASK1 = 192;
pub const DISPLAY_DEVICE_PRIMARY_DEVICE = 4;
pub const HTZOOM = HTMAXBUTTON;
pub const SUBLANG_AZERBAIJANI_AZERBAIJAN_LATIN = 1;
pub const SECURITY_APP_PACKAGE_RID_COUNT = c_long(8);
pub const IMC_GETSTATUSWINDOWPOS = 15;
pub const __UINTPTR_FMTu__ = "llu";
pub const SUBLANG_ENGLISH_EIRE = 6;
pub const WS_EX_APPWINDOW = c_long(262144);
pub const FS_HEBREW = c_long(32);
pub const ES_USER_PRESENT = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4) else @as(DWORD, 4);
pub const X3_EMPTY_SIZE_X = 2;
pub const KEY_EVENT = 1;
pub const ERROR_CANNOT_COPY = c_long(266);
pub const SYSTEM_STATUS_FLAG_POWER_SAVING_ON = 1;
pub const ERROR_PAGE_FAULT_COPY_ON_WRITE = c_long(749);
pub const ERROR_INVALID_DATATYPE = c_long(1804);
pub const RPC_S_INVALID_BINDING = c_long(1702);
pub const ICON_BIG = 1;
pub const IMN_CLOSESTATUSWINDOW = 1;
pub const ERROR_INVALID_EVENTNAME = c_long(1211);
pub const ERROR_MRM_MAP_NOT_FOUND = c_long(15135);
pub const ERROR_SXS_XML_E_COMMENTSYNTAX = c_long(14031);
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX_UNINSTALL = 21;
pub const ERROR_DS_DRA_OBJ_NC_MISMATCH = c_long(8545);
pub const MDM_SHIFT_PROTOCOLDATA = 20;
pub const WGL_SWAP_OVERLAY13 = 8192;
pub const SERVICE_STOP_REASON_MINOR_SECURITYFIX = 15;
pub const VER_EQUAL = 1;
pub const ShiftLeft128 = __shiftleft128;
pub const BACKUP_SECURITY_INFORMATION = c_long(65536);
pub const SUBLANG_AZERI_CYRILLIC = 2;
pub const MapVirtualKey = MapVirtualKeyA;
pub const ERROR_DOWNGRADE_DETECTED = c_long(1265);
pub const CBN_KILLFOCUS = 4;
pub const EM_GETMODIFY = 184;
pub const FACILITY_INTERNET = 12;
pub const PRODUCT_SMALLBUSINESS_SERVER_PREMIUM = 25;
pub const EVENTLOG_AUDIT_FAILURE = 16;
pub const SS_CENTERIMAGE = c_long(512);
pub const SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL = 24;
pub const MK_MBUTTON = 16;
pub const DCX_VALIDATE = c_long(2097152);
pub const PRODUCT_ARM64_SERVER = 120;
pub const ERROR_CLEANER_CARTRIDGE_INSTALLED = c_long(4340);
pub const RI_MOUSE_RIGHT_BUTTON_DOWN = 4;
pub const ERROR_DS_REFUSING_FSMO_ROLES = c_long(8433);
pub const RIDI_DEVICEINFO = 536870923;
pub const ICM_UNREGISTERICMATCHER = 6;
pub const ERROR_STORAGE_RESERVE_ALREADY_EXISTS = c_long(418);
pub const STORE_ERROR_UNLICENSED_USER = c_long(15862);
pub const PRODUCT_PROFESSIONAL_STUDENT = 112;
pub const NTDDI_WIN10_RS4 = 167772165;
pub const RESOURCEMANAGER_QUERY_INFORMATION = 1;
pub const MF_BITMAP = c_long(4);
pub const IMAGE_SCN_ALIGN_256BYTES = 9437184;
pub const PF_CHANNELS_ENABLED = 16;
pub const __INT64_FMTd__ = "lld";
pub const SP_OUTOFDISK = -4;
pub const SUBLANG_SERBIAN_SERBIA_LATIN = 9;
pub const PAN_LETTERFORM_INDEX = 7;
pub const WINAPI_FAMILY_APP = WINAPI_FAMILY_PC_APP;
pub const PRODUCT_CORE_CONNECTED_SINGLELANGUAGE = 115;
pub const ERROR_PWD_HISTORY_CONFLICT = c_long(617);
pub const ERROR_DEPENDENT_RESOURCE_PROPERTY_CONFLICT = c_long(5924);
pub const SPI_GETGRIDGRANULARITY = 18;
pub const USER_DEFAULT_SCREEN_DPI = 96;
pub const SC_MANAGER_QUERY_LOCK_STATUS = 16;
pub const InterlockedExchangeAddNoFence = _InterlockedExchangeAdd;
pub const NTM_TT_OPENTYPE = 262144;
pub const FILE_CACHE_MIN_HARD_DISABLE = 8;
pub const THREAD_SET_THREAD_TOKEN = 128;
pub const DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID = c_long(9985);
pub const DMRES_LOW = -2;
pub const EVENT_OEM_DEFINED_START = 257;
pub const POWER_ACTION_LIGHTEST_FIRST = 268435456;
pub const SBS_SIZEBOXBOTTOMRIGHTALIGN = c_long(4);
pub const IMN_SETOPENSTATUS = 8;
pub const ERROR_ABANDONED_WAIT_0 = c_long(735);
pub const RUNTIME_FUNCTION_INDIRECT = 1;
pub const IMAGE_REL_BASED_MIPS_JMPADDR = 5;
pub const ERROR_LOG_READ_MODE_INVALID = c_long(6610);
pub const ENHANCED_KEY = 256;
pub const DNS_ERROR_DP_NOT_AVAILABLE = c_long(9905);
pub const MB_TOPMOST = c_long(262144);
pub const ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = c_long(8203);
pub const THREAD_DYNAMIC_CODE_ALLOW = 1;
pub const CP_SYMBOL = 42;
pub const C1_PUNCT = 16;
pub const SPI_GETFILTERKEYS = 50;
pub const RegisterDeviceNotification = RegisterDeviceNotificationA;
pub const EM_LINESCROLL = 182;
pub const MDM_ANALOG_RLP_ON = 0;
pub const CP_UTF8 = 65001;
pub const SECURITY_CREATOR_GROUP_RID = c_long(1);
pub const DOMAIN_USER_RID_WDAG_ACCOUNT = c_long(504);
pub const BS_GROUPBOX = c_long(7);
pub const WINAPI_FAMILY = WINAPI_FAMILY_DESKTOP_APP;
pub const BI_RLE4 = c_long(2);
pub const GetConsoleCommandHistoryLength = GetConsoleCommandHistoryLengthA;
pub const DNS_STATUS_CONTINUE_NEEDED = c_long(9801);
pub const HELP_CONTEXTMENU = 10;
pub const VK_F9 = 120;
pub const WM_NCRBUTTONUP = 165;
pub const DMBIN_MIDDLE = 3;
pub const CTRY_BRUNEI_DARUSSALAM = 673;
pub const RPC_S_CANNOT_SUPPORT = c_long(1764);
pub const ERROR_FLOPPY_ID_MARK_NOT_FOUND = c_long(1122);
pub const SE_SIGNING_LEVEL_ENTERPRISE = 2;
pub const MOVEFILE_DELAY_UNTIL_REBOOT = 4;
pub const __NO_MATH_INLINES = 1;
pub const IMAGE_REL_ARM_GPREL12 = 6;
pub const GMMP_USE_HIGH_RESOLUTION_POINTS = 2;
pub const ERROR_SYMLINK_CLASS_DISABLED = c_long(1463);
pub const SB_PAGEUP = 2;
pub const ERROR_DS_INTERNAL_FAILURE = c_long(8430);
pub const VP_TV_STANDARD_PAL_N = 128;
pub const RPC_S_CANT_CREATE_ENDPOINT = c_long(1720);
pub const __PTRDIFF_WIDTH__ = 64;
pub const IME_ESC_PRIVATE_HOTKEY = 4106;
pub const CCHDEVICENAME = 32;
pub const ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const DC_EXTRA = 9;
pub const IMAGE_REL_I386_DIR16 = 1;
pub const __sdv_save_adapter_context = c;
pub const LANG_FILIPINO = 100;
pub const PIPE_NOWAIT = 1;
pub const IMAGE_REL_BASED_MACHINE_SPECIFIC_5 = 5;
pub const PROCESS_CREATION_MITIGATION_POLICY_PROHIBIT_DYNAMIC_CODE_ALWAYS_ON_ALLOW_OPT_OUT = if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 36) else if (@typeInfo(@TypeOf(i64 << 36)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 36) else c_uint(3)(i64 << 36);
pub const SERVICE_START_REASON_DELAYEDAUTO = 16;
pub const SPI_SETDRAGHEIGHT = 77;
pub const BitTest64 = _bittest64;
pub const FILE_IS_ENCRYPTED = 1;
pub const REPLACEFILE_IGNORE_MERGE_ERRORS = 2;
pub const LOCALE_IDATE = 33;
pub const BM_SETIMAGE = 247;
pub const ERROR_SXS_INVALID_IDENTITY_ATTRIBUTE_NAME = c_long(14091);
pub const ILLUMINANT_D75 = 7;
pub const JOB_OBJECT_SECURITY_ONLY_TOKEN = 4;
pub const DLGC_UNDEFPUSHBUTTON = 32;
pub const ERROR_WMI_INVALID_MOF = c_long(4210);
pub const ERROR_VDM_HARD_ERROR = c_long(593);
pub const DNS_ERROR_DELEGATION_REQUIRED = c_long(9571);
pub const PROCESSOR_PERF_BOOST_MODE_EFFICIENT_ENABLED = 3;
pub const EWX_QUICKRESOLVE = 32;
pub const WGL_SWAP_UNDERLAY13 = 268435456;
pub const RegisterServiceCtrlHandler = RegisterServiceCtrlHandlerA;
pub const __FLT_DECIMAL_DIG__ = 9;
pub const DMPAPER_PENV_3 = 98;
pub const DNS_ERROR_SUBNET_ALREADY_EXISTS = c_long(9979);
pub const TOUCH_FEEDBACK_INDIRECT = 2;
pub const NTDDI_VISTASP1 = NTDDI_WIN6SP1;
pub const CreateNamedPipe = CreateNamedPipeA;
pub const ERROR_REQUEST_ABORTED = c_long(1235);
pub const HBMMENU_SYSTEM = if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Pointer) @ptrCast(HBITMAP, 1) else if (@typeInfo(@TypeOf(1)) == @import("builtin").TypeId.Int) @intToPtr(HBITMAP, 1) else @as(HBITMAP, 1);
pub const MAP_EXPAND_LIGATURES = 8192;
pub const CreateFileTransacted = CreateFileTransactedA;
pub const EMR_RESERVED_119 = 119;
pub const MSGF_MENU = 2;
pub const SBS_TOPALIGN = c_long(2);
pub const ERROR_INVALID_NETNAME = c_long(1214);
pub const ERROR_CLUSTER_INVALID_INFRASTRUCTURE_FILESERVER_NAME = c_long(5998);
pub const FACILITY_DIRECT3D11_DEBUG = 2173;
pub const ERROR_DS_DRS_EXTENSIONS_CHANGED = c_long(8594);
pub const SECURITY_BUILTIN_PACKAGE_ANY_RESTRICTED_PACKAGE = c_long(2);
pub const IMAGE_REL_SH3_STARTOF_SECTION = 12;
pub const RegLoadMUIString = RegLoadMUIStringA;
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const TAPE_QUERY_MEDIA_CAPACITY = c_long(1);
pub const BSF_QUERY = 1;
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const _Post_satisfies_impl_ = expr;
pub const EOVERFLOW = 132;
pub const RESTART_NO_REBOOT = 8;
pub const SPI_GETSOUNDSENTRY = 64;
pub const RPC_S_ALREADY_LISTENING = c_long(1713);
pub const SS_REALSIZECONTROL = c_long(64);
pub const CBR_115200 = 115200;
pub const SUBLANG_SYS_DEFAULT = 2;
pub const SERVICE_NOTIFY_STATUS_CHANGE_2 = 2;
pub const CAL_SDAYNAME7 = 13;
pub const LOGON_WITH_PROFILE = 1;
pub const BN_SETFOCUS = 6;
pub const __SIZEOF_WINT_T__ = 2;
pub const ERROR_SXS_XML_E_WHITESPACEORQUESTIONMARK = c_long(14050);
pub const ERROR_UNEXPECTED_MM_EXTEND_ERR = c_long(558);
pub const __CLRCALL_OR_CDECL = __cdecl;
pub const RRF_RT_REG_QWORD = 64;
pub const LANG_TELUGU = 74;
pub const WM_DESTROY = 2;
pub const TAPE_DRIVE_WRITE_SETMARKS = 2164260864;
pub const WNCON_NOTROUTED = 2;
pub const DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE = c_long(9107);
pub const GROUP_SECURITY_INFORMATION = c_long(2);
pub const _Acquires_shared_lock_ = lock;
pub const DNS_STATUS_SINGLE_PART_NAME = c_long(9559);
pub const DNS_ERROR_ALIAS_LOOP = c_long(9722);
pub const InterlockedIncrementNoFence64 = _InterlockedIncrement64;
pub const DO_DROPFILE = c_long(1162627398);
pub const ERROR_IPSEC_IKE_INVALID_RESPONDER_LIFETIME_NOTIFY = c_long(13879);
pub const SECURITY_EFFECTIVE_ONLY = 524288;
pub const FILE_DELETE_CHILD = 64;
pub const ERROR_PACKAGES_IN_USE = c_long(15618);
pub const VK_HANGEUL = 21;
pub const VIF_ACCESSVIOLATION = c_long(512);
pub const WGL_SWAP_OVERLAY12 = 4096;
pub const FILE_CASE_SENSITIVE_SEARCH = 1;
pub const ERROR_CANT_CLEAR_ENCRYPTION_FLAG = c_long(432);
pub const EnumDependentServices = EnumDependentServicesA;
pub const VRL_CUSTOM_CLASS_BEGIN = 1 << 8;
pub const CTLCOLOR_BTN = 3;
pub const ExpungeConsoleCommandHistory = ExpungeConsoleCommandHistoryA;
pub const IO_REPARSE_TAG_DFSR = c_long(2147483666);
pub const ERROR_CHILD_MUST_BE_VOLATILE = c_long(1021);
pub const ERROR_PER_USER_TRUST_QUOTA_EXCEEDED = c_long(1932);
pub const ERROR_PACKAGE_MOVE_FAILED = c_long(15627);
pub const SERVICE_STOP_REASON_MINOR_INSTALLATION = 3;
pub const ERROR_INSTALL_INVALID_PACKAGE = c_long(15602);
pub const CTRY_UZBEKISTAN = 7;
pub const PME_FAILFAST_ON_COMMIT_FAIL_ENABLE = 1;
pub const DNS_ERROR_SCOPE_ALREADY_EXISTS = c_long(9963);
pub const GetVolumeNameForVolumeMountPoint = GetVolumeNameForVolumeMountPointA;
pub const SYSTEM_ACCESS_FILTER_NOCONSTRAINT_MASK = 4294967295;
pub const KEY_CREATE_LINK = 32;
pub const RPC_S_PRF_ELT_NOT_REMOVED = c_long(1927);
pub const MM_MAX_NUMAXES = 16;
pub const NTDDI_WIN10_RS5 = 167772166;
pub const SCF_ISSECURE = 1;
pub const CBN_EDITUPDATE = 6;
pub const NI_COMPOSITIONSTR = 21;
pub const IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;
pub const ERROR_PIPE_LISTENING = c_long(536);
pub const LANG_GUJARATI = 71;
pub const ERROR_CLEANER_SLOT_SET = c_long(4331);
pub const PASCAL = __stdcall;
pub const CLAIM_SECURITY_ATTRIBUTE_NON_INHERITABLE = 1;
pub const FACILITY_BLB = 120;
pub const ERROR_SYSTEM_SHUTDOWN = c_long(641);
pub const FAST_FAIL_CORRUPT_LIST_ENTRY = 3;
pub const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 14;
pub const ERROR_BAD_CURRENT_DIRECTORY = c_long(703);
pub const JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64;
pub const __in_ecount_nz = size;
pub const RPI_SMB2_FLAG_SERVERCAP_LARGEMTU = 4;
pub const IDTRYAGAIN = 10;
pub const STREAM_CONTAINS_GHOSTED_FILE_EXTENTS = 16;
pub const ENCLAVE_TYPE_SGX = 1;
pub const SM_PENWINDOWS = 41;
pub const WM_NCACTIVATE = 134;
pub const PDCAP_D2_SUPPORTED = 4;
pub const ERROR_INVALID_OPERATION_ON_QUORUM = c_long(5068);
pub const VK_RIGHT = 39;
pub const CTRY_SOUTH_AFRICA = 27;
pub const DNS_ERROR_SCOPE_LOCKED = c_long(9962);
pub const META_EXTFLOODFILL = 1352;
pub const THREAD_PRIORITY_ERROR_RETURN = MAXLONG;
pub const SYSPAL_NOSTATIC256 = 3;
pub const IMAGE_REL_ARM64_ABSOLUTE = 0;
pub const WNetAddConnection2 = WNetAddConnection2A;
pub const RI_MOUSE_BUTTON_1_DOWN = RI_MOUSE_LEFT_BUTTON_DOWN;
pub const MSGFLTINFO_ALLOWED_HIGHER = 3;
pub const ERROR_WMI_DP_FAILED = c_long(4209);
pub const _MSC_VER = 1922;
pub const LANG_PERSIAN = 41;
pub const HIGH_LEVEL = 15;
pub const AppendMenu = AppendMenuA;
pub const SERVICE_START_REASON_AUTO = 2;
pub const CAT_E_LAST = c_long(2147746145);
pub const META_SETBKMODE = 258;
pub const ERROR_SESSION_CREDENTIAL_CONFLICT = c_long(1219);
pub const C1_UPPER = 1;
pub const ERROR_GROUP_NOT_ONLINE = c_long(5014);
pub const VER_SUITE_SMALLBUSINESS = 1;
pub const EXCEPTION_INT_OVERFLOW = STATUS_INTEGER_OVERFLOW;
pub const ERROR_BAD_SERVICE_ENTRYPOINT = c_long(610);
pub const DIFFERENCE = 11;
pub const IMFS_ENABLED = MFS_ENABLED;
pub const ERROR_DEVICE_NOT_PARTITIONED = c_long(1107);
pub const ERROR_SEVERITY_ERROR = 3221225472;
pub const VK_F8 = 119;
pub const ERROR_IPSEC_IKE_INVALID_POLICY = c_long(13861);
pub const ERROR_TRANSACTION_NOT_JOINED = c_long(6708);
pub const ERROR_ARENA_TRASHED = c_long(7);
pub const WS_CAPTION = c_long(12582912);
pub const RPC_X_INVALID_ES_ACTION = c_long(1827);
pub const SESSION_QUERY_ACCESS = 1;
pub const ERROR_NOT_READ_FROM_COPY = c_long(337);
pub const ERROR_CANNOT_EXECUTE_FILE_IN_TRANSACTION = c_long(6838);
pub const PAGE_TARGETS_NO_UPDATE = 1073741824;
pub const ERROR_SXS_XML_E_INVALID_VERSION = c_long(14072);
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_OFF = 2 << 12;
pub const PENARBITRATIONTYPE_NONE = 0;
pub const OBJID_NATIVEOM = if (@typeInfo(@TypeOf(4294967280)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967280) else if (@typeInfo(@TypeOf(4294967280)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967280) else @as(LONG, 4294967280);
pub const EVENT_OBJECT_SELECTIONWITHIN = 32777;
pub const IME_CMODE_ROMAN = 16;
pub const WSAEWOULDBLOCK = c_long(10035);
pub const EVENT_SYSTEM_DESKTOPSWITCH = 32;
pub const ERROR_OUT_OF_PAPER = c_long(28);
pub const BSM_ALLCOMPONENTS = 0;
pub const OBJID_CURSOR = if (@typeInfo(@TypeOf(4294967287)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967287) else if (@typeInfo(@TypeOf(4294967287)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967287) else @as(LONG, 4294967287);
pub const APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;
pub const LOCALE_STIMEFORMAT = 4099;
pub const IS_TEXT_UNICODE_DBCS_LEADBYTE = 1024;
pub const RPC_S_ENTRY_ALREADY_EXISTS = c_long(1760);
pub const ERROR_SCREEN_ALREADY_LOCKED = c_long(1440);
pub const IMAGE_FILE_SYSTEM = 4096;
pub const ANTIALIASED_QUALITY = 4;
pub const __FLT_MIN_EXP__ = -125;
pub const WGL_SWAP_UNDERLAY12 = 134217728;
pub const DMICM_CONTRAST = 2;
pub const ERROR_MUI_INTLSETTINGS_INVALID_LOCALE_NAME = c_long(15108);
pub const DMPAPER_PENV_2 = 97;
pub const WN_BAD_HANDLE = ERROR_INVALID_HANDLE;
pub const DrawState = DrawStateA;
pub const PROCESS_LEAP_SECOND_INFO_FLAG_ENABLE_SIXTY_SECOND = 1;
pub const ERROR_DS_DRA_GENERIC = c_long(8436);
pub const FACILITY_GRAPHICS = 38;
pub const MFS_UNCHECKED = MF_UNCHECKED;
pub const CBR_128000 = 128000;
pub const GW_HWNDPREV = 3;
pub const SUBLANG_SERBIAN_CROATIA = 1;
pub const SE_GROUP_INTEGRITY = c_long(32);
pub const DISP_CHANGE_BADMODE = -2;
pub const WGL_SWAP_UNDERLAY1 = 65536;
pub const ILLUMINANT_FLUORESCENT = ILLUMINANT_F2;
pub const VFT_APP = c_long(1);
pub const SKF_TRISTATE = 128;
pub const InterlockedXor64Acquire = _InterlockedXor64;
pub const ERROR_DDE_FAIL = c_long(1156);
pub const SUBLANG_SWEDISH = 1;
pub const ERROR_INVALID_GROUPNAME = c_long(1209);
pub const LANG_KHMER = 83;
pub const IMAGE_FILE_MACHINE_CEE = 49390;
pub const AUDIT_ALLOW_NO_PRIVILEGE = 1;
pub const _Notref_ = _Notref_impl_;
pub const ERROR_DS_SORT_CONTROL_MISSING = c_long(8261);
pub const PS_INSIDEFRAME = 6;
pub const ERROR_NOTIFY_ENUM_DIR = c_long(1022);
pub const ERROR_FLOAT_MULTIPLE_TRAPS = c_long(631);
pub const CTRY_BRAZIL = 55;
pub const GMEM_DISCARDABLE = 256;
pub const ERROR_INVALID_PATCH_XML = c_long(1650);
pub const WPF_SETMINPOSITION = 1;
pub const __DBL_DENORM_MIN__ = 0.000000;
pub const WS_EX_DLGMODALFRAME = c_long(1);
pub const LB_SETCARETINDEX = 414;
pub const IID_NULL = GUID_NULL;
pub const UNW_FLAG_CHAININFO = 4;
pub const RASTERCAPS = 38;
pub const CAL_SDAYNAME4 = 10;
pub const LANG_PASHTO = 99;
pub const ENUM_ALL_CALENDARS = 4294967295;
pub const FAST_FAIL_LEGACY_GS_VIOLATION = 0;
pub const ERROR_NO_SHUTDOWN_IN_PROGRESS = c_long(1116);
pub const MOD_ON_KEYUP = 2048;
pub const ERROR_PRI_MERGE_MULTIPLE_PACKAGE_FAMILIES_NOT_ALLOWED = c_long(15153);
pub const FRS_ERR_INSUFFICIENT_PRIV = c_long(8007);
pub const SM_CYDLGFRAME = 8;
pub const SERVICE_STOP = 32;
pub const PRODUCT_THINPC = 87;
pub const SpeculationFence = LoadFence;
pub const CBR_14400 = 14400;
pub const CTRY_FAEROE_ISLANDS = 298;
pub const SETALLJUSTVALUES = 771;
pub const IDHELP = 9;
pub const MUI_USER_PREFERRED_UI_LANGUAGES = 16;
pub const ERROR_REGISTRY_HIVE_RECOVERED = c_long(685);
pub const SCS_THIS_PLATFORM_BINARY = SCS_64BIT_BINARY;
pub const SPI_GETFONTSMOOTHINGORIENTATION = 8210;
pub const SW_PARENTCLOSING = 1;
pub const DT_END_ELLIPSIS = 32768;
pub const FR_PRIVATE = 16;
pub const VK_PRINT = 42;
pub const WGL_SWAP_OVERLAY15 = 32768;
pub const UI_CAP_ROTANY = 4;
pub const EPROTOTYPE = 136;
pub const ERROR_NO_BROWSER_SERVERS_FOUND = c_long(6118);
pub const IMR_COMPOSITIONWINDOW = 1;
pub const R2_MERGEPENNOT = 14;
pub const TAPE_ABSOLUTE_BLOCK = c_long(1);
pub const SHTDN_REASON_FLAG_USER_DEFINED = 1073741824;
pub const LOCALE_IPOSSYMPRECEDES = 84;
pub const __PCLMUL__ = 1;
pub const _Analysis_assume_section_locked_ = name;
pub const LOCALE_SLANGUAGE = LOCALE_SLOCALIZEDDISPLAYNAME;
pub const VOLUME_NAME_DOS = 0;
pub const ERROR_ALREADY_HAS_STREAM_ID = c_long(4444);
pub const PEERDIST_ERROR_NOT_INITIALIZED = c_long(4054);
pub const ERROR_CLUSTER_EVICT_INVALID_REQUEST = c_long(5939);
pub const CTRY_IRELAND = 353;
pub const ERROR_PRINTER_DELETED = c_long(1905);
pub const SSTF_CHARS = 1;
pub const ERROR_INVALID_DOMAIN_STATE = c_long(1353);
pub const GetFullPathName = GetFullPathNameA;
pub const LOCALE_SISO639LANGNAME = 89;
pub const PROCESSOR_ARM820 = 2080;
pub const ERROR_DBG_PRINTEXCEPTION_C = c_long(694);
pub const ERROR_QUORUMLOG_OPEN_FAILED = c_long(5028);
pub const CONSOLE_APPLICATION_16BIT = 0;
pub const DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = c_long(9605);
pub const ESB_DISABLE_RIGHT = 2;
pub const CONST = @"const";
pub const WINPATHCCHAPI = WINBASEAPI;
pub const InterlockedBitTestAndReset64 = _interlockedbittestandreset64;
pub const APPCOMMAND_PASTE = 38;
pub const WM_IME_KEYLAST = 271;
pub const WSA_QOS_EFILTERSTYLE = c_long(11019);
pub const ERROR_DS_SINGLE_VALUE_CONSTRAINT = c_long(8321);
pub const __in_bcount_nz = size;
pub const ERROR_CLUSTER_UPGRADE_INCOMPATIBLE_VERSIONS = c_long(5973);
pub const PS_USERSTYLE = 7;
pub const MUI_CONSOLE_FILTER = 256;
pub const IMAGE_FILE_MACHINE_R4000 = 358;
pub const SPI_SETFONTSMOOTHINGORIENTATION = 8211;
pub const DKGRAY_BRUSH = 3;
pub const CF_DIB = 8;
pub const PROCESS_VM_WRITE = 32;
pub const PROCESS_DEP_ENABLE = 1;
pub const SE_GROUP_USE_FOR_DENY_ONLY = c_long(16);
pub const ERROR_BAD_TOKEN_TYPE = c_long(1349);
pub const XSTATE_CONTROLFLAG_XSAVEC_MASK = 2;
pub const PRODUCT_STANDARD_WS_SERVER_CORE = 148;
pub const SERVICE_ACCEPT_LOWRESOURCES = 8192;
pub const SECURITY_CHILD_PACKAGE_RID_COUNT = c_long(12);
pub const ERROR_APP_HANG = c_long(1298);
pub const PC_SCANLINE = 8;
pub const WNetAddConnection3 = WNetAddConnection3A;
pub const GetFileAttributesEx = GetFileAttributesExA;
pub const POWER_PLATFORM_ROLE_VERSION_MAX = POWER_PLATFORM_ROLE_V2_MAX;
pub const RESTART_NO_HANG = 2;
pub const ERROR_APPEXEC_HANDLE_INVALIDATED = c_long(3061);
pub const CAL_GREGORIAN_XLIT_FRENCH = 12;
pub const ERROR_DS_UNAVAILABLE = c_long(8207);
pub const ERROR_DS_GCVERIFY_ERROR = c_long(8417);
pub const ERROR_DRIVER_CANCEL_TIMEOUT = c_long(594);
pub const LOCALE_SNEGATIVESIGN = 81;
pub const SUBLANG_TSWANA_SOUTH_AFRICA = 1;
pub const BitTestAndReset = _bittestandreset;
pub const EFBIG = 27;
pub const VK_OEM_ATTN = 240;
pub const ERROR_PRINTQ_FULL = c_long(61);
pub const CS_DELETE_TRANSFORM = c_long(3);
pub const FILE_ATTRIBUTE_DEVICE = 64;
pub const CBN_CLOSEUP = 8;
pub const DESKTOP_WRITEOBJECTS = c_long(128);
pub const SUBLANG_SAMI_LULE_SWEDEN = 5;
pub const WM_SIZE = 5;
pub const PRODUCT_CLOUDEN = 186;
pub const DOF_EXECUTABLE = 32769;
pub const __LDBL_DIG__ = 15;
pub const ENODEV = 19;
pub const ERROR_IPSEC_REPLAY_CHECK_FAILED = c_long(13913);
pub const CM_SERVICE_MEASURED_BOOT_LOAD = 32;
pub const SHTDN_REASON_MINOR_DISK = 7;
pub const WNNC_NET_TERMSRV = 3538944;
pub const DMPAPER_ENV_B5 = 34;
pub const OBJID_HSCROLL = if (@typeInfo(@TypeOf(4294967290)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967290) else if (@typeInfo(@TypeOf(4294967290)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967290) else @as(LONG, 4294967290);
pub const FKF_CLICKON = 64;
pub const SPI_SETFONTSMOOTHING = 75;
pub const FILE_USER_DISALLOWED = 7;
pub const POSTSCRIPT_IDENTIFY = 4117;
pub const IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756;
pub const WM_CTLCOLORDLG = 310;
pub const ERROR_DS_SCHEMA_UPDATE_DISALLOWED = c_long(8509);
pub const ReadConsoleOutput = ReadConsoleOutputA;
pub const META_MOVETO = 532;
pub const CDS_UPDATEREGISTRY = 1;
pub const FW_ULTRABOLD = FW_EXTRABOLD;
pub const FILE_TYPE_CHAR = 2;
pub const ERROR_LOGON_SERVER_CONFLICT = c_long(568);
pub const HELP_KEY = c_long(257);
pub const DC_DRIVER = 11;
pub const DFCS_ADJUSTRECT = 8192;
pub const __FLT_HAS_DENORM__ = 1;
pub const ERROR_DUP_NAME = c_long(52);
pub const DMDITHER_FINE = 3;
pub const ERROR_PNP_QUERY_REMOVE_UNRELATED_DEVICE_TIMEOUT = c_long(482);
pub const ERROR_LOG_POLICY_ALREADY_INSTALLED = c_long(6619);
pub const DMPAPER_PENV_1 = 96;
pub const JOB_OBJECT_LIMIT_AFFINITY = 16;
pub const SPI_SETMENUDROPALIGNMENT = 28;
pub const PRODUCT_AZURE_NANO_SERVER = 169;
pub const ERROR_DS_DRA_RECYCLED_TARGET = c_long(8639);
pub const STATUS_SINGLE_STEP = if (@typeInfo(@TypeOf(c_long(2147483652))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483652)) else if (@typeInfo(@TypeOf(c_long(2147483652))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483652)) else @as(DWORD, c_long(2147483652));
pub const BDR_RAISEDOUTER = 1;
pub const SetClassLong = SetClassLongA;
pub const MOUSEEVENTF_XUP = 256;
pub const WNNC_NET_SERNET = 1900544;
pub const UpdateICMRegKey = UpdateICMRegKeyA;
pub const POLICY_AUDIT_SUBCATEGORY_COUNT = 59;
pub const IMAGE_SCN_MEM_DISCARDABLE = 33554432;
pub const WSAENOMORE = c_long(10102);
pub const ERROR_NO_USER_SESSION_KEY = c_long(1394);
pub const ERROR_INVALID_USER_PRINCIPAL_NAME = c_long(8636);
pub const PAN_PROP_MODERN = 3;
pub const WM_NCPOINTERUP = 579;
pub const _STRALIGN_USE_SECURE_CRT = 1;
pub const FACILITY_WPN = 62;
pub const RotateRight64 = _rotr64;
pub const LPD_STEREO = 2;
pub const SORT_KOREAN_UNICODE = 1;
pub const ERROR_PATCH_PACKAGE_REJECTED = c_long(1643);
pub const IMAGE_FILE_MACHINE_CEF = 3311;
pub const VP_FLAGS_COPYPROTECT = 256;
pub const ERROR_NEEDS_REMEDIATION = c_long(15612);
pub const VBS_BASIC_PAGE_ZERO_FILL = 3;
pub const CONNECT_CRED_RESET = 8192;
pub const ERROR_MCA_UNSUPPORTED_MCCS_VERSION = c_long(15204);
pub const LANG_UKRAINIAN = 34;
pub const ERROR_PROTOCOL_UNREACHABLE = c_long(1233);
pub const SERVICE_STOP_REASON_MINOR_SERVICEPACK_UNINSTALL = 19;
pub const ERROR_IPSEC_DOSP_BLOCK = c_long(13925);
pub const CAL_SDAYNAME5 = 11;
pub const VK_EXECUTE = 43;
pub const MAX_REASON_BUGID_LEN = 32;
pub const ARW_BOTTOMRIGHT = c_long(1);
pub const DEFINE_ENUM_FLAG_OPERATORS = ENUMTYPE;
pub const IMAGE_REL_MIPS_REFHALF = 1;
pub const DMPAPER_P32K_ROTATED = 107;
pub const CreateProcessAsUser = CreateProcessAsUserA;
pub const ERROR_WMI_UNRESOLVED_INSTANCE_REF = c_long(4205);
pub const CTRY_EL_SALVADOR = 503;
pub const CreateMutexEx = CreateMutexExA;
pub const ERROR_SYSTEM_POWERSTATE_TRANSITION = c_long(782);
pub const RemoveFontResource = RemoveFontResourceA;
pub const WH_CALLWNDPROC = 4;
pub const SSWF_CUSTOM = 4;
pub const OUT_DEVICE_PRECIS = 5;
pub const EVENTLOG_ERROR_TYPE = 1;
pub const BAUD_115200 = if (@typeInfo(@TypeOf(131072)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 131072) else if (@typeInfo(@TypeOf(131072)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 131072) else @as(DWORD, 131072);
pub const QUERY_ACTCTX_FLAG_NO_ADDREF = 2147483648;
pub const FAST_FAIL_INCORRECT_STACK = 4;
pub const FACILITY_LINGUISTIC_SERVICES = 305;
pub const DWLP_MSGRESULT = 0;
pub const IMAGE_SCN_MEM_EXECUTE = 536870912;
pub const ERROR_BEYOND_VDL = c_long(1289);
pub const SORT_JAPANESE_UNICODE = 1;
pub const TOUCHINPUTMASKF_EXTRAINFO = 2;
pub const IME_HOTKEY_DSWITCH_LAST = 287;
pub const RegEnumKey = RegEnumKeyA;
pub const IDI_WARNING = IDI_EXCLAMATION;
pub const HC_ACTION = 0;
pub const WM_RENDERFORMAT = 773;
pub const WGL_SWAP_OVERLAY14 = 16384;
pub const InterlockedOr64Acquire = _InterlockedOr64;
pub const SPI_GETMOUSEHOVERTIME = 102;
pub const ERROR_BAD_INHERITANCE_ACL = c_long(1340);
pub const GCP_LIGATE = 32;
pub const HCF_DEFAULTDESKTOP = 512;
pub const SKF_LWINLOCKED = 4194304;
pub const ERROR_TRANSACTIONAL_OPEN_NOT_ALLOWED = c_long(6832);
pub const DMICM_USER = 256;
pub const LANG_HEBREW = 13;
pub const RESOURCE_RECENT = 4;
pub const SELECT_CAP_SENTENCE = 2;
pub const ERROR_PRINTER_HAS_JOBS_QUEUED = c_long(3009);
pub const STM_SETIMAGE = 370;
pub const APPMODEL_ERROR_NO_PACKAGE = c_long(15700);
pub const EM_GETFIRSTVISIBLELINE = 206;
pub const ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = c_long(8518);
pub const LANG_IRISH = 60;
pub const ERROR_DS_CANT_ADD_SYSTEM_ONLY = c_long(8358);
pub const _Analysis_suppress_lock_checking_ = lock;
pub const IO_REPARSE_TAG_WOF = c_long(2147483671);
pub const CAL_SMONTHDAY = 56;
pub const VK_EREOF = 249;
pub const CONSOLE_SELECTION_NOT_EMPTY = 2;
pub const VK_SLEEP = 95;
pub const WM_HANDHELDFIRST = 856;
pub const ERROR_TRANSACTIONMANAGER_NOT_FOUND = c_long(6718);
pub const ERROR_INSTALL_DEREGISTRATION_FAILURE = c_long(15607);
pub const PW_RENDERFULLCONTENT = 2;
pub const PDC_ORIENTATION_90 = 8;
pub const ERROR_DS_NAME_TOO_MANY_PARTS = c_long(8347);
pub const POINTER_FLAG_UP = 262144;
pub const ERROR_SXS_FILE_NOT_PART_OF_ASSEMBLY = c_long(14104);
pub const APPCOMMAND_SPELL_CHECK = 42;
pub const EVENT_OBJECT_DRAGCANCEL = 32802;
pub const LOCALE_S2359 = LOCALE_SPM;
pub const CDS_ENABLE_UNSAFE_MODES = 256;
pub const __inexpressible_writableTo = size;
pub const ERROR_STATE_READ_SETTING_FAILED = c_long(15807);
pub const SECURITY_LOCAL_LOGON_RID = c_long(1);
pub const ERROR_BAD_MCFG_TABLE = c_long(791);
pub const UNICODE_STRING_MAX_BYTES = if (@typeInfo(@TypeOf(65534)) == @import("builtin").TypeId.Pointer) @ptrCast(WORD, 65534) else if (@typeInfo(@TypeOf(65534)) == @import("builtin").TypeId.Int) @intToPtr(WORD, 65534) else @as(WORD, 65534);
pub const SHUTDOWN_POWEROFF = 8;
pub const ERROR_FULLSCREEN_MODE = c_long(1007);
pub const ERROR_PORT_NOT_SET = c_long(642);
pub const ERROR_IPSEC_IKE_INVALID_CERT_KEYLEN = c_long(13881);
pub const FILE_SKIP_SET_EVENT_ON_HANDLE = 2;
pub const IMAGE_NT_OPTIONAL_HDR_MAGIC = IMAGE_NT_OPTIONAL_HDR64_MAGIC;
pub const WM_SYSKEYUP = 261;
pub const MS_PPM_SOFTWARE_ALL = 1;
pub const EMR_CREATECOLORSPACE = 99;
pub const TIME_ZONE_ID_UNKNOWN = 0;
pub const WM_NEXTDLGCTL = 40;
pub const TIMER_MODIFY_STATE = 2;
pub const ERROR_EXTRANEOUS_INFORMATION = c_long(677);
pub const EMARCH_ENC_I17_IC_INST_WORD_POS_X = 12;
pub const __LDBL_MAX__ = 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878;
pub const CTRY_DOMINICAN_REPUBLIC = 1;
pub const HEAP_FREE_CHECKING_ENABLED = 64;
pub const ERROR_FILEMARK_DETECTED = c_long(1101);
pub const META_SETPIXEL = 1055;
pub const EMR_SELECTCLIPPATH = 67;
pub const LANG_HAWAIIAN = 117;
pub const ERROR_UNKNOWN_REVISION = c_long(1305);
pub const SUBLANG_NEUTRAL = 0;
pub const IO_REPARSE_TAG_WCI_TOMBSTONE = c_long(2684354591);
pub const IMAGE_SYM_DTYPE_ARRAY = 3;
pub const __UINTPTR_FMTX__ = "llX";
pub const TWOSTOPBITS = 2;
pub const ERROR_DEPLOYMENT_BLOCKED_BY_POLICY = c_long(15617);
pub const ERROR_LOG_CLIENT_ALREADY_REGISTERED = c_long(6636);
pub const _Create_lock_level_ = level;
pub const DialogBoxIndirect = DialogBoxIndirectA;
pub const REG_APP_HIVE_OPEN_READ_ONLY = REG_OPEN_READ_ONLY;
pub const BELOW_NORMAL_PRIORITY_CLASS = 16384;
pub const PROCESSOR_ARCHITECTURE_INTEL = 0;
pub const APPCOMMAND_BROWSER_STOP = 4;
pub const IDNO = 7;
pub const SERVICE_START_REASON_RESTART_ON_FAILURE = 8;
pub const DMPAPER_PENV_8_ROTATED = 116;
pub const EMR_MODIFYWORLDTRANSFORM = 36;
pub const QS_PAINT = 32;
pub const MDM_SHIFT_V120_SPEED = 0;
pub const RPC_S_UNKNOWN_AUTHZ_SERVICE = c_long(1750);
pub const SUBLANG_FRENCH_CANADIAN = 3;
pub const ERROR_THREAD_1_INACTIVE = c_long(210);
pub const DMPAPER_ENV_B4 = 33;
pub const ERROR_CLUSTER_TOKEN_DELEGATION_NOT_SUPPORTED = c_long(5988);
pub const RPC_S_ENTRY_TYPE_MISMATCH = c_long(1922);
pub const ERROR_UNKNOWN_PATCH = c_long(1647);
pub const EDOM = 33;
pub const PROCESS_CREATION_MITIGATION_POLICY_STRICT_HANDLE_CHECKS_RESERVED = 3 << 24;
pub const IMAGE_REL_AMD64_SREL32 = 14;
pub const RemoveDirectory = RemoveDirectoryA;
pub const DCX_CLIPSIBLINGS = c_long(16);
pub const ERROR_INSTALL_LOG_FAILURE = c_long(1622);
pub const SUBLANG_YORUBA_NIGERIA = 1;
pub const LBS_NOSEL = c_long(16384);
pub const JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8;
pub const IMAGE_DEBUG_TYPE_VC_FEATURE = 12;
pub const GetFileVersionInfo = GetFileVersionInfoA;
pub const RPC_S_FP_UNDERFLOW = c_long(1770);
pub const WM_QUIT = 18;
pub const GC_PRESSANDTAP = 1;
pub const GDICOMMENT_WINDOWS_METAFILE = 2147483649;
pub const WNNC_NET_FJ_REDIR = 2228224;
pub const InterlockedCompareExchangeAcquire = _InterlockedCompareExchange;
pub const HANGEUL_CHARSET = 129;
pub const STARTF_UNTRUSTEDSOURCE = 32768;
pub const SPI_GETWAITTOKILLSERVICETIMEOUT = 124;
pub const NETWORK_APP_INSTANCE_CSV_FLAGS_VALID_ONLY_IF_CSV_COORDINATOR = 1;
pub const JOB_OBJECT_MSG_NEW_PROCESS = 6;
pub const CBN_SELENDOK = 9;
pub const ERROR_INTERMIXED_KERNEL_EA_OPERATION = c_long(324);
pub const InterlockedXor8 = _InterlockedXor8;
pub const WINDEVQUERYAPI = DECLSPEC_IMPORT;
pub const ERROR_IPSEC_IKE_SECLOADFAIL = c_long(13852);
pub const SERVICE_SYSTEM_START = 1;
pub const X3_IMM20_SIZE_X = 20;
pub const SDC_TOPOLOGY_EXTERNAL = 8;
pub const __FLT_MIN__ = 0.000000;
pub const OF_SHARE_DENY_NONE = 64;
pub const IDANI_CAPTION = 3;
pub const DNS_ERROR_ZONE_LOCKED_FOR_SIGNING = c_long(9622);
pub const IMAGE_REL_ARM64_ADDR32NB = 2;
pub const MDM_V120_SPEED_64K = 1;
pub const CTRY_PRCHINA = 86;
pub const RESOURCE_CONTEXT = 5;
pub const TME_QUERY = 1073741824;
pub const SPI_SCREENSAVERRUNNING = SPI_SETSCREENSAVERRUNNING;
pub const FILE_CACHE_MIN_HARD_ENABLE = 4;
pub const SUBLANG_YI_PRC = 1;
pub const IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;
pub const PEERDIST_ERROR_TRUST_FAILURE = c_long(4066);
pub const ERROR_DS_DUP_OID = c_long(8379);
pub const ERROR_IPSEC_IKE_NOTCBPRIV = c_long(13851);
pub const PF_COMPARE_EXCHANGE_DOUBLE = 2;
pub const EMR_RESTOREDC = 34;
pub const GR_GDIOBJECTS_PEAK = 2;
pub const FACILITY_DEPLOYMENT_SERVICES_CONTENT_PROVIDER = 293;
pub const TOKEN_IMPERSONATE = 4;
pub const MDM_MASK_PROTOCOLDATA = 267386880;
pub const CAL_GREGORIAN = 1;
pub const IMAGE_SYM_CLASS_STATIC = 3;
pub const MFT_RIGHTORDER = c_long(8192);
pub const IsDialogMessage = IsDialogMessageA;
pub const LR_VGACOLOR = 128;
pub const ERROR_LOG_INVALID_RANGE = c_long(6604);
pub const CS_ENABLE = c_long(1);
pub const JOB_OBJECT_LIMIT_IO_RATE_CONTROL = 524288;
pub const MKF_REPLACENUMBERS = 128;
pub const CREATE_EVENT_INITIAL_SET = 2;
pub const SUBLANG_QUECHUA_BOLIVIA = 1;
pub const WN_RETRY = ERROR_RETRY;
pub const FACILITY_NT_BIT = 268435456;
pub const BASE_SEARCH_PATH_PERMANENT = 32768;
pub const SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;
pub const SHTDN_REASON_MAJOR_POWER = 393216;
pub const PS_TYPE_MASK = 983040;
pub const SUBLANG_SINDHI_AFGHANISTAN = 2;
pub const SUPPORT_LANG_NUMBER = 32;
pub const GetPrivateProfileInt = GetPrivateProfileIntA;
pub const FindNextVolume = FindNextVolumeA;
pub const PAN_LETT_NORMAL_ROUNDED = 6;
pub const VER_SERVICEPACKMAJOR = 32;
pub const ERROR_SXS_XML_E_DUPLICATEATTRIBUTE = c_long(14053);
pub const REG_IMMUTABLE = c_long(16384);
pub const STATE_SYSTEM_VALID = 1073741823;
pub const COLOR_3DDKSHADOW = 21;
pub const SERVICE_NOTIFY_START_PENDING = 2;
pub const DMPAPER_LAST = DMPAPER_PENV_10_ROTATED;
pub const DEVICEFAMILYDEVICEFORM_MAKER_BOARD = 21;
pub const STATE_SYSTEM_MARQUEED = 8192;
pub const CS_OWNDC = 32;
pub const POINTER_MESSAGE_FLAG_SECONDBUTTON = 32;
pub const ERROR_LOST_WRITEBEHIND_DATA_LOCAL_DISK_ERROR = c_long(790);
pub const EVENT_OBJECT_IME_CHANGE = 32809;
pub const PSINJECT_BEGINDEFAULTS = 12;
pub const WN_DEVICE_IN_USE = ERROR_DEVICE_IN_USE;
pub const UNICODE_NULL = if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Pointer) @ptrCast(WCHAR, 0) else if (@typeInfo(@TypeOf(0)) == @import("builtin").TypeId.Int) @intToPtr(WCHAR, 0) else @as(WCHAR, 0);
pub const LANG_DARI = 140;
pub const ERROR_BAD_EXE_FORMAT = c_long(193);
pub const IMAGE_GUARD_CF_INSTRUMENTED = 256;
pub const IMAGE_REL_ARM64_SECREL_LOW12L = 11;
pub const ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = c_long(8498);
pub const SPI_GETSPEECHRECOGNITION = 4170;
pub const LOCALE_IDAYLZERO = 38;
pub const ERROR_CLUSTER_INVALID_SECURITY_DESCRIPTOR = c_long(5946);
pub const GetCharacterPlacement = GetCharacterPlacementA;
pub const VK_LMENU = 164;
pub const SUBLANG_TATAR_RUSSIA = 1;
pub const APPCOMMAND_HELP = 27;
pub const INPUT_HARDWARE = 2;
pub const ERROR_IPSEC_QM_POLICY_PENDING_DELETION = c_long(13023);
pub const SBM_SETSCROLLINFO = 233;
pub const ERROR_SYSTEM_NEEDS_REMEDIATION = c_long(15623);
pub const FS_VIETNAMESE = c_long(256);
pub const ERROR_DS_CANT_DEL_MASTER_CROSSREF = c_long(8375);
pub const SKF_RWINLOCKED = 8388608;
pub const ERROR_LOG_METADATA_INVALID = c_long(6613);
pub const InterlockedBitTestAndSet64 = _interlockedbittestandset64;
pub const MFT_BITMAP = MF_BITMAP;
pub const ERROR_INSTALL_PLATFORM_UNSUPPORTED = c_long(1633);
pub const CURVECAPS = 28;
pub const RegSetValueEx = RegSetValueExA;
pub const SPI_GETFONTSMOOTHING = 74;
pub const wsprintf = wsprintfA;
pub const __INT_FAST8_MAX__ = 127;
pub const ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = c_long(5079);
pub const DNS_ERROR_NAME_NOT_IN_ZONE = c_long(9706);
pub const MOD_IGNORE_ALL_MODIFIER = 1024;
pub const CB_GETCURSEL = 327;
pub const EVENT_OBJECT_VALUECHANGE = 32782;
pub const VERTSIZE = 6;
pub const ERROR_LOG_TAIL_INVALID = c_long(6627);
pub const MDMSPKR_ON = 2;
pub const SPI_SETSCREENSAVERRUNNING = 97;
pub const ERROR_IPSEC_TRANSPORT_FILTER_NOT_FOUND = c_long(13009);
pub const IMN_SETCONVERSIONMODE = 6;
pub const SECURITY_CAPABILITY_VIDEOS_LIBRARY = c_long(5);
pub const QueryServiceConfig = QueryServiceConfigA;
pub const RPC_S_SYSTEM_HANDLE_TYPE_MISMATCH = c_long(1836);
pub const ICM_QUERY = 3;
pub const FACILITY_WINDOWS = 8;
pub const SCHED_E_SERVICE_NOT_LOCALSYSTEM = c_long(6200);
pub const TC_VA_ABLE = 16384;
pub const IMAGE_SCN_SCALE_INDEX = 1;
pub const RPC_S_MAX_CALLS_TOO_SMALL = c_long(1742);
pub const DT_RASDISPLAY = 1;
pub const ERROR_IPSEC_MM_FILTER_EXISTS = c_long(13006);
pub const ERROR_WAKE_SYSTEM = c_long(730);
pub const CLIENTSITE_S_LAST = c_long(262559);
pub const LC_WIDESTYLED = 64;
pub const SECURITY_AUTHENTICATION_AUTHORITY_RID_COUNT = c_long(1);
pub const DC_BINNAMES = 12;
pub const POINTER_FLAG_FOURTHBUTTON = 128;
pub const BS_CHECKBOX = c_long(2);
pub const ENOMSG = 122;
pub const RESOURCE_ENUM_LN = 1;
pub const IMAGE_REL_MIPS_JMPADDR16 = 16;
pub const WVR_ALIGNLEFT = 32;
pub const ERROR_CLUSTER_INVALID_IPV6_TUNNEL_NETWORK = c_long(5927);
pub const ERROR_IPSEC_IKE_PROCESS_ERR_SIG = c_long(13838);
pub const VTA_CENTER = TA_CENTER;
pub const VP_TV_STANDARD_PAL_B = 4;
pub const OUT_CHARACTER_PRECIS = 2;
pub const CM_SERVICE_USB_DISK_BOOT_LOAD = 4;
pub const DC_BUTTONS = 4096;
pub const MOUSEEVENTF_MOVE_NOCOALESCE = 8192;
pub const RegOpenKey = RegOpenKeyA;
pub const EMR_CHORD = 46;
pub const RTL_CORRELATION_VECTOR_V2_PREFIX_LENGTH = 22;
pub const DNS_ERROR_NO_PACKET = c_long(9503);
pub const REG_OPTION_BACKUP_RESTORE = c_long(4);
pub const InterlockedCompareExchange128 = _InterlockedCompareExchange128;
pub const DMMEDIA_GLOSSY = 3;
pub const LANG_BULGARIAN = 2;
pub const VOS_UNKNOWN = c_long(0);
pub const ERROR_BAD_RECOVERY_POLICY = c_long(6012);
pub const _CRT_HAS_CXX17 = 0;
pub const EVENT_SYSTEM_SCROLLINGEND = 19;
pub const __elem_readableTo = size;
pub const DMPAPER_PENV_7 = 102;
pub const WNNC_NET_AS400 = 720896;
pub const RESOURCETYPE_PRINT = 2;
pub const SUBLANG_BASHKIR_RUSSIA = 1;
pub const COPY_FILE_IGNORE_SOURCE_ENCRYPTION = 8388608;
pub const ERROR_IPSEC_IKE_POLICY_CHANGE = c_long(13849);
pub const IMAGE_REL_ARM64_PAGEBASE_REL21 = 4;
pub const IMAGE_SCN_ALIGN_512BYTES = 10485760;
pub const EVENT_SYSTEM_MINIMIZEEND = 23;
pub const _Pre_ = _Pre_impl_;
pub const IMAGE_SUBSYSTEM_OS2_CUI = 5;
pub const SW_MAXIMIZE = 3;
pub const ERROR_NOT_SUPPORTED_ON_STANDARD_SERVER = c_long(8584);
pub const VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = 210;
pub const CreateProcess = CreateProcessA;
pub const CC_ROUNDRECT = 256;
pub const SUBLANG_TAJIK_TAJIKISTAN = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_ALWAYS_ON_REQ_RELOCS = 3 << 8;
pub const SMTO_BLOCK = 1;
pub const FACILITY_STATE_MANAGEMENT = 34;
pub const ERROR_DS_MUST_BE_RUN_ON_DST_DC = c_long(8558);
pub const CTMF_INCLUDE_LPAC = c_ulong(2);
pub const ERROR_EFS_ALG_BLOB_TOO_BIG = c_long(6013);
pub const MFT_SEPARATOR = MF_SEPARATOR;
pub const ERROR_PATCH_REMOVAL_DISALLOWED = c_long(1649);
pub const IMAGE_COMDAT_SELECT_NEWEST = 7;
pub const THREAD_SUSPEND_RESUME = 2;
pub const SYMBOLIC_LINK_FLAG_DIRECTORY = 1;
pub const SERVICE_STOP_REASON_MINOR_OTHER = 1;
pub const INPLACE_S_FIRST = c_long(262560);
pub const THREAD_IMPERSONATE = 256;
pub const ERROR_SUCCESS_REBOOT_INITIATED = c_long(1641);
pub const EVENT_OBJECT_SELECTION = 32774;
pub const PF_ARM_NEON_INSTRUCTIONS_AVAILABLE = 19;
pub const MUI_USE_SEARCH_ALL_LANGUAGES = 64;
pub const CS_GLOBALCLASS = 16384;
pub const DNS_ERROR_ROLLOVER_IN_PROGRESS = c_long(9116);
pub const SHTDN_REASON_MAJOR_LEGACY_API = 458752;
pub const __INT_LEAST8_MAX__ = 127;
pub const LANG_INDONESIAN = 33;
pub const ERROR_DS_CLIENT_LOOP = c_long(8259);
pub const SPI_GETPENDOCKTHRESHOLD = 128;
pub const ImmSetCompositionFont = ImmSetCompositionFontA;
pub const GetPrivateProfileSectionNames = GetPrivateProfileSectionNamesA;
pub const EnumServicesStatusEx = EnumServicesStatusExA;
pub const SPECIFIC_RIGHTS_ALL = c_long(65535);
pub const GETEXTENTTABLE = 257;
pub const ERROR_DS_SYNTAX_MISMATCH = c_long(8384);
pub const RPC_X_NULL_REF_POINTER = c_long(1780);
pub const FILE_SUPPORTS_POSIX_UNLINK_RENAME = 1024;
pub const WT_EXECUTEINLONGTHREAD = 16;
pub const ERROR_CLUSTER_MISMATCHED_COMPUTER_ACCT_NAME = c_long(5905);
pub const BS_NOTIFY = c_long(16384);
pub const SHTDN_REASON_MINOR_SECURITY = 19;
pub const ERROR_CS_ENCRYPTION_NEW_ENCRYPTED_FILE = c_long(6020);
pub const SIF_PAGE = 2;
pub const SUBLANG_ENGLISH_AUS = 3;
pub const EMR_POLYDRAW = 56;
pub const _WIN32_IE_IE30 = 768;
pub const DESKTOP_CREATEWINDOW = c_long(2);
pub const CONNDLG_USE_MRU = 4;
pub const PRODUCT_HOME_PREMIUM_E = 68;
pub const DEVICEFAMILYINFOENUM_DESKTOP = 3;
pub const LANG_DANISH = 6;
pub const ERROR_DS_CANT_DEMOTE_WITH_WRITEABLE_NC = c_long(8604);
pub const INPLACE_E_LAST = c_long(2147746223);
pub const WM_DEADCHAR = 259;
pub const CTRY_BAHRAIN = 973;
pub const DISPLAYCONFIG_PATH_DESKTOP_IMAGE_IDX_INVALID = 65535;
pub const EV_RXCHAR = 1;
pub const IO_REPARSE_TAG_WCI_1 = c_long(2415923224);
pub const EMARCH_ENC_I17_IC_VAL_POS_X = 21;
pub const SECURITY_PACKAGE_NTLM_RID = c_long(10);
pub const PSINJECT_BEGINPROLOG = 14;
pub const ISC_SHOWUIALLCANDIDATEWINDOW = 15;
pub const ERROR_XML_PARSE_ERROR = c_long(1465);
pub const DMPAPER_A_PLUS = 57;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE = 0.001000;
pub const PSINJECT_PAGES = 4;
pub const FACILITY_ACCELERATOR = 1536;
pub const ERROR_CANT_EVICT_ACTIVE_NODE = c_long(5009);
pub const SM_IMMENABLED = 82;
pub const LOCALE_IFIRSTWEEKOFYEAR = 4109;
pub const InterlockedExchange16 = _InterlockedExchange16;
pub const X3_BTYPE_QP_SIZE_X = 9;
pub const CURSOR_SUPPRESSED = 2;
pub const VerifyVersionInfo = VerifyVersionInfoA;
pub const RIDI_DEVICENAME = 536870919;
pub const WINAPI_FAMILY_PHONE_APP = 3;
pub const StoreFence = _mm_sfence;
pub const GCP_CLASSIN = c_long(524288);
pub const ERROR_CLOUD_FILE_PROPERTY_BLOB_CHECKSUM_MISMATCH = c_long(366);
pub const CLAIM_SECURITY_ATTRIBUTE_TYPE_FQBN = 4;
pub const IME_ESC_PRIVATE_LAST = 4095;
pub const PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_RESERVED = if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 20) else if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 20) else c_uint(3)(i64 << 20);
pub const HC_SYSMODALON = 4;
pub const MK_CONTROL = 8;
pub const SUBLANG_SPANISH_URUGUAY = 14;
pub const ERROR_DS_CANT_ON_RDN = c_long(8214);
pub const SET_TAPE_DRIVE_INFORMATION = 1;
pub const EN_SETFOCUS = 256;
pub const INVALID_FILE_SIZE = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4294967295) else @as(DWORD, 4294967295);
pub const LC_POLYMARKER = 8;
pub const ERROR_EVT_INVALID_CHANNEL_PROPERTY_VALUE = c_long(15023);
pub const SERVICE_CONTROL_TRIGGEREVENT = 32;
pub const ERROR_CANTOPEN = c_long(1011);
pub const ERROR_MEDIA_NOT_AVAILABLE = c_long(4318);
pub const FF_DONTCARE = 0 << 4;
pub const __deref_out_bcount_nz_opt = size;
pub const LLKHF_LOWER_IL_INJECTED = 2;
pub const ERROR_DS_CANT_RETRIEVE_ATTS = c_long(8481);
pub const PF_NX_ENABLED = 12;
pub const EMR_POLYLINE = 4;
pub const PROCESS_CREATION_MITIGATION_POLICY2_MODULE_TAMPERING_PROTECTION_MASK = if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 12) else if (@typeInfo(@TypeOf(i64 << 12)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 12) else c_uint(3)(i64 << 12);
pub const X3_IMM39_2_SIZE_X = 16;
pub const VK_ICO_HELP = 227;
pub const ACTIVATION_CONTEXT_SECTION_COM_TYPE_LIBRARY_REDIRECTION = 6;
pub const TAPE_DRIVE_FILEMARKS = 2147745792;
pub const PENVISUALIZATION_TAP = 1;
pub const PROCESS_CREATION_MITIGATION_POLICY_IMAGE_LOAD_NO_LOW_LABEL_ALWAYS_OFF = if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(2), i64 << 56) else if (@typeInfo(@TypeOf(i64 << 56)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(2), i64 << 56) else c_uint(2)(i64 << 56);
pub const _WIN32_IE_WS03SP1 = _WIN32_IE_IE60SP2;
pub const PF_ARM_EXTERNAL_CACHE_AVAILABLE = 26;
pub const LANG_ARMENIAN = 43;
pub const NUM_DISCHARGE_POLICIES = 4;
pub const PAN_BENT_ARMS_HORZ = 7;
pub const _WIN32_IE_IE80 = 2048;
pub const FS_CHINESESIMP = c_long(262144);
pub const READ_THREAD_PROFILING_FLAG_HARDWARE_COUNTERS = 2;
pub const WS_GROUP = c_long(131072);
pub const IME_SMODE_AUTOMATIC = 4;
pub const CTLCOLOR_EDIT = 1;
pub const ACCESS_ALLOWED_OBJECT_ACE_TYPE = 5;
pub const PAN_SERIF_BONE = 8;
pub const DT_PATH_ELLIPSIS = 16384;
pub const RESOURCETYPE_DISK = 1;
pub const EM_SETWORDBREAKPROC = 208;
pub const ERROR_IOPL_NOT_ENABLED = c_long(197);
pub const SUBLANG_CHINESE_SIMPLIFIED = 2;
pub const ERROR_IPSEC_KEY_MODULE_IMPERSONATION_NEGOTIATION_PENDING = c_long(13901);
pub const COMPLEXREGION = 3;
pub const NULL_BRUSH = 5;
pub const MB_USERICON = c_long(128);
pub const WH_CBT = 5;
pub const ERROR_SRC_SRV_DLL_LOAD_FAILED = c_long(428);
pub const __INT8_MAX__ = 127;
pub const ERROR_DS_DRA_OUT_SCHEDULE_WINDOW = c_long(8617);
pub const SETLINEJOIN = 22;
pub const WNNC_NET_LANMAN = WNNC_NET_SMB;
pub const ERROR_SYNCHRONIZATION_REQUIRED = c_long(569);
pub const IMAGE_DLLCHARACTERISTICS_GUARD_CF = 16384;
pub const DIAGNOSTIC_REASON_NOT_SPECIFIED = 2147483648;
pub const DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET = c_long(9115);
pub const LOCALE_SISO3166CTRYNAME = 90;
pub const FALSE = 0;
pub const DMPAPER_ENV_B6 = 35;
pub const TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX = 0.999000;
pub const EVENT_SYSTEM_MENUPOPUPEND = 7;
pub const ERROR_INVALID_TIME = c_long(1901);
pub const ERROR_PROCESS_IN_JOB = c_long(760);
pub const ERROR_SERVICE_DOES_NOT_EXIST = c_long(1060);
pub const ERROR_INTERNAL_DB_CORRUPTION = c_long(1358);
pub const PAN_STROKE_RAPID_HORZ = 7;
pub const DLGWINDOWEXTRA = 30;
pub const ERROR_HOST_DOWN = c_long(1256);
pub const CONNECT_DEFERRED = 1024;
pub const WT_EXECUTEINTIMERTHREAD = 32;
pub const IMAGE_REL_SHM_PCRELPT = 19;
pub const DOWNLOADHEADER = 4111;
pub const TAPE_SPACE_SEQUENTIAL_SMKS = c_long(9);
pub const __pic__ = 2;
pub const APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;
pub const __LDBL_DENORM_MIN__ = 0.000000;
pub const IMAGE_REL_PPC_SECRELHI = 20;
pub const IMAGE_REL_AMD64_SSPAN32 = 16;
pub const ERROR_PNP_INVALID_ID = c_long(674);
pub const ERROR_QUORUM_DISK_NOT_FOUND = c_long(5086);
pub const lstrcmpi = lstrcmpiA;
pub const HELP_INDEX = c_long(3);
pub const ERROR_STORAGE_RESERVE_NOT_EMPTY = c_long(419);
pub const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 32768;
pub const ERROR_EVT_MESSAGE_LOCALE_NOT_FOUND = c_long(15033);
pub const DMPAPER_PENV_6 = 101;
pub const TC_IA_ABLE = 1024;
pub const CP_REGION = 2;
pub const NTDDI_VISTASP4 = NTDDI_WIN6SP4;
pub const SYSTEM_MANDATORY_LABEL_NO_EXECUTE_UP = 4;
pub const ERROR_CTX_WINSTATIONS_DISABLED = c_long(7060);
pub const KF_ALTDOWN = 8192;
pub const ERROR_DS_DRA_SCHEMA_INFO_SHIP = c_long(8542);
pub const LOCALE_IDEFAULTMACCODEPAGE = 4113;
pub const SUBLANG_CROATIAN_BOSNIA_HERZEGOVINA_LATIN = 4;
pub const GETSCALINGFACTOR = 14;
pub const EXCEPTION_PRIV_INSTRUCTION = STATUS_PRIVILEGED_INSTRUCTION;
pub const TAPE_ERASE_LONG = c_long(1);
pub const IMEVER_0400 = 262144;
pub const WM_SETFONT = 48;
pub const WN_BAD_LEVEL = ERROR_INVALID_LEVEL;
pub const IMAGE_SYM_TYPE_VOID = 1;
pub const SUBLANG_ENGLISH_CAN = 4;
pub const BN_UNPUSHED = BN_UNHILITE;
pub const PRODUCT_SERVER_FOR_SMALLBUSINESS_V = 35;
pub const FILE_MAP_EXECUTE = SECTION_MAP_EXECUTE_EXPLICIT;
pub const __ATOMIC_ACQUIRE = 2;
pub const ERROR_SHARING_PAUSED = c_long(70);
pub const ATF_ONOFFFEEDBACK = 2;
pub const ERROR_COMPRESSION_DISABLED = c_long(769);
pub const MDM_V110_SPEED_2DOT4K = 2;
pub const PERFSTATE_POLICY_CHANGE_DECREASE_MAX = PERFSTATE_POLICY_CHANGE_ROCKET;
pub const MDM_V110_SPEED_19DOT2K = 7;
pub const WM_DPICHANGED_BEFOREPARENT = 738;
pub const WM_SETCURSOR = 32;
pub const IME_PROP_UNICODE = 524288;
pub const LoadMenuIndirect = LoadMenuIndirectA;
pub const SOUND_SYSTEM_SHUTDOWN = 2;
pub const HTOBJECT = 19;
pub const SPI_GETMOUSESONAR = 4124;
pub const TOKEN_MANDATORY_POLICY_NEW_PROCESS_MIN = 2;
pub const RIM_INPUT = 0;
pub const ICM_SETDEFAULTPROFILE = 4;
pub const MIM_BACKGROUND = 2;
pub const ERROR_DRIVER_DATABASE_ERROR = c_long(652);
pub const WM_HSCROLLCLIPBOARD = 782;
pub const HS_FDIAGONAL = 2;
pub const WS_EX_COMPOSITED = c_long(33554432);
pub const ERROR_INSUFFICIENT_RESOURCE_FOR_SPECIFIED_SHARED_SECTION_SIZE = c_long(781);
pub const __x86_64 = 1;
pub const SS_ELLIPSISMASK = c_long(49152);
pub const R2_MASKPENNOT = 5;
pub const REG_PROCESS_PRIVATE = c_long(32);
pub const ERROR_CLUSCFG_ALREADY_COMMITTED = c_long(5901);
pub const ACCESS_FILTER_SECURITY_INFORMATION = c_long(256);
pub const VK_BROWSER_BACK = 166;
pub const ERROR_QUOTA_LIST_INCONSISTENT = c_long(621);
pub const CALINFO_ENUMPROC = CALINFO_ENUMPROCA;
pub const KEY_WOW64_RES = 768;
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_SERVER = 289;
pub const SERVICE_CONTROL_NETBINDREMOVE = 8;
pub const ERROR_APPEXEC_INVALID_HOST_GENERATION = c_long(3062);
pub const ERROR_PACKAGE_MOVE_BLOCKED_BY_STREAMING = c_long(15636);
pub const C2_RIGHTTOLEFT = 2;
pub const IME_KHOTKEY_HANJACONVERT = 81;
pub const IMAGE_REL_AM_TOKEN = 9;
pub const CPS_CONVERT = 2;
pub const DNS_ERROR_RCODE_NXRRSET = c_long(9008);
pub const _MM_HINT_NTA = 0;
pub const SECURITY_PRINCIPAL_SELF_RID = c_long(10);
pub const RPC_X_BAD_STUB_DATA = c_long(1783);
pub const SE_SIGNING_LEVEL_STORE = 6;
pub const ERROR_DS_UNKNOWN_ERROR = c_long(8431);
pub const META_BITBLT = 2338;
pub const SPI_SETKEYBOARDDELAY = 23;
pub const PEN_FLAG_ERASER = 4;
pub const BF_BOTTOM = 8;
pub const SHTDN_REASON_FLAG_PLANNED = 2147483648;
pub const C2_COMMONSEPARATOR = 7;
pub const CAL_GREGORIAN_XLIT_ENGLISH = 11;
pub const ERROR_SIGNAL_REFUSED = c_long(156);
pub const ERROR_IPSEC_IKE_INVALID_HEADER = c_long(13824);
pub const ERROR_IPSEC_IKE_POLICY_MATCH = c_long(13868);
pub const CB_SETITEMHEIGHT = 339;
pub const IDLE_PRIORITY_CLASS = 64;
pub const POWER_CONNECTIVITY_IN_STANDBY_SYSTEM_MANAGED = 2;
pub const ERROR_INVALID_IMPORT_OF_NON_DLL = c_long(1276);
pub const IMAGE_GUARD_CF_FUNCTION_TABLE_SIZE_MASK = 4026531840;
pub const ILLUMINANT_C = 3;
pub const VK_LEFT = 37;
pub const __SGX__ = 1;
pub const PST_PARALLELPORT = if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 2) else if (@typeInfo(@TypeOf(2)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 2) else @as(DWORD, 2);
pub const C3_LEXICAL = 1024;
pub const HANGUL_CHARSET = 129;
pub const ERROR_RESOURCE_NAME_NOT_FOUND = c_long(1814);
pub const SetClassLongPtr = SetClassLongPtrA;
pub const FAST_FAIL_GS_COOKIE_INIT = 6;
pub const METAFILE_DRIVER = 2049;
pub const ERROR_STATE_SETTING_VALUE_SIZE_LIMIT_EXCEEDED = c_long(15816);
pub const STATE_SYSTEM_SELECTABLE = 2097152;
pub const ERROR_SXS_XML_E_MULTIPLEROOTS = c_long(14054);
pub const ERROR_OBJECT_IN_LIST = c_long(5011);
pub const DT_CHARSTREAM = 4;
pub const DNS_ERROR_SOA_DELETE_INVALID = c_long(9618);
pub const SPI_GETMOUSESIDEMOVETHRESHOLD = 136;
pub const POWER_PLATFORM_ROLE_V1 = 1;
pub const CF_DIF = 5;
pub const ERROR_INSTALL_PACKAGE_NOT_FOUND = c_long(15601);
pub const ERROR_FILE_SYSTEM_VIRTUALIZATION_PROVIDER_UNKNOWN = c_long(372);
pub const SetWindowLongPtr = SetWindowLongPtrA;
pub const BACKUP_REPARSE_DATA = 8;
pub const ERROR_IS_JOIN_TARGET = c_long(133);
pub const GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = 2;
pub const ERROR_COMPRESSION_NOT_ALLOWED_IN_TRANSACTION = c_long(6850);
pub const ERROR_BAD_VALIDATION_CLASS = c_long(1348);
pub const EVENT_SYSTEM_SWITCHEND = 21;
pub const SPI_GETMOUSEKEYS = 54;
pub const DISPLAY_DEVICE_DISCONNECT = 33554432;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const SERVICE_QUERY_STATUS = 4;
pub const PEERDIST_ERROR_NOT_LICENSED = c_long(4064);
pub const WinHelp = WinHelpA;
pub const FACILITY_SHELL = 39;
pub const ERROR_WRONG_TARGET_NAME = c_long(1396);
pub const DMBIN_LARGECAPACITY = 11;
pub const LoadString = LoadStringA;
pub const SHTDN_REASON_MINOR_INSTALLATION = 2;
pub const __clang_minor__ = 0;
pub const ERROR_INVALID_CLEANER = c_long(4310);
pub const CreateEnhMetaFile = CreateEnhMetaFileA;
pub const LBS_MULTICOLUMN = c_long(512);
pub const CONSOLE_REAL_OUTPUT_HANDLE = if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Pointer) @ptrCast(LongToHandle, -2) else if (@typeInfo(@TypeOf(-2)) == @import("builtin").TypeId.Int) @intToPtr(LongToHandle, -2) else LongToHandle(-2);
pub const ERROR_CAPAUTHZ_NOT_PROVISIONED = c_long(452);
pub const QUOTA_LIMITS_HARDWS_MIN_ENABLE = 1;
pub const DMMEDIA_TRANSPARENCY = 2;
pub const RESOURCEMANAGER_ENLIST = 8;
pub const PRODUCT_EMBEDDED_EVAL = 107;
pub const ERROR_DS_CANT_MOVE_APP_BASIC_GROUP = c_long(8608);
pub const SSWF_WINDOW = 2;
pub const COLOR_CAPTIONTEXT = 9;
pub const EXCEPTION_FLT_UNDERFLOW = STATUS_FLOAT_UNDERFLOW;
pub const LANG_CROATIAN = 26;
pub const RegRestoreKey = RegRestoreKeyA;
pub const WS_MINIMIZEBOX = c_long(131072);
pub const OLE_E_FIRST = if (@typeInfo(@TypeOf(c_long(2147745792))) == @import("builtin").TypeId.Pointer) @ptrCast(HRESULT, c_long(2147745792)) else if (@typeInfo(@TypeOf(c_long(2147745792))) == @import("builtin").TypeId.Int) @intToPtr(HRESULT, c_long(2147745792)) else @as(HRESULT, c_long(2147745792));
pub const DISPLAY_DEVICE_ATTACHED = 2;
pub const SUBLANG_QUECHUA_ECUADOR = 2;
pub const DISABLE_MAX_PRIVILEGE = 1;
pub const CTRY_UAE = 971;
pub const GUI_INMOVESIZE = 2;
pub const IME_CAND_UNKNOWN = 0;
pub const ERROR_EVALUATION_EXPIRATION = c_long(622);
pub const IME_SMODE_NONE = 0;
pub const PPM_FIRMWARE_PCCP = 32768;
pub const DM_COLLATE = c_long(32768);
pub const REG_DWORD_LITTLE_ENDIAN = c_ulong(4);
pub const WNetGetUniversalName = WNetGetUniversalNameA;
pub const ERROR_WAS_UNLOCKED = c_long(715);
pub const ERROR_DS_SUBREF_MUST_HAVE_PARENT = c_long(8356);
pub const CTRY_DEFAULT = 0;
pub const ERROR_PACKAGE_ALREADY_EXISTS = c_long(15611);
pub const IS_TEXT_UNICODE_ASCII16 = 1;
pub const __deref_opt_out_bcount_nz_opt = size;
pub const SUBLANG_FRENCH_BELGIAN = 2;
pub const VP_TV_STANDARD_PAL_D = 8;
pub const VER_SUITE_SECURITY_APPLIANCE = 4096;
pub const EM_SETRECTNP = 180;
pub const ERROR_COMMITMENT_MINIMUM = c_long(635);
pub const POWERBUTTON_ACTION_INDEX_HIBERNATE = 2;
pub const ERROR_INVALID_VERIFY_SWITCH = c_long(118);
pub const SYSTEM_AUDIT_OBJECT_ACE_TYPE = 7;
pub const PROCESS_CREATION_MITIGATION_POLICY_FONT_DISABLE_MASK = if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(3), i64 << 48) else if (@typeInfo(@TypeOf(i64 << 48)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(3), i64 << 48) else c_uint(3)(i64 << 48);
pub const MA_NOACTIVATE = 3;
pub const SB_THUMBPOSITION = 4;
pub const ERROR_TRANSACTION_FREEZE_IN_PROGRESS = c_long(6840);
pub const BS_HATCHED = 2;
pub const IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
pub const __UINT8_FMTx__ = "hhx";
pub const ERROR_RPL_NOT_ALLOWED = c_long(4006);
pub const IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;
pub const MAXIMUM_PROC_PER_GROUP = 64;
pub const InterlockedXor64Release = _InterlockedXor64;
pub const MEM_RESET = 524288;
pub const WNNC_NET_PATHWORKS = 851968;
pub const S_SERDLN = -6;
pub const FS_CASE_IS_PRESERVED = FILE_CASE_PRESERVED_NAMES;
pub const WM_GETMINMAXINFO = 36;
pub const SORT_CHINESE_PRC = 2;
pub const EnumFonts = EnumFontsA;
pub const ERROR_DS_AG_CANT_HAVE_UNIVERSAL_MEMBER = c_long(8578);
pub const WM_CAPTURECHANGED = 533;
pub const FILE_RETURNS_CLEANUP_RESULT_INFO = 512;
pub const DMPAPER_PENV_5 = 100;
pub const NTDDI_WS08 = NTDDI_WIN6SP1;
pub const FLS_OUT_OF_INDEXES = if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4294967295) else if (@typeInfo(@TypeOf(4294967295)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4294967295) else @as(DWORD, 4294967295);
pub const __RETURN_POLICY_VOID = _FunctionCall;
pub const RegisterClipboardFormat = RegisterClipboardFormatA;
pub const DOMAIN_ALIAS_RID_IUSERS = c_long(568);
pub const DNS_ERROR_ZONE_DOES_NOT_EXIST = c_long(9601);
pub const MF_POPUP = c_long(16);
pub const SB_PREMULT_ALPHA = 4;
pub const MF_SEPARATOR = c_long(2048);
pub const SPI_SETPENARBITRATIONTYPE = 8225;
pub const VER_GREATER_EQUAL = 3;
pub const CREATE_ALWAYS = 2;
pub const __acquires_shared_lock = lock;
pub const MB_ICONERROR = MB_ICONHAND;
pub const IMAGE_REL_PPC_IFGLUE = 13;
pub const WINSPOOLAPI = DECLSPEC_IMPORT;
pub const ERROR_MEDIA_CHANGED = c_long(1110);
pub const ERROR_SXS_PROTECTION_PUBLIC_KEY_TOO_SHORT = c_long(14075);
pub const ERROR_NOT_REGISTRY_FILE = c_long(1017);
pub const ERROR_MRM_MISSING_DEFAULT_LANGUAGE = c_long(15160);
pub const EM_LIMITTEXT = 197;
pub const WSAEINVAL = c_long(10022);
pub const EVENT_OBJECT_DEFACTIONCHANGE = 32785;
pub const CONNECT_PROMPT = 16;
pub const ERROR_ACCESS_DISABLED_BY_POLICY = c_long(1260);
pub const __INT_LEAST64_FMTi__ = "lli";
pub const SPI_GETSTICKYKEYS = 58;
pub const ERROR_TM_VOLATILE = c_long(6828);
pub const ERROR_DS_REFERRAL_LIMIT_EXCEEDED = c_long(8260);
pub const FACILITY_WINML = 2192;
pub const FIXED_PITCH = 1;
pub const WNNC_NET_NDFS = 4456448;
pub const ERROR_DS_NCNAME_MUST_BE_NC = c_long(8357);
pub const RegCreateKeyTransacted = RegCreateKeyTransactedA;
pub const __FLT16_MANT_DIG__ = 11;
pub const OBJ_PEN = 1;
pub const ERROR_SYSTEM_TRACE = c_long(150);
pub const LANG_AZERBAIJANI = 44;
pub const LOCALE_ICENTURY = 36;
pub const FAST_FAIL_CRYPTO_LIBRARY = 22;
pub const CREATE_EVENT_MANUAL_RESET = 1;
pub const GL_ID_PRIVATE_FIRST = 32768;
pub const TRANSACTIONMANAGER_QUERY_INFORMATION = 1;
pub const PAN_PROP_OLD_STYLE = 2;
pub const SPI_SETDEFAULTINPUTLANG = 90;
pub const ODA_FOCUS = 4;
pub const META_SELECTCLIPREGION = 300;
pub const PC_INTERIORS = 128;
pub const WVR_ALIGNRIGHT = 128;
pub const VOLUME_NAME_NONE = 4;
pub const VP_MODE_TV_PLAYBACK = 2;
pub const IGIMII_SMODE = 2;
pub const PROTECTION_LEVEL_SAME = 4294967295;
pub const ERROR_MRM_FILEPATH_TOO_LONG = c_long(15121);
pub const IMAGE_SYM_TYPE_INT = 4;
pub const IMAGE_REL_CEE_SECREL = 5;
pub const IMM_ERROR_NODATA = -1;
pub const EVENT_CONSOLE_UPDATE_REGION = 16386;
pub const WSAEACCES = c_long(10013);
pub const PPM_FIRMWARE_TSS = 2048;
pub const ERROR_DOMAIN_CONTROLLER_NOT_FOUND = c_long(1908);
pub const ERROR_INVALID_MONITOR_HANDLE = c_long(1461);
pub const ERROR_CLUSTER_CSV_SUPPORTED_ONLY_ON_COORDINATOR = c_long(5990);
pub const DISABLE_NEWLINE_AUTO_RETURN = 8;
pub const PROCESS_CREATION_MITIGATION_POLICY2_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY_ALWAYS_ON = if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Pointer) @ptrCast(c_uint(1), i64 << 20) else if (@typeInfo(@TypeOf(i64 << 20)) == @import("builtin").TypeId.Int) @intToPtr(c_uint(1), i64 << 20) else c_uint(1)(i64 << 20);
pub const IGP_CONVERSION = 8;
pub const __FXSR__ = 1;
pub const DC_MANUFACTURER = 23;
pub const LB_GETITEMHEIGHT = 417;
pub const PME_FAILFAST_ON_COMMIT_FAIL_DISABLE = 0;
pub const PAN_STRAIGHT_ARMS_VERT = 4;
pub const __UINT32_FMTx__ = "x";
pub const ILLUMINANT_B = 2;
pub const NI_CLOSECANDIDATE = 17;
pub const PROCESS_CREATION_MITIGATION_POLICY_HEAP_TERMINATE_ALWAYS_ON = 1 << 12;
pub const ERROR_SECUREBOOT_FILE_REPLACED = c_long(4426);
pub const MKF_AVAILABLE = 2;
pub const _WIN32_WINNT_WINTHRESHOLD = 2560;
pub const MIM_APPLYTOSUBMENUS = 2147483648;
pub const SetWindowsHookEx = SetWindowsHookExA;
pub const HCBT_QS = 2;
pub const GMEM_NOTIFY = 16384;
pub const ERROR_NO_MORE_DEVICES = c_long(1248);
pub const LOCALE_SNATIVELANGUAGENAME = 4;
pub const QUOTA_LIMITS_HARDWS_MIN_DISABLE = 2;
pub const POWER_PLATFORM_ROLE_V2 = 2;
pub const DFCS_SCROLLLEFT = 2;
pub const ERROR_FILE_NOT_ENCRYPTED = c_long(6007);
pub const SM_CYDOUBLECLK = 37;
pub const DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 1;
pub const ERROR_PACKAGE_UPDATING = c_long(15616);
pub const UIS_SET = 1;
pub const ERROR_MRM_UNSUPPORTED_FILE_TYPE_FOR_LOAD_UNLOAD_PRI_FILE = c_long(15142);
pub const SECURITY_NFS_ID_BASE_RID = c_long(88);
pub const ENUMPAPERMETRICS = 34;
pub const ERROR_CAPAUTHZ_NOT_AUTHORIZED = c_long(453);
pub const ERROR_FAIL_REBOOT_INITIATED = c_long(3018);
pub const EMR_POLYGON = 3;
pub const CB_SETTOPINDEX = 348;
pub const IME_CHOTKEY_IME_NONIME_TOGGLE = 16;
pub const LANG_SAMI = 59;
pub const DefFrameProc = DefFrameProcA;
pub const LCMAP_SORTKEY = 1024;
pub const InterlockedCompareExchangeNoFence16 = _InterlockedCompareExchange16;
pub const SHUTDOWN_FORCE_SELF = 2;
pub const StartServiceCtrlDispatcher = StartServiceCtrlDispatcherA;
pub const ERROR_OBJECT_ALREADY_EXISTS = c_long(5010);
pub const ERROR_NO_MORE_FILES = c_long(18);
pub const ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = c_long(8533);
pub const CTRY_PHILIPPINES = 63;
pub const VK_BROWSER_REFRESH = 168;
pub const SUBLANG_ARABIC_MOROCCO = 6;
pub const PAN_BENT_ARMS_SINGLE_SERIF = 10;
pub const SPI_SETANIMATION = 73;
pub const SM_CXPADDEDBORDER = 92;
pub const CF_OEMTEXT = 7;
pub const ImmGetCompositionString = ImmGetCompositionStringA;
pub const SUBLANG_ARABIC_EGYPT = 3;
pub const POINTER_MOD_CTRL = 8;
pub const LANG_ASSAMESE = 77;
pub const ERROR_INVALID_FILTER_PROC = c_long(1427);
pub const MB_COMPOSITE = 2;
pub const ERROR_SERVICE_SPECIFIC_ERROR = c_long(1066);
pub const ERROR_CLUSTER_SINGLETON_RESOURCE = c_long(5940);
pub const LANG_LOWER_SORBIAN = 46;
pub const VP_TV_STANDARD_PAL_G = 131072;
pub const IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;
pub const VOS_OS216_PM16 = c_long(131074);
pub const WSAEHOSTUNREACH = c_long(10065);
pub const DEPRECATED = x;
pub const DM_COLOR = c_long(2048);
pub const PROCESS_CREATION_MITIGATION_POLICY_FORCE_RELOCATE_IMAGES_DEFER = 0 << 8;
pub const HGDI_ERROR = if (@typeInfo(@TypeOf(c_long(4294967295))) == @import("builtin").TypeId.Pointer) @ptrCast(LongToHandle, c_long(4294967295)) else if (@typeInfo(@TypeOf(c_long(4294967295))) == @import("builtin").TypeId.Int) @intToPtr(LongToHandle, c_long(4294967295)) else LongToHandle(c_long(4294967295));
pub const ERROR_BOOT_ALREADY_ACCEPTED = c_long(1076);
pub const WMSZ_BOTTOMLEFT = 7;
pub const DEVICEFAMILYDEVICEFORM_LARGESCREEN = 10;
pub const TAPE_INITIATOR_PARTITIONS = c_long(2);
pub const OPEN_ALWAYS = 4;
pub const ERROR_DS_NONEXISTENT_MUST_HAVE = c_long(8388);
pub const LBN_DBLCLK = 2;
pub const ERROR_SXS_XML_E_UNEXPECTED_STANDALONE = c_long(14071);
pub const RPC_X_INVALID_PIPE_OBJECT = c_long(1830);
pub const BACKUP_DATA = 1;
pub const ERROR_EXE_CANNOT_MODIFY_SIGNED_BINARY = c_long(217);
pub const ICM_OFF = 1;
pub const STARTDOC = 10;
pub const PAN_STROKE_INSTANT_VERT = 8;
pub const LOCALE_INEGCURR = 28;
pub const IMAGE_ENCLAVE_POLICY_DEBUGGABLE = 1;
pub const DMPAPER_PENV_4 = 99;
pub const ERROR_TRANSACTIONMANAGER_NOT_ONLINE = c_long(6719);
pub const __in_ecount_nz_opt = size;
pub const GetFileVersionInfoEx = GetFileVersionInfoExA;
pub const RRF_RT_REG_NONE = 1;
pub const ODS_SELECTED = 1;
pub const GW_HWNDLAST = 1;
pub const LOCALE_STIME = 30;
pub const DS_NOIDLEMSG = c_long(256);
pub const WNNC_NET_APPLETALK = 1245184;
pub const SKF_LSHIFTLATCHED = 16777216;
pub const SDC_ALLOW_PATH_ORDER_CHANGES = 8192;
pub const HTVSCROLL = 7;
pub const SM_CMONITORS = 80;
pub const ACCESS_REASON_DATA_MASK = 65535;
pub const SPI_GETDOCKMOVING = 144;
pub const SPI_SETFONTSMOOTHINGTYPE = 8203;
pub const ERROR_LOGON_SESSION_COLLISION = c_long(1366);
pub const IMAGE_REL_AM_FUNCINFO = 4;
pub const SPI_SETMOUSETRAILS = 93;
pub const DlgDirSelectComboBoxEx = DlgDirSelectComboBoxExA;
pub const FS_LATIN2 = c_long(2);
pub const ERROR_ENLISTMENT_NOT_FOUND = c_long(6717);
pub const OBJ_ENHMETAFILE = 13;
pub const DNS_ERROR_ZONESCOPE_ALREADY_EXISTS = c_long(9951);
pub const ERROR_TRANSACTION_PROPAGATION_FAILED = c_long(6711);
pub const __requires_lock_held = lock;
pub const CAL_SSHORTESTDAYNAME4 = 52;
pub const X3_I_INST_WORD_POS_X = 27;
pub const __INT_LEAST32_FMTd__ = "d";
pub const HIGH_SURROGATE_START = 55296;
pub const CREATE_THREAD_DEBUG_EVENT = 2;
pub const __postcond = expr;
pub const HCBT_MINMAX = 1;
pub const EWX_BOOTOPTIONS = 16777216;
pub const SPI_SETFLATMENU = 4131;
pub const CTRY_ICELAND = 354;
pub const SHTDN_REASON_MINOR_WMI = 21;
pub const ERROR_DS_UNKNOWN_OPERATION = c_long(8365);
pub const ERROR_SXS_XML_E_UNCLOSEDCOMMENT = c_long(14063);
pub const WM_NCRBUTTONDOWN = 164;
pub const LB_MSGMAX = 435;
pub const CREATE_MUTEX_INITIAL_OWNER = 1;
pub const ERROR_INVALID_MEMBER = c_long(1388);
pub const ERROR_DS_FOREST_VERSION_TOO_HIGH = c_long(8563);
pub const VERTRES = 10;
pub const WGL_SWAP_MAIN_PLANE = 1;
pub const EMARCH_ENC_I17_IMM9D_SIZE_X = 9;
pub const ERROR_DS_NAME_ERROR_NOT_FOUND = c_long(8470);
pub const PRODUCT_STORAGE_ENTERPRISE_SERVER = 23;
pub const _Requires_lock_held_ = lock;
pub const _CONTROL = 32;
pub const XSTATE_AVX512_ZMM_H = 6;
pub const MF_END = c_long(128);
pub const DT_METAFILE = 5;
pub const SPI_SETPENWINDOWS = 49;
pub const VFT2_UNKNOWN = c_long(0);
pub const ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = c_long(5081);
pub const RESOURCEMANAGER_GET_NOTIFICATION = 16;
pub const LR_COLOR = 2;
pub const GL_ID_CANNOTSAVE = 17;
pub const DOMAIN_GROUP_RID_ENTERPRISE_READONLY_DOMAIN_CONTROLLERS = c_long(498);
pub const DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE = c_long(9917);
pub const THREAD_PRIORITY_NORMAL = 0;
pub const ERROR_RUNLEVEL_SWITCH_IN_PROGRESS = c_long(15404);
pub const BSM_APPLICATIONS = 8;
pub const SECURITY_CCG_ID_BASE_RID = c_long(95);
pub const FILE_ATTRIBUTE_ENCRYPTED = 16384;
pub const ERROR_TRANSACTION_MUST_WRITETHROUGH = c_long(6729);
pub const GetClassLongPtr = GetClassLongPtrA;
pub const CB_SELECTSTRING = 333;
pub const SPI_GETFOREGROUNDLOCKTIMEOUT = 8192;
pub const R2_NOTMERGEPEN = 2;
pub const S_ALLTHRESHOLD = 2;
pub const __FLT16_HAS_QUIET_NAN__ = 1;
pub const SM_CXMINSPACING = 47;
pub const ERROR_CTX_GRAPHICS_INVALID = c_long(7035);
pub const EMR_POLYDRAW16 = 92;
pub const LOCALE_ITIMEMARKPOSN = 4101;
pub const WNNC_NET_PROTSTOR = 2162688;
pub const DNS_ERROR_RECORD_TIMED_OUT = c_long(9705);
pub const MNS_DRAGDROP = 536870912;
pub const ERROR_FAIL_I24 = c_long(83);
pub const ERROR_MRM_INVALID_PRICONFIG = c_long(15111);
pub const FACILITY_RAS = 83;
pub const PROFILE_USER = 268435456;
pub const FAPPCOMMAND_MASK = 61440;
pub const BSF_LUID = 1024;
pub const PRODUCT_STARTER = 11;
pub const ATTR_INPUT_ERROR = 4;
pub const ERROR_CAPAUTHZ_SCCD_NO_CAPABILITY_MATCH = c_long(460);
pub const ERROR_MAPPED_ALIGNMENT = c_long(1132);
pub const ENFILE = 23;
pub const ERROR_TRANSACTION_SUPERIOR_EXISTS = c_long(6709);
pub const ERROR_SERVER_SID_MISMATCH = c_long(628);
pub const VTA_RIGHT = TA_TOP;
pub const FILE_CREATE_PIPE_INSTANCE = 4;
pub const QUOTA_LIMITS_USE_DEFAULT_LIMITS = 16;
pub const FILE_FLAG_WRITE_THROUGH = 2147483648;
pub const IMAGE_SYM_TYPE_LONG = 5;
pub const LANG_OCCITAN = 130;
pub const GR_USEROBJECTS = 1;
pub const ILLUMINANT_A = 1;
pub const FACILITY_SOS = 160;
pub const PROCESS_CREATION_MITIGATION_POLICY_BOTTOM_UP_ASLR_RESERVED = 3 << 16;
pub const WSAEPROTONOSUPPORT = c_long(10043);
pub const HIGH_SURROGATE_END = 56319;
pub const ERROR_NON_MDICHILD_WINDOW = c_long(1445);
pub const ERROR_MRM_TOO_MANY_RESOURCES = c_long(15140);
pub const MDM_V110_SPEED_14DOT4K = 6;
pub const ERROR_RECEIVE_PARTIAL_EXPEDITED = c_long(709);
pub const ERROR_NODE_CANNOT_BE_CLUSTERED = c_long(5898);
pub const WM_KEYUP = 257;
pub const DT_BOTTOM = 8;
pub const ERROR_STATE_READ_COMPOSITE_SETTING_FAILED = c_long(15811);
pub const MEMORY_PRIORITY_NORMAL = 5;
pub const LOW_SURROGATE_START = 56320;
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub const ERROR_IPSEC_DOSP_MAX_ENTRIES = c_long(13929);
pub const MB_TYPEMASK = c_long(15);
pub const EVENT_OBJECT_HELPCHANGE = 32784;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub const SC_MOUSEMENU = 61584;
pub const APPCOMMAND_PRINT = 33;
pub const BN_UNHILITE = 3;
pub const DLGC_BUTTON = 8192;
pub const ERROR_INVALID_PACKAGE_SID_LENGTH = c_long(4253);
pub const PRODUCT_WEB_SERVER = 17;
pub const IMAGE_REL_IA64_SECTION = 11;
pub const X3_P_INST_WORD_POS_X = 0;
pub const SE_SIGNING_LEVEL_WINDOWS_TCB = 14;
pub const EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = 32800;
pub const GetConsoleAliasExes = GetConsoleAliasExesA;
pub const SANDBOX_INERT = 2;
pub const ERROR_DS_DUP_LINK_ID = c_long(8468);
pub const EINTR = 4;
pub const VFT2_FONT_VECTOR = c_long(2);
pub const PFD_DRAW_TO_BITMAP = 8;
pub const PBT_APMPOWERSTATUSCHANGE = 10;
pub const TPM_TOPALIGN = c_long(0);
pub const PeekConsoleInput = PeekConsoleInputA;
pub const SECURITY_LOCAL_SERVICE_RID = c_long(19);
pub const FEATURESETTING_OUTPUT = 1;
pub const PST_RS422 = if (@typeInfo(@TypeOf(3)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 3) else if (@typeInfo(@TypeOf(3)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 3) else @as(DWORD, 3);
pub const ERROR_RESOURCE_NOT_FOUND = c_long(5007);
pub const ERROR_CLUSTER_SHARED_VOLUME_NOT_REDIRECTED = c_long(5967);
pub const WINAPI_FAMILY_GAMES = 6;
pub const POWER_LEVEL_USER_NOTIFY_TEXT = 1;
pub const ERROR_CTX_MODEM_RESPONSE_VOICE = c_long(7016);
pub const JOB_OBJECT_UILIMIT_GLOBALATOMS = 32;
pub const BAUD_600 = if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 32) else if (@typeInfo(@TypeOf(32)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 32) else @as(DWORD, 32);
pub const CTRY_UKRAINE = 380;
pub const ERROR_DS_CANT_DEREF_ALIAS = c_long(8337);
pub const ERROR_DS_CANT_ADD_TO_GC = c_long(8550);
pub const SEF_AVOID_PRIVILEGE_CHECK = 8;
pub const CB_DIR = 325;
pub const WH_MINHOOK = WH_MIN;
pub const PAN_WEIGHT_DEMI = 7;
pub const PAN_WEIGHT_BOLD = 8;
pub const DS_SETFOREGROUND = c_long(512);
pub const CAL_SJAPANESEERAFIRSTYEAR = 61;
pub const CF_HDROP = 15;
pub const _ASSEMBLY_DLL_REDIRECTION_DETAILED_INFORMATION = _ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const CM_NONE = 0;
pub const ERROR_PROMOTION_ACTIVE = c_long(8221);
pub const ERROR_UNABLE_TO_CLEAN = c_long(4311);
pub const PROCESSOR_PERF_MAXIMUM_ACTIVITY_WINDOW = 1270000000;
pub const FAST_FAIL_INVALID_LOCK_STATE = 36;
pub const EVENT_SYSTEM_SWITCHER_CANCELLED = 39;
pub const ERROR_PRODUCT_VERSION = c_long(1638);
pub const GCP_NUMERICSLATIN = c_long(67108864);
pub const WSA_QOS_EPOLICYOBJ = c_long(11025);
pub const ERROR_DS_DRA_CONNECTION_FAILED = c_long(8444);
pub const RRF_RT_REG_SZ = 2;
pub const ERROR_SECUREBOOT_POLICY_UPGRADE_MISMATCH = c_long(4432);
pub const CreateColorSpace = CreateColorSpaceA;
pub const TAPE_DRIVE_ERASE_IMMEDIATE = 128;
pub const ENOTRECOVERABLE = 127;
pub const TAPE_DRIVE_TAPE_CAPACITY = 256;
pub const LOAD_LIBRARY_SEARCH_DLL_LOAD_DIR = 256;
pub const IMAGE_GUARD_RETPOLINE_PRESENT = 1048576;
pub const FS_LATIN1 = c_long(1);
pub const FAST_FAIL_INVALID_EXCEPTION_CHAIN = 21;
pub const DEVICEFAMILYDEVICEFORM_XBOX_ONE_S = 31;
pub const ERROR_LOGON_FAILURE = c_long(1326);
pub const CAL_SSHORTESTDAYNAME5 = 53;
pub const S_SERDVNA = -1;
pub const WNNC_NET_CSC = 2490368;
pub const STN_ENABLE = 2;
pub const IMAGE_ENCLAVE_IMPORT_MATCH_FAMILY_ID = 3;
pub const ERROR_IPSEC_DOSP_STATE_LOOKUP_FAILED = c_long(13928);
pub const DlgDirSelectEx = DlgDirSelectExA;
pub const ERROR_ACTIVE_CONNECTIONS = c_long(2402);
pub const ERROR_DS_DOMAIN_VERSION_TOO_HIGH = c_long(8564);
pub const LABEL_SECURITY_INFORMATION = c_long(16);
pub const DC_ICON = 4;
pub const GetMetaFile = GetMetaFileA;
pub const IMAGE_COMDAT_SELECT_SAME_SIZE = 3;
pub const SS_OWNERDRAW = c_long(13);
pub const CB_GETTOPINDEX = 347;
pub const ERROR_CANT_OPEN_ANONYMOUS = c_long(1347);
pub const REG_SECURE_CONNECTION = 1;
pub const SMTO_ERRORONEXIT = 32;
pub const InterlockedXorRelease = _InterlockedXor;
pub const ENETRESET = 117;
pub const AW_HOR_NEGATIVE = 2;
pub const MDM_BEARERMODE_GSM = 2;
pub const VER_SUITENAME = 64;
pub const SPI_SETMENUSHOWDELAY = 107;
pub const X3_IMM39_1_SIZE_X = 23;
pub const SKF_RSHIFTLATCHED = 33554432;
pub const ERROR_PRINTER_NOT_FOUND = c_long(3012);
pub const DNS_ERROR_INVALID_SCOPE_OPERATION = c_long(9961);
pub const ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE_V2 = c_long(8586);
pub const WS_EX_TOPMOST = c_long(8);
pub const MDM_PROTOCOLID_AUTO = 6;
pub const PM_QS_SENDMESSAGE = QS_SENDMESSAGE << 16;
pub const __callback = __inner_callback;
pub const RESOURCEDISPLAYTYPE_DIRECTORY = 9;
pub const MKF_RIGHTBUTTONSEL = 536870912;
pub const EMR_SETARCDIRECTION = 57;
pub const GetClassInfo = GetClassInfoA;
pub const FIND_RESOURCE_DIRECTORY_LANGUAGES = 1024;
pub const DLGC_RADIOBUTTON = 64;
pub const LANG_ITALIAN = 16;
pub const FS_JISJAPAN = c_long(131072);
pub const SM_SYSTEMDOCKED = 8196;
pub const TAPE_DRIVE_REPORT_SMKS = 524288;
pub const ERROR_RESILIENCY_FILE_CORRUPT = c_long(15625);
pub const EVENT_OBJECT_SELECTIONREMOVE = 32776;
pub const ERROR_SERVICE_NOT_IN_EXE = c_long(1083);
pub const IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;
pub const RTL_RUN_ONCE_CTX_RESERVED_BITS = 2;
pub const CTRY_CROATIA = 385;
pub const CTRY_MONGOLIA = 976;
pub const GDIPLUS_TS_QUERYVER = 4122;
pub const PEERDIST_ERROR_INVALID_CONFIGURATION = c_long(4063);
pub const ERROR_PROCESS_ABORTED = c_long(1067);
pub const PHYSICALOFFSETY = 113;
pub const SUBLANG_UKRAINIAN_UKRAINE = 1;
pub const SUBLANG_ENGLISH_SOUTH_AFRICA = 7;
pub const ERROR_DS_EXISTS_IN_AUX_CLS = c_long(8393);
pub const CW_USEDEFAULT = 0x80000000;
pub const BANDINFO = 24;
pub const DISPLAY_DEVICE_MIRRORING_DRIVER = 8;
pub const IME_CMODE_HANGUL = IME_CMODE_NATIVE;
pub const WM_WININICHANGE = 26;
pub const FILE_SYSTEM_NOT_SUPPORT = 6;
pub const CE_OOP = 4096;
pub const MSGF_MAX = 8;
pub const SUBLANG_INUKTITUT_CANADA_LATIN = 2;
pub const IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;
pub const GetDllDirectory = GetDllDirectoryA;
pub const DefDlgProc = DefDlgProcA;
pub const FACILITY_DEPLOYMENT_SERVICES_DRIVER_PROVISIONING = 278;
pub const VER_SUITE_SINGLEUSERTS = 256;
pub const IMAGE_REL_ARM_ADDR32NB = 2;
pub const ERROR_LOST_MODE_LOGON_RESTRICTION = c_long(1939);
pub const JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32;
pub const WM_SPOOLERSTATUS = 42;
pub const ERROR_INVALID_LDT_SIZE = c_long(561);
pub const ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = c_long(8346);
pub const ERROR_CANTSCROLLBACKWARDS = c_long(771);
pub const TKF_TOGGLEKEYSON = 1;
pub const VK_OEM_CLEAR = 254;
pub const WM_DWMSENDICONICLIVEPREVIEWBITMAP = 806;
pub const IMAGE_REL_ARM_BLX11 = 9;
pub const WSAEPROTOTYPE = c_long(10041);
pub const SB_CTL = 2;
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const ERROR_NO_TOKEN = c_long(1008);
pub const OBJID_TITLEBAR = if (@typeInfo(@TypeOf(4294967294)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG, 4294967294) else if (@typeInfo(@TypeOf(4294967294)) == @import("builtin").TypeId.Int) @intToPtr(LONG, 4294967294) else @as(LONG, 4294967294);
pub const VK_MBUTTON = 4;
pub const EN_CHANGE = 768;
pub const LANG_PULAR = 103;
pub const SS_TYPEMASK = c_long(31);
pub const SPI_SETCARETBROWSING = 4173;
pub const CONSOLE_CARET_SELECTION = 1;
pub const __INT16_TYPE__ = short;
pub const TAPE_DRIVE_SEQUENTIAL_SMKS = 2149580800;
pub const POLYFILL_LAST = 2;
pub const DM_PANNINGHEIGHT = c_long(268435456);
pub const ERROR_DS_DRA_BAD_NC = c_long(8440);
pub const FACILITY_DEPLOYMENT_SERVICES_MULTICAST_CLIENT = 290;
pub const ERROR_GROUP_NOT_AVAILABLE = c_long(5012);
pub const SB_BOTH = 3;
pub const MDM_PROTOCOLID_PIAFS = 9;
pub const IMAGE_REL_IA64_GPREL32 = 28;
pub const GCPCLASS_PREBOUNDRTL = 64;
pub const SLE_ERROR = 1;
pub const FIND_ENDSWITH = 2097152;
pub const _Pre1_impl_ = p1;
pub const VK_RBUTTON = 2;
pub const STATUS_LONGJUMP = if (@typeInfo(@TypeOf(c_long(2147483686))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(2147483686)) else if (@typeInfo(@TypeOf(c_long(2147483686))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(2147483686)) else @as(DWORD, c_long(2147483686));
pub const DCBA_FACEUPCENTER = 1;
pub const RI_MOUSE_MIDDLE_BUTTON_UP = 32;
pub const LCMAP_TRADITIONAL_CHINESE = 67108864;
pub const ERROR_EVT_UNRESOLVED_VALUE_INSERT = c_long(15029);
pub const ERROR_PAGEFILE_QUOTA = c_long(1454);
pub const VP_TV_STANDARD_SECAM_K = 4096;
pub const ERROR_NO_SUPPORTING_DRIVES = c_long(4339);
pub const STATUS_FLOAT_INEXACT_RESULT = if (@typeInfo(@TypeOf(c_long(3221225615))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221225615)) else if (@typeInfo(@TypeOf(c_long(3221225615))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221225615)) else @as(DWORD, c_long(3221225615));
pub const ERROR_SYMLINK_NOT_SUPPORTED = c_long(1464);
pub const MINLONG64 = if (@typeInfo(@TypeOf(~MAXLONG64)) == @import("builtin").TypeId.Pointer) @ptrCast(LONG64, ~MAXLONG64) else if (@typeInfo(@TypeOf(~MAXLONG64)) == @import("builtin").TypeId.Int) @intToPtr(LONG64, ~MAXLONG64) else LONG64(~MAXLONG64);
pub const SHTDN_REASON_FLAG_CLEAN_UI = 67108864;
pub const WM_QUERYOPEN = 19;
pub const IMAGE_FILE_MACHINE_SH5 = 424;
pub const IMAGE_DYNAMIC_RELOCATION_GUARD_RF_EPILOGUE = 2;
pub const ERROR_SYSTEM_INTEGRITY_POLICY_VIOLATION = c_long(4551);
pub const VK_ICO_CLEAR = 230;
pub const COMPRESSION_ENGINE_STANDARD = 0;
pub const XSTATE_COMPACTION_ENABLE = 63;
pub const EMR_CREATEPEN = 38;
pub const IME_HOTKEY_DSWITCH_FIRST = 256;
pub const MOUSEEVENTF_LEFTDOWN = 2;
pub const ERROR_POLICY_OBJECT_NOT_FOUND = c_long(8219);
pub const ICM_QUERYMATCH = 7;
pub const PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;
pub const PRIVATE_NAMESPACE_FLAG_DESTROY = 1;
pub const GetKeyNameText = GetKeyNameTextA;
pub const VK_SPACE = 32;
pub const MAXLOGICALLOGNAMESIZE = 256;
pub const InterlockedDecrementRelease16 = _InterlockedDecrement16;
pub const AC_SRC_OVER = 0;
pub const LOCALE_SMONTHNAME2 = 57;
pub const PST_RS423 = if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 4) else if (@typeInfo(@TypeOf(4)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 4) else @as(DWORD, 4);
pub const IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;
pub const IMAGE_DEBUG_TYPE_MPX = 15;
pub const WM_POINTERROUTEDAWAY = 594;
pub const OF_PROMPT = 8192;
pub const WM_POINTERROUTEDTO = 593;
pub const ERROR_SXS_SYSTEM_DEFAULT_ACTIVATION_CONTEXT_EMPTY = c_long(14089);
pub const IME_CMODE_NATIVESYMBOL = 128;
pub const OpenBackupEventLog = OpenBackupEventLogA;
pub const CLRDTR = 6;
pub const PSINJECT_DLFONT = 3722304989;
pub const EVENT_SYSTEM_FOREGROUND = 3;
pub const EPT_S_CANT_PERFORM_OP = c_long(1752);
pub const ERROR_LOG_BLOCK_INCOMPLETE = c_long(6603);
pub const HELP_COMMAND = c_long(258);
pub const ERROR_DS_NO_MORE_RIDS = c_long(8209);
pub const ERROR_EVT_MESSAGE_NOT_FOUND = c_long(15027);
pub const ERROR_SXS_XML_E_UNCLOSEDSTRING = c_long(14062);
pub const FILE_VER_GET_NEUTRAL = 2;
pub const WTS_SESSION_LOGON = 5;
pub const BACKUP_ALTERNATE_DATA = 4;
pub const SERVICE_CHANGE_CONFIG = 2;
pub const EM_CANUNDO = 198;
pub const ERROR_IPSEC_IKE_DECRYPT = c_long(13867);
pub const BST_CHECKED = 1;
pub const InterlockedBitTestAndSet = _interlockedbittestandset;
pub const ERROR_IPSEC_IKE_PROCESS_ERR_NATOA = c_long(13893);
pub const PAN_LETT_NORMAL_WEIGHTED = 3;
pub const FACILITY_DIRECTMUSIC = 2168;
pub const SM_SHOWSOUNDS = 70;
pub const DATA_E_LAST = c_long(2147746111);
pub const ERROR_NO_TASK_QUEUE = c_long(427);
pub const LookupAccountSidLocal = LookupAccountSidLocalA;
pub const ENDDOC = 11;
pub const EM_GETSEL = 176;
pub const GetModuleHandleEx = GetModuleHandleExA;
pub const InterlockedOr64Release = _InterlockedOr64;
pub const PROCESS_TERMINATE = 1;
pub const GMEM_NOCOMPACT = 16;
pub const RPC_S_UUID_NO_ADDRESS = c_long(1739);
pub const FRS_ERR_INTERNAL_API = c_long(8004);
pub const ERROR_STATE_CONTAINER_NAME_SIZE_LIMIT_EXCEEDED = c_long(15818);
pub const DNS_ERROR_RCODE_YXDOMAIN = c_long(9006);
pub const FAST_FAIL_MRDATA_MODIFIED = 19;
pub const ERROR_LOGIN_TIME_RESTRICTION = c_long(1239);
pub const TAPE_DRIVE_VARIABLE_BLOCK = 2048;
pub const GA_ROOTOWNER = 3;
pub const ERROR_INVALID_DRIVE_OBJECT = c_long(4321);
pub const PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
pub const ERROR_NOT_SUPPORTED_WITH_BTT = c_long(429);
pub const CB_SETLOCALE = 345;
pub const ERANGE = 34;
pub const CreateSemaphore = CreateSemaphoreA;
pub const STATUS_REG_NAT_CONSUMPTION = if (@typeInfo(@TypeOf(c_long(3221226185))) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, c_long(3221226185)) else if (@typeInfo(@TypeOf(c_long(3221226185))) == @import("builtin").TypeId.Int) @intToPtr(DWORD, c_long(3221226185)) else @as(DWORD, c_long(3221226185));
pub const CAL_SSHORTESTDAYNAME6 = 54;
pub const ERROR_IMAGE_AT_DIFFERENT_BASE = c_long(807);
pub const RESOURCE_GLOBALNET = 2;
pub const POINTER_MESSAGE_FLAG_THIRDBUTTON = 64;
pub const ERROR_SEM_OWNER_DIED = c_long(105);
pub const __LDBL_HAS_INFINITY__ = 1;
pub const EVENT_SYSTEM_CONTEXTHELPSTART = 12;
pub const ERROR_EVT_INVALID_CHANNEL_PATH = c_long(15000);
pub const MFCOMMENT = 15;
pub const ERROR_STORAGE_TOPOLOGY_ID_MISMATCH = c_long(345);
pub const ERROR_DS_DRA_RPC_CANCELLED = c_long(8455);
pub const __UINTPTR_FMTo__ = "llo";
pub const LOCALE_SENGLISHCOUNTRYNAME = 4098;
pub const WritePrivateProfileString = WritePrivateProfileStringA;
pub const IMAGE_REL_MIPS_LITERAL = 7;
pub const ERROR_NOT_A_DAX_VOLUME = c_long(420);
pub const DI_NOMIRROR = 16;
pub const IME_THOTKEY_SHAPE_TOGGLE = 113;
pub const ERROR_DAX_MAPPING_EXISTS = c_long(361);
pub const WM_LBUTTONDOWN = 513;
pub const LANG_TAMIL = 73;
pub const SUBLANG_DANISH_DENMARK = 1;
pub const GETEXTENDEDTEXTMETRICS = 256;
pub const ACTIVATION_CONTEXT_SECTION_COMPATIBILITY_INFO = 11;
pub const SKF_INDICATOR = 32;
pub const SECURITY_CAPABILITY_MUSIC_LIBRARY = c_long(6);
pub const SECURITY_DESCRIPTOR_REVISION1 = 1;
pub const WN_CONNECTED_OTHER_PASSWORD = ERROR_CONNECTED_OTHER_PASSWORD;
pub const TRANSACTION_NOTIFY_COMMIT_REQUEST = 67108864;
pub const ERROR_UNDEFINED_CHARACTER = c_long(583);
pub const GL_ID_UNKNOWN = 0;
pub const VS_VERSION_INFO = 1;
pub const SUBLANG_HAWAIIAN_US = 1;
pub const ERROR_DS_DRA_NAME_COLLISION = c_long(8458);
pub const DNS_ERROR_DATAFILE_BASE = 9650;
pub const MAX_RESOURCEMANAGER_DESCRIPTION_LENGTH = 64;
pub const ERROR_FILENAME_EXCED_RANGE = c_long(206);
pub const DRIVERVERSION = 0;
pub const FACILITY_COMPLUS = 17;
pub const WT_EXECUTEDELETEWAIT = 8;
pub const ILLUMINANT_NTSC = ILLUMINANT_C;
pub const SERVICE_SID_TYPE_UNRESTRICTED = 1;
pub const ERROR_INVALID_WINDOW_STYLE = c_long(2002);
pub const TRANSACTIONMANAGER_RENAME = 8;
pub const VER_AND = 6;
pub const PRODUCT_STORAGE_EXPRESS_SERVER_CORE = 43;
pub const ERROR_SXS_DUPLICATE_DLL_NAME = c_long(14021);
pub const ERROR_DS_NAME_VALUE_TOO_LONG = c_long(8349);
pub const EFAULT = 14;
pub const DEVICEFAMILYDEVICEFORM_THIN_CLIENT = 26;
pub const CM_GAMMA_RAMP = 2;
pub const PWR_OK = 1;
pub const WSAEPFNOSUPPORT = c_long(10046);
pub const SECURITY_NT_NON_UNIQUE_SUB_AUTH_COUNT = c_long(3);
pub const ERROR_POTENTIAL_FILE_FOUND = c_long(1180);
pub const ERROR_TRANSLATION_COMPLETE = c_long(757);
pub const PA_NOACTIVATE = MA_NOACTIVATE;
pub const MKF_LEFTBUTTONDOWN = 16777216;
pub const ERROR_DS_INSUFFICIENT_ATTR_TO_CREATE_OBJECT = c_long(8606);
pub const SERVICE_STOP_REASON_FLAG_MAX = 2147483648;
pub const FILE_FLAG_SEQUENTIAL_SCAN = 134217728;
pub const TAPE_LONG_FILEMARKS = c_long(3);
pub const ERROR_TOKEN_ALREADY_IN_USE = c_long(1375);
pub const DNS_ERROR_MASK = 9000;
pub const DMORIENT_PORTRAIT = 1;
pub const CAL_SABBREVMONTHNAME11 = 44;
pub const PHYSICALOFFSETX = 112;
pub const LANG_PUNJABI = 70;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;
pub const ERROR_CURRENT_DIRECTORY = c_long(16);
pub const ACTIVATION_CONTEXT_SECTION_COM_PROGID_REDIRECTION = 7;
pub const ERROR_CORRUPT_LOG_CORRUPTED = c_long(795);
pub const ERROR_INSTALL_POLICY_FAILURE = c_long(15615);
pub const ERROR_MRM_RESOURCE_TYPE_MISMATCH = c_long(15117);
pub const PST_RS449 = if (@typeInfo(@TypeOf(5)) == @import("builtin").TypeId.Pointer) @ptrCast(DWORD, 5) else if (@typeInfo(@TypeOf(5)) == @import("builtin").TypeId.Int) @intToPtr(DWORD, 5) else @as(DWORD, 5);
pub const ERROR_DIR_NOT_EMPTY = c_long(145);
pub const ERROR_DS_NO_CHAINING = c_long(8327);
pub const WVR_VALIDRECTS = 1024;
pub const WSA_QOS_EPSFILTERSPEC = c_long(11028);
pub const SUBLANG_GERMAN_LUXEMBOURG = 4;
pub const IMFS_HILITE = MFS_HILITE;
pub const ATTR_TARGET_CONVERTED = 1;
pub const ERROR_PLATFORM_MANIFEST_CATALOG_NOT_AUTHORIZED = c_long(4573);
pub const NID_INTEGRATED_TOUCH = 1;
pub const IMAGE_HOT_PATCH_CHUNK_RESERVED = 1072705536;
pub const ERROR_CTX_SECURITY_LAYER_ERROR = c_long(7068);
pub const PS_GEOMETRIC = 65536;
pub const MAX_UCSCHAR = 1114111;
pub const GetFileVersionInfoSizeEx = GetFileVersionInfoSizeExA;
pub const _EXCEPTION_DISPOSITION = enum__EXCEPTION_DISPOSITION;
pub const _EXCEPTION_RECORD = struct__EXCEPTION_RECORD;
pub const _M128A = struct__M128A;
pub const _XSAVE_FORMAT = struct__XSAVE_FORMAT;
pub const _CONTEXT = struct__CONTEXT;
pub const _UNWIND_HISTORY_TABLE_ENTRY = struct__UNWIND_HISTORY_TABLE_ENTRY;
pub const _UNWIND_HISTORY_TABLE = struct__UNWIND_HISTORY_TABLE;
pub const _DISPATCHER_CONTEXT = struct__DISPATCHER_CONTEXT;
pub const __crt_locale_data = struct___crt_locale_data;
pub const __crt_multibyte_data = struct___crt_multibyte_data;
pub const _PROCESSOR_NUMBER = struct__PROCESSOR_NUMBER;
pub const _GROUP_AFFINITY = struct__GROUP_AFFINITY;
pub const _FLOAT128 = struct__FLOAT128;
pub const _LARGE_INTEGER = union__LARGE_INTEGER;
pub const _ULARGE_INTEGER = union__ULARGE_INTEGER;
pub const _LUID = struct__LUID;
pub const _LIST_ENTRY = struct__LIST_ENTRY;
pub const _SINGLE_LIST_ENTRY = struct__SINGLE_LIST_ENTRY;
pub const _GUID = struct__GUID;
pub const _OBJECTID = struct__OBJECTID;
pub const _XSAVE_CET_U_FORMAT = struct__XSAVE_CET_U_FORMAT;
pub const _XSAVE_AREA_HEADER = struct__XSAVE_AREA_HEADER;
pub const _XSAVE_AREA = struct__XSAVE_AREA;
pub const _XSTATE_CONTEXT = struct__XSTATE_CONTEXT;
pub const _SCOPE_TABLE_AMD64 = struct__SCOPE_TABLE_AMD64;
pub const _EXCEPTION_POINTERS = struct__EXCEPTION_POINTERS;
pub const _KNONVOLATILE_CONTEXT_POINTERS = struct__KNONVOLATILE_CONTEXT_POINTERS;
pub const _SCOPE_TABLE_ARM = struct__SCOPE_TABLE_ARM;
pub const _SCOPE_TABLE_ARM64 = struct__SCOPE_TABLE_ARM64;
pub const _KNONVOLATILE_CONTEXT_POINTERS_ARM64 = struct__KNONVOLATILE_CONTEXT_POINTERS_ARM64;
pub const _LDT_ENTRY = struct__LDT_ENTRY;
pub const _WOW64_FLOATING_SAVE_AREA = struct__WOW64_FLOATING_SAVE_AREA;
pub const _WOW64_CONTEXT = struct__WOW64_CONTEXT;
pub const _WOW64_LDT_ENTRY = struct__WOW64_LDT_ENTRY;
pub const _WOW64_DESCRIPTOR_TABLE_ENTRY = struct__WOW64_DESCRIPTOR_TABLE_ENTRY;
pub const _EXCEPTION_RECORD32 = struct__EXCEPTION_RECORD32;
pub const _EXCEPTION_RECORD64 = struct__EXCEPTION_RECORD64;
pub const _GENERIC_MAPPING = struct__GENERIC_MAPPING;
pub const _LUID_AND_ATTRIBUTES = struct__LUID_AND_ATTRIBUTES;
pub const _SID_IDENTIFIER_AUTHORITY = struct__SID_IDENTIFIER_AUTHORITY;
pub const _SID = struct__SID;
pub const _SE_SID = union__SE_SID;
pub const _SID_NAME_USE = enum__SID_NAME_USE;
pub const _SID_AND_ATTRIBUTES = struct__SID_AND_ATTRIBUTES;
pub const _SID_AND_ATTRIBUTES_HASH = struct__SID_AND_ATTRIBUTES_HASH;
pub const _ACL = struct__ACL;
pub const _ACE_HEADER = struct__ACE_HEADER;
pub const _ACCESS_ALLOWED_ACE = struct__ACCESS_ALLOWED_ACE;
pub const _ACCESS_DENIED_ACE = struct__ACCESS_DENIED_ACE;
pub const _SYSTEM_AUDIT_ACE = struct__SYSTEM_AUDIT_ACE;
pub const _SYSTEM_ALARM_ACE = struct__SYSTEM_ALARM_ACE;
pub const _SYSTEM_RESOURCE_ATTRIBUTE_ACE = struct__SYSTEM_RESOURCE_ATTRIBUTE_ACE;
pub const _SYSTEM_SCOPED_POLICY_ID_ACE = struct__SYSTEM_SCOPED_POLICY_ID_ACE;
pub const _SYSTEM_MANDATORY_LABEL_ACE = struct__SYSTEM_MANDATORY_LABEL_ACE;
pub const _SYSTEM_PROCESS_TRUST_LABEL_ACE = struct__SYSTEM_PROCESS_TRUST_LABEL_ACE;
pub const _SYSTEM_ACCESS_FILTER_ACE = struct__SYSTEM_ACCESS_FILTER_ACE;
pub const _ACCESS_ALLOWED_OBJECT_ACE = struct__ACCESS_ALLOWED_OBJECT_ACE;
pub const _ACCESS_DENIED_OBJECT_ACE = struct__ACCESS_DENIED_OBJECT_ACE;
pub const _SYSTEM_AUDIT_OBJECT_ACE = struct__SYSTEM_AUDIT_OBJECT_ACE;
pub const _SYSTEM_ALARM_OBJECT_ACE = struct__SYSTEM_ALARM_OBJECT_ACE;
pub const _ACCESS_ALLOWED_CALLBACK_ACE = struct__ACCESS_ALLOWED_CALLBACK_ACE;
pub const _ACCESS_DENIED_CALLBACK_ACE = struct__ACCESS_DENIED_CALLBACK_ACE;
pub const _SYSTEM_AUDIT_CALLBACK_ACE = struct__SYSTEM_AUDIT_CALLBACK_ACE;
pub const _SYSTEM_ALARM_CALLBACK_ACE = struct__SYSTEM_ALARM_CALLBACK_ACE;
pub const _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE = struct__ACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
pub const _ACCESS_DENIED_CALLBACK_OBJECT_ACE = struct__ACCESS_DENIED_CALLBACK_OBJECT_ACE;
pub const _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE = struct__SYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
pub const _SYSTEM_ALARM_CALLBACK_OBJECT_ACE = struct__SYSTEM_ALARM_CALLBACK_OBJECT_ACE;
pub const _ACL_INFORMATION_CLASS = enum__ACL_INFORMATION_CLASS;
pub const _ACL_REVISION_INFORMATION = struct__ACL_REVISION_INFORMATION;
pub const _ACL_SIZE_INFORMATION = struct__ACL_SIZE_INFORMATION;
pub const _SECURITY_DESCRIPTOR_RELATIVE = struct__SECURITY_DESCRIPTOR_RELATIVE;
pub const _SECURITY_DESCRIPTOR = struct__SECURITY_DESCRIPTOR;
pub const _SECURITY_OBJECT_AI_PARAMS = struct__SECURITY_OBJECT_AI_PARAMS;
pub const _OBJECT_TYPE_LIST = struct__OBJECT_TYPE_LIST;
pub const _AUDIT_EVENT_TYPE = enum__AUDIT_EVENT_TYPE;
pub const _PRIVILEGE_SET = struct__PRIVILEGE_SET;
pub const _ACCESS_REASON_TYPE = enum__ACCESS_REASON_TYPE;
pub const _ACCESS_REASONS = struct__ACCESS_REASONS;
pub const _SE_SECURITY_DESCRIPTOR = struct__SE_SECURITY_DESCRIPTOR;
pub const _SE_ACCESS_REQUEST = struct__SE_ACCESS_REQUEST;
pub const _SE_ACCESS_REPLY = struct__SE_ACCESS_REPLY;
pub const _SECURITY_IMPERSONATION_LEVEL = enum__SECURITY_IMPERSONATION_LEVEL;
pub const _TOKEN_TYPE = enum__TOKEN_TYPE;
pub const _TOKEN_ELEVATION_TYPE = enum__TOKEN_ELEVATION_TYPE;
pub const _TOKEN_INFORMATION_CLASS = enum__TOKEN_INFORMATION_CLASS;
pub const _TOKEN_USER = struct__TOKEN_USER;
pub const _SE_TOKEN_USER = struct__SE_TOKEN_USER;
pub const _TOKEN_GROUPS = struct__TOKEN_GROUPS;
pub const _TOKEN_PRIVILEGES = struct__TOKEN_PRIVILEGES;
pub const _TOKEN_OWNER = struct__TOKEN_OWNER;
pub const _TOKEN_PRIMARY_GROUP = struct__TOKEN_PRIMARY_GROUP;
pub const _TOKEN_DEFAULT_DACL = struct__TOKEN_DEFAULT_DACL;
pub const _TOKEN_USER_CLAIMS = struct__TOKEN_USER_CLAIMS;
pub const _TOKEN_DEVICE_CLAIMS = struct__TOKEN_DEVICE_CLAIMS;
pub const _TOKEN_GROUPS_AND_PRIVILEGES = struct__TOKEN_GROUPS_AND_PRIVILEGES;
pub const _TOKEN_LINKED_TOKEN = struct__TOKEN_LINKED_TOKEN;
pub const _TOKEN_ELEVATION = struct__TOKEN_ELEVATION;
pub const _TOKEN_MANDATORY_LABEL = struct__TOKEN_MANDATORY_LABEL;
pub const _TOKEN_MANDATORY_POLICY = struct__TOKEN_MANDATORY_POLICY;
pub const _TOKEN_ACCESS_INFORMATION = struct__TOKEN_ACCESS_INFORMATION;
pub const _TOKEN_AUDIT_POLICY = struct__TOKEN_AUDIT_POLICY;
pub const _TOKEN_SOURCE = struct__TOKEN_SOURCE;
pub const _TOKEN_STATISTICS = struct__TOKEN_STATISTICS;
pub const _TOKEN_CONTROL = struct__TOKEN_CONTROL;
pub const _TOKEN_ORIGIN = struct__TOKEN_ORIGIN;
pub const _MANDATORY_LEVEL = enum__MANDATORY_LEVEL;
pub const _TOKEN_APPCONTAINER_INFORMATION = struct__TOKEN_APPCONTAINER_INFORMATION;
pub const _TOKEN_SID_INFORMATION = struct__TOKEN_SID_INFORMATION;
pub const _TOKEN_BNO_ISOLATION_INFORMATION = struct__TOKEN_BNO_ISOLATION_INFORMATION;
pub const _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
pub const _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE = struct__CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
pub const _CLAIM_SECURITY_ATTRIBUTE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_V1;
pub const _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 = struct__CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
pub const _CLAIM_SECURITY_ATTRIBUTES_INFORMATION = struct__CLAIM_SECURITY_ATTRIBUTES_INFORMATION;
pub const _SECURITY_QUALITY_OF_SERVICE = struct__SECURITY_QUALITY_OF_SERVICE;
pub const _SE_IMPERSONATION_STATE = struct__SE_IMPERSONATION_STATE;
pub const _SE_IMAGE_SIGNATURE_TYPE = enum__SE_IMAGE_SIGNATURE_TYPE;
pub const _SE_LEARNING_MODE_DATA_TYPE = enum__SE_LEARNING_MODE_DATA_TYPE;
pub const _SECURITY_CAPABILITIES = struct__SECURITY_CAPABILITIES;
pub const _JOB_SET_ARRAY = struct__JOB_SET_ARRAY;
pub const _EXCEPTION_REGISTRATION_RECORD = struct__EXCEPTION_REGISTRATION_RECORD;
pub const _NT_TIB = struct__NT_TIB;
pub const _NT_TIB32 = struct__NT_TIB32;
pub const _NT_TIB64 = struct__NT_TIB64;
pub const _UMS_CREATE_THREAD_ATTRIBUTES = struct__UMS_CREATE_THREAD_ATTRIBUTES;
pub const _WOW64_ARCHITECTURE_INFORMATION = struct__WOW64_ARCHITECTURE_INFORMATION;
pub const _QUOTA_LIMITS = struct__QUOTA_LIMITS;
pub const _RATE_QUOTA_LIMIT = union__RATE_QUOTA_LIMIT;
pub const _QUOTA_LIMITS_EX = struct__QUOTA_LIMITS_EX;
pub const _IO_COUNTERS = struct__IO_COUNTERS;
pub const _HARDWARE_COUNTER_TYPE = enum__HARDWARE_COUNTER_TYPE;
pub const _PROCESS_MITIGATION_POLICY = enum__PROCESS_MITIGATION_POLICY;
pub const _PROCESS_MITIGATION_ASLR_POLICY = struct__PROCESS_MITIGATION_ASLR_POLICY;
pub const _PROCESS_MITIGATION_DEP_POLICY = struct__PROCESS_MITIGATION_DEP_POLICY;
pub const _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY = struct__PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
pub const _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
pub const _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY = struct__PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
pub const _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY = struct__PROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
pub const _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY = struct__PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
pub const _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY = struct__PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
pub const _PROCESS_MITIGATION_FONT_DISABLE_POLICY = struct__PROCESS_MITIGATION_FONT_DISABLE_POLICY;
pub const _PROCESS_MITIGATION_IMAGE_LOAD_POLICY = struct__PROCESS_MITIGATION_IMAGE_LOAD_POLICY;
pub const _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY = struct__PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
pub const _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY = struct__PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
pub const _PROCESS_MITIGATION_CHILD_PROCESS_POLICY = struct__PROCESS_MITIGATION_CHILD_PROCESS_POLICY;
pub const _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY = struct__PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
pub const _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
pub const _JOBOBJECT_BASIC_LIMIT_INFORMATION = struct__JOBOBJECT_BASIC_LIMIT_INFORMATION;
pub const _JOBOBJECT_EXTENDED_LIMIT_INFORMATION = struct__JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
pub const _JOBOBJECT_BASIC_PROCESS_ID_LIST = struct__JOBOBJECT_BASIC_PROCESS_ID_LIST;
pub const _JOBOBJECT_BASIC_UI_RESTRICTIONS = struct__JOBOBJECT_BASIC_UI_RESTRICTIONS;
pub const _JOBOBJECT_SECURITY_LIMIT_INFORMATION = struct__JOBOBJECT_SECURITY_LIMIT_INFORMATION;
pub const _JOBOBJECT_END_OF_JOB_TIME_INFORMATION = struct__JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
pub const _JOBOBJECT_ASSOCIATE_COMPLETION_PORT = struct__JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
pub const _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION = struct__JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
pub const _JOBOBJECT_JOBSET_INFORMATION = struct__JOBOBJECT_JOBSET_INFORMATION;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE;
pub const _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL = enum__JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
pub const _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION = struct__JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
pub const _JOBOBJECT_LIMIT_VIOLATION_INFORMATION = struct__JOBOBJECT_LIMIT_VIOLATION_INFORMATION;
pub const _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION = struct__JOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
pub const _JOBOBJECT_IO_ATTRIBUTION_STATS = struct__JOBOBJECT_IO_ATTRIBUTION_STATS;
pub const _JOBOBJECT_IO_ATTRIBUTION_INFORMATION = struct__JOBOBJECT_IO_ATTRIBUTION_INFORMATION;
pub const _JOBOBJECTINFOCLASS = enum__JOBOBJECTINFOCLASS;
pub const _SILOOBJECT_BASIC_INFORMATION = struct__SILOOBJECT_BASIC_INFORMATION;
pub const _SERVERSILO_STATE = enum__SERVERSILO_STATE;
pub const _SERVERSILO_BASIC_INFORMATION = struct__SERVERSILO_BASIC_INFORMATION;
pub const _FIRMWARE_TYPE = enum__FIRMWARE_TYPE;
pub const _LOGICAL_PROCESSOR_RELATIONSHIP = enum__LOGICAL_PROCESSOR_RELATIONSHIP;
pub const _PROCESSOR_CACHE_TYPE = enum__PROCESSOR_CACHE_TYPE;
pub const _CACHE_DESCRIPTOR = struct__CACHE_DESCRIPTOR;
pub const _SYSTEM_LOGICAL_PROCESSOR_INFORMATION = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION;
pub const _PROCESSOR_RELATIONSHIP = struct__PROCESSOR_RELATIONSHIP;
pub const _NUMA_NODE_RELATIONSHIP = struct__NUMA_NODE_RELATIONSHIP;
pub const _CACHE_RELATIONSHIP = struct__CACHE_RELATIONSHIP;
pub const _PROCESSOR_GROUP_INFO = struct__PROCESSOR_GROUP_INFO;
pub const _GROUP_RELATIONSHIP = struct__GROUP_RELATIONSHIP;
pub const _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX = struct__SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
pub const _CPU_SET_INFORMATION_TYPE = enum__CPU_SET_INFORMATION_TYPE;
pub const _SYSTEM_CPU_SET_INFORMATION = struct__SYSTEM_CPU_SET_INFORMATION;
pub const _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION = struct__SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
pub const _XSTATE_FEATURE = struct__XSTATE_FEATURE;
pub const _XSTATE_CONFIGURATION = struct__XSTATE_CONFIGURATION;
pub const _MEMORY_BASIC_INFORMATION = struct__MEMORY_BASIC_INFORMATION;
pub const _MEMORY_BASIC_INFORMATION32 = struct__MEMORY_BASIC_INFORMATION32;
pub const _MEMORY_BASIC_INFORMATION64 = struct__MEMORY_BASIC_INFORMATION64;
pub const _CFG_CALL_TARGET_INFO = struct__CFG_CALL_TARGET_INFO;
pub const _MEM_ADDRESS_REQUIREMENTS = struct__MEM_ADDRESS_REQUIREMENTS;
pub const _ENCLAVE_CREATE_INFO_SGX = struct__ENCLAVE_CREATE_INFO_SGX;
pub const _ENCLAVE_INIT_INFO_SGX = struct__ENCLAVE_INIT_INFO_SGX;
pub const _ENCLAVE_CREATE_INFO_VBS = struct__ENCLAVE_CREATE_INFO_VBS;
pub const _ENCLAVE_CREATE_INFO_VBS_BASIC = struct__ENCLAVE_CREATE_INFO_VBS_BASIC;
pub const _ENCLAVE_LOAD_DATA_VBS_BASIC = struct__ENCLAVE_LOAD_DATA_VBS_BASIC;
pub const _ENCLAVE_INIT_INFO_VBS_BASIC = struct__ENCLAVE_INIT_INFO_VBS_BASIC;
pub const _ENCLAVE_INIT_INFO_VBS = struct__ENCLAVE_INIT_INFO_VBS;
pub const _FILE_ID_128 = struct__FILE_ID_128;
pub const _FILE_NOTIFY_INFORMATION = struct__FILE_NOTIFY_INFORMATION;
pub const _FILE_NOTIFY_EXTENDED_INFORMATION = struct__FILE_NOTIFY_EXTENDED_INFORMATION;
pub const _FILE_SEGMENT_ELEMENT = union__FILE_SEGMENT_ELEMENT;
pub const _REPARSE_GUID_DATA_BUFFER = struct__REPARSE_GUID_DATA_BUFFER;
pub const _SCRUB_DATA_INPUT = struct__SCRUB_DATA_INPUT;
pub const _SCRUB_PARITY_EXTENT = struct__SCRUB_PARITY_EXTENT;
pub const _SCRUB_PARITY_EXTENT_DATA = struct__SCRUB_PARITY_EXTENT_DATA;
pub const _SCRUB_DATA_OUTPUT = struct__SCRUB_DATA_OUTPUT;
pub const _SharedVirtualDiskSupportType = enum__SharedVirtualDiskSupportType;
pub const _SharedVirtualDiskHandleState = enum__SharedVirtualDiskHandleState;
pub const _SHARED_VIRTUAL_DISK_SUPPORT = struct__SHARED_VIRTUAL_DISK_SUPPORT;
pub const _REARRANGE_FILE_DATA = struct__REARRANGE_FILE_DATA;
pub const _REARRANGE_FILE_DATA32 = struct__REARRANGE_FILE_DATA32;
pub const _SHUFFLE_FILE_DATA = struct__SHUFFLE_FILE_DATA;
pub const _NETWORK_APP_INSTANCE_EA = struct__NETWORK_APP_INSTANCE_EA;
pub const _SYSTEM_POWER_STATE = enum__SYSTEM_POWER_STATE;
pub const _DEVICE_POWER_STATE = enum__DEVICE_POWER_STATE;
pub const _MONITOR_DISPLAY_STATE = enum__MONITOR_DISPLAY_STATE;
pub const _USER_ACTIVITY_PRESENCE = enum__USER_ACTIVITY_PRESENCE;
pub const _POWER_REQUEST_TYPE = enum__POWER_REQUEST_TYPE;
pub const CM_Power_Data_s = struct_CM_Power_Data_s;
pub const _POWER_USER_PRESENCE = struct__POWER_USER_PRESENCE;
pub const _POWER_SESSION_CONNECT = struct__POWER_SESSION_CONNECT;
pub const _POWER_SESSION_TIMEOUTS = struct__POWER_SESSION_TIMEOUTS;
pub const _POWER_SESSION_RIT_STATE = struct__POWER_SESSION_RIT_STATE;
pub const _POWER_SESSION_WINLOGON = struct__POWER_SESSION_WINLOGON;
pub const _POWER_IDLE_RESILIENCY = struct__POWER_IDLE_RESILIENCY;
pub const _POWER_MONITOR_REQUEST_TYPE = enum__POWER_MONITOR_REQUEST_TYPE;
pub const _POWER_MONITOR_INVOCATION = struct__POWER_MONITOR_INVOCATION;
pub const _RESUME_PERFORMANCE = struct__RESUME_PERFORMANCE;
pub const _APPLICATIONLAUNCH_SETTING_VALUE = struct__APPLICATIONLAUNCH_SETTING_VALUE;
pub const _POWER_PLATFORM_ROLE = enum__POWER_PLATFORM_ROLE;
pub const _POWER_PLATFORM_INFORMATION = struct__POWER_PLATFORM_INFORMATION;
pub const _SYSTEM_POWER_POLICY = struct__SYSTEM_POWER_POLICY;
pub const _PROCESSOR_POWER_POLICY_INFO = struct__PROCESSOR_POWER_POLICY_INFO;
pub const _PROCESSOR_POWER_POLICY = struct__PROCESSOR_POWER_POLICY;
pub const _ADMINISTRATOR_POWER_POLICY = struct__ADMINISTRATOR_POWER_POLICY;
pub const _HIBERFILE_BUCKET_SIZE = enum__HIBERFILE_BUCKET_SIZE;
pub const _HIBERFILE_BUCKET = struct__HIBERFILE_BUCKET;
pub const _IMAGE_DOS_HEADER = struct__IMAGE_DOS_HEADER;
pub const _IMAGE_OS2_HEADER = struct__IMAGE_OS2_HEADER;
pub const _IMAGE_VXD_HEADER = struct__IMAGE_VXD_HEADER;
pub const _IMAGE_FILE_HEADER = struct__IMAGE_FILE_HEADER;
pub const _IMAGE_DATA_DIRECTORY = struct__IMAGE_DATA_DIRECTORY;
pub const _IMAGE_OPTIONAL_HEADER = struct__IMAGE_OPTIONAL_HEADER;
pub const _IMAGE_ROM_OPTIONAL_HEADER = struct__IMAGE_ROM_OPTIONAL_HEADER;
pub const _IMAGE_OPTIONAL_HEADER64 = struct__IMAGE_OPTIONAL_HEADER64;
pub const _IMAGE_NT_HEADERS64 = struct__IMAGE_NT_HEADERS64;
pub const _IMAGE_NT_HEADERS = struct__IMAGE_NT_HEADERS;
pub const _IMAGE_ROM_HEADERS = struct__IMAGE_ROM_HEADERS;
pub const _IMAGE_SECTION_HEADER = struct__IMAGE_SECTION_HEADER;
pub const _IMAGE_SYMBOL = struct__IMAGE_SYMBOL;
pub const _IMAGE_SYMBOL_EX = struct__IMAGE_SYMBOL_EX;
pub const _IMAGE_AUX_SYMBOL = union__IMAGE_AUX_SYMBOL;
pub const _IMAGE_AUX_SYMBOL_EX = union__IMAGE_AUX_SYMBOL_EX;
pub const _IMAGE_RELOCATION = struct__IMAGE_RELOCATION;
pub const _IMAGE_LINENUMBER = struct__IMAGE_LINENUMBER;
pub const _IMAGE_BASE_RELOCATION = struct__IMAGE_BASE_RELOCATION;
pub const _IMAGE_ARCHIVE_MEMBER_HEADER = struct__IMAGE_ARCHIVE_MEMBER_HEADER;
pub const _IMAGE_EXPORT_DIRECTORY = struct__IMAGE_EXPORT_DIRECTORY;
pub const _IMAGE_IMPORT_BY_NAME = struct__IMAGE_IMPORT_BY_NAME;
pub const _IMAGE_THUNK_DATA64 = struct__IMAGE_THUNK_DATA64;
pub const _IMAGE_THUNK_DATA32 = struct__IMAGE_THUNK_DATA32;
pub const _IMAGE_TLS_DIRECTORY64 = struct__IMAGE_TLS_DIRECTORY64;
pub const _IMAGE_TLS_DIRECTORY32 = struct__IMAGE_TLS_DIRECTORY32;
pub const _IMAGE_IMPORT_DESCRIPTOR = struct__IMAGE_IMPORT_DESCRIPTOR;
pub const _IMAGE_BOUND_IMPORT_DESCRIPTOR = struct__IMAGE_BOUND_IMPORT_DESCRIPTOR;
pub const _IMAGE_BOUND_FORWARDER_REF = struct__IMAGE_BOUND_FORWARDER_REF;
pub const _IMAGE_DELAYLOAD_DESCRIPTOR = struct__IMAGE_DELAYLOAD_DESCRIPTOR;
pub const _IMAGE_RESOURCE_DIRECTORY = struct__IMAGE_RESOURCE_DIRECTORY;
pub const _IMAGE_RESOURCE_DIRECTORY_ENTRY = struct__IMAGE_RESOURCE_DIRECTORY_ENTRY;
pub const _IMAGE_RESOURCE_DIRECTORY_STRING = struct__IMAGE_RESOURCE_DIRECTORY_STRING;
pub const _IMAGE_RESOURCE_DIR_STRING_U = struct__IMAGE_RESOURCE_DIR_STRING_U;
pub const _IMAGE_RESOURCE_DATA_ENTRY = struct__IMAGE_RESOURCE_DATA_ENTRY;
pub const _IMAGE_LOAD_CONFIG_CODE_INTEGRITY = struct__IMAGE_LOAD_CONFIG_CODE_INTEGRITY;
pub const _IMAGE_DYNAMIC_RELOCATION_TABLE = struct__IMAGE_DYNAMIC_RELOCATION_TABLE;
pub const _IMAGE_DYNAMIC_RELOCATION32 = struct__IMAGE_DYNAMIC_RELOCATION32;
pub const _IMAGE_DYNAMIC_RELOCATION64 = struct__IMAGE_DYNAMIC_RELOCATION64;
pub const _IMAGE_DYNAMIC_RELOCATION32_V2 = struct__IMAGE_DYNAMIC_RELOCATION32_V2;
pub const _IMAGE_DYNAMIC_RELOCATION64_V2 = struct__IMAGE_DYNAMIC_RELOCATION64_V2;
pub const _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
pub const _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER = struct__IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
pub const _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION = struct__IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
pub const _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION = struct__IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
pub const _IMAGE_LOAD_CONFIG_DIRECTORY32 = struct__IMAGE_LOAD_CONFIG_DIRECTORY32;
pub const _IMAGE_LOAD_CONFIG_DIRECTORY64 = struct__IMAGE_LOAD_CONFIG_DIRECTORY64;
pub const _IMAGE_HOT_PATCH_INFO = struct__IMAGE_HOT_PATCH_INFO;
pub const _IMAGE_HOT_PATCH_BASE = struct__IMAGE_HOT_PATCH_BASE;
pub const _IMAGE_HOT_PATCH_HASHES = struct__IMAGE_HOT_PATCH_HASHES;
pub const _IMAGE_CE_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY = struct__IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
pub const _IMAGE_ENCLAVE_CONFIG32 = struct__IMAGE_ENCLAVE_CONFIG32;
pub const _IMAGE_ENCLAVE_CONFIG64 = struct__IMAGE_ENCLAVE_CONFIG64;
pub const _IMAGE_ENCLAVE_IMPORT = struct__IMAGE_ENCLAVE_IMPORT;
pub const _IMAGE_DEBUG_DIRECTORY = struct__IMAGE_DEBUG_DIRECTORY;
pub const _IMAGE_COFF_SYMBOLS_HEADER = struct__IMAGE_COFF_SYMBOLS_HEADER;
pub const _FPO_DATA = struct__FPO_DATA;
pub const _IMAGE_DEBUG_MISC = struct__IMAGE_DEBUG_MISC;
pub const _IMAGE_FUNCTION_ENTRY = struct__IMAGE_FUNCTION_ENTRY;
pub const _IMAGE_FUNCTION_ENTRY64 = struct__IMAGE_FUNCTION_ENTRY64;
pub const _IMAGE_SEPARATE_DEBUG_HEADER = struct__IMAGE_SEPARATE_DEBUG_HEADER;
pub const _NON_PAGED_DEBUG_INFO = struct__NON_PAGED_DEBUG_INFO;
pub const _ImageArchitectureHeader = struct__ImageArchitectureHeader;
pub const _ImageArchitectureEntry = struct__ImageArchitectureEntry;
pub const _SLIST_ENTRY = struct__SLIST_ENTRY;
pub const _SLIST_HEADER = union__SLIST_HEADER;
pub const _RTL_RUN_ONCE = union__RTL_RUN_ONCE;
pub const _RTL_BARRIER = struct__RTL_BARRIER;
pub const _MESSAGE_RESOURCE_ENTRY = struct__MESSAGE_RESOURCE_ENTRY;
pub const _MESSAGE_RESOURCE_BLOCK = struct__MESSAGE_RESOURCE_BLOCK;
pub const _MESSAGE_RESOURCE_DATA = struct__MESSAGE_RESOURCE_DATA;
pub const _OSVERSIONINFOA = struct__OSVERSIONINFOA;
pub const _OSVERSIONINFOW = struct__OSVERSIONINFOW;
pub const _OSVERSIONINFOEXA = struct__OSVERSIONINFOEXA;
pub const _OSVERSIONINFOEXW = struct__OSVERSIONINFOEXW;
pub const _RTL_UMS_THREAD_INFO_CLASS = enum__RTL_UMS_THREAD_INFO_CLASS;
pub const _RTL_UMS_SCHEDULER_REASON = enum__RTL_UMS_SCHEDULER_REASON;
pub const _OS_DEPLOYEMENT_STATE_VALUES = enum__OS_DEPLOYEMENT_STATE_VALUES;
pub const _NV_MEMORY_RANGE = struct__NV_MEMORY_RANGE;
pub const _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG = struct__CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;
pub const _IMAGE_POLICY_ENTRY_TYPE = enum__IMAGE_POLICY_ENTRY_TYPE;
pub const _IMAGE_POLICY_ID = enum__IMAGE_POLICY_ID;
pub const _IMAGE_POLICY_ENTRY = struct__IMAGE_POLICY_ENTRY;
pub const _IMAGE_POLICY_METADATA = struct__IMAGE_POLICY_METADATA;
pub const _RTL_CRITICAL_SECTION = struct__RTL_CRITICAL_SECTION;
pub const _RTL_CRITICAL_SECTION_DEBUG = struct__RTL_CRITICAL_SECTION_DEBUG;
pub const _RTL_SRWLOCK = struct__RTL_SRWLOCK;
pub const _RTL_CONDITION_VARIABLE = struct__RTL_CONDITION_VARIABLE;
pub const _HEAP_INFORMATION_CLASS = enum__HEAP_INFORMATION_CLASS;
pub const _HEAP_OPTIMIZE_RESOURCES_INFORMATION = struct__HEAP_OPTIMIZE_RESOURCES_INFORMATION;
pub const _ACTIVATION_CONTEXT_INFO_CLASS = enum__ACTIVATION_CONTEXT_INFO_CLASS;
pub const _ACTIVATION_CONTEXT_QUERY_INDEX = struct__ACTIVATION_CONTEXT_QUERY_INDEX;
pub const _ASSEMBLY_FILE_DETAILED_INFORMATION = struct__ASSEMBLY_FILE_DETAILED_INFORMATION;
pub const _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
pub const _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION = struct__ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
pub const _COMPATIBILITY_CONTEXT_ELEMENT = struct__COMPATIBILITY_CONTEXT_ELEMENT;
pub const _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION = struct__ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
pub const _SUPPORTED_OS_INFO = struct__SUPPORTED_OS_INFO;
pub const _MAXVERSIONTESTED_INFO = struct__MAXVERSIONTESTED_INFO;
pub const _ACTIVATION_CONTEXT_DETAILED_INFORMATION = struct__ACTIVATION_CONTEXT_DETAILED_INFORMATION;
pub const _HARDWARE_COUNTER_DATA = struct__HARDWARE_COUNTER_DATA;
pub const _PERFORMANCE_DATA = struct__PERFORMANCE_DATA;
pub const _EVENTLOGRECORD = struct__EVENTLOGRECORD;
pub const _EVENTSFORLOGFILE = struct__EVENTSFORLOGFILE;
pub const _PACKEDEVENTINFO = struct__PACKEDEVENTINFO;
pub const _CM_SERVICE_NODE_TYPE = enum__CM_SERVICE_NODE_TYPE;
pub const _CM_SERVICE_LOAD_TYPE = enum__CM_SERVICE_LOAD_TYPE;
pub const _CM_ERROR_CONTROL_TYPE = enum__CM_ERROR_CONTROL_TYPE;
pub const _TAPE_ERASE = struct__TAPE_ERASE;
pub const _TAPE_PREPARE = struct__TAPE_PREPARE;
pub const _TAPE_WRITE_MARKS = struct__TAPE_WRITE_MARKS;
pub const _TAPE_GET_POSITION = struct__TAPE_GET_POSITION;
pub const _TAPE_SET_POSITION = struct__TAPE_SET_POSITION;
pub const _TAPE_GET_DRIVE_PARAMETERS = struct__TAPE_GET_DRIVE_PARAMETERS;
pub const _TAPE_SET_DRIVE_PARAMETERS = struct__TAPE_SET_DRIVE_PARAMETERS;
pub const _TAPE_GET_MEDIA_PARAMETERS = struct__TAPE_GET_MEDIA_PARAMETERS;
pub const _TAPE_SET_MEDIA_PARAMETERS = struct__TAPE_SET_MEDIA_PARAMETERS;
pub const _TAPE_CREATE_PARTITION = struct__TAPE_CREATE_PARTITION;
pub const _TAPE_WMI_OPERATIONS = struct__TAPE_WMI_OPERATIONS;
pub const _TAPE_DRIVE_PROBLEM_TYPE = enum__TAPE_DRIVE_PROBLEM_TYPE;
pub const _TRANSACTION_NOTIFICATION = struct__TRANSACTION_NOTIFICATION;
pub const _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT = struct__TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
pub const _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
pub const _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT = struct__TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
pub const _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT = struct__TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
pub const _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT = struct__TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
pub const _KCRM_MARSHAL_HEADER = struct__KCRM_MARSHAL_HEADER;
pub const _KCRM_TRANSACTION_BLOB = struct__KCRM_TRANSACTION_BLOB;
pub const _KCRM_PROTOCOL_BLOB = struct__KCRM_PROTOCOL_BLOB;
pub const _TRANSACTION_OUTCOME = enum__TRANSACTION_OUTCOME;
pub const _TRANSACTION_STATE = enum__TRANSACTION_STATE;
pub const _TRANSACTION_BASIC_INFORMATION = struct__TRANSACTION_BASIC_INFORMATION;
pub const _TRANSACTIONMANAGER_BASIC_INFORMATION = struct__TRANSACTIONMANAGER_BASIC_INFORMATION;
pub const _TRANSACTIONMANAGER_LOG_INFORMATION = struct__TRANSACTIONMANAGER_LOG_INFORMATION;
pub const _TRANSACTIONMANAGER_LOGPATH_INFORMATION = struct__TRANSACTIONMANAGER_LOGPATH_INFORMATION;
pub const _TRANSACTIONMANAGER_RECOVERY_INFORMATION = struct__TRANSACTIONMANAGER_RECOVERY_INFORMATION;
pub const _TRANSACTIONMANAGER_OLDEST_INFORMATION = struct__TRANSACTIONMANAGER_OLDEST_INFORMATION;
pub const _TRANSACTION_PROPERTIES_INFORMATION = struct__TRANSACTION_PROPERTIES_INFORMATION;
pub const _TRANSACTION_BIND_INFORMATION = struct__TRANSACTION_BIND_INFORMATION;
pub const _TRANSACTION_ENLISTMENT_PAIR = struct__TRANSACTION_ENLISTMENT_PAIR;
pub const _TRANSACTION_ENLISTMENTS_INFORMATION = struct__TRANSACTION_ENLISTMENTS_INFORMATION;
pub const _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION = struct__TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
pub const _RESOURCEMANAGER_BASIC_INFORMATION = struct__RESOURCEMANAGER_BASIC_INFORMATION;
pub const _RESOURCEMANAGER_COMPLETION_INFORMATION = struct__RESOURCEMANAGER_COMPLETION_INFORMATION;
pub const _TRANSACTION_INFORMATION_CLASS = enum__TRANSACTION_INFORMATION_CLASS;
pub const _TRANSACTIONMANAGER_INFORMATION_CLASS = enum__TRANSACTIONMANAGER_INFORMATION_CLASS;
pub const _RESOURCEMANAGER_INFORMATION_CLASS = enum__RESOURCEMANAGER_INFORMATION_CLASS;
pub const _ENLISTMENT_BASIC_INFORMATION = struct__ENLISTMENT_BASIC_INFORMATION;
pub const _ENLISTMENT_CRM_INFORMATION = struct__ENLISTMENT_CRM_INFORMATION;
pub const _ENLISTMENT_INFORMATION_CLASS = enum__ENLISTMENT_INFORMATION_CLASS;
pub const _TRANSACTION_LIST_ENTRY = struct__TRANSACTION_LIST_ENTRY;
pub const _TRANSACTION_LIST_INFORMATION = struct__TRANSACTION_LIST_INFORMATION;
pub const _KTMOBJECT_TYPE = enum__KTMOBJECT_TYPE;
pub const _KTMOBJECT_CURSOR = struct__KTMOBJECT_CURSOR;
pub const _TP_CALLBACK_INSTANCE = struct__TP_CALLBACK_INSTANCE;
pub const _TP_POOL = struct__TP_POOL;
pub const _TP_CALLBACK_PRIORITY = enum__TP_CALLBACK_PRIORITY;
pub const _TP_POOL_STACK_INFORMATION = struct__TP_POOL_STACK_INFORMATION;
pub const _TP_CLEANUP_GROUP = struct__TP_CLEANUP_GROUP;
pub const _ACTIVATION_CONTEXT = struct__ACTIVATION_CONTEXT;
pub const _TP_CALLBACK_ENVIRON_V3 = struct__TP_CALLBACK_ENVIRON_V3;
pub const _TP_WORK = struct__TP_WORK;
pub const _TP_TIMER = struct__TP_TIMER;
pub const _TP_WAIT = struct__TP_WAIT;
pub const _TP_IO = struct__TP_IO;
pub const _TEB = struct__TEB;
pub const HKEY__ = struct_HKEY__;
pub const HMETAFILE__ = struct_HMETAFILE__;
pub const HINSTANCE__ = struct_HINSTANCE__;
pub const HRGN__ = struct_HRGN__;
pub const HRSRC__ = struct_HRSRC__;
pub const HSPRITE__ = struct_HSPRITE__;
pub const HLSURF__ = struct_HLSURF__;
pub const HSTR__ = struct_HSTR__;
pub const HTASK__ = struct_HTASK__;
pub const HWINSTA__ = struct_HWINSTA__;
pub const HKL__ = struct_HKL__;
pub const _FILETIME = struct__FILETIME;
pub const HWND__ = struct_HWND__;
pub const HHOOK__ = struct_HHOOK__;
pub const HACCEL__ = struct_HACCEL__;
pub const HBITMAP__ = struct_HBITMAP__;
pub const HBRUSH__ = struct_HBRUSH__;
pub const HCOLORSPACE__ = struct_HCOLORSPACE__;
pub const HDC__ = struct_HDC__;
pub const HGLRC__ = struct_HGLRC__;
pub const HDESK__ = struct_HDESK__;
pub const HENHMETAFILE__ = struct_HENHMETAFILE__;
pub const HFONT__ = struct_HFONT__;
pub const HICON__ = struct_HICON__;
pub const HMENU__ = struct_HMENU__;
pub const HPALETTE__ = struct_HPALETTE__;
pub const HPEN__ = struct_HPEN__;
pub const HWINEVENTHOOK__ = struct_HWINEVENTHOOK__;
pub const HMONITOR__ = struct_HMONITOR__;
pub const HUMPD__ = struct_HUMPD__;
pub const tagRECT = struct_tagRECT;
pub const _RECTL = struct__RECTL;
pub const tagPOINT = struct_tagPOINT;
pub const _POINTL = struct__POINTL;
pub const tagSIZE = struct_tagSIZE;
pub const tagPOINTS = struct_tagPOINTS;
pub const DPI_AWARENESS_CONTEXT__ = struct_DPI_AWARENESS_CONTEXT__;
pub const _SECURITY_ATTRIBUTES = struct__SECURITY_ATTRIBUTES;
pub const _OVERLAPPED = struct__OVERLAPPED;
pub const _OVERLAPPED_ENTRY = struct__OVERLAPPED_ENTRY;
pub const _SYSTEMTIME = struct__SYSTEMTIME;
pub const _WIN32_FIND_DATAA = struct__WIN32_FIND_DATAA;
pub const _WIN32_FIND_DATAW = struct__WIN32_FIND_DATAW;
pub const _FINDEX_INFO_LEVELS = enum__FINDEX_INFO_LEVELS;
pub const _FINDEX_SEARCH_OPS = enum__FINDEX_SEARCH_OPS;
pub const _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS = enum__READ_DIRECTORY_NOTIFY_INFORMATION_CLASS;
pub const _GET_FILEEX_INFO_LEVELS = enum__GET_FILEEX_INFO_LEVELS;
pub const _FILE_INFO_BY_HANDLE_CLASS = enum__FILE_INFO_BY_HANDLE_CLASS;
pub const _PROCESS_HEAP_ENTRY = struct__PROCESS_HEAP_ENTRY;
pub const _REASON_CONTEXT = struct__REASON_CONTEXT;
pub const _EXCEPTION_DEBUG_INFO = struct__EXCEPTION_DEBUG_INFO;
pub const _CREATE_THREAD_DEBUG_INFO = struct__CREATE_THREAD_DEBUG_INFO;
pub const _CREATE_PROCESS_DEBUG_INFO = struct__CREATE_PROCESS_DEBUG_INFO;
pub const _EXIT_THREAD_DEBUG_INFO = struct__EXIT_THREAD_DEBUG_INFO;
pub const _EXIT_PROCESS_DEBUG_INFO = struct__EXIT_PROCESS_DEBUG_INFO;
pub const _LOAD_DLL_DEBUG_INFO = struct__LOAD_DLL_DEBUG_INFO;
pub const _UNLOAD_DLL_DEBUG_INFO = struct__UNLOAD_DLL_DEBUG_INFO;
pub const _OUTPUT_DEBUG_STRING_INFO = struct__OUTPUT_DEBUG_STRING_INFO;
pub const _RIP_INFO = struct__RIP_INFO;
pub const _DEBUG_EVENT = struct__DEBUG_EVENT;
pub const _WIN32_FILE_ATTRIBUTE_DATA = struct__WIN32_FILE_ATTRIBUTE_DATA;
pub const _BY_HANDLE_FILE_INFORMATION = struct__BY_HANDLE_FILE_INFORMATION;
pub const _CREATEFILE2_EXTENDED_PARAMETERS = struct__CREATEFILE2_EXTENDED_PARAMETERS;
pub const _STREAM_INFO_LEVELS = enum__STREAM_INFO_LEVELS;
pub const _WIN32_FIND_STREAM_DATA = struct__WIN32_FIND_STREAM_DATA;
pub const _HEAP_SUMMARY = struct__HEAP_SUMMARY;
pub const _PROCESS_INFORMATION = struct__PROCESS_INFORMATION;
pub const _STARTUPINFOA = struct__STARTUPINFOA;
pub const _STARTUPINFOW = struct__STARTUPINFOW;
pub const _PROC_THREAD_ATTRIBUTE_LIST = struct__PROC_THREAD_ATTRIBUTE_LIST;
pub const _THREAD_INFORMATION_CLASS = enum__THREAD_INFORMATION_CLASS;
pub const _MEMORY_PRIORITY_INFORMATION = struct__MEMORY_PRIORITY_INFORMATION;
pub const _THREAD_POWER_THROTTLING_STATE = struct__THREAD_POWER_THROTTLING_STATE;
pub const _PROCESS_INFORMATION_CLASS = enum__PROCESS_INFORMATION_CLASS;
pub const _APP_MEMORY_INFORMATION = struct__APP_MEMORY_INFORMATION;
pub const _PROCESS_MEMORY_EXHAUSTION_TYPE = enum__PROCESS_MEMORY_EXHAUSTION_TYPE;
pub const _PROCESS_MEMORY_EXHAUSTION_INFO = struct__PROCESS_MEMORY_EXHAUSTION_INFO;
pub const _PROCESS_POWER_THROTTLING_STATE = struct__PROCESS_POWER_THROTTLING_STATE;
pub const _PROCESS_LEAP_SECOND_INFO = struct__PROCESS_LEAP_SECOND_INFO;
pub const _SYSTEM_INFO = struct__SYSTEM_INFO;
pub const _MEMORYSTATUSEX = struct__MEMORYSTATUSEX;
pub const _COMPUTER_NAME_FORMAT = enum__COMPUTER_NAME_FORMAT;
pub const _MEMORY_RESOURCE_NOTIFICATION_TYPE = enum__MEMORY_RESOURCE_NOTIFICATION_TYPE;
pub const _WIN32_MEMORY_RANGE_ENTRY = struct__WIN32_MEMORY_RANGE_ENTRY;
pub const tagENUMUILANG = struct_tagENUMUILANG;
pub const _REDIRECTION_FUNCTION_DESCRIPTOR = struct__REDIRECTION_FUNCTION_DESCRIPTOR;
pub const _REDIRECTION_DESCRIPTOR = struct__REDIRECTION_DESCRIPTOR;
pub const _COMMPROP = struct__COMMPROP;
pub const _COMSTAT = struct__COMSTAT;
pub const _DCB = struct__DCB;
pub const _COMMTIMEOUTS = struct__COMMTIMEOUTS;
pub const _COMMCONFIG = struct__COMMCONFIG;
pub const _MEMORYSTATUS = struct__MEMORYSTATUS;
pub const _JIT_DEBUG_INFO = struct__JIT_DEBUG_INFO;
pub const _OFSTRUCT = struct__OFSTRUCT;
pub const _UMS_SCHEDULER_STARTUP_INFO = struct__UMS_SCHEDULER_STARTUP_INFO;
pub const _UMS_SYSTEM_THREAD_INFORMATION = struct__UMS_SYSTEM_THREAD_INFORMATION;
pub const _DEP_SYSTEM_POLICY_TYPE = enum__DEP_SYSTEM_POLICY_TYPE;
pub const _WIN32_STREAM_ID = struct__WIN32_STREAM_ID;
pub const _STARTUPINFOEXA = struct__STARTUPINFOEXA;
pub const _STARTUPINFOEXW = struct__STARTUPINFOEXW;
pub const _PROC_THREAD_ATTRIBUTE_NUM = enum__PROC_THREAD_ATTRIBUTE_NUM;
pub const _COPYFILE2_MESSAGE_TYPE = enum__COPYFILE2_MESSAGE_TYPE;
pub const _COPYFILE2_MESSAGE_ACTION = enum__COPYFILE2_MESSAGE_ACTION;
pub const _COPYFILE2_COPY_PHASE = enum__COPYFILE2_COPY_PHASE;
pub const _EVENTLOG_FULL_INFORMATION = struct__EVENTLOG_FULL_INFORMATION;
pub const _OPERATION_START_PARAMETERS = struct__OPERATION_START_PARAMETERS;
pub const _OPERATION_END_PARAMETERS = struct__OPERATION_END_PARAMETERS;
pub const tagHW_PROFILE_INFOA = struct_tagHW_PROFILE_INFOA;
pub const tagHW_PROFILE_INFOW = struct_tagHW_PROFILE_INFOW;
pub const _TIME_ZONE_INFORMATION = struct__TIME_ZONE_INFORMATION;
pub const _TIME_DYNAMIC_ZONE_INFORMATION = struct__TIME_DYNAMIC_ZONE_INFORMATION;
pub const _SYSTEM_POWER_STATUS = struct__SYSTEM_POWER_STATUS;
pub const tagACTCTXA = struct_tagACTCTXA;
pub const tagACTCTXW = struct_tagACTCTXW;
pub const tagACTCTX_SECTION_KEYED_DATA_2600 = struct_tagACTCTX_SECTION_KEYED_DATA_2600;
pub const tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA = struct_tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
pub const tagACTCTX_SECTION_KEYED_DATA = struct_tagACTCTX_SECTION_KEYED_DATA;
pub const _ACTIVATION_CONTEXT_BASIC_INFORMATION = struct__ACTIVATION_CONTEXT_BASIC_INFORMATION;
pub const _FILE_BASIC_INFO = struct__FILE_BASIC_INFO;
pub const _FILE_STANDARD_INFO = struct__FILE_STANDARD_INFO;
pub const _FILE_NAME_INFO = struct__FILE_NAME_INFO;
pub const _FILE_CASE_SENSITIVE_INFO = struct__FILE_CASE_SENSITIVE_INFO;
pub const _FILE_RENAME_INFO = struct__FILE_RENAME_INFO;
pub const _FILE_ALLOCATION_INFO = struct__FILE_ALLOCATION_INFO;
pub const _FILE_END_OF_FILE_INFO = struct__FILE_END_OF_FILE_INFO;
pub const _FILE_STREAM_INFO = struct__FILE_STREAM_INFO;
pub const _FILE_COMPRESSION_INFO = struct__FILE_COMPRESSION_INFO;
pub const _FILE_ATTRIBUTE_TAG_INFO = struct__FILE_ATTRIBUTE_TAG_INFO;
pub const _FILE_DISPOSITION_INFO = struct__FILE_DISPOSITION_INFO;
pub const _FILE_DISPOSITION_INFO_EX = struct__FILE_DISPOSITION_INFO_EX;
pub const _FILE_ID_BOTH_DIR_INFO = struct__FILE_ID_BOTH_DIR_INFO;
pub const _FILE_FULL_DIR_INFO = struct__FILE_FULL_DIR_INFO;
pub const _PRIORITY_HINT = enum__PRIORITY_HINT;
pub const _FILE_IO_PRIORITY_HINT_INFO = struct__FILE_IO_PRIORITY_HINT_INFO;
pub const _FILE_ALIGNMENT_INFO = struct__FILE_ALIGNMENT_INFO;
pub const _FILE_STORAGE_INFO = struct__FILE_STORAGE_INFO;
pub const _FILE_ID_INFO = struct__FILE_ID_INFO;
pub const _FILE_ID_EXTD_DIR_INFO = struct__FILE_ID_EXTD_DIR_INFO;
pub const _FILE_REMOTE_PROTOCOL_INFO = struct__FILE_REMOTE_PROTOCOL_INFO;
pub const _FILE_ID_TYPE = enum__FILE_ID_TYPE;
pub const _DRAWPATRECT = struct__DRAWPATRECT;
pub const _PSINJECTDATA = struct__PSINJECTDATA;
pub const _PSFEATURE_OUTPUT = struct__PSFEATURE_OUTPUT;
pub const _PSFEATURE_CUSTPAPER = struct__PSFEATURE_CUSTPAPER;
pub const tagXFORM = struct_tagXFORM;
pub const tagBITMAP = struct_tagBITMAP;
pub const tagRGBTRIPLE = struct_tagRGBTRIPLE;
pub const tagRGBQUAD = struct_tagRGBQUAD;
pub const tagCIEXYZ = struct_tagCIEXYZ;
pub const tagICEXYZTRIPLE = struct_tagICEXYZTRIPLE;
pub const tagLOGCOLORSPACEA = struct_tagLOGCOLORSPACEA;
pub const tagLOGCOLORSPACEW = struct_tagLOGCOLORSPACEW;
pub const tagBITMAPCOREHEADER = struct_tagBITMAPCOREHEADER;
pub const tagBITMAPINFOHEADER = struct_tagBITMAPINFOHEADER;
pub const tagBITMAPINFO = struct_tagBITMAPINFO;
pub const tagBITMAPCOREINFO = struct_tagBITMAPCOREINFO;
pub const tagBITMAPFILEHEADER = struct_tagBITMAPFILEHEADER;
pub const tagFONTSIGNATURE = struct_tagFONTSIGNATURE;
pub const tagCHARSETINFO = struct_tagCHARSETINFO;
pub const tagLOCALESIGNATURE = struct_tagLOCALESIGNATURE;
pub const tagHANDLETABLE = struct_tagHANDLETABLE;
pub const tagMETARECORD = struct_tagMETARECORD;
pub const tagMETAFILEPICT = struct_tagMETAFILEPICT;
pub const tagMETAHEADER = struct_tagMETAHEADER;
pub const tagENHMETARECORD = struct_tagENHMETARECORD;
pub const tagENHMETAHEADER = struct_tagENHMETAHEADER;
pub const tagTEXTMETRICA = struct_tagTEXTMETRICA;
pub const tagTEXTMETRICW = struct_tagTEXTMETRICW;
pub const tagNEWTEXTMETRICA = struct_tagNEWTEXTMETRICA;
pub const tagNEWTEXTMETRICW = struct_tagNEWTEXTMETRICW;
pub const tagNEWTEXTMETRICEXA = struct_tagNEWTEXTMETRICEXA;
pub const tagNEWTEXTMETRICEXW = struct_tagNEWTEXTMETRICEXW;
pub const tagPELARRAY = struct_tagPELARRAY;
pub const tagLOGBRUSH = struct_tagLOGBRUSH;
pub const tagLOGBRUSH32 = struct_tagLOGBRUSH32;
pub const tagLOGPEN = struct_tagLOGPEN;
pub const tagEXTLOGPEN = struct_tagEXTLOGPEN;
pub const tagEXTLOGPEN32 = struct_tagEXTLOGPEN32;
pub const tagPALETTEENTRY = struct_tagPALETTEENTRY;
pub const tagLOGPALETTE = struct_tagLOGPALETTE;
pub const tagLOGFONTA = struct_tagLOGFONTA;
pub const tagLOGFONTW = struct_tagLOGFONTW;
pub const tagENUMLOGFONTA = struct_tagENUMLOGFONTA;
pub const tagENUMLOGFONTW = struct_tagENUMLOGFONTW;
pub const tagENUMLOGFONTEXA = struct_tagENUMLOGFONTEXA;
pub const tagENUMLOGFONTEXW = struct_tagENUMLOGFONTEXW;
pub const tagPANOSE = struct_tagPANOSE;
pub const tagEXTLOGFONTA = struct_tagEXTLOGFONTA;
pub const tagEXTLOGFONTW = struct_tagEXTLOGFONTW;
pub const _devicemodeA = struct__devicemodeA;
pub const _devicemodeW = struct__devicemodeW;
pub const _DISPLAY_DEVICEA = struct__DISPLAY_DEVICEA;
pub const _DISPLAY_DEVICEW = struct__DISPLAY_DEVICEW;
pub const _DISPLAYCONFIG_COLOR_ENCODING = enum__DISPLAYCONFIG_COLOR_ENCODING;
pub const _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO = struct__DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
pub const _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE = struct__DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
pub const _DISPLAYCONFIG_SDR_WHITE_LEVEL = struct__DISPLAYCONFIG_SDR_WHITE_LEVEL;
pub const _RGNDATAHEADER = struct__RGNDATAHEADER;
pub const _RGNDATA = struct__RGNDATA;
pub const _ABC = struct__ABC;
pub const _ABCFLOAT = struct__ABCFLOAT;
pub const _OUTLINETEXTMETRICA = struct__OUTLINETEXTMETRICA;
pub const _OUTLINETEXTMETRICW = struct__OUTLINETEXTMETRICW;
pub const tagPOLYTEXTA = struct_tagPOLYTEXTA;
pub const tagPOLYTEXTW = struct_tagPOLYTEXTW;
pub const _FIXED = struct__FIXED;
pub const _MAT2 = struct__MAT2;
pub const _GLYPHMETRICS = struct__GLYPHMETRICS;
pub const tagPOINTFX = struct_tagPOINTFX;
pub const tagTTPOLYCURVE = struct_tagTTPOLYCURVE;
pub const tagTTPOLYGONHEADER = struct_tagTTPOLYGONHEADER;
pub const tagGCP_RESULTSA = struct_tagGCP_RESULTSA;
pub const tagGCP_RESULTSW = struct_tagGCP_RESULTSW;
pub const _RASTERIZER_STATUS = struct__RASTERIZER_STATUS;
pub const tagPIXELFORMATDESCRIPTOR = struct_tagPIXELFORMATDESCRIPTOR;
pub const tagWCRANGE = struct_tagWCRANGE;
pub const tagGLYPHSET = struct_tagGLYPHSET;
pub const tagDESIGNVECTOR = struct_tagDESIGNVECTOR;
pub const tagAXISINFOA = struct_tagAXISINFOA;
pub const tagAXISINFOW = struct_tagAXISINFOW;
pub const tagAXESLISTA = struct_tagAXESLISTA;
pub const tagAXESLISTW = struct_tagAXESLISTW;
pub const tagENUMLOGFONTEXDVA = struct_tagENUMLOGFONTEXDVA;
pub const tagENUMLOGFONTEXDVW = struct_tagENUMLOGFONTEXDVW;
pub const tagENUMTEXTMETRICA = struct_tagENUMTEXTMETRICA;
pub const tagENUMTEXTMETRICW = struct_tagENUMTEXTMETRICW;
pub const _TRIVERTEX = struct__TRIVERTEX;
pub const _GRADIENT_TRIANGLE = struct__GRADIENT_TRIANGLE;
pub const _GRADIENT_RECT = struct__GRADIENT_RECT;
pub const _BLENDFUNCTION = struct__BLENDFUNCTION;
pub const tagDIBSECTION = struct_tagDIBSECTION;
pub const tagCOLORADJUSTMENT = struct_tagCOLORADJUSTMENT;
pub const _DOCINFOA = struct__DOCINFOA;
pub const _DOCINFOW = struct__DOCINFOW;
pub const tagKERNINGPAIR = struct_tagKERNINGPAIR;
pub const tagEMR = struct_tagEMR;
pub const tagEMRTEXT = struct_tagEMRTEXT;
pub const tagABORTPATH = struct_tagABORTPATH;
pub const tagEMRSELECTCLIPPATH = struct_tagEMRSELECTCLIPPATH;
pub const tagEMRSETMITERLIMIT = struct_tagEMRSETMITERLIMIT;
pub const tagEMRRESTOREDC = struct_tagEMRRESTOREDC;
pub const tagEMRSETARCDIRECTION = struct_tagEMRSETARCDIRECTION;
pub const tagEMRSETMAPPERFLAGS = struct_tagEMRSETMAPPERFLAGS;
pub const tagEMRSETTEXTCOLOR = struct_tagEMRSETTEXTCOLOR;
pub const tagEMRSELECTOBJECT = struct_tagEMRSELECTOBJECT;
pub const tagEMRSELECTPALETTE = struct_tagEMRSELECTPALETTE;
pub const tagEMRRESIZEPALETTE = struct_tagEMRRESIZEPALETTE;
pub const tagEMRSETPALETTEENTRIES = struct_tagEMRSETPALETTEENTRIES;
pub const tagEMRSETCOLORADJUSTMENT = struct_tagEMRSETCOLORADJUSTMENT;
pub const tagEMRGDICOMMENT = struct_tagEMRGDICOMMENT;
pub const tagEMREOF = struct_tagEMREOF;
pub const tagEMRLINETO = struct_tagEMRLINETO;
pub const tagEMROFFSETCLIPRGN = struct_tagEMROFFSETCLIPRGN;
pub const tagEMRFILLPATH = struct_tagEMRFILLPATH;
pub const tagEMREXCLUDECLIPRECT = struct_tagEMREXCLUDECLIPRECT;
pub const tagEMRSETVIEWPORTORGEX = struct_tagEMRSETVIEWPORTORGEX;
pub const tagEMRSETVIEWPORTEXTEX = struct_tagEMRSETVIEWPORTEXTEX;
pub const tagEMRSCALEVIEWPORTEXTEX = struct_tagEMRSCALEVIEWPORTEXTEX;
pub const tagEMRSETWORLDTRANSFORM = struct_tagEMRSETWORLDTRANSFORM;
pub const tagEMRMODIFYWORLDTRANSFORM = struct_tagEMRMODIFYWORLDTRANSFORM;
pub const tagEMRSETPIXELV = struct_tagEMRSETPIXELV;
pub const tagEMREXTFLOODFILL = struct_tagEMREXTFLOODFILL;
pub const tagEMRELLIPSE = struct_tagEMRELLIPSE;
pub const tagEMRROUNDRECT = struct_tagEMRROUNDRECT;
pub const tagEMRARC = struct_tagEMRARC;
pub const tagEMRANGLEARC = struct_tagEMRANGLEARC;
pub const tagEMRPOLYLINE = struct_tagEMRPOLYLINE;
pub const tagEMRPOLYLINE16 = struct_tagEMRPOLYLINE16;
pub const tagEMRPOLYDRAW = struct_tagEMRPOLYDRAW;
pub const tagEMRPOLYDRAW16 = struct_tagEMRPOLYDRAW16;
pub const tagEMRPOLYPOLYLINE = struct_tagEMRPOLYPOLYLINE;
pub const tagEMRPOLYPOLYLINE16 = struct_tagEMRPOLYPOLYLINE16;
pub const tagEMRINVERTRGN = struct_tagEMRINVERTRGN;
pub const tagEMRFILLRGN = struct_tagEMRFILLRGN;
pub const tagEMRFRAMERGN = struct_tagEMRFRAMERGN;
pub const tagEMREXTSELECTCLIPRGN = struct_tagEMREXTSELECTCLIPRGN;
pub const tagEMREXTTEXTOUTA = struct_tagEMREXTTEXTOUTA;
pub const tagEMRPOLYTEXTOUTA = struct_tagEMRPOLYTEXTOUTA;
pub const tagEMRBITBLT = struct_tagEMRBITBLT;
pub const tagEMRSTRETCHBLT = struct_tagEMRSTRETCHBLT;
pub const tagEMRMASKBLT = struct_tagEMRMASKBLT;
pub const tagEMRPLGBLT = struct_tagEMRPLGBLT;
pub const tagEMRSETDIBITSTODEVICE = struct_tagEMRSETDIBITSTODEVICE;
pub const tagEMRSTRETCHDIBITS = struct_tagEMRSTRETCHDIBITS;
pub const tagEMREXTCREATEFONTINDIRECTW = struct_tagEMREXTCREATEFONTINDIRECTW;
pub const tagEMRCREATEPALETTE = struct_tagEMRCREATEPALETTE;
pub const tagEMRCREATEPEN = struct_tagEMRCREATEPEN;
pub const tagEMREXTCREATEPEN = struct_tagEMREXTCREATEPEN;
pub const tagEMRCREATEBRUSHINDIRECT = struct_tagEMRCREATEBRUSHINDIRECT;
pub const tagEMRCREATEMONOBRUSH = struct_tagEMRCREATEMONOBRUSH;
pub const tagEMRCREATEDIBPATTERNBRUSHPT = struct_tagEMRCREATEDIBPATTERNBRUSHPT;
pub const tagEMRFORMAT = struct_tagEMRFORMAT;
pub const tagEMRGLSRECORD = struct_tagEMRGLSRECORD;
pub const tagEMRGLSBOUNDEDRECORD = struct_tagEMRGLSBOUNDEDRECORD;
pub const tagEMRPIXELFORMAT = struct_tagEMRPIXELFORMAT;
pub const tagEMRCREATECOLORSPACE = struct_tagEMRCREATECOLORSPACE;
pub const tagEMRSETCOLORSPACE = struct_tagEMRSETCOLORSPACE;
pub const tagEMREXTESCAPE = struct_tagEMREXTESCAPE;
pub const tagEMRNAMEDESCAPE = struct_tagEMRNAMEDESCAPE;
pub const tagEMRSETICMPROFILE = struct_tagEMRSETICMPROFILE;
pub const tagEMRCREATECOLORSPACEW = struct_tagEMRCREATECOLORSPACEW;
pub const tagCOLORMATCHTOTARGET = struct_tagCOLORMATCHTOTARGET;
pub const tagCOLORCORRECTPALETTE = struct_tagCOLORCORRECTPALETTE;
pub const tagEMRALPHABLEND = struct_tagEMRALPHABLEND;
pub const tagEMRGRADIENTFILL = struct_tagEMRGRADIENTFILL;
pub const tagEMRTRANSPARENTBLT = struct_tagEMRTRANSPARENTBLT;
pub const _POINTFLOAT = struct__POINTFLOAT;
pub const _GLYPHMETRICSFLOAT = struct__GLYPHMETRICSFLOAT;
pub const tagLAYERPLANEDESCRIPTOR = struct_tagLAYERPLANEDESCRIPTOR;
pub const _WGLSWAP = struct__WGLSWAP;
pub const tagCREATESTRUCTA = struct_tagCREATESTRUCTA;
pub const tagCBT_CREATEWNDA = struct_tagCBT_CREATEWNDA;
pub const tagCREATESTRUCTW = struct_tagCREATESTRUCTW;
pub const tagCBT_CREATEWNDW = struct_tagCBT_CREATEWNDW;
pub const tagCBTACTIVATESTRUCT = struct_tagCBTACTIVATESTRUCT;
pub const tagWTSSESSION_NOTIFICATION = struct_tagWTSSESSION_NOTIFICATION;
pub const tagEVENTMSG = struct_tagEVENTMSG;
pub const tagCWPSTRUCT = struct_tagCWPSTRUCT;
pub const tagCWPRETSTRUCT = struct_tagCWPRETSTRUCT;
pub const tagKBDLLHOOKSTRUCT = struct_tagKBDLLHOOKSTRUCT;
pub const tagMSLLHOOKSTRUCT = struct_tagMSLLHOOKSTRUCT;
pub const tagDEBUGHOOKINFO = struct_tagDEBUGHOOKINFO;
pub const tagMOUSEHOOKSTRUCT = struct_tagMOUSEHOOKSTRUCT;
pub const tagMOUSEHOOKSTRUCTEX = struct_tagMOUSEHOOKSTRUCTEX;
pub const tagHARDWAREHOOKSTRUCT = struct_tagHARDWAREHOOKSTRUCT;
pub const tagMOUSEMOVEPOINT = struct_tagMOUSEMOVEPOINT;
pub const tagUSEROBJECTFLAGS = struct_tagUSEROBJECTFLAGS;
pub const tagWNDCLASSEXA = struct_tagWNDCLASSEXA;
pub const tagWNDCLASSEXW = struct_tagWNDCLASSEXW;
pub const tagWNDCLASSA = struct_tagWNDCLASSA;
pub const tagWNDCLASSW = struct_tagWNDCLASSW;
pub const tagMSG = struct_tagMSG;
pub const tagMINMAXINFO = struct_tagMINMAXINFO;
pub const tagCOPYDATASTRUCT = struct_tagCOPYDATASTRUCT;
pub const tagMDINEXTMENU = struct_tagMDINEXTMENU;
pub const tagWINDOWPOS = struct_tagWINDOWPOS;
pub const tagNCCALCSIZE_PARAMS = struct_tagNCCALCSIZE_PARAMS;
pub const tagTRACKMOUSEEVENT = struct_tagTRACKMOUSEEVENT;
pub const tagACCEL = struct_tagACCEL;
pub const tagPAINTSTRUCT = struct_tagPAINTSTRUCT;
pub const tagWINDOWPLACEMENT = struct_tagWINDOWPLACEMENT;
pub const tagNMHDR = struct_tagNMHDR;
pub const tagSTYLESTRUCT = struct_tagSTYLESTRUCT;
pub const tagMEASUREITEMSTRUCT = struct_tagMEASUREITEMSTRUCT;
pub const tagDRAWITEMSTRUCT = struct_tagDRAWITEMSTRUCT;
pub const tagDELETEITEMSTRUCT = struct_tagDELETEITEMSTRUCT;
pub const tagCOMPAREITEMSTRUCT = struct_tagCOMPAREITEMSTRUCT;
pub const tagUPDATELAYEREDWINDOWINFO = struct_tagUPDATELAYEREDWINDOWINFO;
pub const tagMOUSEINPUT = struct_tagMOUSEINPUT;
pub const tagKEYBDINPUT = struct_tagKEYBDINPUT;
pub const tagHARDWAREINPUT = struct_tagHARDWAREINPUT;
pub const tagINPUT = struct_tagINPUT;
pub const HTOUCHINPUT__ = struct_HTOUCHINPUT__;
pub const tagTOUCHINPUT = struct_tagTOUCHINPUT;
pub const tagPOINTER_INPUT_TYPE = enum_tagPOINTER_INPUT_TYPE;
pub const tagPOINTER_BUTTON_CHANGE_TYPE = enum_tagPOINTER_BUTTON_CHANGE_TYPE;
pub const tagPOINTER_INFO = struct_tagPOINTER_INFO;
pub const tagPOINTER_TOUCH_INFO = struct_tagPOINTER_TOUCH_INFO;
pub const tagPOINTER_PEN_INFO = struct_tagPOINTER_PEN_INFO;
pub const tagUSAGE_PROPERTIES = struct_tagUSAGE_PROPERTIES;
pub const tagPOINTER_TYPE_INFO = struct_tagPOINTER_TYPE_INFO;
pub const tagINPUT_INJECTION_VALUE = struct_tagINPUT_INJECTION_VALUE;
pub const HSYNTHETICPOINTERDEVICE__ = struct_HSYNTHETICPOINTERDEVICE__;
pub const tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION = struct_tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
pub const tagTOUCH_HIT_TESTING_INPUT = struct_tagTOUCH_HIT_TESTING_INPUT;
pub const tagFEEDBACK_TYPE = enum_tagFEEDBACK_TYPE;
pub const tagINPUT_TRANSFORM = struct_tagINPUT_TRANSFORM;
pub const tagLASTINPUTINFO = struct_tagLASTINPUTINFO;
pub const tagTPMPARAMS = struct_tagTPMPARAMS;
pub const tagMENUINFO = struct_tagMENUINFO;
pub const tagMENUGETOBJECTINFO = struct_tagMENUGETOBJECTINFO;
pub const tagMENUITEMINFOA = struct_tagMENUITEMINFOA;
pub const tagMENUITEMINFOW = struct_tagMENUITEMINFOW;
pub const tagDROPSTRUCT = struct_tagDROPSTRUCT;
pub const tagDRAWTEXTPARAMS = struct_tagDRAWTEXTPARAMS;
pub const tagHELPINFO = struct_tagHELPINFO;
pub const tagMSGBOXPARAMSA = struct_tagMSGBOXPARAMSA;
pub const tagMSGBOXPARAMSW = struct_tagMSGBOXPARAMSW;
pub const _ICONINFO = struct__ICONINFO;
pub const tagCURSORSHAPE = struct_tagCURSORSHAPE;
pub const _ICONINFOEXA = struct__ICONINFOEXA;
pub const _ICONINFOEXW = struct__ICONINFOEXW;
pub const tagSCROLLINFO = struct_tagSCROLLINFO;
pub const tagMDICREATESTRUCTA = struct_tagMDICREATESTRUCTA;
pub const tagMDICREATESTRUCTW = struct_tagMDICREATESTRUCTW;
pub const tagCLIENTCREATESTRUCT = struct_tagCLIENTCREATESTRUCT;
pub const tagMULTIKEYHELPA = struct_tagMULTIKEYHELPA;
pub const tagMULTIKEYHELPW = struct_tagMULTIKEYHELPW;
pub const tagHELPWININFOA = struct_tagHELPWININFOA;
pub const tagHELPWININFOW = struct_tagHELPWININFOW;
pub const tagTouchPredictionParameters = struct_tagTouchPredictionParameters;
pub const tagHANDEDNESS = enum_tagHANDEDNESS;
pub const tagNONCLIENTMETRICSA = struct_tagNONCLIENTMETRICSA;
pub const tagNONCLIENTMETRICSW = struct_tagNONCLIENTMETRICSW;
pub const tagMINIMIZEDMETRICS = struct_tagMINIMIZEDMETRICS;
pub const tagICONMETRICSA = struct_tagICONMETRICSA;
pub const tagICONMETRICSW = struct_tagICONMETRICSW;
pub const tagANIMATIONINFO = struct_tagANIMATIONINFO;
pub const tagSERIALKEYSA = struct_tagSERIALKEYSA;
pub const tagSERIALKEYSW = struct_tagSERIALKEYSW;
pub const tagHIGHCONTRASTA = struct_tagHIGHCONTRASTA;
pub const tagHIGHCONTRASTW = struct_tagHIGHCONTRASTW;
pub const _VIDEOPARAMETERS = struct__VIDEOPARAMETERS;
pub const tagFILTERKEYS = struct_tagFILTERKEYS;
pub const tagSTICKYKEYS = struct_tagSTICKYKEYS;
pub const tagMOUSEKEYS = struct_tagMOUSEKEYS;
pub const tagACCESSTIMEOUT = struct_tagACCESSTIMEOUT;
pub const tagSOUNDSENTRYA = struct_tagSOUNDSENTRYA;
pub const tagSOUNDSENTRYW = struct_tagSOUNDSENTRYW;
pub const tagTOGGLEKEYS = struct_tagTOGGLEKEYS;
pub const tagAUDIODESCRIPTION = struct_tagAUDIODESCRIPTION;
pub const tagMONITORINFO = struct_tagMONITORINFO;
pub const tagMONITORINFOEXA = struct_tagMONITORINFOEXA;
pub const tagMONITORINFOEXW = struct_tagMONITORINFOEXW;
pub const tagGUITHREADINFO = struct_tagGUITHREADINFO;
pub const tagCURSORINFO = struct_tagCURSORINFO;
pub const tagWINDOWINFO = struct_tagWINDOWINFO;
pub const tagTITLEBARINFO = struct_tagTITLEBARINFO;
pub const tagTITLEBARINFOEX = struct_tagTITLEBARINFOEX;
pub const tagMENUBARINFO = struct_tagMENUBARINFO;
pub const tagSCROLLBARINFO = struct_tagSCROLLBARINFO;
pub const tagCOMBOBOXINFO = struct_tagCOMBOBOXINFO;
pub const tagALTTABINFO = struct_tagALTTABINFO;
pub const HRAWINPUT__ = struct_HRAWINPUT__;
pub const tagRAWINPUTHEADER = struct_tagRAWINPUTHEADER;
pub const tagRAWMOUSE = struct_tagRAWMOUSE;
pub const tagRAWKEYBOARD = struct_tagRAWKEYBOARD;
pub const tagRAWHID = struct_tagRAWHID;
pub const tagRAWINPUT = struct_tagRAWINPUT;
pub const tagRID_DEVICE_INFO_MOUSE = struct_tagRID_DEVICE_INFO_MOUSE;
pub const tagRID_DEVICE_INFO_KEYBOARD = struct_tagRID_DEVICE_INFO_KEYBOARD;
pub const tagRID_DEVICE_INFO_HID = struct_tagRID_DEVICE_INFO_HID;
pub const tagRID_DEVICE_INFO = struct_tagRID_DEVICE_INFO;
pub const tagRAWINPUTDEVICE = struct_tagRAWINPUTDEVICE;
pub const tagRAWINPUTDEVICELIST = struct_tagRAWINPUTDEVICELIST;
pub const tagPOINTER_DEVICE_TYPE = enum_tagPOINTER_DEVICE_TYPE;
pub const tagPOINTER_DEVICE_INFO = struct_tagPOINTER_DEVICE_INFO;
pub const tagPOINTER_DEVICE_PROPERTY = struct_tagPOINTER_DEVICE_PROPERTY;
pub const tagPOINTER_DEVICE_CURSOR_TYPE = enum_tagPOINTER_DEVICE_CURSOR_TYPE;
pub const tagPOINTER_DEVICE_CURSOR_INFO = struct_tagPOINTER_DEVICE_CURSOR_INFO;
pub const tagCHANGEFILTERSTRUCT = struct_tagCHANGEFILTERSTRUCT;
pub const HGESTUREINFO__ = struct_HGESTUREINFO__;
pub const tagGESTUREINFO = struct_tagGESTUREINFO;
pub const tagGESTURENOTIFYSTRUCT = struct_tagGESTURENOTIFYSTRUCT;
pub const tagGESTURECONFIG = struct_tagGESTURECONFIG;
pub const tagINPUT_MESSAGE_DEVICE_TYPE = enum_tagINPUT_MESSAGE_DEVICE_TYPE;
pub const tagINPUT_MESSAGE_ORIGIN_ID = enum_tagINPUT_MESSAGE_ORIGIN_ID;
pub const tagINPUT_MESSAGE_SOURCE = struct_tagINPUT_MESSAGE_SOURCE;
pub const tagAR_STATE = enum_tagAR_STATE;
pub const _cpinfo = struct__cpinfo;
pub const _cpinfoexA = struct__cpinfoexA;
pub const _cpinfoexW = struct__cpinfoexW;
pub const _numberfmtA = struct__numberfmtA;
pub const _numberfmtW = struct__numberfmtW;
pub const _currencyfmtA = struct__currencyfmtA;
pub const _currencyfmtW = struct__currencyfmtW;
pub const SYSNLS_FUNCTION = enum_SYSNLS_FUNCTION;
pub const _nlsversioninfo = struct__nlsversioninfo;
pub const _nlsversioninfoex = struct__nlsversioninfoex;
pub const SYSGEOTYPE = enum_SYSGEOTYPE;
pub const SYSGEOCLASS = enum_SYSGEOCLASS;
pub const _NORM_FORM = enum__NORM_FORM;
pub const _FILEMUIINFO = struct__FILEMUIINFO;
pub const _COORD = struct__COORD;
pub const _SMALL_RECT = struct__SMALL_RECT;
pub const _KEY_EVENT_RECORD = struct__KEY_EVENT_RECORD;
pub const _MOUSE_EVENT_RECORD = struct__MOUSE_EVENT_RECORD;
pub const _WINDOW_BUFFER_SIZE_RECORD = struct__WINDOW_BUFFER_SIZE_RECORD;
pub const _MENU_EVENT_RECORD = struct__MENU_EVENT_RECORD;
pub const _FOCUS_EVENT_RECORD = struct__FOCUS_EVENT_RECORD;
pub const _INPUT_RECORD = struct__INPUT_RECORD;
pub const _CHAR_INFO = struct__CHAR_INFO;
pub const _CONSOLE_FONT_INFO = struct__CONSOLE_FONT_INFO;
pub const _CONSOLE_READCONSOLE_CONTROL = struct__CONSOLE_READCONSOLE_CONTROL;
pub const _CONSOLE_CURSOR_INFO = struct__CONSOLE_CURSOR_INFO;
pub const _CONSOLE_SCREEN_BUFFER_INFO = struct__CONSOLE_SCREEN_BUFFER_INFO;
pub const _CONSOLE_SCREEN_BUFFER_INFOEX = struct__CONSOLE_SCREEN_BUFFER_INFOEX;
pub const _CONSOLE_FONT_INFOEX = struct__CONSOLE_FONT_INFOEX;
pub const _CONSOLE_SELECTION_INFO = struct__CONSOLE_SELECTION_INFO;
pub const _CONSOLE_HISTORY_INFO = struct__CONSOLE_HISTORY_INFO;
pub const tagVS_FIXEDFILEINFO = struct_tagVS_FIXEDFILEINFO;
pub const val_context = struct_val_context;
pub const pvalueA = struct_pvalueA;
pub const pvalueW = struct_pvalueW;
pub const provider_info = struct_provider_info;
pub const value_entA = struct_value_entA;
pub const value_entW = struct_value_entW;
pub const _NETRESOURCEA = struct__NETRESOURCEA;
pub const _NETRESOURCEW = struct__NETRESOURCEW;
pub const _CONNECTDLGSTRUCTA = struct__CONNECTDLGSTRUCTA;
pub const _CONNECTDLGSTRUCTW = struct__CONNECTDLGSTRUCTW;
pub const _DISCDLGSTRUCTA = struct__DISCDLGSTRUCTA;
pub const _DISCDLGSTRUCTW = struct__DISCDLGSTRUCTW;
pub const _UNIVERSAL_NAME_INFOA = struct__UNIVERSAL_NAME_INFOA;
pub const _UNIVERSAL_NAME_INFOW = struct__UNIVERSAL_NAME_INFOW;
pub const _REMOTE_NAME_INFOA = struct__REMOTE_NAME_INFOA;
pub const _REMOTE_NAME_INFOW = struct__REMOTE_NAME_INFOW;
pub const _NETINFOSTRUCT = struct__NETINFOSTRUCT;
pub const _NETCONNECTINFOSTRUCT = struct__NETCONNECTINFOSTRUCT;
pub const _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM = struct__SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
pub const _SERVICE_DESCRIPTIONA = struct__SERVICE_DESCRIPTIONA;
pub const _SERVICE_DESCRIPTIONW = struct__SERVICE_DESCRIPTIONW;
pub const _SC_ACTION_TYPE = enum__SC_ACTION_TYPE;
pub const _SC_ACTION = struct__SC_ACTION;
pub const _SERVICE_FAILURE_ACTIONSA = struct__SERVICE_FAILURE_ACTIONSA;
pub const _SERVICE_FAILURE_ACTIONSW = struct__SERVICE_FAILURE_ACTIONSW;
pub const _SERVICE_DELAYED_AUTO_START_INFO = struct__SERVICE_DELAYED_AUTO_START_INFO;
pub const _SERVICE_FAILURE_ACTIONS_FLAG = struct__SERVICE_FAILURE_ACTIONS_FLAG;
pub const _SERVICE_SID_INFO = struct__SERVICE_SID_INFO;
pub const _SERVICE_REQUIRED_PRIVILEGES_INFOA = struct__SERVICE_REQUIRED_PRIVILEGES_INFOA;
pub const _SERVICE_REQUIRED_PRIVILEGES_INFOW = struct__SERVICE_REQUIRED_PRIVILEGES_INFOW;
pub const _SERVICE_PRESHUTDOWN_INFO = struct__SERVICE_PRESHUTDOWN_INFO;
pub const _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM = struct__SERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
pub const _SERVICE_TRIGGER = struct__SERVICE_TRIGGER;
pub const _SERVICE_TRIGGER_INFO = struct__SERVICE_TRIGGER_INFO;
pub const _SERVICE_PREFERRED_NODE_INFO = struct__SERVICE_PREFERRED_NODE_INFO;
pub const _SERVICE_TIMECHANGE_INFO = struct__SERVICE_TIMECHANGE_INFO;
pub const _SERVICE_LAUNCH_PROTECTED_INFO = struct__SERVICE_LAUNCH_PROTECTED_INFO;
pub const SC_HANDLE__ = struct_SC_HANDLE__;
pub const SERVICE_STATUS_HANDLE__ = struct_SERVICE_STATUS_HANDLE__;
pub const _SC_STATUS_TYPE = enum__SC_STATUS_TYPE;
pub const _SC_ENUM_TYPE = enum__SC_ENUM_TYPE;
pub const _SERVICE_STATUS = struct__SERVICE_STATUS;
pub const _SERVICE_STATUS_PROCESS = struct__SERVICE_STATUS_PROCESS;
pub const _ENUM_SERVICE_STATUSA = struct__ENUM_SERVICE_STATUSA;
pub const _ENUM_SERVICE_STATUSW = struct__ENUM_SERVICE_STATUSW;
pub const _ENUM_SERVICE_STATUS_PROCESSA = struct__ENUM_SERVICE_STATUS_PROCESSA;
pub const _ENUM_SERVICE_STATUS_PROCESSW = struct__ENUM_SERVICE_STATUS_PROCESSW;
pub const _QUERY_SERVICE_LOCK_STATUSA = struct__QUERY_SERVICE_LOCK_STATUSA;
pub const _QUERY_SERVICE_LOCK_STATUSW = struct__QUERY_SERVICE_LOCK_STATUSW;
pub const _QUERY_SERVICE_CONFIGA = struct__QUERY_SERVICE_CONFIGA;
pub const _QUERY_SERVICE_CONFIGW = struct__QUERY_SERVICE_CONFIGW;
pub const _SERVICE_TABLE_ENTRYA = struct__SERVICE_TABLE_ENTRYA;
pub const _SERVICE_TABLE_ENTRYW = struct__SERVICE_TABLE_ENTRYW;
pub const _SERVICE_NOTIFY_1 = struct__SERVICE_NOTIFY_1;
pub const _SERVICE_NOTIFY_2A = struct__SERVICE_NOTIFY_2A;
pub const _SERVICE_NOTIFY_2W = struct__SERVICE_NOTIFY_2W;
pub const _SERVICE_CONTROL_STATUS_REASON_PARAMSA = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSA;
pub const _SERVICE_CONTROL_STATUS_REASON_PARAMSW = struct__SERVICE_CONTROL_STATUS_REASON_PARAMSW;
pub const _SERVICE_START_REASON = struct__SERVICE_START_REASON;
pub const _SC_EVENT_TYPE = enum__SC_EVENT_TYPE;
pub const _SC_NOTIFICATION_REGISTRATION = struct__SC_NOTIFICATION_REGISTRATION;
pub const _MODEMDEVCAPS = struct__MODEMDEVCAPS;
pub const _MODEMSETTINGS = struct__MODEMSETTINGS;
pub const HIMC__ = struct_HIMC__;
pub const HIMCC__ = struct_HIMCC__;
pub const tagCOMPOSITIONFORM = struct_tagCOMPOSITIONFORM;
pub const tagCANDIDATEFORM = struct_tagCANDIDATEFORM;
pub const tagCANDIDATELIST = struct_tagCANDIDATELIST;
pub const tagREGISTERWORDA = struct_tagREGISTERWORDA;
pub const tagREGISTERWORDW = struct_tagREGISTERWORDW;
pub const tagRECONVERTSTRING = struct_tagRECONVERTSTRING;
pub const tagSTYLEBUFA = struct_tagSTYLEBUFA;
pub const tagSTYLEBUFW = struct_tagSTYLEBUFW;
pub const tagIMEMENUITEMINFOA = struct_tagIMEMENUITEMINFOA;
pub const tagIMEMENUITEMINFOW = struct_tagIMEMENUITEMINFOW;
pub const tagIMECHARPOSITION = struct_tagIMECHARPOSITION;
